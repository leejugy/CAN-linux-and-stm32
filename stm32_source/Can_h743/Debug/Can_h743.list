
Can_h743.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b930  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800bbd0  0800bbd0  0000cbd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c124  0800c124  0000d124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c12c  0800c12c  0000d12c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c130  0800c130  0000d130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000084  24000000  0800c134  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002468  24000084  0800c1b8  0000e084  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240024ec  0800c1b8  0000e4ec  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e084  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016da4  00000000  00000000  0000e0b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002fee  00000000  00000000  00024e56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001068  00000000  00000000  00027e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000c93  00000000  00000000  00028eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003991a  00000000  00000000  00029b43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000180ae  00000000  00000000  0006345d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016472a  00000000  00000000  0007b50b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001dfc35  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004f98  00000000  00000000  001dfc78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000049  00000000  00000000  001e4c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000084 	.word	0x24000084
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bbb8 	.word	0x0800bbb8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000088 	.word	0x24000088
 80002dc:	0800bbb8 	.word	0x0800bbb8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006c2:	4b0d      	ldr	r3, [pc, #52]	@ (80006f8 <MX_DMA_Init+0x3c>)
 80006c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006c8:	4a0b      	ldr	r2, [pc, #44]	@ (80006f8 <MX_DMA_Init+0x3c>)
 80006ca:	f043 0301 	orr.w	r3, r3, #1
 80006ce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80006d2:	4b09      	ldr	r3, [pc, #36]	@ (80006f8 <MX_DMA_Init+0x3c>)
 80006d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006d8:	f003 0301 	and.w	r3, r3, #1
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2100      	movs	r1, #0
 80006e4:	200b      	movs	r0, #11
 80006e6:	f001 ff46 	bl	8002576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006ea:	200b      	movs	r0, #11
 80006ec:	f001 ff5d 	bl	80025aa <HAL_NVIC_EnableIRQ>

}
 80006f0:	bf00      	nop
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	58024400 	.word	0x58024400

080006fc <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000700:	4b2e      	ldr	r3, [pc, #184]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 8000702:	4a2f      	ldr	r2, [pc, #188]	@ (80007c0 <MX_FDCAN1_Init+0xc4>)
 8000704:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000706:	4b2d      	ldr	r3, [pc, #180]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800070c:	4b2b      	ldr	r3, [pc, #172]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000712:	4b2a      	ldr	r3, [pc, #168]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 8000714:	2201      	movs	r2, #1
 8000716:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000718:	4b28      	ldr	r3, [pc, #160]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 800071a:	2200      	movs	r2, #0
 800071c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 800071e:	4b27      	ldr	r3, [pc, #156]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 8000720:	2201      	movs	r2, #1
 8000722:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 6;
 8000724:	4b25      	ldr	r3, [pc, #148]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 8000726:	2206      	movs	r2, #6
 8000728:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 4;
 800072a:	4b24      	ldr	r3, [pc, #144]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 800072c:	2204      	movs	r2, #4
 800072e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 8000730:	4b22      	ldr	r3, [pc, #136]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 8000732:	220e      	movs	r2, #14
 8000734:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8000736:	4b21      	ldr	r3, [pc, #132]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 8000738:	2205      	movs	r2, #5
 800073a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800073c:	4b1f      	ldr	r3, [pc, #124]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 800073e:	2201      	movs	r2, #1
 8000740:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000742:	4b1e      	ldr	r3, [pc, #120]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 8000744:	2201      	movs	r2, #1
 8000746:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000748:	4b1c      	ldr	r3, [pc, #112]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 800074a:	2201      	movs	r2, #1
 800074c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800074e:	4b1b      	ldr	r3, [pc, #108]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 8000750:	2201      	movs	r2, #1
 8000752:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000754:	4b19      	ldr	r3, [pc, #100]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 8000756:	2200      	movs	r2, #0
 8000758:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 2;
 800075a:	4b18      	ldr	r3, [pc, #96]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 800075c:	2202      	movs	r2, #2
 800075e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000760:	4b16      	ldr	r3, [pc, #88]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 8000762:	2200      	movs	r2, #0
 8000764:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8000766:	4b15      	ldr	r3, [pc, #84]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 8000768:	2220      	movs	r2, #32
 800076a:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800076c:	4b13      	ldr	r3, [pc, #76]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 800076e:	2204      	movs	r2, #4
 8000770:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000772:	4b12      	ldr	r3, [pc, #72]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 8000774:	2200      	movs	r2, #0
 8000776:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000778:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 800077a:	2204      	movs	r2, #4
 800077c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800077e:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 8000780:	2200      	movs	r2, #0
 8000782:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000784:	4b0d      	ldr	r3, [pc, #52]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 8000786:	2204      	movs	r2, #4
 8000788:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 1;
 800078a:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 800078c:	2201      	movs	r2, #1
 800078e:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000790:	4b0a      	ldr	r3, [pc, #40]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 8000792:	2200      	movs	r2, #0
 8000794:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8000796:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 8000798:	2220      	movs	r2, #32
 800079a:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800079c:	4b07      	ldr	r3, [pc, #28]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 800079e:	2200      	movs	r2, #0
 80007a0:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80007a2:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 80007a4:	2204      	movs	r2, #4
 80007a6:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80007a8:	4804      	ldr	r0, [pc, #16]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 80007aa:	f004 f877 	bl	800489c <HAL_FDCAN_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80007b4:	f001 f99e 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	240000a0 	.word	0x240000a0
 80007c0:	4000a000 	.word	0x4000a000

080007c4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b0ba      	sub	sp, #232	@ 0xe8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007cc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007dc:	f107 0310 	add.w	r3, r7, #16
 80007e0:	22c0      	movs	r2, #192	@ 0xc0
 80007e2:	2100      	movs	r1, #0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f00a fa65 	bl	800acb4 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a2b      	ldr	r2, [pc, #172]	@ (800089c <HAL_FDCAN_MspInit+0xd8>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d14f      	bne.n	8000894 <HAL_FDCAN_MspInit+0xd0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80007f4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000800:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000804:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000808:	f107 0310 	add.w	r3, r7, #16
 800080c:	4618      	mov	r0, r3
 800080e:	f006 fdd3 	bl	80073b8 <HAL_RCCEx_PeriphCLKConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000818:	f001 f96c 	bl	8001af4 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800081c:	4b20      	ldr	r3, [pc, #128]	@ (80008a0 <HAL_FDCAN_MspInit+0xdc>)
 800081e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000822:	4a1f      	ldr	r2, [pc, #124]	@ (80008a0 <HAL_FDCAN_MspInit+0xdc>)
 8000824:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000828:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800082c:	4b1c      	ldr	r3, [pc, #112]	@ (80008a0 <HAL_FDCAN_MspInit+0xdc>)
 800082e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b19      	ldr	r3, [pc, #100]	@ (80008a0 <HAL_FDCAN_MspInit+0xdc>)
 800083c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000840:	4a17      	ldr	r2, [pc, #92]	@ (80008a0 <HAL_FDCAN_MspInit+0xdc>)
 8000842:	f043 0301 	orr.w	r3, r3, #1
 8000846:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800084a:	4b15      	ldr	r3, [pc, #84]	@ (80008a0 <HAL_FDCAN_MspInit+0xdc>)
 800084c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000850:	f003 0301 	and.w	r3, r3, #1
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000858:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800085c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000860:	2302      	movs	r3, #2
 8000862:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000872:	2309      	movs	r3, #9
 8000874:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000878:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800087c:	4619      	mov	r1, r3
 800087e:	4809      	ldr	r0, [pc, #36]	@ (80008a4 <HAL_FDCAN_MspInit+0xe0>)
 8000880:	f005 fac0 	bl	8005e04 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000884:	2200      	movs	r2, #0
 8000886:	2100      	movs	r1, #0
 8000888:	2013      	movs	r0, #19
 800088a:	f001 fe74 	bl	8002576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800088e:	2013      	movs	r0, #19
 8000890:	f001 fe8b 	bl	80025aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000894:	bf00      	nop
 8000896:	37e8      	adds	r7, #232	@ 0xe8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	4000a000 	.word	0x4000a000
 80008a0:	58024400 	.word	0x58024400
 80008a4:	58020000 	.word	0x58020000

080008a8 <HAL_FDCAN_MspDeInit>:

void HAL_FDCAN_MspDeInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]

  if(fdcanHandle->Instance==FDCAN1)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a0b      	ldr	r2, [pc, #44]	@ (80008e4 <HAL_FDCAN_MspDeInit+0x3c>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d10f      	bne.n	80008da <HAL_FDCAN_MspDeInit+0x32>
  {
  /* USER CODE BEGIN FDCAN1_MspDeInit 0 */

  /* USER CODE END FDCAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_FDCAN_CLK_DISABLE();
 80008ba:	4b0b      	ldr	r3, [pc, #44]	@ (80008e8 <HAL_FDCAN_MspDeInit+0x40>)
 80008bc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80008c0:	4a09      	ldr	r2, [pc, #36]	@ (80008e8 <HAL_FDCAN_MspDeInit+0x40>)
 80008c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80008c6:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec

    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 80008ca:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80008ce:	4807      	ldr	r0, [pc, #28]	@ (80008ec <HAL_FDCAN_MspDeInit+0x44>)
 80008d0:	f005 fc48 	bl	8006164 <HAL_GPIO_DeInit>

    /* FDCAN1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(FDCAN1_IT0_IRQn);
 80008d4:	2013      	movs	r0, #19
 80008d6:	f001 fe76 	bl	80025c6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN FDCAN1_MspDeInit 1 */

  /* USER CODE END FDCAN1_MspDeInit 1 */
  }
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	4000a000 	.word	0x4000a000
 80008e8:	58024400 	.word	0x58024400
 80008ec:	58020000 	.word	0x58020000

080008f0 <sizeof_candl>:
/* USER CODE BEGIN 1 */
static IsoTpLink can1_link1 = {0, };
uint8_t can1_link1_recv[ISOTP_MAX_SIZE] = {0, };
uint8_t can1_link1_send[ISOTP_MAX_SIZE] = {0, };
int sizeof_candl(int can_size)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	if(can_size <= 8)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b08      	cmp	r3, #8
 80008fc:	dc01      	bgt.n	8000902 <sizeof_candl+0x12>
	{
		return can_size;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	e024      	b.n	800094c <sizeof_candl+0x5c>
	}
	else if(can_size == 12)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2b0c      	cmp	r3, #12
 8000906:	d101      	bne.n	800090c <sizeof_candl+0x1c>
	{
		return FDCAN_DLC_BYTES_12;
 8000908:	2309      	movs	r3, #9
 800090a:	e01f      	b.n	800094c <sizeof_candl+0x5c>
	}
	else if (can_size == 16)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2b10      	cmp	r3, #16
 8000910:	d101      	bne.n	8000916 <sizeof_candl+0x26>
	{
		return FDCAN_DLC_BYTES_16;
 8000912:	230a      	movs	r3, #10
 8000914:	e01a      	b.n	800094c <sizeof_candl+0x5c>
	}
	else if (can_size == 20)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2b14      	cmp	r3, #20
 800091a:	d101      	bne.n	8000920 <sizeof_candl+0x30>
	{
		return FDCAN_DLC_BYTES_20;
 800091c:	230b      	movs	r3, #11
 800091e:	e015      	b.n	800094c <sizeof_candl+0x5c>
	}
	else if (can_size == 24)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2b18      	cmp	r3, #24
 8000924:	d101      	bne.n	800092a <sizeof_candl+0x3a>
	{
		return FDCAN_DLC_BYTES_24;
 8000926:	230c      	movs	r3, #12
 8000928:	e010      	b.n	800094c <sizeof_candl+0x5c>
	}
	else if (can_size == 32)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2b20      	cmp	r3, #32
 800092e:	d101      	bne.n	8000934 <sizeof_candl+0x44>
	{
		return FDCAN_DLC_BYTES_32;
 8000930:	230d      	movs	r3, #13
 8000932:	e00b      	b.n	800094c <sizeof_candl+0x5c>
	}
	else if (can_size == 48)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2b30      	cmp	r3, #48	@ 0x30
 8000938:	d101      	bne.n	800093e <sizeof_candl+0x4e>
	{
		return FDCAN_DLC_BYTES_48;
 800093a:	230e      	movs	r3, #14
 800093c:	e006      	b.n	800094c <sizeof_candl+0x5c>
	}
	else if (can_size == 64)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2b40      	cmp	r3, #64	@ 0x40
 8000942:	d101      	bne.n	8000948 <sizeof_candl+0x58>
	{
		return FDCAN_DLC_BYTES_64;
 8000944:	230f      	movs	r3, #15
 8000946:	e001      	b.n	800094c <sizeof_candl+0x5c>
	}

	return -1;
 8000948:	f04f 33ff 	mov.w	r3, #4294967295
}
 800094c:	4618      	mov	r0, r3
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <sizeof_can>:

int sizeof_can(int can_size)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	switch(can_size)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3b04      	subs	r3, #4
 8000964:	2b0e      	cmp	r3, #14
 8000966:	d831      	bhi.n	80009cc <sizeof_can+0x74>
 8000968:	a201      	add	r2, pc, #4	@ (adr r2, 8000970 <sizeof_can+0x18>)
 800096a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800096e:	bf00      	nop
 8000970:	080009ad 	.word	0x080009ad
 8000974:	080009b1 	.word	0x080009b1
 8000978:	080009b5 	.word	0x080009b5
 800097c:	080009b9 	.word	0x080009b9
 8000980:	080009bd 	.word	0x080009bd
 8000984:	080009cd 	.word	0x080009cd
 8000988:	080009c1 	.word	0x080009c1
 800098c:	080009cd 	.word	0x080009cd
 8000990:	080009cd 	.word	0x080009cd
 8000994:	080009cd 	.word	0x080009cd
 8000998:	080009c5 	.word	0x080009c5
 800099c:	080009cd 	.word	0x080009cd
 80009a0:	080009cd 	.word	0x080009cd
 80009a4:	080009cd 	.word	0x080009cd
 80009a8:	080009c9 	.word	0x080009c9
	{
	case FDCAN_DATA_BYTES_8:
		return 8;
 80009ac:	2308      	movs	r3, #8
 80009ae:	e00f      	b.n	80009d0 <sizeof_can+0x78>
	case FDCAN_DATA_BYTES_12:
		return 12;
 80009b0:	230c      	movs	r3, #12
 80009b2:	e00d      	b.n	80009d0 <sizeof_can+0x78>
	case FDCAN_DATA_BYTES_16:
		return 16;
 80009b4:	2310      	movs	r3, #16
 80009b6:	e00b      	b.n	80009d0 <sizeof_can+0x78>
	case FDCAN_DATA_BYTES_20:
		return 20;
 80009b8:	2314      	movs	r3, #20
 80009ba:	e009      	b.n	80009d0 <sizeof_can+0x78>
	case FDCAN_DATA_BYTES_24:
		return 24;
 80009bc:	2318      	movs	r3, #24
 80009be:	e007      	b.n	80009d0 <sizeof_can+0x78>
	case FDCAN_DATA_BYTES_32:
		return 32;
 80009c0:	2320      	movs	r3, #32
 80009c2:	e005      	b.n	80009d0 <sizeof_can+0x78>
	case FDCAN_DATA_BYTES_48:
		return 48;
 80009c4:	2330      	movs	r3, #48	@ 0x30
 80009c6:	e003      	b.n	80009d0 <sizeof_can+0x78>
	case FDCAN_DATA_BYTES_64:
		return 64;
 80009c8:	2340      	movs	r3, #64	@ 0x40
 80009ca:	e001      	b.n	80009d0 <sizeof_can+0x78>
	default:
		return -1;
 80009cc:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <can1_init>:

void can1_init()
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	@ 0x28
 80009e0:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef can1_filter = {0, };
 80009e2:	463b      	mov	r3, r7
 80009e4:	2220      	movs	r2, #32
 80009e6:	2100      	movs	r1, #0
 80009e8:	4618      	mov	r0, r3
 80009ea:	f00a f963 	bl	800acb4 <memset>

	can1_filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80009ee:	2301      	movs	r3, #1
 80009f0:	60fb      	str	r3, [r7, #12]
	can1_filter.FilterID1 = 0x01;
 80009f2:	2301      	movs	r3, #1
 80009f4:	613b      	str	r3, [r7, #16]
	can1_filter.FilterID2 = 0x02;
 80009f6:	2302      	movs	r3, #2
 80009f8:	617b      	str	r3, [r7, #20]
	can1_filter.FilterIndex = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
	can1_filter.FilterType = FDCAN_FILTER_RANGE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60bb      	str	r3, [r7, #8]
	can1_filter.IdType = FDCAN_STANDARD_ID;
 8000a02:	2300      	movs	r3, #0
 8000a04:	603b      	str	r3, [r7, #0]
	can1_filter.IsCalibrationMsg = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
	can1_filter.RxBufferIndex = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61bb      	str	r3, [r7, #24]

	if(HAL_FDCAN_ConfigFilter(&hfdcan1, &can1_filter) != HAL_OK)
 8000a0e:	463b      	mov	r3, r7
 8000a10:	4619      	mov	r1, r3
 8000a12:	4822      	ldr	r0, [pc, #136]	@ (8000a9c <can1_init+0xc0>)
 8000a14:	f004 f944 	bl	8004ca0 <HAL_FDCAN_ConfigFilter>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d004      	beq.n	8000a28 <can1_init+0x4c>
	{
		printr("fail to configure filter in can 1");
 8000a1e:	4820      	ldr	r0, [pc, #128]	@ (8000aa0 <can1_init+0xc4>)
 8000a20:	f00a f80a 	bl	800aa38 <puts>
		Error_Handler();
 8000a24:	f001 f866 	bl	8001af4 <Error_Handler>
	}

	if(HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 8000a28:	2300      	movs	r3, #0
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	2202      	movs	r2, #2
 8000a30:	2102      	movs	r1, #2
 8000a32:	481a      	ldr	r0, [pc, #104]	@ (8000a9c <can1_init+0xc0>)
 8000a34:	f004 f9aa 	bl	8004d8c <HAL_FDCAN_ConfigGlobalFilter>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d004      	beq.n	8000a48 <can1_init+0x6c>
	{
		printr("fail to configure global filter in can 1");
 8000a3e:	4819      	ldr	r0, [pc, #100]	@ (8000aa4 <can1_init+0xc8>)
 8000a40:	f009 fffa 	bl	800aa38 <puts>
		Error_Handler();
 8000a44:	f001 f856 	bl	8001af4 <Error_Handler>
	}

	if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_BUS_OFF, 0) != HAL_OK)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8000a4e:	4813      	ldr	r0, [pc, #76]	@ (8000a9c <can1_init+0xc0>)
 8000a50:	f004 fc50 	bl	80052f4 <HAL_FDCAN_ActivateNotification>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d004      	beq.n	8000a64 <can1_init+0x88>
	{
		printr("fail to activate Notification");
 8000a5a:	4813      	ldr	r0, [pc, #76]	@ (8000aa8 <can1_init+0xcc>)
 8000a5c:	f009 ffec 	bl	800aa38 <puts>
		Error_Handler();
 8000a60:	f001 f848 	bl	8001af4 <Error_Handler>
	}

	if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8000a64:	480d      	ldr	r0, [pc, #52]	@ (8000a9c <can1_init+0xc0>)
 8000a66:	f004 f9be 	bl	8004de6 <HAL_FDCAN_Start>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d004      	beq.n	8000a7a <can1_init+0x9e>
	{
		printr("fail to start in can 1");
 8000a70:	480e      	ldr	r0, [pc, #56]	@ (8000aac <can1_init+0xd0>)
 8000a72:	f009 ffe1 	bl	800aa38 <puts>
		Error_Handler();
 8000a76:	f001 f83d 	bl	8001af4 <Error_Handler>
	}

	isotp_init_link(&can1_link1, ISOTP_ID, can1_link1_send, sizeof(can1_link1_send), can1_link1_recv, sizeof(can1_link1_recv));
 8000a7a:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000a7e:	9301      	str	r3, [sp, #4]
 8000a80:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab0 <can1_init+0xd4>)
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000a88:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab4 <can1_init+0xd8>)
 8000a8a:	2103      	movs	r1, #3
 8000a8c:	480a      	ldr	r0, [pc, #40]	@ (8000ab8 <can1_init+0xdc>)
 8000a8e:	f000 fe6d 	bl	800176c <isotp_init_link>
}
 8000a92:	bf00      	nop
 8000a94:	3720      	adds	r7, #32
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	240000a0 	.word	0x240000a0
 8000aa0:	0800bbd0 	.word	0x0800bbd0
 8000aa4:	0800bc04 	.word	0x0800bc04
 8000aa8:	0800bc3c 	.word	0x0800bc3c
 8000aac:	0800bc6c 	.word	0x0800bc6c
 8000ab0:	24000180 	.word	0x24000180
 8000ab4:	24001180 	.word	0x24001180
 8000ab8:	24000140 	.word	0x24000140

08000abc <HAL_FDCAN_ErrorStatusCallback>:

void  HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
	if ((ErrorStatusITs & FDCAN_IE_BOE) != 0) /* If Bus-Off error occured */
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d007      	beq.n	8000ae0 <HAL_FDCAN_ErrorStatusCallback+0x24>
	{
		hfdcan->Instance->CCCR &= FDCAN_CCCR_INIT; /* set fdcan init */
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	699a      	ldr	r2, [r3, #24]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f002 0201 	and.w	r2, r2, #1
 8000ade:	619a      	str	r2, [r3, #24]
	}
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <can1_recv>:

static int can1_recv(uint8_t *buf, uint32_t buf_size, uint16_t *id)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08e      	sub	sp, #56	@ 0x38
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
	FDCAN_RxHeaderTypeDef can1_rx = {0, };
 8000af8:	f107 0310 	add.w	r3, r7, #16
 8000afc:	2228      	movs	r2, #40	@ 0x28
 8000afe:	2100      	movs	r1, #0
 8000b00:	4618      	mov	r0, r3
 8000b02:	f00a f8d7 	bl	800acb4 <memset>

	if(buf_size != sizeof_can(hfdcan1.Init.RxFifo0ElmtSize))
 8000b06:	4b1f      	ldr	r3, [pc, #124]	@ (8000b84 <can1_recv+0x98>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff ff24 	bl	8000958 <sizeof_can>
 8000b10:	4602      	mov	r2, r0
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d00c      	beq.n	8000b32 <can1_recv+0x46>
	{
		printr("element size is not equal to %d", sizeof_can(hfdcan1.Init.RxFifo0ElmtSize));
 8000b18:	4b1a      	ldr	r3, [pc, #104]	@ (8000b84 <can1_recv+0x98>)
 8000b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff ff1b 	bl	8000958 <sizeof_can>
 8000b22:	4603      	mov	r3, r0
 8000b24:	4619      	mov	r1, r3
 8000b26:	4818      	ldr	r0, [pc, #96]	@ (8000b88 <can1_recv+0x9c>)
 8000b28:	f009 ff1e 	bl	800a968 <iprintf>
		return -1;
 8000b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b30:	e023      	b.n	8000b7a <can1_recv+0x8e>
	}

	if(HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO0) <= 0)
 8000b32:	2140      	movs	r1, #64	@ 0x40
 8000b34:	4813      	ldr	r0, [pc, #76]	@ (8000b84 <can1_recv+0x98>)
 8000b36:	f004 fbbf 	bl	80052b8 <HAL_FDCAN_GetRxFifoFillLevel>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d102      	bne.n	8000b46 <can1_recv+0x5a>
	{
		return -1;
 8000b40:	f04f 33ff 	mov.w	r3, #4294967295
 8000b44:	e019      	b.n	8000b7a <can1_recv+0x8e>
	}

	if(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &can1_rx, buf) != HAL_OK)
 8000b46:	f107 0210 	add.w	r2, r7, #16
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	2140      	movs	r1, #64	@ 0x40
 8000b4e:	480d      	ldr	r0, [pc, #52]	@ (8000b84 <can1_recv+0x98>)
 8000b50:	f004 fa46 	bl	8004fe0 <HAL_FDCAN_GetRxMessage>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d005      	beq.n	8000b66 <can1_recv+0x7a>
	{
		printr("can 1 get rx message fail");
 8000b5a:	480c      	ldr	r0, [pc, #48]	@ (8000b8c <can1_recv+0xa0>)
 8000b5c:	f009 ff6c 	bl	800aa38 <puts>
		return -1;
 8000b60:	f04f 33ff 	mov.w	r3, #4294967295
 8000b64:	e009      	b.n	8000b7a <can1_recv+0x8e>
	}

	*id = can1_rx.Identifier;
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	b29a      	uxth	r2, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	801a      	strh	r2, [r3, #0]
	return sizeof_can(hfdcan1.Init.RxFifo0ElmtSize);
 8000b6e:	4b05      	ldr	r3, [pc, #20]	@ (8000b84 <can1_recv+0x98>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff fef0 	bl	8000958 <sizeof_can>
 8000b78:	4603      	mov	r3, r0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3738      	adds	r7, #56	@ 0x38
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	240000a0 	.word	0x240000a0
 8000b88:	0800bc94 	.word	0x0800bc94
 8000b8c:	0800bcc4 	.word	0x0800bcc4

08000b90 <can1_send>:

int can1_send(uint8_t *buf, uint32_t buf_size, int send_id)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08e      	sub	sp, #56	@ 0x38
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
	FDCAN_TxHeaderTypeDef can1_tx = {0, };
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	2224      	movs	r2, #36	@ 0x24
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f00a f885 	bl	800acb4 <memset>

	if(buf_size != sizeof_can(hfdcan1.Init.TxElmtSize))
 8000baa:	4b23      	ldr	r3, [pc, #140]	@ (8000c38 <can1_send+0xa8>)
 8000bac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fed2 	bl	8000958 <sizeof_can>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d00c      	beq.n	8000bd6 <can1_send+0x46>
	{
		printr("element size is not equal to %d", sizeof_can(hfdcan1.Init.RxFifo0ElmtSize));
 8000bbc:	4b1e      	ldr	r3, [pc, #120]	@ (8000c38 <can1_send+0xa8>)
 8000bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fec9 	bl	8000958 <sizeof_can>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	4619      	mov	r1, r3
 8000bca:	481c      	ldr	r0, [pc, #112]	@ (8000c3c <can1_send+0xac>)
 8000bcc:	f009 fecc 	bl	800a968 <iprintf>
		return -1;
 8000bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd4:	e02c      	b.n	8000c30 <can1_send+0xa0>
	}

	can1_tx.BitRateSwitch = FDCAN_BRS_OFF;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
	can1_tx.DataLength = sizeof_candl(buf_size);
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff fe87 	bl	80008f0 <sizeof_candl>
 8000be2:	4603      	mov	r3, r0
 8000be4:	623b      	str	r3, [r7, #32]
	can1_tx.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	627b      	str	r3, [r7, #36]	@ 0x24
	can1_tx.FDFormat = FDCAN_CLASSIC_CAN;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	can1_tx.IdType = FDCAN_STANDARD_ID;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61bb      	str	r3, [r7, #24]
	can1_tx.Identifier = send_id;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	617b      	str	r3, [r7, #20]
	can1_tx.MessageMarker = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	637b      	str	r3, [r7, #52]	@ 0x34
	can1_tx.TxEventFifoControl = FDCAN_STORE_TX_EVENTS;
 8000bfa:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8000bfe:	633b      	str	r3, [r7, #48]	@ 0x30
	can1_tx.TxFrameType = FDCAN_DATA_FRAME;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]

	if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &can1_tx, buf) != HAL_OK)
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	68fa      	ldr	r2, [r7, #12]
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	480a      	ldr	r0, [pc, #40]	@ (8000c38 <can1_send+0xa8>)
 8000c0e:	f004 f98c 	bl	8004f2a <HAL_FDCAN_AddMessageToTxFifoQ>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d005      	beq.n	8000c24 <can1_send+0x94>
	{
		printr("fail to can 1 add message to tx fifioq");
 8000c18:	4809      	ldr	r0, [pc, #36]	@ (8000c40 <can1_send+0xb0>)
 8000c1a:	f009 ff0d 	bl	800aa38 <puts>
		return -1;
 8000c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c22:	e005      	b.n	8000c30 <can1_send+0xa0>
	}

	return sizeof_can(hfdcan1.Init.RxFifo0ElmtSize);
 8000c24:	4b04      	ldr	r3, [pc, #16]	@ (8000c38 <can1_send+0xa8>)
 8000c26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fe95 	bl	8000958 <sizeof_can>
 8000c2e:	4603      	mov	r3, r0
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3738      	adds	r7, #56	@ 0x38
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	240000a0 	.word	0x240000a0
 8000c3c:	0800bc94 	.word	0x0800bc94
 8000c40:	0800bcf0 	.word	0x0800bcf0

08000c44 <can1_work>:

void can1_work()
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	f5ad 5d00 	sub.w	sp, sp, #8192	@ 0x2000
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
	uint8_t recv[CLASSIC_CAN_SIZE] = {0, };
 8000c4e:	f242 0304 	movw	r3, #8196	@ 0x2004
 8000c52:	443b      	add	r3, r7
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
	uint8_t can1_isotp_recv1[ISOTP_MAX_SIZE] = {0, };
 8000c5a:	f241 0310 	movw	r3, #4112	@ 0x1010
 8000c5e:	443b      	add	r3, r7
 8000c60:	3b0c      	subs	r3, #12
 8000c62:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f00a f823 	bl	800acb4 <memset>
	uint8_t can1_isotp_send1[ISOTP_MAX_SIZE] = {0, };
 8000c6e:	f107 0310 	add.w	r3, r7, #16
 8000c72:	3b0c      	subs	r3, #12
 8000c74:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f00a f81a 	bl	800acb4 <memset>
	uint16_t id = 0;
 8000c80:	f107 0310 	add.w	r3, r7, #16
 8000c84:	2200      	movs	r2, #0
 8000c86:	f823 2c0e 	strh.w	r2, [r3, #-14]
	uint16_t out_size = 0;
 8000c8a:	f107 0310 	add.w	r3, r7, #16
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f823 2c10 	strh.w	r2, [r3, #-16]
	int ret = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	f242 020c 	movw	r2, #8204	@ 0x200c
 8000c9a:	443a      	add	r2, r7
 8000c9c:	6013      	str	r3, [r2, #0]
	static int try = 0;

	sprintf((char *)can1_isotp_send1,"hellow world! this is isotp can 1 send data. %d", try);
 8000c9e:	4b66      	ldr	r3, [pc, #408]	@ (8000e38 <can1_work+0x1f4>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	4b66      	ldr	r3, [pc, #408]	@ (8000e3c <can1_work+0x1f8>)
 8000ca4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000ca8:	f103 0310 	add.w	r3, r3, #16
 8000cac:	443b      	add	r3, r7
 8000cae:	4964      	ldr	r1, [pc, #400]	@ (8000e40 <can1_work+0x1fc>)
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f009 fec9 	bl	800aa48 <siprintf>
	{
		.timer = 0,
		.condition = 100
	};

	if((hfdcan1.Instance->CCCR & FDCAN_CCCR_INIT_Msk) == FDCAN_CCCR_INIT && init_flag == 0)
 8000cb6:	4b63      	ldr	r3, [pc, #396]	@ (8000e44 <can1_work+0x200>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	f003 0301 	and.w	r3, r3, #1
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d106      	bne.n	8000cd2 <can1_work+0x8e>
 8000cc4:	4b60      	ldr	r3, [pc, #384]	@ (8000e48 <can1_work+0x204>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d102      	bne.n	8000cd2 <can1_work+0x8e>
	{
		/* reset init */
		init_flag = 1;
 8000ccc:	4b5e      	ldr	r3, [pc, #376]	@ (8000e48 <can1_work+0x204>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	601a      	str	r2, [r3, #0]
	}

	if(init_flag == 1)
 8000cd2:	4b5d      	ldr	r3, [pc, #372]	@ (8000e48 <can1_work+0x204>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d10e      	bne.n	8000cf8 <can1_work+0xb4>
	{
		HAL_FDCAN_DeInit(&hfdcan1);
 8000cda:	485a      	ldr	r0, [pc, #360]	@ (8000e44 <can1_work+0x200>)
 8000cdc:	f003 ffbc 	bl	8004c58 <HAL_FDCAN_DeInit>
		HAL_FDCAN_Init(&hfdcan1);
 8000ce0:	4858      	ldr	r0, [pc, #352]	@ (8000e44 <can1_work+0x200>)
 8000ce2:	f003 fddb 	bl	800489c <HAL_FDCAN_Init>
		reset_timer.timer = HAL_GetTick();
 8000ce6:	f001 fb2f 	bl	8002348 <HAL_GetTick>
 8000cea:	4603      	mov	r3, r0
 8000cec:	4a57      	ldr	r2, [pc, #348]	@ (8000e4c <can1_work+0x208>)
 8000cee:	6013      	str	r3, [r2, #0]
		init_flag = 2;
 8000cf0:	4b55      	ldr	r3, [pc, #340]	@ (8000e48 <can1_work+0x204>)
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	601a      	str	r2, [r3, #0]
		return;
 8000cf6:	e099      	b.n	8000e2c <can1_work+0x1e8>
	}

	else if(init_flag == 2)
 8000cf8:	4b53      	ldr	r3, [pc, #332]	@ (8000e48 <can1_work+0x204>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d110      	bne.n	8000d22 <can1_work+0xde>
	{
		check_timer(&reset_timer)
 8000d00:	f001 fb22 	bl	8002348 <HAL_GetTick>
 8000d04:	4602      	mov	r2, r0
 8000d06:	4b51      	ldr	r3, [pc, #324]	@ (8000e4c <can1_work+0x208>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	1ad2      	subs	r2, r2, r3
 8000d0c:	4b4f      	ldr	r3, [pc, #316]	@ (8000e4c <can1_work+0x208>)
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 808a 	bls.w	8000e2a <can1_work+0x1e6>
		{
			can1_init();
 8000d16:	f7ff fe61 	bl	80009dc <can1_init>
			init_flag = 0;
 8000d1a:	4b4b      	ldr	r3, [pc, #300]	@ (8000e48 <can1_work+0x204>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
		}
		return;
 8000d20:	e083      	b.n	8000e2a <can1_work+0x1e6>
	}

	if ((ret = can1_recv(recv, sizeof(recv), &id)) > 0)
 8000d22:	4b4b      	ldr	r3, [pc, #300]	@ (8000e50 <can1_work+0x20c>)
 8000d24:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000d28:	f103 0310 	add.w	r3, r3, #16
 8000d2c:	443b      	add	r3, r7
 8000d2e:	f242 0004 	movw	r0, #8196	@ 0x2004
 8000d32:	4438      	add	r0, r7
 8000d34:	461a      	mov	r2, r3
 8000d36:	2108      	movs	r1, #8
 8000d38:	f7ff fed8 	bl	8000aec <can1_recv>
 8000d3c:	f242 030c 	movw	r3, #8204	@ 0x200c
 8000d40:	443b      	add	r3, r7
 8000d42:	6018      	str	r0, [r3, #0]
 8000d44:	f242 030c 	movw	r3, #8204	@ 0x200c
 8000d48:	443b      	add	r3, r7
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	dd0b      	ble.n	8000d68 <can1_work+0x124>
	{
		isotp_on_can_message(&can1_link1, recv, ret);
 8000d50:	f242 030c 	movw	r3, #8204	@ 0x200c
 8000d54:	443b      	add	r3, r7
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	f242 0304 	movw	r3, #8196	@ 0x2004
 8000d5e:	443b      	add	r3, r7
 8000d60:	4619      	mov	r1, r3
 8000d62:	483c      	ldr	r0, [pc, #240]	@ (8000e54 <can1_work+0x210>)
 8000d64:	f000 fb84 	bl	8001470 <isotp_on_can_message>
	}
	isotp_poll(&can1_link1);
 8000d68:	483a      	ldr	r0, [pc, #232]	@ (8000e54 <can1_work+0x210>)
 8000d6a:	f000 fd26 	bl	80017ba <isotp_poll>
	ret = isotp_receive(&can1_link1, can1_isotp_recv1, sizeof(can1_isotp_recv1), &out_size);
 8000d6e:	4b3a      	ldr	r3, [pc, #232]	@ (8000e58 <can1_work+0x214>)
 8000d70:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000d74:	f103 0310 	add.w	r3, r3, #16
 8000d78:	443b      	add	r3, r7
 8000d7a:	4938      	ldr	r1, [pc, #224]	@ (8000e5c <can1_work+0x218>)
 8000d7c:	f242 0210 	movw	r2, #8208	@ 0x2010
 8000d80:	440a      	add	r2, r1
 8000d82:	19d1      	adds	r1, r2, r7
 8000d84:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000d88:	4832      	ldr	r0, [pc, #200]	@ (8000e54 <can1_work+0x210>)
 8000d8a:	f000 fcc3 	bl	8001714 <isotp_receive>
 8000d8e:	f242 030c 	movw	r3, #8204	@ 0x200c
 8000d92:	443b      	add	r3, r7
 8000d94:	6018      	str	r0, [r3, #0]
	if (ISOTP_RET_OK == ret)
 8000d96:	f242 030c 	movw	r3, #8204	@ 0x200c
 8000d9a:	443b      	add	r3, r7
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d109      	bne.n	8000db6 <can1_work+0x172>
	{
		printb("can 1 recv : %s", can1_isotp_recv1);
 8000da2:	4b2e      	ldr	r3, [pc, #184]	@ (8000e5c <can1_work+0x218>)
 8000da4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000da8:	f103 0310 	add.w	r3, r3, #16
 8000dac:	443b      	add	r3, r7
 8000dae:	4619      	mov	r1, r3
 8000db0:	482b      	ldr	r0, [pc, #172]	@ (8000e60 <can1_work+0x21c>)
 8000db2:	f009 fdd9 	bl	800a968 <iprintf>
	}

	check_timer(&user_timer)
 8000db6:	f001 fac7 	bl	8002348 <HAL_GetTick>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	4b29      	ldr	r3, [pc, #164]	@ (8000e64 <can1_work+0x220>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	1ad2      	subs	r2, r2, r3
 8000dc2:	4b28      	ldr	r3, [pc, #160]	@ (8000e64 <can1_work+0x220>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d930      	bls.n	8000e2c <can1_work+0x1e8>
	{
		user_timer.timer = HAL_GetTick();
 8000dca:	f001 fabd 	bl	8002348 <HAL_GetTick>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	4a24      	ldr	r2, [pc, #144]	@ (8000e64 <can1_work+0x220>)
 8000dd2:	6013      	str	r3, [r2, #0]
		if(ISOTP_SEND_STATUS_INPROGRESS != can1_link1.send_status)
 8000dd4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e54 <can1_work+0x210>)
 8000dd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d00f      	beq.n	8000dfe <can1_work+0x1ba>
		{
			try = (try + 1) % 1000;
 8000dde:	4b16      	ldr	r3, [pc, #88]	@ (8000e38 <can1_work+0x1f4>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	1c5a      	adds	r2, r3, #1
 8000de4:	4b20      	ldr	r3, [pc, #128]	@ (8000e68 <can1_work+0x224>)
 8000de6:	fb83 1302 	smull	r1, r3, r3, r2
 8000dea:	1199      	asrs	r1, r3, #6
 8000dec:	17d3      	asrs	r3, r2, #31
 8000dee:	1acb      	subs	r3, r1, r3
 8000df0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000df4:	fb01 f303 	mul.w	r3, r1, r3
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	4a0f      	ldr	r2, [pc, #60]	@ (8000e38 <can1_work+0x1f4>)
 8000dfc:	6013      	str	r3, [r2, #0]
		}
		isotp_send(&can1_link1, can1_isotp_send1, strlen((char *)can1_isotp_send1));
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000e3c <can1_work+0x1f8>)
 8000e00:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000e04:	f103 0310 	add.w	r3, r3, #16
 8000e08:	443b      	add	r3, r7
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fa68 	bl	80002e0 <strlen>
 8000e10:	4603      	mov	r3, r0
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	4b09      	ldr	r3, [pc, #36]	@ (8000e3c <can1_work+0x1f8>)
 8000e16:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000e1a:	f103 0310 	add.w	r3, r3, #16
 8000e1e:	443b      	add	r3, r7
 8000e20:	4619      	mov	r1, r3
 8000e22:	480c      	ldr	r0, [pc, #48]	@ (8000e54 <can1_work+0x210>)
 8000e24:	f000 fa96 	bl	8001354 <isotp_send>
 8000e28:	e000      	b.n	8000e2c <can1_work+0x1e8>
		return;
 8000e2a:	bf00      	nop
	}
}
 8000e2c:	f507 5700 	add.w	r7, r7, #8192	@ 0x2000
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	24002180 	.word	0x24002180
 8000e3c:	ffffdff4 	.word	0xffffdff4
 8000e40:	0800bd28 	.word	0x0800bd28
 8000e44:	240000a0 	.word	0x240000a0
 8000e48:	24002184 	.word	0x24002184
 8000e4c:	24000000 	.word	0x24000000
 8000e50:	ffffdff2 	.word	0xffffdff2
 8000e54:	24000140 	.word	0x24000140
 8000e58:	ffffdff0 	.word	0xffffdff0
 8000e5c:	ffffeff4 	.word	0xffffeff4
 8000e60:	0800bd58 	.word	0x0800bd58
 8000e64:	24000008 	.word	0x24000008
 8000e68:	10624dd3 	.word	0x10624dd3

08000e6c <MX_GPIO_Init>:
/** Configure pins
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	4b0a      	ldr	r3, [pc, #40]	@ (8000e9c <MX_GPIO_Init+0x30>)
 8000e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e78:	4a08      	ldr	r2, [pc, #32]	@ (8000e9c <MX_GPIO_Init+0x30>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e82:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <MX_GPIO_Init+0x30>)
 8000e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	687b      	ldr	r3, [r7, #4]

}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	58024400 	.word	0x58024400

08000ea0 <isotp_ms_to_st_min>:
///////////////////////////////////////////////////////
///                 STATIC FUNCTIONS                ///
///////////////////////////////////////////////////////

/* st_min to microsecond */
static uint8_t isotp_ms_to_st_min(uint8_t ms) {
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
    uint8_t st_min;

    st_min = ms;
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	73fb      	strb	r3, [r7, #15]
    if (st_min > 0x7F) {
 8000eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	da01      	bge.n	8000eba <isotp_ms_to_st_min+0x1a>
        st_min = 0x7F;
 8000eb6:	237f      	movs	r3, #127	@ 0x7f
 8000eb8:	73fb      	strb	r3, [r7, #15]
    }

    return st_min;
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <isotp_st_min_to_ms>:

/* st_min to msec  */
static uint8_t isotp_st_min_to_ms(uint8_t st_min) {
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
    uint8_t ms;

    if (st_min >= 0xF1 && st_min <= 0xF9) {
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	2bf0      	cmp	r3, #240	@ 0xf0
 8000ed6:	d905      	bls.n	8000ee4 <isotp_st_min_to_ms+0x1c>
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	2bf9      	cmp	r3, #249	@ 0xf9
 8000edc:	d802      	bhi.n	8000ee4 <isotp_st_min_to_ms+0x1c>
        ms = 1;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	73fb      	strb	r3, [r7, #15]
 8000ee2:	e008      	b.n	8000ef6 <isotp_st_min_to_ms+0x2e>
    } else if (st_min <= 0x7F) {
 8000ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	db02      	blt.n	8000ef2 <isotp_st_min_to_ms+0x2a>
        ms = st_min;
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	73fb      	strb	r3, [r7, #15]
 8000ef0:	e001      	b.n	8000ef6 <isotp_st_min_to_ms+0x2e>
    } else {
        ms = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	73fb      	strb	r3, [r7, #15]
    }

    return ms;
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <isotp_send_flow_control>:

static int isotp_send_flow_control(IsoTpLink* link, uint8_t flow_status, uint8_t block_size, uint8_t st_min_ms) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	4608      	mov	r0, r1
 8000f0e:	4611      	mov	r1, r2
 8000f10:	461a      	mov	r2, r3
 8000f12:	4603      	mov	r3, r0
 8000f14:	70fb      	strb	r3, [r7, #3]
 8000f16:	460b      	mov	r3, r1
 8000f18:	70bb      	strb	r3, [r7, #2]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	707b      	strb	r3, [r7, #1]

    IsoTpCanMessage message;
    int ret;

    /* setup message  */
    message.as.flow_control.type = ISOTP_PCI_TYPE_FLOW_CONTROL_FRAME;
 8000f1e:	7b3b      	ldrb	r3, [r7, #12]
 8000f20:	2203      	movs	r2, #3
 8000f22:	f362 1307 	bfi	r3, r2, #4, #4
 8000f26:	733b      	strb	r3, [r7, #12]
    message.as.flow_control.FS = flow_status;
 8000f28:	78fb      	ldrb	r3, [r7, #3]
 8000f2a:	f003 030f 	and.w	r3, r3, #15
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	7b3b      	ldrb	r3, [r7, #12]
 8000f32:	f362 0303 	bfi	r3, r2, #0, #4
 8000f36:	733b      	strb	r3, [r7, #12]
    message.as.flow_control.BS = block_size;
 8000f38:	78bb      	ldrb	r3, [r7, #2]
 8000f3a:	737b      	strb	r3, [r7, #13]
    message.as.flow_control.STmin = isotp_ms_to_st_min(st_min_ms);
 8000f3c:	787b      	ldrb	r3, [r7, #1]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff ffae 	bl	8000ea0 <isotp_ms_to_st_min>
 8000f44:	4603      	mov	r3, r0
 8000f46:	73bb      	strb	r3, [r7, #14]

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void) memset(message.as.flow_control.reserve, 0, sizeof(message.as.flow_control.reserve));
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	3303      	adds	r3, #3
 8000f4e:	2205      	movs	r2, #5
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f009 feae 	bl	800acb4 <memset>
    ret = isotp_user_send_can(link->send_arbitration_id, message.as.data_array.ptr, sizeof(message));
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f107 010c 	add.w	r1, r7, #12
 8000f60:	2208      	movs	r2, #8
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 fce4 	bl	8001930 <isotp_user_send_can>
 8000f68:	6178      	str	r0, [r7, #20]
    ret = isotp_user_send_can(link->send_arbitration_id,
            message.as.data_array.ptr,
            3);
#endif

    return ret;
 8000f6a:	697b      	ldr	r3, [r7, #20]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3718      	adds	r7, #24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <isotp_send_single_frame>:

static int isotp_send_single_frame(IsoTpLink* link, uint32_t id) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]

    IsoTpCanMessage message;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size <= 7);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	895b      	ldrh	r3, [r3, #10]
 8000f82:	2b07      	cmp	r3, #7
 8000f84:	d905      	bls.n	8000f92 <isotp_send_single_frame+0x1e>
 8000f86:	4b1d      	ldr	r3, [pc, #116]	@ (8000ffc <isotp_send_single_frame+0x88>)
 8000f88:	4a1d      	ldr	r2, [pc, #116]	@ (8001000 <isotp_send_single_frame+0x8c>)
 8000f8a:	2142      	movs	r1, #66	@ 0x42
 8000f8c:	481d      	ldr	r0, [pc, #116]	@ (8001004 <isotp_send_single_frame+0x90>)
 8000f8e:	f009 fbf9 	bl	800a784 <__assert_func>

    /* setup message  */
    message.as.single_frame.type = ISOTP_PCI_TYPE_SINGLE;
 8000f92:	7b3b      	ldrb	r3, [r7, #12]
 8000f94:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000f98:	733b      	strb	r3, [r7, #12]
    message.as.single_frame.SF_DL = (uint8_t) link->send_size;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	895b      	ldrh	r3, [r3, #10]
 8000f9e:	f003 030f 	and.w	r3, r3, #15
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	7b3b      	ldrb	r3, [r7, #12]
 8000fa6:	f362 0303 	bfi	r3, r2, #0, #4
 8000faa:	733b      	strb	r3, [r7, #12]
    (void) memcpy(message.as.single_frame.data, link->send_buffer, link->send_size);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6859      	ldr	r1, [r3, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	895b      	ldrh	r3, [r3, #10]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	3301      	adds	r3, #1
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f009 fef4 	bl	800adaa <memcpy>

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void) memset(message.as.single_frame.data + link->send_size, 0, sizeof(message.as.single_frame.data) - link->send_size);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	895b      	ldrh	r3, [r3, #10]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	3301      	adds	r3, #1
 8000fce:	1898      	adds	r0, r3, r2
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	895b      	ldrh	r3, [r3, #10]
 8000fd4:	f1c3 0307 	rsb	r3, r3, #7
 8000fd8:	461a      	mov	r2, r3
 8000fda:	2100      	movs	r1, #0
 8000fdc:	f009 fe6a 	bl	800acb4 <memset>
    ret = isotp_user_send_can(id, message.as.data_array.ptr, sizeof(message));
 8000fe0:	f107 030c 	add.w	r3, r7, #12
 8000fe4:	2208      	movs	r2, #8
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	6838      	ldr	r0, [r7, #0]
 8000fea:	f000 fca1 	bl	8001930 <isotp_user_send_can>
 8000fee:	6178      	str	r0, [r7, #20]
    ret = isotp_user_send_can(id,
            message.as.data_array.ptr,
            link->send_size + 1);
#endif

    return ret;
 8000ff0:	697b      	ldr	r3, [r7, #20]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	0800bd7c 	.word	0x0800bd7c
 8001000:	0800c014 	.word	0x0800c014
 8001004:	0800bd94 	.word	0x0800bd94

08001008 <isotp_send_first_frame>:

static int isotp_send_first_frame(IsoTpLink* link, uint32_t id) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]

    IsoTpCanMessage message;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size > 7);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	895b      	ldrh	r3, [r3, #10]
 8001016:	2b07      	cmp	r3, #7
 8001018:	d805      	bhi.n	8001026 <isotp_send_first_frame+0x1e>
 800101a:	4b1d      	ldr	r3, [pc, #116]	@ (8001090 <isotp_send_first_frame+0x88>)
 800101c:	4a1d      	ldr	r2, [pc, #116]	@ (8001094 <isotp_send_first_frame+0x8c>)
 800101e:	215c      	movs	r1, #92	@ 0x5c
 8001020:	481d      	ldr	r0, [pc, #116]	@ (8001098 <isotp_send_first_frame+0x90>)
 8001022:	f009 fbaf 	bl	800a784 <__assert_func>

    /* setup message  */
    message.as.first_frame.type = ISOTP_PCI_TYPE_FIRST_FRAME;
 8001026:	7b3b      	ldrb	r3, [r7, #12]
 8001028:	2201      	movs	r2, #1
 800102a:	f362 1307 	bfi	r3, r2, #4, #4
 800102e:	733b      	strb	r3, [r7, #12]
    message.as.first_frame.FF_DL_low = (uint8_t) link->send_size;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	895b      	ldrh	r3, [r3, #10]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	737b      	strb	r3, [r7, #13]
    message.as.first_frame.FF_DL_high = (uint8_t) (0x0F & (link->send_size >> 8));
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	895b      	ldrh	r3, [r3, #10]
 800103c:	0a1b      	lsrs	r3, r3, #8
 800103e:	b29b      	uxth	r3, r3
 8001040:	f003 030f 	and.w	r3, r3, #15
 8001044:	b2da      	uxtb	r2, r3
 8001046:	7b3b      	ldrb	r3, [r7, #12]
 8001048:	f362 0303 	bfi	r3, r2, #0, #4
 800104c:	733b      	strb	r3, [r7, #12]
    (void) memcpy(message.as.first_frame.data, link->send_buffer, sizeof(message.as.first_frame.data));
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	f107 030e 	add.w	r3, r7, #14
 8001056:	6811      	ldr	r1, [r2, #0]
 8001058:	6019      	str	r1, [r3, #0]
 800105a:	8892      	ldrh	r2, [r2, #4]
 800105c:	809a      	strh	r2, [r3, #4]

    /* send message */
    ret = isotp_user_send_can(id, message.as.data_array.ptr, sizeof(message));
 800105e:	f107 030c 	add.w	r3, r7, #12
 8001062:	2208      	movs	r2, #8
 8001064:	4619      	mov	r1, r3
 8001066:	6838      	ldr	r0, [r7, #0]
 8001068:	f000 fc62 	bl	8001930 <isotp_user_send_can>
 800106c:	6178      	str	r0, [r7, #20]
    if (ISOTP_RET_OK == ret) {
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d108      	bne.n	8001086 <isotp_send_first_frame+0x7e>
        link->send_offset += sizeof(message.as.first_frame.data);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	899b      	ldrh	r3, [r3, #12]
 8001078:	3306      	adds	r3, #6
 800107a:	b29a      	uxth	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	819a      	strh	r2, [r3, #12]
        link->send_sn = 1;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2201      	movs	r2, #1
 8001084:	739a      	strb	r2, [r3, #14]
    }

    return ret;
 8001086:	697b      	ldr	r3, [r7, #20]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	0800bda8 	.word	0x0800bda8
 8001094:	0800c02c 	.word	0x0800c02c
 8001098:	0800bd94 	.word	0x0800bd94

0800109c <isotp_send_consecutive_frame>:

static int isotp_send_consecutive_frame(IsoTpLink* link) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
    IsoTpCanMessage message;
    uint16_t data_length;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size > 7);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	895b      	ldrh	r3, [r3, #10]
 80010a8:	2b07      	cmp	r3, #7
 80010aa:	d805      	bhi.n	80010b8 <isotp_send_consecutive_frame+0x1c>
 80010ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001164 <isotp_send_consecutive_frame+0xc8>)
 80010ae:	4a2e      	ldr	r2, [pc, #184]	@ (8001168 <isotp_send_consecutive_frame+0xcc>)
 80010b0:	2175      	movs	r1, #117	@ 0x75
 80010b2:	482e      	ldr	r0, [pc, #184]	@ (800116c <isotp_send_consecutive_frame+0xd0>)
 80010b4:	f009 fb66 	bl	800a784 <__assert_func>

    /* setup message  */
    message.as.consecutive_frame.type = TSOTP_PCI_TYPE_CONSECUTIVE_FRAME;
 80010b8:	7a3b      	ldrb	r3, [r7, #8]
 80010ba:	2202      	movs	r2, #2
 80010bc:	f362 1307 	bfi	r3, r2, #4, #4
 80010c0:	723b      	strb	r3, [r7, #8]
    message.as.consecutive_frame.SN = link->send_sn;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	7b9b      	ldrb	r3, [r3, #14]
 80010c6:	f003 030f 	and.w	r3, r3, #15
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	7a3b      	ldrb	r3, [r7, #8]
 80010ce:	f362 0303 	bfi	r3, r2, #0, #4
 80010d2:	723b      	strb	r3, [r7, #8]
    data_length = link->send_size - link->send_offset;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	895a      	ldrh	r2, [r3, #10]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	899b      	ldrh	r3, [r3, #12]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	82fb      	strh	r3, [r7, #22]
    if (data_length > sizeof(message.as.consecutive_frame.data)) {
 80010e0:	8afb      	ldrh	r3, [r7, #22]
 80010e2:	2b07      	cmp	r3, #7
 80010e4:	d901      	bls.n	80010ea <isotp_send_consecutive_frame+0x4e>
        data_length = sizeof(message.as.consecutive_frame.data);
 80010e6:	2307      	movs	r3, #7
 80010e8:	82fb      	strh	r3, [r7, #22]
    }
    (void) memcpy(message.as.consecutive_frame.data, link->send_buffer + link->send_offset, data_length);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	8992      	ldrh	r2, [r2, #12]
 80010f2:	1899      	adds	r1, r3, r2
 80010f4:	8afa      	ldrh	r2, [r7, #22]
 80010f6:	f107 0308 	add.w	r3, r7, #8
 80010fa:	3301      	adds	r3, #1
 80010fc:	4618      	mov	r0, r3
 80010fe:	f009 fe54 	bl	800adaa <memcpy>

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void) memset(message.as.consecutive_frame.data + data_length, 0, sizeof(message.as.consecutive_frame.data) - data_length);
 8001102:	8afb      	ldrh	r3, [r7, #22]
 8001104:	f107 0208 	add.w	r2, r7, #8
 8001108:	3201      	adds	r2, #1
 800110a:	18d0      	adds	r0, r2, r3
 800110c:	8afb      	ldrh	r3, [r7, #22]
 800110e:	f1c3 0307 	rsb	r3, r3, #7
 8001112:	461a      	mov	r2, r3
 8001114:	2100      	movs	r1, #0
 8001116:	f009 fdcd 	bl	800acb4 <memset>
    ret = isotp_user_send_can(link->send_arbitration_id, message.as.data_array.ptr, sizeof(message));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f107 0108 	add.w	r1, r7, #8
 8001122:	2208      	movs	r2, #8
 8001124:	4618      	mov	r0, r3
 8001126:	f000 fc03 	bl	8001930 <isotp_user_send_can>
 800112a:	6138      	str	r0, [r7, #16]
#else
    ret = isotp_user_send_can(link->send_arbitration_id,
            message.as.data_array.ptr,
            data_length + 1);
#endif
    if (ISOTP_RET_OK == ret) {
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d113      	bne.n	800115a <isotp_send_consecutive_frame+0xbe>
        link->send_offset += data_length;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	899a      	ldrh	r2, [r3, #12]
 8001136:	8afb      	ldrh	r3, [r7, #22]
 8001138:	4413      	add	r3, r2
 800113a:	b29a      	uxth	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	819a      	strh	r2, [r3, #12]
        if (++(link->send_sn) > 0x0F) {
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	7b9b      	ldrb	r3, [r3, #14]
 8001144:	3301      	adds	r3, #1
 8001146:	b2da      	uxtb	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	739a      	strb	r2, [r3, #14]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	7b9b      	ldrb	r3, [r3, #14]
 8001150:	2b0f      	cmp	r3, #15
 8001152:	d902      	bls.n	800115a <isotp_send_consecutive_frame+0xbe>
            link->send_sn = 0;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	739a      	strb	r2, [r3, #14]
        }
    }

    return ret;
 800115a:	693b      	ldr	r3, [r7, #16]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	0800bda8 	.word	0x0800bda8
 8001168:	0800c044 	.word	0x0800c044
 800116c:	0800bd94 	.word	0x0800bd94

08001170 <isotp_receive_single_frame>:

static int isotp_receive_single_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	4613      	mov	r3, r2
 800117c:	71fb      	strb	r3, [r7, #7]
    /* check data length */
    if ((0 == message->as.single_frame.SF_DL) || (message->as.single_frame.SF_DL > (len - 1))) {
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	f003 030f 	and.w	r3, r3, #15
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b00      	cmp	r3, #0
 800118a:	d008      	beq.n	800119e <isotp_receive_single_frame+0x2e>
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001194:	b2db      	uxtb	r3, r3
 8001196:	461a      	mov	r2, r3
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	4293      	cmp	r3, r2
 800119c:	d805      	bhi.n	80011aa <isotp_receive_single_frame+0x3a>
        isotp_user_debug("Single-frame length too small.");
 800119e:	480f      	ldr	r0, [pc, #60]	@ (80011dc <isotp_receive_single_frame+0x6c>)
 80011a0:	f000 fb8c 	bl	80018bc <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 80011a4:	f06f 0306 	mvn.w	r3, #6
 80011a8:	e014      	b.n	80011d4 <isotp_receive_single_frame+0x64>
    }

    /* copying data */
    (void) memcpy(link->receive_buffer, message->as.single_frame.data, message->as.single_frame.SF_DL);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	1c59      	adds	r1, r3, #1
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	461a      	mov	r2, r3
 80011be:	f009 fdf4 	bl	800adaa <memcpy>
    link->receive_size = message->as.single_frame.SF_DL;
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	461a      	mov	r2, r3
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    return ISOTP_RET_OK;
 80011d2:	2300      	movs	r3, #0
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	0800bdbc 	.word	0x0800bdbc

080011e0 <isotp_receive_first_frame>:

static int isotp_receive_first_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	4613      	mov	r3, r2
 80011ec:	71fb      	strb	r3, [r7, #7]
    uint16_t payload_length;

    if (8 != len) {
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2b08      	cmp	r3, #8
 80011f2:	d005      	beq.n	8001200 <isotp_receive_first_frame+0x20>
        isotp_user_debug("First frame should be 8 bytes in length.");
 80011f4:	481e      	ldr	r0, [pc, #120]	@ (8001270 <isotp_receive_first_frame+0x90>)
 80011f6:	f000 fb61 	bl	80018bc <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 80011fa:	f06f 0306 	mvn.w	r3, #6
 80011fe:	e033      	b.n	8001268 <isotp_receive_first_frame+0x88>
    }

    /* check data length */
    payload_length = message->as.first_frame.FF_DL_high;
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001208:	b2db      	uxtb	r3, r3
 800120a:	82fb      	strh	r3, [r7, #22]
    payload_length = (payload_length << 8) + message->as.first_frame.FF_DL_low;
 800120c:	8afb      	ldrh	r3, [r7, #22]
 800120e:	021b      	lsls	r3, r3, #8
 8001210:	b29b      	uxth	r3, r3
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	7852      	ldrb	r2, [r2, #1]
 8001216:	4413      	add	r3, r2
 8001218:	82fb      	strh	r3, [r7, #22]

    /* should not use multiple frame transmition */
    if (payload_length <= 7) {
 800121a:	8afb      	ldrh	r3, [r7, #22]
 800121c:	2b07      	cmp	r3, #7
 800121e:	d805      	bhi.n	800122c <isotp_receive_first_frame+0x4c>
        isotp_user_debug("Should not use multiple frame transmission.");
 8001220:	4814      	ldr	r0, [pc, #80]	@ (8001274 <isotp_receive_first_frame+0x94>)
 8001222:	f000 fb4b 	bl	80018bc <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 8001226:	f06f 0306 	mvn.w	r3, #6
 800122a:	e01d      	b.n	8001268 <isotp_receive_first_frame+0x88>
    }

    if (payload_length > link->receive_buf_size) {
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001230:	8afa      	ldrh	r2, [r7, #22]
 8001232:	429a      	cmp	r2, r3
 8001234:	d905      	bls.n	8001242 <isotp_receive_first_frame+0x62>
        isotp_user_debug("Multi-frame response too large for receiving buffer.");
 8001236:	4810      	ldr	r0, [pc, #64]	@ (8001278 <isotp_receive_first_frame+0x98>)
 8001238:	f000 fb40 	bl	80018bc <isotp_user_debug>
        return ISOTP_RET_OVERFLOW;
 800123c:	f06f 0302 	mvn.w	r3, #2
 8001240:	e012      	b.n	8001268 <isotp_receive_first_frame+0x88>
    }

    /* copying data */
    (void) memcpy(link->receive_buffer, message->as.first_frame.data, sizeof(message->as.first_frame.data));
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	3302      	adds	r3, #2
 800124a:	2206      	movs	r2, #6
 800124c:	4619      	mov	r1, r3
 800124e:	f009 fdac 	bl	800adaa <memcpy>
    link->receive_size = payload_length;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	8afa      	ldrh	r2, [r7, #22]
 8001256:	85da      	strh	r2, [r3, #46]	@ 0x2e
    link->receive_offset = sizeof(message->as.first_frame.data);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2206      	movs	r2, #6
 800125c:	861a      	strh	r2, [r3, #48]	@ 0x30
    link->receive_sn = 1;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2201      	movs	r2, #1
 8001262:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

    return ISOTP_RET_OK;
 8001266:	2300      	movs	r3, #0
}
 8001268:	4618      	mov	r0, r3
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	0800bddc 	.word	0x0800bddc
 8001274:	0800be08 	.word	0x0800be08
 8001278:	0800be34 	.word	0x0800be34

0800127c <isotp_receive_consecutive_frame>:

static int isotp_receive_consecutive_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	4613      	mov	r3, r2
 8001288:	71fb      	strb	r3, [r7, #7]
    uint16_t remaining_bytes;

    /* check sn */
    if (link->receive_sn != message->as.consecutive_frame.SN) {
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001290:	68ba      	ldr	r2, [r7, #8]
 8001292:	7812      	ldrb	r2, [r2, #0]
 8001294:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	4293      	cmp	r3, r2
 800129c:	d002      	beq.n	80012a4 <isotp_receive_consecutive_frame+0x28>
        return ISOTP_RET_WRONG_SN;
 800129e:	f06f 0303 	mvn.w	r3, #3
 80012a2:	e038      	b.n	8001316 <isotp_receive_consecutive_frame+0x9a>
    }

    /* check data length */
    remaining_bytes = link->receive_size - link->receive_offset;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	8dda      	ldrh	r2, [r3, #46]	@ 0x2e
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	82fb      	strh	r3, [r7, #22]
    if (remaining_bytes > sizeof(message->as.consecutive_frame.data)) {
 80012b0:	8afb      	ldrh	r3, [r7, #22]
 80012b2:	2b07      	cmp	r3, #7
 80012b4:	d901      	bls.n	80012ba <isotp_receive_consecutive_frame+0x3e>
        remaining_bytes = sizeof(message->as.consecutive_frame.data);
 80012b6:	2307      	movs	r3, #7
 80012b8:	82fb      	strh	r3, [r7, #22]
    }
    if (remaining_bytes > len - 1) {
 80012ba:	79fa      	ldrb	r2, [r7, #7]
 80012bc:	8afb      	ldrh	r3, [r7, #22]
 80012be:	429a      	cmp	r2, r3
 80012c0:	dc05      	bgt.n	80012ce <isotp_receive_consecutive_frame+0x52>
        isotp_user_debug("Consecutive frame too short.");
 80012c2:	4817      	ldr	r0, [pc, #92]	@ (8001320 <isotp_receive_consecutive_frame+0xa4>)
 80012c4:	f000 fafa 	bl	80018bc <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 80012c8:	f06f 0306 	mvn.w	r3, #6
 80012cc:	e023      	b.n	8001316 <isotp_receive_consecutive_frame+0x9a>
    }

    /* copying data */
    (void) memcpy(link->receive_buffer + link->receive_offset, message->as.consecutive_frame.data, remaining_bytes);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	8e12      	ldrh	r2, [r2, #48]	@ 0x30
 80012d6:	1898      	adds	r0, r3, r2
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	3301      	adds	r3, #1
 80012dc:	8afa      	ldrh	r2, [r7, #22]
 80012de:	4619      	mov	r1, r3
 80012e0:	f009 fd63 	bl	800adaa <memcpy>

    link->receive_offset += remaining_bytes;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 80012e8:	8afb      	ldrh	r3, [r7, #22]
 80012ea:	4413      	add	r3, r2
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	861a      	strh	r2, [r3, #48]	@ 0x30
    if (++(link->receive_sn) > 0x0F) {
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80012f8:	3301      	adds	r3, #1
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001308:	2b0f      	cmp	r3, #15
 800130a:	d903      	bls.n	8001314 <isotp_receive_consecutive_frame+0x98>
        link->receive_sn = 0;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2200      	movs	r2, #0
 8001310:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    }

    return ISOTP_RET_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	0800be6c 	.word	0x0800be6c

08001324 <isotp_receive_flow_control_frame>:

static int isotp_receive_flow_control_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	4613      	mov	r3, r2
 8001330:	71fb      	strb	r3, [r7, #7]
    /* check message length */
    if (len < 3) {
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	2b02      	cmp	r3, #2
 8001336:	d805      	bhi.n	8001344 <isotp_receive_flow_control_frame+0x20>
        isotp_user_debug("Flow control frame too short.");
 8001338:	4805      	ldr	r0, [pc, #20]	@ (8001350 <isotp_receive_flow_control_frame+0x2c>)
 800133a:	f000 fabf 	bl	80018bc <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 800133e:	f06f 0306 	mvn.w	r3, #6
 8001342:	e000      	b.n	8001346 <isotp_receive_flow_control_frame+0x22>
    }

    return ISOTP_RET_OK;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	0800be8c 	.word	0x0800be8c

08001354 <isotp_send>:

///////////////////////////////////////////////////////
///                 PUBLIC FUNCTIONS                ///
///////////////////////////////////////////////////////

int isotp_send(IsoTpLink *link, const uint8_t payload[], uint16_t size) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	4613      	mov	r3, r2
 8001360:	80fb      	strh	r3, [r7, #6]
    return isotp_send_with_id(link, link->send_arbitration_id, payload, size);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	6819      	ldr	r1, [r3, #0]
 8001366:	88fb      	ldrh	r3, [r7, #6]
 8001368:	68ba      	ldr	r2, [r7, #8]
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f000 f806 	bl	800137c <isotp_send_with_id>
 8001370:	4603      	mov	r3, r0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <isotp_send_with_id>:

int isotp_send_with_id(IsoTpLink *link, uint32_t id, const uint8_t payload[], uint16_t size) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b0a6      	sub	sp, #152	@ 0x98
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
 8001388:	807b      	strh	r3, [r7, #2]
    int ret;

    if (link == 0x0) {
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d105      	bne.n	800139c <isotp_send_with_id+0x20>
        isotp_user_debug("Link is null!");
 8001390:	4833      	ldr	r0, [pc, #204]	@ (8001460 <isotp_send_with_id+0xe4>)
 8001392:	f000 fa93 	bl	80018bc <isotp_user_debug>
        return ISOTP_RET_ERROR;
 8001396:	f04f 33ff 	mov.w	r3, #4294967295
 800139a:	e05d      	b.n	8001458 <isotp_send_with_id+0xdc>
    }

    if (size > link->send_buf_size) {
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	891b      	ldrh	r3, [r3, #8]
 80013a0:	887a      	ldrh	r2, [r7, #2]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d90d      	bls.n	80013c2 <isotp_send_with_id+0x46>
        isotp_user_debug("Message size too large. Increase ISO_TP_MAX_MESSAGE_SIZE to set a larger buffer\n");
 80013a6:	482f      	ldr	r0, [pc, #188]	@ (8001464 <isotp_send_with_id+0xe8>)
 80013a8:	f000 fa88 	bl	80018bc <isotp_user_debug>
        char message[128];
        sprintf(&message[0], "Attempted to send %d bytes; max size is %d!\n", size, link->send_buf_size);
 80013ac:	887a      	ldrh	r2, [r7, #2]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	891b      	ldrh	r3, [r3, #8]
 80013b2:	f107 0014 	add.w	r0, r7, #20
 80013b6:	492c      	ldr	r1, [pc, #176]	@ (8001468 <isotp_send_with_id+0xec>)
 80013b8:	f009 fb46 	bl	800aa48 <siprintf>
        return ISOTP_RET_OVERFLOW;
 80013bc:	f06f 0302 	mvn.w	r3, #2
 80013c0:	e04a      	b.n	8001458 <isotp_send_with_id+0xdc>
    }

    if (ISOTP_SEND_STATUS_INPROGRESS == link->send_status) {
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d105      	bne.n	80013d8 <isotp_send_with_id+0x5c>
        isotp_user_debug("Abort previous message, transmission in progress.\n");
 80013cc:	4827      	ldr	r0, [pc, #156]	@ (800146c <isotp_send_with_id+0xf0>)
 80013ce:	f000 fa75 	bl	80018bc <isotp_user_debug>
        return ISOTP_RET_INPROGRESS;
 80013d2:	f06f 0301 	mvn.w	r3, #1
 80013d6:	e03f      	b.n	8001458 <isotp_send_with_id+0xdc>
    }

    /* copy into local buffer */
    link->send_size = size;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	887a      	ldrh	r2, [r7, #2]
 80013dc:	815a      	strh	r2, [r3, #10]
    link->send_offset = 0;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2200      	movs	r2, #0
 80013e2:	819a      	strh	r2, [r3, #12]
    (void) memcpy(link->send_buffer, payload, size);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	887a      	ldrh	r2, [r7, #2]
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f009 fcdc 	bl	800adaa <memcpy>

    if (link->send_size < 8) {
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	895b      	ldrh	r3, [r3, #10]
 80013f6:	2b07      	cmp	r3, #7
 80013f8:	d806      	bhi.n	8001408 <isotp_send_with_id+0x8c>
        /* send single frame */
        ret = isotp_send_single_frame(link, id);
 80013fa:	68b9      	ldr	r1, [r7, #8]
 80013fc:	68f8      	ldr	r0, [r7, #12]
 80013fe:	f7ff fdb9 	bl	8000f74 <isotp_send_single_frame>
 8001402:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 8001406:	e025      	b.n	8001454 <isotp_send_with_id+0xd8>
    } else {
        /* send multi-frame */
        ret = isotp_send_first_frame(link, id);
 8001408:	68b9      	ldr	r1, [r7, #8]
 800140a:	68f8      	ldr	r0, [r7, #12]
 800140c:	f7ff fdfc 	bl	8001008 <isotp_send_first_frame>
 8001410:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94

        /* init multi-frame control flags */
        if (ISOTP_RET_OK == ret) {
 8001414:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001418:	2b00      	cmp	r3, #0
 800141a:	d11b      	bne.n	8001454 <isotp_send_with_id+0xd8>
            link->send_bs_remain = 0;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2200      	movs	r2, #0
 8001420:	821a      	strh	r2, [r3, #16]
            link->send_st_min = 0;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2200      	movs	r2, #0
 8001426:	749a      	strb	r2, [r3, #18]
            link->send_wtf_count = 0;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2200      	movs	r2, #0
 800142c:	74da      	strb	r2, [r3, #19]
            link->send_timer_st = isotp_user_get_ms();
 800142e:	f000 fa97 	bl	8001960 <isotp_user_get_ms>
 8001432:	4602      	mov	r2, r0
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	615a      	str	r2, [r3, #20]
            link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 8001438:	f000 fa92 	bl	8001960 <isotp_user_get_ms>
 800143c:	4603      	mov	r3, r0
 800143e:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	619a      	str	r2, [r3, #24]
            link->send_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2200      	movs	r2, #0
 800144a:	61da      	str	r2, [r3, #28]
            link->send_status = ISOTP_SEND_STATUS_INPROGRESS;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2201      	movs	r2, #1
 8001450:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }

    return ret;
 8001454:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
}
 8001458:	4618      	mov	r0, r3
 800145a:	3798      	adds	r7, #152	@ 0x98
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	0800beac 	.word	0x0800beac
 8001464:	0800bebc 	.word	0x0800bebc
 8001468:	0800bf10 	.word	0x0800bf10
 800146c:	0800bf40 	.word	0x0800bf40

08001470 <isotp_on_can_message>:

void isotp_on_can_message(IsoTpLink *link, uint8_t *data, uint8_t len) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b088      	sub	sp, #32
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	4613      	mov	r3, r2
 800147c:	71fb      	strb	r3, [r7, #7]
    IsoTpCanMessage message;
    int ret;

    if (len < 2 || len > 8) {
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	2b01      	cmp	r3, #1
 8001482:	f240 8143 	bls.w	800170c <isotp_on_can_message+0x29c>
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	2b08      	cmp	r3, #8
 800148a:	f200 813f 	bhi.w	800170c <isotp_on_can_message+0x29c>
        return;
    }

    memcpy(message.as.data_array.ptr, data, len);
 800148e:	79fa      	ldrb	r2, [r7, #7]
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	68b9      	ldr	r1, [r7, #8]
 8001496:	4618      	mov	r0, r3
 8001498:	f009 fc87 	bl	800adaa <memcpy>
    memset(message.as.data_array.ptr + len, 0, sizeof(message.as.data_array.ptr) - len);
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	f107 0214 	add.w	r2, r7, #20
 80014a2:	18d0      	adds	r0, r2, r3
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	f1c3 0308 	rsb	r3, r3, #8
 80014aa:	461a      	mov	r2, r3
 80014ac:	2100      	movs	r1, #0
 80014ae:	f009 fc01 	bl	800acb4 <memset>

    switch (message.as.common.type) {
 80014b2:	7d3b      	ldrb	r3, [r7, #20]
 80014b4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	f200 811a 	bhi.w	80016f4 <isotp_on_can_message+0x284>
 80014c0:	a201      	add	r2, pc, #4	@ (adr r2, 80014c8 <isotp_on_can_message+0x58>)
 80014c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c6:	bf00      	nop
 80014c8:	080014d9 	.word	0x080014d9
 80014cc:	08001515 	.word	0x08001515
 80014d0:	0800159d 	.word	0x0800159d
 80014d4:	0800163b 	.word	0x0800163b
        case ISOTP_PCI_TYPE_SINGLE: {
            /* update protocol result */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d104      	bne.n	80014ec <isotp_on_can_message+0x7c>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f06f 0205 	mvn.w	r2, #5
 80014e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80014ea:	e002      	b.n	80014f2 <isotp_on_can_message+0x82>
            } else {
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2200      	movs	r2, #0
 80014f0:	639a      	str	r2, [r3, #56]	@ 0x38
            }

            /* handle message */
            ret = isotp_receive_single_frame(link, &message, len);
 80014f2:	79fa      	ldrb	r2, [r7, #7]
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	4619      	mov	r1, r3
 80014fa:	68f8      	ldr	r0, [r7, #12]
 80014fc:	f7ff fe38 	bl	8001170 <isotp_receive_single_frame>
 8001500:	61f8      	str	r0, [r7, #28]

            if (ISOTP_RET_OK == ret) {
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	2b00      	cmp	r3, #0
 8001506:	f040 80f7 	bne.w	80016f8 <isotp_on_can_message+0x288>
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_FULL;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2202      	movs	r2, #2
 800150e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            }
            break;
 8001512:	e0f1      	b.n	80016f8 <isotp_on_can_message+0x288>
        }
        case ISOTP_PCI_TYPE_FIRST_FRAME: {
            /* update protocol result */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800151a:	2b01      	cmp	r3, #1
 800151c:	d104      	bne.n	8001528 <isotp_on_can_message+0xb8>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f06f 0205 	mvn.w	r2, #5
 8001524:	639a      	str	r2, [r3, #56]	@ 0x38
 8001526:	e002      	b.n	800152e <isotp_on_can_message+0xbe>
            } else {
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2200      	movs	r2, #0
 800152c:	639a      	str	r2, [r3, #56]	@ 0x38
            }

            /* handle message */
            ret = isotp_receive_first_frame(link, &message, len);
 800152e:	79fa      	ldrb	r2, [r7, #7]
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	4619      	mov	r1, r3
 8001536:	68f8      	ldr	r0, [r7, #12]
 8001538:	f7ff fe52 	bl	80011e0 <isotp_receive_first_frame>
 800153c:	61f8      	str	r0, [r7, #28]

            /* if overflow happened */
            if (ISOTP_RET_OVERFLOW == ret) {
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	f113 0f03 	cmn.w	r3, #3
 8001544:	d10e      	bne.n	8001564 <isotp_on_can_message+0xf4>
                /* update protocol result */
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_BUFFER_OVFLW;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f06f 0207 	mvn.w	r2, #7
 800154c:	639a      	str	r2, [r3, #56]	@ 0x38
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                /* send error message */
                isotp_send_flow_control(link, PCI_FLOW_STATUS_OVERFLOW, 0, 0);
 8001556:	2300      	movs	r3, #0
 8001558:	2200      	movs	r2, #0
 800155a:	2102      	movs	r1, #2
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	f7ff fcd1 	bl	8000f04 <isotp_send_flow_control>
                break;
 8001562:	e0d2      	b.n	800170a <isotp_on_can_message+0x29a>
            }

            /* if receive successful */
            if (ISOTP_RET_OK == ret) {
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	2b00      	cmp	r3, #0
 8001568:	f040 80c8 	bne.w	80016fc <isotp_on_can_message+0x28c>
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_INPROGRESS;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                /* send fc frame */
                link->receive_bs_count = ISO_TP_DEFAULT_BLOCK_SIZE;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2208      	movs	r2, #8
 8001578:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 8001582:	2301      	movs	r3, #1
 8001584:	2100      	movs	r1, #0
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f7ff fcbc 	bl	8000f04 <isotp_send_flow_control>
                /* refresh timer cs */
                link->receive_timer_cr = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 800158c:	f000 f9e8 	bl	8001960 <isotp_user_get_ms>
 8001590:	4603      	mov	r3, r0
 8001592:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	635a      	str	r2, [r3, #52]	@ 0x34
            }

            break;
 800159a:	e0af      	b.n	80016fc <isotp_on_can_message+0x28c>
        }
        case TSOTP_PCI_TYPE_CONSECUTIVE_FRAME: {
            /* check if in receiving status */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS != link->receive_status) {
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d004      	beq.n	80015b0 <isotp_on_can_message+0x140>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f06f 0205 	mvn.w	r2, #5
 80015ac:	639a      	str	r2, [r3, #56]	@ 0x38
                break;
 80015ae:	e0ac      	b.n	800170a <isotp_on_can_message+0x29a>
            }

            /* handle message */
            ret = isotp_receive_consecutive_frame(link, &message, len);
 80015b0:	79fa      	ldrb	r2, [r7, #7]
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	4619      	mov	r1, r3
 80015b8:	68f8      	ldr	r0, [r7, #12]
 80015ba:	f7ff fe5f 	bl	800127c <isotp_receive_consecutive_frame>
 80015be:	61f8      	str	r0, [r7, #28]

            /* if wrong sn */
            if (ISOTP_RET_WRONG_SN == ret) {
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f113 0f04 	cmn.w	r3, #4
 80015c6:	d108      	bne.n	80015da <isotp_on_can_message+0x16a>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_WRONG_SN;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f06f 0203 	mvn.w	r2, #3
 80015ce:	639a      	str	r2, [r3, #56]	@ 0x38
                link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                break;
 80015d8:	e097      	b.n	800170a <isotp_on_can_message+0x29a>
            }

            /* if success */
            if (ISOTP_RET_OK == ret) {
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f040 808f 	bne.w	8001700 <isotp_on_can_message+0x290>
                /* refresh timer cs */
                link->receive_timer_cr = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 80015e2:	f000 f9bd 	bl	8001960 <isotp_user_get_ms>
 80015e6:	4603      	mov	r3, r0
 80015e8:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	635a      	str	r2, [r3, #52]	@ 0x34

                /* receive finished */
                if (link->receive_offset >= link->receive_size) {
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d304      	bcc.n	8001606 <isotp_on_can_message+0x196>
                    link->receive_status = ISOTP_RECEIVE_STATUS_FULL;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2202      	movs	r2, #2
 8001600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                        isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
                    }
                }
            }

            break;
 8001604:	e07c      	b.n	8001700 <isotp_on_can_message+0x290>
                    if (0 == --link->receive_bs_count) {
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800160c:	3b01      	subs	r3, #1
 800160e:	b2da      	uxtb	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800161c:	2b00      	cmp	r3, #0
 800161e:	d16f      	bne.n	8001700 <isotp_on_can_message+0x290>
                        link->receive_bs_count = ISO_TP_DEFAULT_BLOCK_SIZE;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2208      	movs	r2, #8
 8001624:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                        isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 800162e:	2301      	movs	r3, #1
 8001630:	2100      	movs	r1, #0
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f7ff fc66 	bl	8000f04 <isotp_send_flow_control>
            break;
 8001638:	e062      	b.n	8001700 <isotp_on_can_message+0x290>
        }
        case ISOTP_PCI_TYPE_FLOW_CONTROL_FRAME:
            /* handle fc frame only when sending in progress  */
            if (ISOTP_SEND_STATUS_INPROGRESS != link->send_status) {
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d15f      	bne.n	8001704 <isotp_on_can_message+0x294>
                break;
            }

            /* handle message */
            ret = isotp_receive_flow_control_frame(link, &message, len);
 8001644:	79fa      	ldrb	r2, [r7, #7]
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4619      	mov	r1, r3
 800164c:	68f8      	ldr	r0, [r7, #12]
 800164e:	f7ff fe69 	bl	8001324 <isotp_receive_flow_control_frame>
 8001652:	61f8      	str	r0, [r7, #28]

            if (ISOTP_RET_OK == ret) {
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d156      	bne.n	8001708 <isotp_on_can_message+0x298>
                /* refresh bs timer */
                link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 800165a:	f000 f981 	bl	8001960 <isotp_user_get_ms>
 800165e:	4603      	mov	r3, r0
 8001660:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	619a      	str	r2, [r3, #24]

                /* overflow */
                if (PCI_FLOW_STATUS_OVERFLOW == message.as.flow_control.FS) {
 8001668:	7d3b      	ldrb	r3, [r7, #20]
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d108      	bne.n	8001686 <isotp_on_can_message+0x216>
                    link->send_protocol_result = ISOTP_PROTOCOL_RESULT_BUFFER_OVFLW;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f06f 0207 	mvn.w	r2, #7
 800167a:	61da      	str	r2, [r3, #28]
                    link->send_status = ISOTP_SEND_STATUS_ERROR;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2202      	movs	r2, #2
 8001680:	f883 2020 	strb.w	r2, [r3, #32]
                    }
                    link->send_st_min = isotp_st_min_to_ms(message.as.flow_control.STmin);
                    link->send_wtf_count = 0;
                }
            }
            break;
 8001684:	e040      	b.n	8001708 <isotp_on_can_message+0x298>
                else if (PCI_FLOW_STATUS_WAIT == message.as.flow_control.FS) {
 8001686:	7d3b      	ldrb	r3, [r7, #20]
 8001688:	f003 030f 	and.w	r3, r3, #15
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b01      	cmp	r3, #1
 8001690:	d112      	bne.n	80016b8 <isotp_on_can_message+0x248>
                    link->send_wtf_count += 1;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	7cdb      	ldrb	r3, [r3, #19]
 8001696:	3301      	adds	r3, #1
 8001698:	b2da      	uxtb	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	74da      	strb	r2, [r3, #19]
                    if (link->send_wtf_count > ISO_TP_MAX_WFT_NUMBER) {
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	7cdb      	ldrb	r3, [r3, #19]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d930      	bls.n	8001708 <isotp_on_can_message+0x298>
                        link->send_protocol_result = ISOTP_PROTOCOL_RESULT_WFT_OVRN;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f06f 0206 	mvn.w	r2, #6
 80016ac:	61da      	str	r2, [r3, #28]
                        link->send_status = ISOTP_SEND_STATUS_ERROR;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2202      	movs	r2, #2
 80016b2:	f883 2020 	strb.w	r2, [r3, #32]
            break;
 80016b6:	e027      	b.n	8001708 <isotp_on_can_message+0x298>
                else if (PCI_FLOW_STATUS_CONTINUE == message.as.flow_control.FS) {
 80016b8:	7d3b      	ldrb	r3, [r7, #20]
 80016ba:	f003 030f 	and.w	r3, r3, #15
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d121      	bne.n	8001708 <isotp_on_can_message+0x298>
                    if (0 == message.as.flow_control.BS) {
 80016c4:	7d7b      	ldrb	r3, [r7, #21]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d104      	bne.n	80016d4 <isotp_on_can_message+0x264>
                        link->send_bs_remain = ISOTP_INVALID_BS;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016d0:	821a      	strh	r2, [r3, #16]
 80016d2:	e003      	b.n	80016dc <isotp_on_can_message+0x26c>
                        link->send_bs_remain = message.as.flow_control.BS;
 80016d4:	7d7b      	ldrb	r3, [r7, #21]
 80016d6:	461a      	mov	r2, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	821a      	strh	r2, [r3, #16]
                    link->send_st_min = isotp_st_min_to_ms(message.as.flow_control.STmin);
 80016dc:	7dbb      	ldrb	r3, [r7, #22]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fbf2 	bl	8000ec8 <isotp_st_min_to_ms>
 80016e4:	4603      	mov	r3, r0
 80016e6:	461a      	mov	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	749a      	strb	r2, [r3, #18]
                    link->send_wtf_count = 0;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2200      	movs	r2, #0
 80016f0:	74da      	strb	r2, [r3, #19]
            break;
 80016f2:	e009      	b.n	8001708 <isotp_on_can_message+0x298>
        default:
            break;
 80016f4:	bf00      	nop
 80016f6:	e00a      	b.n	800170e <isotp_on_can_message+0x29e>
            break;
 80016f8:	bf00      	nop
 80016fa:	e008      	b.n	800170e <isotp_on_can_message+0x29e>
            break;
 80016fc:	bf00      	nop
 80016fe:	e006      	b.n	800170e <isotp_on_can_message+0x29e>
            break;
 8001700:	bf00      	nop
 8001702:	e004      	b.n	800170e <isotp_on_can_message+0x29e>
                break;
 8001704:	bf00      	nop
 8001706:	e002      	b.n	800170e <isotp_on_can_message+0x29e>
            break;
 8001708:	bf00      	nop
    };

    return;
 800170a:	e000      	b.n	800170e <isotp_on_can_message+0x29e>
        return;
 800170c:	bf00      	nop
}
 800170e:	3720      	adds	r7, #32
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <isotp_receive>:

int isotp_receive(IsoTpLink *link, uint8_t *payload, const uint16_t payload_size, uint16_t *out_size) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	603b      	str	r3, [r7, #0]
 8001720:	4613      	mov	r3, r2
 8001722:	80fb      	strh	r3, [r7, #6]
    uint16_t copylen;

    if (ISOTP_RECEIVE_STATUS_FULL != link->receive_status) {
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800172a:	2b02      	cmp	r3, #2
 800172c:	d002      	beq.n	8001734 <isotp_receive+0x20>
        return ISOTP_RET_NO_DATA;
 800172e:	f06f 0304 	mvn.w	r3, #4
 8001732:	e017      	b.n	8001764 <isotp_receive+0x50>
    }

    copylen = link->receive_size;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001738:	82fb      	strh	r3, [r7, #22]
    if (copylen > payload_size) {
 800173a:	8afa      	ldrh	r2, [r7, #22]
 800173c:	88fb      	ldrh	r3, [r7, #6]
 800173e:	429a      	cmp	r2, r3
 8001740:	d901      	bls.n	8001746 <isotp_receive+0x32>
        copylen = payload_size;
 8001742:	88fb      	ldrh	r3, [r7, #6]
 8001744:	82fb      	strh	r3, [r7, #22]
    }

    memcpy(payload, link->receive_buffer, copylen);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800174a:	8afa      	ldrh	r2, [r7, #22]
 800174c:	4619      	mov	r1, r3
 800174e:	68b8      	ldr	r0, [r7, #8]
 8001750:	f009 fb2b 	bl	800adaa <memcpy>
    *out_size = copylen;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	8afa      	ldrh	r2, [r7, #22]
 8001758:	801a      	strh	r2, [r3, #0]

    link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return ISOTP_RET_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <isotp_init_link>:

void isotp_init_link(IsoTpLink *link, uint32_t sendid, uint8_t *sendbuf, uint16_t sendbufsize, uint8_t *recvbuf, uint16_t recvbufsize) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
 8001778:	807b      	strh	r3, [r7, #2]
    memset(link, 0, sizeof(*link));
 800177a:	2240      	movs	r2, #64	@ 0x40
 800177c:	2100      	movs	r1, #0
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f009 fa98 	bl	800acb4 <memset>
    link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    link->send_status = ISOTP_SEND_STATUS_IDLE;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 2020 	strb.w	r2, [r3, #32]
    link->send_arbitration_id = sendid;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	601a      	str	r2, [r3, #0]
    link->send_buffer = sendbuf;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	605a      	str	r2, [r3, #4]
    link->send_buf_size = sendbufsize;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	887a      	ldrh	r2, [r7, #2]
 80017a4:	811a      	strh	r2, [r3, #8]
    link->receive_buffer = recvbuf;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	629a      	str	r2, [r3, #40]	@ 0x28
    link->receive_buf_size = recvbufsize;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	8bba      	ldrh	r2, [r7, #28]
 80017b0:	859a      	strh	r2, [r3, #44]	@ 0x2c

    return;
 80017b2:	bf00      	nop
}
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <isotp_poll>:

void isotp_poll(IsoTpLink *link) {
 80017ba:	b590      	push	{r4, r7, lr}
 80017bc:	b085      	sub	sp, #20
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
    int ret;

    /* only polling when operation in progress */
    if (ISOTP_SEND_STATUS_INPROGRESS == link->send_status) {
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d15c      	bne.n	8001886 <isotp_poll+0xcc>

        /* continue send data */
        if (/* send data if bs_remain is invalid or bs_remain large than zero */
        (ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0) &&
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	8a1b      	ldrh	r3, [r3, #16]
        if (/* send data if bs_remain is invalid or bs_remain large than zero */
 80017d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d003      	beq.n	80017e0 <isotp_poll+0x26>
        (ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0) &&
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	8a1b      	ldrh	r3, [r3, #16]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d041      	beq.n	8001864 <isotp_poll+0xaa>
        /* and if st_min is zero or go beyond interval time */
        (0 == link->send_st_min || (0 != link->send_st_min && IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_st)))) {
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	7c9b      	ldrb	r3, [r3, #18]
        (ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0) &&
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d00c      	beq.n	8001802 <isotp_poll+0x48>
        (0 == link->send_st_min || (0 != link->send_st_min && IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_st)))) {
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	7c9b      	ldrb	r3, [r3, #18]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d039      	beq.n	8001864 <isotp_poll+0xaa>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	695b      	ldr	r3, [r3, #20]
 80017f4:	461c      	mov	r4, r3
 80017f6:	f000 f8b3 	bl	8001960 <isotp_user_get_ms>
 80017fa:	4603      	mov	r3, r0
 80017fc:	1ae3      	subs	r3, r4, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	da30      	bge.n	8001864 <isotp_poll+0xaa>

            ret = isotp_send_consecutive_frame(link);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff fc4a 	bl	800109c <isotp_send_consecutive_frame>
 8001808:	60f8      	str	r0, [r7, #12]
            if (ISOTP_RET_OK == ret) {
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d125      	bne.n	800185c <isotp_poll+0xa2>
                if (ISOTP_INVALID_BS != link->send_bs_remain) {
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	8a1b      	ldrh	r3, [r3, #16]
 8001814:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001818:	4293      	cmp	r3, r2
 800181a:	d005      	beq.n	8001828 <isotp_poll+0x6e>
                    link->send_bs_remain -= 1;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	8a1b      	ldrh	r3, [r3, #16]
 8001820:	3b01      	subs	r3, #1
 8001822:	b29a      	uxth	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	821a      	strh	r2, [r3, #16]
                }
                link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 8001828:	f000 f89a 	bl	8001960 <isotp_user_get_ms>
 800182c:	4603      	mov	r3, r0
 800182e:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	619a      	str	r2, [r3, #24]
                link->send_timer_st = isotp_user_get_ms() + link->send_st_min;
 8001836:	f000 f893 	bl	8001960 <isotp_user_get_ms>
 800183a:	4602      	mov	r2, r0
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	7c9b      	ldrb	r3, [r3, #18]
 8001840:	441a      	add	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	615a      	str	r2, [r3, #20]

                /* check if send finish */
                if (link->send_offset >= link->send_size) {
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	899a      	ldrh	r2, [r3, #12]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	895b      	ldrh	r3, [r3, #10]
 800184e:	429a      	cmp	r2, r3
 8001850:	d308      	bcc.n	8001864 <isotp_poll+0xaa>
                    link->send_status = ISOTP_SEND_STATUS_IDLE;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2020 	strb.w	r2, [r3, #32]
 800185a:	e003      	b.n	8001864 <isotp_poll+0xaa>
                }
            } else {
                link->send_status = ISOTP_SEND_STATUS_ERROR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2202      	movs	r2, #2
 8001860:	f883 2020 	strb.w	r2, [r3, #32]
            }
        }

        /* check timeout */
        if (IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_bs)) {
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	461c      	mov	r4, r3
 800186a:	f000 f879 	bl	8001960 <isotp_user_get_ms>
 800186e:	4603      	mov	r3, r0
 8001870:	1ae3      	subs	r3, r4, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	da07      	bge.n	8001886 <isotp_poll+0xcc>
            link->send_protocol_result = ISOTP_PROTOCOL_RESULT_TIMEOUT_BS;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f06f 0201 	mvn.w	r2, #1
 800187c:	61da      	str	r2, [r3, #28]
            link->send_status = ISOTP_SEND_STATUS_ERROR;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2202      	movs	r2, #2
 8001882:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }

    /* only polling when operation in progress */
    if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800188c:	2b01      	cmp	r3, #1
 800188e:	d111      	bne.n	80018b4 <isotp_poll+0xfa>

        /* check timeout */
        if (IsoTpTimeAfter(isotp_user_get_ms(), link->receive_timer_cr)) {
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001894:	461c      	mov	r4, r3
 8001896:	f000 f863 	bl	8001960 <isotp_user_get_ms>
 800189a:	4603      	mov	r3, r0
 800189c:	1ae3      	subs	r3, r4, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	da08      	bge.n	80018b4 <isotp_poll+0xfa>
            link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_TIMEOUT_CR;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f06f 0202 	mvn.w	r2, #2
 80018a8:	639a      	str	r2, [r3, #56]	@ 0x38
            link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        }
    }

    return;
 80018b2:	bf00      	nop
 80018b4:	bf00      	nop
}
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd90      	pop	{r4, r7, pc}

080018bc <isotp_user_debug>:
#include "usart.h"

#define DEBUG_MSG_MAX 1024

void isotp_user_debug(const char* message, ...)
{
 80018bc:	b40f      	push	{r0, r1, r2, r3}
 80018be:	b580      	push	{r7, lr}
 80018c0:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 80018c4:	af00      	add	r7, sp, #0
	char debug_msg[DEBUG_MSG_MAX] = {0, };
 80018c6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80018ca:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80018ce:	4618      	mov	r0, r3
 80018d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018d4:	461a      	mov	r2, r3
 80018d6:	2100      	movs	r1, #0
 80018d8:	f009 f9ec 	bl	800acb4 <memset>
	va_list va = {0, };
 80018dc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80018e0:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
	va_start(va, message);
 80018e8:	f207 4214 	addw	r2, r7, #1044	@ 0x414
 80018ec:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80018f0:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 80018f4:	601a      	str	r2, [r3, #0]
	vsnprintf(debug_msg, sizeof(debug_msg), message, va);
 80018f6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80018fa:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 80018fe:	f107 0008 	add.w	r0, r7, #8
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f8d7 2410 	ldr.w	r2, [r7, #1040]	@ 0x410
 8001908:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800190c:	f009 f930 	bl	800ab70 <vsniprintf>
	va_end(va);
	printr("%s", debug_msg);
 8001910:	f107 0308 	add.w	r3, r7, #8
 8001914:	4619      	mov	r1, r3
 8001916:	4805      	ldr	r0, [pc, #20]	@ (800192c <isotp_user_debug+0x70>)
 8001918:	f009 f826 	bl	800a968 <iprintf>
}
 800191c:	bf00      	nop
 800191e:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 8001922:	46bd      	mov	sp, r7
 8001924:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001928:	b004      	add	sp, #16
 800192a:	4770      	bx	lr
 800192c:	0800bf74 	.word	0x0800bf74

08001930 <isotp_user_send_can>:

/* user implemented, send can message. should return ISOTP_RET_OK when success.
*/
int isotp_user_send_can(uint32_t arbitration_id, uint8_t* data, uint8_t size)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	4613      	mov	r3, r2
 800193c:	71fb      	strb	r3, [r7, #7]
	if(can1_send(data, size, arbitration_id) < 0)
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	4619      	mov	r1, r3
 8001944:	68b8      	ldr	r0, [r7, #8]
 8001946:	f7ff f923 	bl	8000b90 <can1_send>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	da02      	bge.n	8001956 <isotp_user_send_can+0x26>
	{
		return ISOTP_RET_ERROR;
 8001950:	f04f 33ff 	mov.w	r3, #4294967295
 8001954:	e000      	b.n	8001958 <isotp_user_send_can+0x28>
	}

	return ISOTP_RET_OK;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <isotp_user_get_ms>:

/* user implemented, get millisecond */
uint32_t isotp_user_get_ms(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001964:	f000 fcf0 	bl	8002348 <HAL_GetTick>
 8001968:	4603      	mov	r3, r0
}
 800196a:	4618      	mov	r0, r3
 800196c:	bd80      	pop	{r7, pc}

0800196e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001972:	f000 f893 	bl	8001a9c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001976:	f000 fc61 	bl	800223c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800197a:	f000 f813 	bl	80019a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800197e:	f7ff fa75 	bl	8000e6c <MX_GPIO_Init>
  MX_DMA_Init();
 8001982:	f7fe fe9b 	bl	80006bc <MX_DMA_Init>
  MX_FDCAN1_Init();
 8001986:	f7fe feb9 	bl	80006fc <MX_FDCAN1_Init>
  MX_USART1_UART_Init();
 800198a:	f000 fa95 	bl	8001eb8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  	terminal_init();
 800198e:	f000 fb7b 	bl	8002088 <terminal_init>
  	can1_init();
 8001992:	f7ff f823 	bl	80009dc <can1_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uart1_work();
 8001996:	f000 fbf1 	bl	800217c <uart1_work>
	  can1_work();
 800199a:	f7ff f953 	bl	8000c44 <can1_work>
	  uart1_work();
 800199e:	bf00      	nop
 80019a0:	e7f9      	b.n	8001996 <main+0x28>
	...

080019a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b09c      	sub	sp, #112	@ 0x70
 80019a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019ae:	224c      	movs	r2, #76	@ 0x4c
 80019b0:	2100      	movs	r1, #0
 80019b2:	4618      	mov	r0, r3
 80019b4:	f009 f97e 	bl	800acb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	2220      	movs	r2, #32
 80019bc:	2100      	movs	r1, #0
 80019be:	4618      	mov	r0, r3
 80019c0:	f009 f978 	bl	800acb4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80019c4:	2002      	movs	r0, #2
 80019c6:	f004 fcd7 	bl	8006378 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80019ca:	2300      	movs	r3, #0
 80019cc:	603b      	str	r3, [r7, #0]
 80019ce:	4b31      	ldr	r3, [pc, #196]	@ (8001a94 <SystemClock_Config+0xf0>)
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	4a30      	ldr	r2, [pc, #192]	@ (8001a94 <SystemClock_Config+0xf0>)
 80019d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019d8:	6193      	str	r3, [r2, #24]
 80019da:	4b2e      	ldr	r3, [pc, #184]	@ (8001a94 <SystemClock_Config+0xf0>)
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001a98 <SystemClock_Config+0xf4>)
 80019e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e8:	4a2b      	ldr	r2, [pc, #172]	@ (8001a98 <SystemClock_Config+0xf4>)
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80019f0:	4b29      	ldr	r3, [pc, #164]	@ (8001a98 <SystemClock_Config+0xf4>)
 80019f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	603b      	str	r3, [r7, #0]
 80019fa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80019fc:	bf00      	nop
 80019fe:	4b25      	ldr	r3, [pc, #148]	@ (8001a94 <SystemClock_Config+0xf0>)
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a0a:	d1f8      	bne.n	80019fe <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001a10:	2301      	movs	r3, #1
 8001a12:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a14:	2340      	movs	r3, #64	@ 0x40
 8001a16:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a20:	2304      	movs	r3, #4
 8001a22:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001a24:	233c      	movs	r3, #60	@ 0x3c
 8001a26:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001a2c:	2308      	movs	r3, #8
 8001a2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a30:	2302      	movs	r3, #2
 8001a32:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001a34:	230c      	movs	r3, #12
 8001a36:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a44:	4618      	mov	r0, r3
 8001a46:	f004 fcd1 	bl	80063ec <HAL_RCC_OscConfig>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001a50:	f000 f850 	bl	8001af4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a54:	233f      	movs	r3, #63	@ 0x3f
 8001a56:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001a60:	2308      	movs	r3, #8
 8001a62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001a64:	2340      	movs	r3, #64	@ 0x40
 8001a66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001a68:	2340      	movs	r3, #64	@ 0x40
 8001a6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001a6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a70:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001a72:	2340      	movs	r3, #64	@ 0x40
 8001a74:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a76:	1d3b      	adds	r3, r7, #4
 8001a78:	2104      	movs	r1, #4
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f005 f910 	bl	8006ca0 <HAL_RCC_ClockConfig>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001a86:	f000 f835 	bl	8001af4 <Error_Handler>
  }
}
 8001a8a:	bf00      	nop
 8001a8c:	3770      	adds	r7, #112	@ 0x70
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	58024800 	.word	0x58024800
 8001a98:	58000400 	.word	0x58000400

08001a9c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001aa2:	463b      	mov	r3, r7
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001aae:	f000 fda5 	bl	80025fc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001abe:	231f      	movs	r3, #31
 8001ac0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001ac2:	2387      	movs	r3, #135	@ 0x87
 8001ac4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001aca:	2300      	movs	r3, #0
 8001acc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001ade:	463b      	mov	r3, r7
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f000 fdc3 	bl	800266c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001ae6:	2004      	movs	r0, #4
 8001ae8:	f000 fda0 	bl	800262c <HAL_MPU_Enable>

}
 8001aec:	bf00      	nop
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af8:	b672      	cpsid	i
}
 8001afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <Error_Handler+0x8>

08001b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b06:	4b0a      	ldr	r3, [pc, #40]	@ (8001b30 <HAL_MspInit+0x30>)
 8001b08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b0c:	4a08      	ldr	r2, [pc, #32]	@ (8001b30 <HAL_MspInit+0x30>)
 8001b0e:	f043 0302 	orr.w	r3, r3, #2
 8001b12:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001b16:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <HAL_MspInit+0x30>)
 8001b18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	607b      	str	r3, [r7, #4]
 8001b22:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	58024400 	.word	0x58024400

08001b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b38:	bf00      	nop
 8001b3a:	e7fd      	b.n	8001b38 <NMI_Handler+0x4>

08001b3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b40:	bf00      	nop
 8001b42:	e7fd      	b.n	8001b40 <HardFault_Handler+0x4>

08001b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b48:	bf00      	nop
 8001b4a:	e7fd      	b.n	8001b48 <MemManage_Handler+0x4>

08001b4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b50:	bf00      	nop
 8001b52:	e7fd      	b.n	8001b50 <BusFault_Handler+0x4>

08001b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b58:	bf00      	nop
 8001b5a:	e7fd      	b.n	8001b58 <UsageFault_Handler+0x4>

08001b5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b8a:	f000 fbc9 	bl	8002320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001b98:	4802      	ldr	r0, [pc, #8]	@ (8001ba4 <DMA1_Stream0_IRQHandler+0x10>)
 8001b9a:	f001 fb6d 	bl	8003278 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	24002220 	.word	0x24002220

08001ba8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001bac:	4802      	ldr	r0, [pc, #8]	@ (8001bb8 <FDCAN1_IT0_IRQHandler+0x10>)
 8001bae:	f003 fc1b 	bl	80053e8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	240000a0 	.word	0x240000a0

08001bbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return 1;
 8001bc0:	2301      	movs	r3, #1
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <_kill>:

int _kill(int pid, int sig)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bd6:	f009 f8bb 	bl	800ad50 <__errno>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2216      	movs	r2, #22
 8001bde:	601a      	str	r2, [r3, #0]
  return -1;
 8001be0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <_exit>:

void _exit (int status)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff ffe7 	bl	8001bcc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bfe:	bf00      	nop
 8001c00:	e7fd      	b.n	8001bfe <_exit+0x12>

08001c02 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b086      	sub	sp, #24
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	60f8      	str	r0, [r7, #12]
 8001c0a:	60b9      	str	r1, [r7, #8]
 8001c0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	e00a      	b.n	8001c2a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c14:	f3af 8000 	nop.w
 8001c18:	4601      	mov	r1, r0
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	1c5a      	adds	r2, r3, #1
 8001c1e:	60ba      	str	r2, [r7, #8]
 8001c20:	b2ca      	uxtb	r2, r1
 8001c22:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	3301      	adds	r3, #1
 8001c28:	617b      	str	r3, [r7, #20]
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	dbf0      	blt.n	8001c14 <_read+0x12>
  }

  return len;
 8001c32:	687b      	ldr	r3, [r7, #4]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	e009      	b.n	8001c62 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	1c5a      	adds	r2, r3, #1
 8001c52:	60ba      	str	r2, [r7, #8]
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 fa2e 	bl	80020b8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	dbf1      	blt.n	8001c4e <_write+0x12>
  }
  return len;
 8001c6a:	687b      	ldr	r3, [r7, #4]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <_close>:

int _close(int file)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c9c:	605a      	str	r2, [r3, #4]
  return 0;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <_isatty>:

int _isatty(int file)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cb4:	2301      	movs	r3, #1
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b085      	sub	sp, #20
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	60f8      	str	r0, [r7, #12]
 8001cca:	60b9      	str	r1, [r7, #8]
 8001ccc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ce4:	4a14      	ldr	r2, [pc, #80]	@ (8001d38 <_sbrk+0x5c>)
 8001ce6:	4b15      	ldr	r3, [pc, #84]	@ (8001d3c <_sbrk+0x60>)
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cf0:	4b13      	ldr	r3, [pc, #76]	@ (8001d40 <_sbrk+0x64>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d102      	bne.n	8001cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cf8:	4b11      	ldr	r3, [pc, #68]	@ (8001d40 <_sbrk+0x64>)
 8001cfa:	4a12      	ldr	r2, [pc, #72]	@ (8001d44 <_sbrk+0x68>)
 8001cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cfe:	4b10      	ldr	r3, [pc, #64]	@ (8001d40 <_sbrk+0x64>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4413      	add	r3, r2
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d207      	bcs.n	8001d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d0c:	f009 f820 	bl	800ad50 <__errno>
 8001d10:	4603      	mov	r3, r0
 8001d12:	220c      	movs	r2, #12
 8001d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d16:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1a:	e009      	b.n	8001d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d1c:	4b08      	ldr	r3, [pc, #32]	@ (8001d40 <_sbrk+0x64>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d22:	4b07      	ldr	r3, [pc, #28]	@ (8001d40 <_sbrk+0x64>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	4a05      	ldr	r2, [pc, #20]	@ (8001d40 <_sbrk+0x64>)
 8001d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	24080000 	.word	0x24080000
 8001d3c:	00000400 	.word	0x00000400
 8001d40:	24002188 	.word	0x24002188
 8001d44:	240024f0 	.word	0x240024f0

08001d48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d4c:	4b43      	ldr	r3, [pc, #268]	@ (8001e5c <SystemInit+0x114>)
 8001d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d52:	4a42      	ldr	r2, [pc, #264]	@ (8001e5c <SystemInit+0x114>)
 8001d54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d5c:	4b40      	ldr	r3, [pc, #256]	@ (8001e60 <SystemInit+0x118>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 030f 	and.w	r3, r3, #15
 8001d64:	2b06      	cmp	r3, #6
 8001d66:	d807      	bhi.n	8001d78 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d68:	4b3d      	ldr	r3, [pc, #244]	@ (8001e60 <SystemInit+0x118>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f023 030f 	bic.w	r3, r3, #15
 8001d70:	4a3b      	ldr	r2, [pc, #236]	@ (8001e60 <SystemInit+0x118>)
 8001d72:	f043 0307 	orr.w	r3, r3, #7
 8001d76:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001d78:	4b3a      	ldr	r3, [pc, #232]	@ (8001e64 <SystemInit+0x11c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a39      	ldr	r2, [pc, #228]	@ (8001e64 <SystemInit+0x11c>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d84:	4b37      	ldr	r3, [pc, #220]	@ (8001e64 <SystemInit+0x11c>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001d8a:	4b36      	ldr	r3, [pc, #216]	@ (8001e64 <SystemInit+0x11c>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	4935      	ldr	r1, [pc, #212]	@ (8001e64 <SystemInit+0x11c>)
 8001d90:	4b35      	ldr	r3, [pc, #212]	@ (8001e68 <SystemInit+0x120>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d96:	4b32      	ldr	r3, [pc, #200]	@ (8001e60 <SystemInit+0x118>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d007      	beq.n	8001db2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001da2:	4b2f      	ldr	r3, [pc, #188]	@ (8001e60 <SystemInit+0x118>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f023 030f 	bic.w	r3, r3, #15
 8001daa:	4a2d      	ldr	r2, [pc, #180]	@ (8001e60 <SystemInit+0x118>)
 8001dac:	f043 0307 	orr.w	r3, r3, #7
 8001db0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001db2:	4b2c      	ldr	r3, [pc, #176]	@ (8001e64 <SystemInit+0x11c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001db8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e64 <SystemInit+0x11c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001dbe:	4b29      	ldr	r3, [pc, #164]	@ (8001e64 <SystemInit+0x11c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001dc4:	4b27      	ldr	r3, [pc, #156]	@ (8001e64 <SystemInit+0x11c>)
 8001dc6:	4a29      	ldr	r2, [pc, #164]	@ (8001e6c <SystemInit+0x124>)
 8001dc8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001dca:	4b26      	ldr	r3, [pc, #152]	@ (8001e64 <SystemInit+0x11c>)
 8001dcc:	4a28      	ldr	r2, [pc, #160]	@ (8001e70 <SystemInit+0x128>)
 8001dce:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001dd0:	4b24      	ldr	r3, [pc, #144]	@ (8001e64 <SystemInit+0x11c>)
 8001dd2:	4a28      	ldr	r2, [pc, #160]	@ (8001e74 <SystemInit+0x12c>)
 8001dd4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001dd6:	4b23      	ldr	r3, [pc, #140]	@ (8001e64 <SystemInit+0x11c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001ddc:	4b21      	ldr	r3, [pc, #132]	@ (8001e64 <SystemInit+0x11c>)
 8001dde:	4a25      	ldr	r2, [pc, #148]	@ (8001e74 <SystemInit+0x12c>)
 8001de0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001de2:	4b20      	ldr	r3, [pc, #128]	@ (8001e64 <SystemInit+0x11c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001de8:	4b1e      	ldr	r3, [pc, #120]	@ (8001e64 <SystemInit+0x11c>)
 8001dea:	4a22      	ldr	r2, [pc, #136]	@ (8001e74 <SystemInit+0x12c>)
 8001dec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001dee:	4b1d      	ldr	r3, [pc, #116]	@ (8001e64 <SystemInit+0x11c>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001df4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e64 <SystemInit+0x11c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a1a      	ldr	r2, [pc, #104]	@ (8001e64 <SystemInit+0x11c>)
 8001dfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dfe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e00:	4b18      	ldr	r3, [pc, #96]	@ (8001e64 <SystemInit+0x11c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001e06:	4b1c      	ldr	r3, [pc, #112]	@ (8001e78 <SystemInit+0x130>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001e7c <SystemInit+0x134>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e12:	d202      	bcs.n	8001e1a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001e14:	4b1a      	ldr	r3, [pc, #104]	@ (8001e80 <SystemInit+0x138>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001e1a:	4b12      	ldr	r3, [pc, #72]	@ (8001e64 <SystemInit+0x11c>)
 8001e1c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001e20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d113      	bne.n	8001e50 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001e28:	4b0e      	ldr	r3, [pc, #56]	@ (8001e64 <SystemInit+0x11c>)
 8001e2a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001e2e:	4a0d      	ldr	r2, [pc, #52]	@ (8001e64 <SystemInit+0x11c>)
 8001e30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e34:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001e38:	4b12      	ldr	r3, [pc, #72]	@ (8001e84 <SystemInit+0x13c>)
 8001e3a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001e3e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001e40:	4b08      	ldr	r3, [pc, #32]	@ (8001e64 <SystemInit+0x11c>)
 8001e42:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001e46:	4a07      	ldr	r2, [pc, #28]	@ (8001e64 <SystemInit+0x11c>)
 8001e48:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001e4c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	e000ed00 	.word	0xe000ed00
 8001e60:	52002000 	.word	0x52002000
 8001e64:	58024400 	.word	0x58024400
 8001e68:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e6c:	02020200 	.word	0x02020200
 8001e70:	01ff0000 	.word	0x01ff0000
 8001e74:	01010280 	.word	0x01010280
 8001e78:	5c001000 	.word	0x5c001000
 8001e7c:	ffff0000 	.word	0xffff0000
 8001e80:	51008108 	.word	0x51008108
 8001e84:	52004000 	.word	0x52004000

08001e88 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001e8c:	4b09      	ldr	r3, [pc, #36]	@ (8001eb4 <ExitRun0Mode+0x2c>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	4a08      	ldr	r2, [pc, #32]	@ (8001eb4 <ExitRun0Mode+0x2c>)
 8001e92:	f043 0302 	orr.w	r3, r3, #2
 8001e96:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001e98:	bf00      	nop
 8001e9a:	4b06      	ldr	r3, [pc, #24]	@ (8001eb4 <ExitRun0Mode+0x2c>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0f9      	beq.n	8001e9a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001ea6:	bf00      	nop
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	58024800 	.word	0x58024800

08001eb8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ebc:	4b22      	ldr	r3, [pc, #136]	@ (8001f48 <MX_USART1_UART_Init+0x90>)
 8001ebe:	4a23      	ldr	r2, [pc, #140]	@ (8001f4c <MX_USART1_UART_Init+0x94>)
 8001ec0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ec2:	4b21      	ldr	r3, [pc, #132]	@ (8001f48 <MX_USART1_UART_Init+0x90>)
 8001ec4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ec8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001eca:	4b1f      	ldr	r3, [pc, #124]	@ (8001f48 <MX_USART1_UART_Init+0x90>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f48 <MX_USART1_UART_Init+0x90>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ed6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f48 <MX_USART1_UART_Init+0x90>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001edc:	4b1a      	ldr	r3, [pc, #104]	@ (8001f48 <MX_USART1_UART_Init+0x90>)
 8001ede:	220c      	movs	r2, #12
 8001ee0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ee2:	4b19      	ldr	r3, [pc, #100]	@ (8001f48 <MX_USART1_UART_Init+0x90>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ee8:	4b17      	ldr	r3, [pc, #92]	@ (8001f48 <MX_USART1_UART_Init+0x90>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eee:	4b16      	ldr	r3, [pc, #88]	@ (8001f48 <MX_USART1_UART_Init+0x90>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ef4:	4b14      	ldr	r3, [pc, #80]	@ (8001f48 <MX_USART1_UART_Init+0x90>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001efa:	4b13      	ldr	r3, [pc, #76]	@ (8001f48 <MX_USART1_UART_Init+0x90>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f00:	4811      	ldr	r0, [pc, #68]	@ (8001f48 <MX_USART1_UART_Init+0x90>)
 8001f02:	f007 f885 	bl	8009010 <HAL_UART_Init>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001f0c:	f7ff fdf2 	bl	8001af4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f10:	2100      	movs	r1, #0
 8001f12:	480d      	ldr	r0, [pc, #52]	@ (8001f48 <MX_USART1_UART_Init+0x90>)
 8001f14:	f008 fb6c 	bl	800a5f0 <HAL_UARTEx_SetTxFifoThreshold>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001f1e:	f7ff fde9 	bl	8001af4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f22:	2100      	movs	r1, #0
 8001f24:	4808      	ldr	r0, [pc, #32]	@ (8001f48 <MX_USART1_UART_Init+0x90>)
 8001f26:	f008 fba1 	bl	800a66c <HAL_UARTEx_SetRxFifoThreshold>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001f30:	f7ff fde0 	bl	8001af4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001f34:	4804      	ldr	r0, [pc, #16]	@ (8001f48 <MX_USART1_UART_Init+0x90>)
 8001f36:	f008 fb22 	bl	800a57e <HAL_UARTEx_DisableFifoMode>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001f40:	f7ff fdd8 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	2400218c 	.word	0x2400218c
 8001f4c:	40011000 	.word	0x40011000

08001f50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b0ba      	sub	sp, #232	@ 0xe8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f68:	f107 0310 	add.w	r3, r7, #16
 8001f6c:	22c0      	movs	r2, #192	@ 0xc0
 8001f6e:	2100      	movs	r1, #0
 8001f70:	4618      	mov	r0, r3
 8001f72:	f008 fe9f 	bl	800acb4 <memset>
  if(uartHandle->Instance==USART1)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a3e      	ldr	r2, [pc, #248]	@ (8002074 <HAL_UART_MspInit+0x124>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d175      	bne.n	800206c <HAL_UART_MspInit+0x11c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f80:	f04f 0201 	mov.w	r2, #1
 8001f84:	f04f 0300 	mov.w	r3, #0
 8001f88:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f92:	f107 0310 	add.w	r3, r7, #16
 8001f96:	4618      	mov	r0, r3
 8001f98:	f005 fa0e 	bl	80073b8 <HAL_RCCEx_PeriphCLKConfig>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001fa2:	f7ff fda7 	bl	8001af4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fa6:	4b34      	ldr	r3, [pc, #208]	@ (8002078 <HAL_UART_MspInit+0x128>)
 8001fa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fac:	4a32      	ldr	r2, [pc, #200]	@ (8002078 <HAL_UART_MspInit+0x128>)
 8001fae:	f043 0310 	orr.w	r3, r3, #16
 8001fb2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001fb6:	4b30      	ldr	r3, [pc, #192]	@ (8002078 <HAL_UART_MspInit+0x128>)
 8001fb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fbc:	f003 0310 	and.w	r3, r3, #16
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc4:	4b2c      	ldr	r3, [pc, #176]	@ (8002078 <HAL_UART_MspInit+0x128>)
 8001fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fca:	4a2b      	ldr	r2, [pc, #172]	@ (8002078 <HAL_UART_MspInit+0x128>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fd4:	4b28      	ldr	r3, [pc, #160]	@ (8002078 <HAL_UART_MspInit+0x128>)
 8001fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	60bb      	str	r3, [r7, #8]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001fe2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001fe6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fea:	2302      	movs	r3, #2
 8001fec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ffc:	2307      	movs	r3, #7
 8001ffe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002002:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002006:	4619      	mov	r1, r3
 8002008:	481c      	ldr	r0, [pc, #112]	@ (800207c <HAL_UART_MspInit+0x12c>)
 800200a:	f003 fefb 	bl	8005e04 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 800200e:	4b1c      	ldr	r3, [pc, #112]	@ (8002080 <HAL_UART_MspInit+0x130>)
 8002010:	4a1c      	ldr	r2, [pc, #112]	@ (8002084 <HAL_UART_MspInit+0x134>)
 8002012:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002014:	4b1a      	ldr	r3, [pc, #104]	@ (8002080 <HAL_UART_MspInit+0x130>)
 8002016:	2229      	movs	r2, #41	@ 0x29
 8002018:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800201a:	4b19      	ldr	r3, [pc, #100]	@ (8002080 <HAL_UART_MspInit+0x130>)
 800201c:	2200      	movs	r2, #0
 800201e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002020:	4b17      	ldr	r3, [pc, #92]	@ (8002080 <HAL_UART_MspInit+0x130>)
 8002022:	2200      	movs	r2, #0
 8002024:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002026:	4b16      	ldr	r3, [pc, #88]	@ (8002080 <HAL_UART_MspInit+0x130>)
 8002028:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800202c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800202e:	4b14      	ldr	r3, [pc, #80]	@ (8002080 <HAL_UART_MspInit+0x130>)
 8002030:	2200      	movs	r2, #0
 8002032:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002034:	4b12      	ldr	r3, [pc, #72]	@ (8002080 <HAL_UART_MspInit+0x130>)
 8002036:	2200      	movs	r2, #0
 8002038:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800203a:	4b11      	ldr	r3, [pc, #68]	@ (8002080 <HAL_UART_MspInit+0x130>)
 800203c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002040:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002042:	4b0f      	ldr	r3, [pc, #60]	@ (8002080 <HAL_UART_MspInit+0x130>)
 8002044:	2200      	movs	r2, #0
 8002046:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002048:	4b0d      	ldr	r3, [pc, #52]	@ (8002080 <HAL_UART_MspInit+0x130>)
 800204a:	2200      	movs	r2, #0
 800204c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800204e:	480c      	ldr	r0, [pc, #48]	@ (8002080 <HAL_UART_MspInit+0x130>)
 8002050:	f000 fb4c 	bl	80026ec <HAL_DMA_Init>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 800205a:	f7ff fd4b 	bl	8001af4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a07      	ldr	r2, [pc, #28]	@ (8002080 <HAL_UART_MspInit+0x130>)
 8002062:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002066:	4a06      	ldr	r2, [pc, #24]	@ (8002080 <HAL_UART_MspInit+0x130>)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800206c:	bf00      	nop
 800206e:	37e8      	adds	r7, #232	@ 0xe8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40011000 	.word	0x40011000
 8002078:	58024400 	.word	0x58024400
 800207c:	58020000 	.word	0x58020000
 8002080:	24002220 	.word	0x24002220
 8002084:	40020010 	.word	0x40020010

08002088 <terminal_init>:

/* USER CODE BEGIN 1 */
uart_recv_t uart1_recv = {0, };

void terminal_init()
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
	if(HAL_UART_Receive_DMA(&huart1, uart1_recv.buf, sizeof(uart1_recv.buf)) != HAL_OK)
 800208c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002090:	4906      	ldr	r1, [pc, #24]	@ (80020ac <terminal_init+0x24>)
 8002092:	4807      	ldr	r0, [pc, #28]	@ (80020b0 <terminal_init+0x28>)
 8002094:	f007 f89a 	bl	80091cc <HAL_UART_Receive_DMA>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d004      	beq.n	80020a8 <terminal_init+0x20>
	{
		printr("fail to recv uart");
 800209e:	4805      	ldr	r0, [pc, #20]	@ (80020b4 <terminal_init+0x2c>)
 80020a0:	f008 fcca 	bl	800aa38 <puts>
		Error_Handler();
 80020a4:	f7ff fd26 	bl	8001af4 <Error_Handler>
	}
}
 80020a8:	bf00      	nop
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	24002298 	.word	0x24002298
 80020b0:	2400218c 	.word	0x2400218c
 80020b4:	0800bf88 	.word	0x0800bf88

080020b8 <__io_putchar>:

int __io_putchar(int ch)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
	uint8_t putchar = ch;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	73fb      	strb	r3, [r7, #15]
	if(HAL_UART_Transmit(&huart1, &putchar, sizeof(putchar), 10) != HAL_OK)
 80020c6:	f107 010f 	add.w	r1, r7, #15
 80020ca:	230a      	movs	r3, #10
 80020cc:	2201      	movs	r2, #1
 80020ce:	4806      	ldr	r0, [pc, #24]	@ (80020e8 <__io_putchar+0x30>)
 80020d0:	f006 ffee 	bl	80090b0 <HAL_UART_Transmit>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <__io_putchar+0x26>
	{
		Error_Handler();
 80020da:	f7ff fd0b 	bl	8001af4 <Error_Handler>
	}

	return ch;
 80020de:	687b      	ldr	r3, [r7, #4]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	2400218c 	.word	0x2400218c

080020ec <terminal_recv>:

static int terminal_recv(uint8_t *buf, size_t buf_size)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
	uint32_t recv_index = sizeof(uart1_recv.buf) - ((DMA_Stream_TypeDef *)huart1.hdmarx->Instance)->NDTR;
 80020f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002174 <terminal_recv+0x88>)
 80020f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8002104:	60bb      	str	r3, [r7, #8]
	int i = 0;
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]

	if(uart1_recv.read_index == recv_index)
 800210a:	4b1b      	ldr	r3, [pc, #108]	@ (8002178 <terminal_recv+0x8c>)
 800210c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002110:	68ba      	ldr	r2, [r7, #8]
 8002112:	429a      	cmp	r2, r3
 8002114:	d102      	bne.n	800211c <terminal_recv+0x30>
	{
		return -1;
 8002116:	f04f 33ff 	mov.w	r3, #4294967295
 800211a:	e024      	b.n	8002166 <terminal_recv+0x7a>
	}

	for(i = 0; i < buf_size; i++)
 800211c:	2300      	movs	r3, #0
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	e019      	b.n	8002156 <terminal_recv+0x6a>
	{
		buf[i] = uart1_recv.buf[uart1_recv.read_index];
 8002122:	4b15      	ldr	r3, [pc, #84]	@ (8002178 <terminal_recv+0x8c>)
 8002124:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	440b      	add	r3, r1
 800212e:	4912      	ldr	r1, [pc, #72]	@ (8002178 <terminal_recv+0x8c>)
 8002130:	5c8a      	ldrb	r2, [r1, r2]
 8002132:	701a      	strb	r2, [r3, #0]
		uart1_recv.read_index = (uart1_recv.read_index + 1) % sizeof(uart1_recv.buf);
 8002134:	4b10      	ldr	r3, [pc, #64]	@ (8002178 <terminal_recv+0x8c>)
 8002136:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800213a:	3301      	adds	r3, #1
 800213c:	b2db      	uxtb	r3, r3
 800213e:	4a0e      	ldr	r2, [pc, #56]	@ (8002178 <terminal_recv+0x8c>)
 8002140:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
		if(uart1_recv.read_index == recv_index)
 8002144:	4b0c      	ldr	r3, [pc, #48]	@ (8002178 <terminal_recv+0x8c>)
 8002146:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	429a      	cmp	r2, r3
 800214e:	d007      	beq.n	8002160 <terminal_recv+0x74>
	for(i = 0; i < buf_size; i++)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	3301      	adds	r3, #1
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	d8e1      	bhi.n	8002122 <terminal_recv+0x36>
 800215e:	e000      	b.n	8002162 <terminal_recv+0x76>
		{
			break;
 8002160:	bf00      	nop
		}
	}

	return i + 1;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	3301      	adds	r3, #1
}
 8002166:	4618      	mov	r0, r3
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	2400218c 	.word	0x2400218c
 8002178:	24002298 	.word	0x24002298

0800217c <uart1_work>:

void uart1_work()
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b0c0      	sub	sp, #256	@ 0x100
 8002180:	af00      	add	r7, sp, #0
	static user_timer_t user_timer =
	{
		.timer = 0,
		.condition = 10
	};
	uint8_t recv_buf[UART_RECV_MAX] = {0, };
 8002182:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8002186:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800218a:	4618      	mov	r0, r3
 800218c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002190:	461a      	mov	r2, r3
 8002192:	2100      	movs	r1, #0
 8002194:	f008 fd8e 	bl	800acb4 <memset>

	check_timer(&user_timer)
 8002198:	f000 f8d6 	bl	8002348 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	4b0f      	ldr	r3, [pc, #60]	@ (80021dc <uart1_work+0x60>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	1ad2      	subs	r2, r2, r3
 80021a4:	4b0d      	ldr	r3, [pc, #52]	@ (80021dc <uart1_work+0x60>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d912      	bls.n	80021d2 <uart1_work+0x56>
	{
		user_timer.timer = HAL_GetTick();
 80021ac:	f000 f8cc 	bl	8002348 <HAL_GetTick>
 80021b0:	4603      	mov	r3, r0
 80021b2:	4a0a      	ldr	r2, [pc, #40]	@ (80021dc <uart1_work+0x60>)
 80021b4:	6013      	str	r3, [r2, #0]
		if(terminal_recv(recv_buf, sizeof(recv_buf)) > 0)
 80021b6:	463b      	mov	r3, r7
 80021b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff ff95 	bl	80020ec <terminal_recv>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	dd04      	ble.n	80021d2 <uart1_work+0x56>
		{
			printb("recv : %s", recv_buf);
 80021c8:	463b      	mov	r3, r7
 80021ca:	4619      	mov	r1, r3
 80021cc:	4804      	ldr	r0, [pc, #16]	@ (80021e0 <uart1_work+0x64>)
 80021ce:	f008 fbcb 	bl	800a968 <iprintf>
		}
	}
}
 80021d2:	bf00      	nop
 80021d4:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	24000018 	.word	0x24000018
 80021e0:	0800bfac 	.word	0x0800bfac

080021e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80021e4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002220 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80021e8:	f7ff fe4e 	bl	8001e88 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80021ec:	f7ff fdac 	bl	8001d48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021f0:	480c      	ldr	r0, [pc, #48]	@ (8002224 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021f2:	490d      	ldr	r1, [pc, #52]	@ (8002228 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021f4:	4a0d      	ldr	r2, [pc, #52]	@ (800222c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021f8:	e002      	b.n	8002200 <LoopCopyDataInit>

080021fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021fe:	3304      	adds	r3, #4

08002200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002204:	d3f9      	bcc.n	80021fa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002206:	4a0a      	ldr	r2, [pc, #40]	@ (8002230 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002208:	4c0a      	ldr	r4, [pc, #40]	@ (8002234 <LoopFillZerobss+0x22>)
  movs r3, #0
 800220a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800220c:	e001      	b.n	8002212 <LoopFillZerobss>

0800220e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800220e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002210:	3204      	adds	r2, #4

08002212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002214:	d3fb      	bcc.n	800220e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002216:	f008 fda1 	bl	800ad5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800221a:	f7ff fba8 	bl	800196e <main>
  bx  lr
 800221e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002220:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002224:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002228:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 800222c:	0800c134 	.word	0x0800c134
  ldr r2, =_sbss
 8002230:	24000084 	.word	0x24000084
  ldr r4, =_ebss
 8002234:	240024ec 	.word	0x240024ec

08002238 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002238:	e7fe      	b.n	8002238 <ADC3_IRQHandler>
	...

0800223c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002242:	2003      	movs	r0, #3
 8002244:	f000 f98c 	bl	8002560 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002248:	f004 fee0 	bl	800700c <HAL_RCC_GetSysClockFreq>
 800224c:	4602      	mov	r2, r0
 800224e:	4b15      	ldr	r3, [pc, #84]	@ (80022a4 <HAL_Init+0x68>)
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	0a1b      	lsrs	r3, r3, #8
 8002254:	f003 030f 	and.w	r3, r3, #15
 8002258:	4913      	ldr	r1, [pc, #76]	@ (80022a8 <HAL_Init+0x6c>)
 800225a:	5ccb      	ldrb	r3, [r1, r3]
 800225c:	f003 031f 	and.w	r3, r3, #31
 8002260:	fa22 f303 	lsr.w	r3, r2, r3
 8002264:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002266:	4b0f      	ldr	r3, [pc, #60]	@ (80022a4 <HAL_Init+0x68>)
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	4a0e      	ldr	r2, [pc, #56]	@ (80022a8 <HAL_Init+0x6c>)
 8002270:	5cd3      	ldrb	r3, [r2, r3]
 8002272:	f003 031f 	and.w	r3, r3, #31
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	fa22 f303 	lsr.w	r3, r2, r3
 800227c:	4a0b      	ldr	r2, [pc, #44]	@ (80022ac <HAL_Init+0x70>)
 800227e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002280:	4a0b      	ldr	r2, [pc, #44]	@ (80022b0 <HAL_Init+0x74>)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002286:	200f      	movs	r0, #15
 8002288:	f000 f814 	bl	80022b4 <HAL_InitTick>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e002      	b.n	800229c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002296:	f7ff fc33 	bl	8001b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	58024400 	.word	0x58024400
 80022a8:	0800c064 	.word	0x0800c064
 80022ac:	24000014 	.word	0x24000014
 80022b0:	24000010 	.word	0x24000010

080022b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80022bc:	4b15      	ldr	r3, [pc, #84]	@ (8002314 <HAL_InitTick+0x60>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e021      	b.n	800230c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80022c8:	4b13      	ldr	r3, [pc, #76]	@ (8002318 <HAL_InitTick+0x64>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4b11      	ldr	r3, [pc, #68]	@ (8002314 <HAL_InitTick+0x60>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	4619      	mov	r1, r3
 80022d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022da:	fbb2 f3f3 	udiv	r3, r2, r3
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 f97f 	bl	80025e2 <HAL_SYSTICK_Config>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e00e      	b.n	800230c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b0f      	cmp	r3, #15
 80022f2:	d80a      	bhi.n	800230a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022f4:	2200      	movs	r2, #0
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	f04f 30ff 	mov.w	r0, #4294967295
 80022fc:	f000 f93b 	bl	8002576 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002300:	4a06      	ldr	r2, [pc, #24]	@ (800231c <HAL_InitTick+0x68>)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
 8002308:	e000      	b.n	800230c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
}
 800230c:	4618      	mov	r0, r3
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	24000024 	.word	0x24000024
 8002318:	24000010 	.word	0x24000010
 800231c:	24000020 	.word	0x24000020

08002320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002324:	4b06      	ldr	r3, [pc, #24]	@ (8002340 <HAL_IncTick+0x20>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	4b06      	ldr	r3, [pc, #24]	@ (8002344 <HAL_IncTick+0x24>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4413      	add	r3, r2
 8002330:	4a04      	ldr	r2, [pc, #16]	@ (8002344 <HAL_IncTick+0x24>)
 8002332:	6013      	str	r3, [r2, #0]
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	24000024 	.word	0x24000024
 8002344:	2400239c 	.word	0x2400239c

08002348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return uwTick;
 800234c:	4b03      	ldr	r3, [pc, #12]	@ (800235c <HAL_GetTick+0x14>)
 800234e:	681b      	ldr	r3, [r3, #0]
}
 8002350:	4618      	mov	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	2400239c 	.word	0x2400239c

08002360 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002364:	4b03      	ldr	r3, [pc, #12]	@ (8002374 <HAL_GetREVID+0x14>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	0c1b      	lsrs	r3, r3, #16
}
 800236a:	4618      	mov	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	5c001000 	.word	0x5c001000

08002378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002388:	4b0b      	ldr	r3, [pc, #44]	@ (80023b8 <__NVIC_SetPriorityGrouping+0x40>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002394:	4013      	ands	r3, r2
 8002396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80023a0:	4b06      	ldr	r3, [pc, #24]	@ (80023bc <__NVIC_SetPriorityGrouping+0x44>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023a6:	4a04      	ldr	r2, [pc, #16]	@ (80023b8 <__NVIC_SetPriorityGrouping+0x40>)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	60d3      	str	r3, [r2, #12]
}
 80023ac:	bf00      	nop
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000ed00 	.word	0xe000ed00
 80023bc:	05fa0000 	.word	0x05fa0000

080023c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c4:	4b04      	ldr	r3, [pc, #16]	@ (80023d8 <__NVIC_GetPriorityGrouping+0x18>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	0a1b      	lsrs	r3, r3, #8
 80023ca:	f003 0307 	and.w	r3, r3, #7
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	db0b      	blt.n	8002406 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ee:	88fb      	ldrh	r3, [r7, #6]
 80023f0:	f003 021f 	and.w	r2, r3, #31
 80023f4:	4907      	ldr	r1, [pc, #28]	@ (8002414 <__NVIC_EnableIRQ+0x38>)
 80023f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023fa:	095b      	lsrs	r3, r3, #5
 80023fc:	2001      	movs	r0, #1
 80023fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	e000e100 	.word	0xe000e100

08002418 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002422:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002426:	2b00      	cmp	r3, #0
 8002428:	db12      	blt.n	8002450 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800242a:	88fb      	ldrh	r3, [r7, #6]
 800242c:	f003 021f 	and.w	r2, r3, #31
 8002430:	490a      	ldr	r1, [pc, #40]	@ (800245c <__NVIC_DisableIRQ+0x44>)
 8002432:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002436:	095b      	lsrs	r3, r3, #5
 8002438:	2001      	movs	r0, #1
 800243a:	fa00 f202 	lsl.w	r2, r0, r2
 800243e:	3320      	adds	r3, #32
 8002440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002444:	f3bf 8f4f 	dsb	sy
}
 8002448:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800244a:	f3bf 8f6f 	isb	sy
}
 800244e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	e000e100 	.word	0xe000e100

08002460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	6039      	str	r1, [r7, #0]
 800246a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800246c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002470:	2b00      	cmp	r3, #0
 8002472:	db0a      	blt.n	800248a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	b2da      	uxtb	r2, r3
 8002478:	490c      	ldr	r1, [pc, #48]	@ (80024ac <__NVIC_SetPriority+0x4c>)
 800247a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800247e:	0112      	lsls	r2, r2, #4
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	440b      	add	r3, r1
 8002484:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002488:	e00a      	b.n	80024a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	b2da      	uxtb	r2, r3
 800248e:	4908      	ldr	r1, [pc, #32]	@ (80024b0 <__NVIC_SetPriority+0x50>)
 8002490:	88fb      	ldrh	r3, [r7, #6]
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	3b04      	subs	r3, #4
 8002498:	0112      	lsls	r2, r2, #4
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	440b      	add	r3, r1
 800249e:	761a      	strb	r2, [r3, #24]
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	e000e100 	.word	0xe000e100
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b089      	sub	sp, #36	@ 0x24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f1c3 0307 	rsb	r3, r3, #7
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	bf28      	it	cs
 80024d2:	2304      	movcs	r3, #4
 80024d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3304      	adds	r3, #4
 80024da:	2b06      	cmp	r3, #6
 80024dc:	d902      	bls.n	80024e4 <NVIC_EncodePriority+0x30>
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3b03      	subs	r3, #3
 80024e2:	e000      	b.n	80024e6 <NVIC_EncodePriority+0x32>
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e8:	f04f 32ff 	mov.w	r2, #4294967295
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43da      	mvns	r2, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	401a      	ands	r2, r3
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	fa01 f303 	lsl.w	r3, r1, r3
 8002506:	43d9      	mvns	r1, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800250c:	4313      	orrs	r3, r2
         );
}
 800250e:	4618      	mov	r0, r3
 8002510:	3724      	adds	r7, #36	@ 0x24
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
	...

0800251c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3b01      	subs	r3, #1
 8002528:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800252c:	d301      	bcc.n	8002532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800252e:	2301      	movs	r3, #1
 8002530:	e00f      	b.n	8002552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002532:	4a0a      	ldr	r2, [pc, #40]	@ (800255c <SysTick_Config+0x40>)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3b01      	subs	r3, #1
 8002538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800253a:	210f      	movs	r1, #15
 800253c:	f04f 30ff 	mov.w	r0, #4294967295
 8002540:	f7ff ff8e 	bl	8002460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002544:	4b05      	ldr	r3, [pc, #20]	@ (800255c <SysTick_Config+0x40>)
 8002546:	2200      	movs	r2, #0
 8002548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800254a:	4b04      	ldr	r3, [pc, #16]	@ (800255c <SysTick_Config+0x40>)
 800254c:	2207      	movs	r2, #7
 800254e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	e000e010 	.word	0xe000e010

08002560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7ff ff05 	bl	8002378 <__NVIC_SetPriorityGrouping>
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b086      	sub	sp, #24
 800257a:	af00      	add	r7, sp, #0
 800257c:	4603      	mov	r3, r0
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	607a      	str	r2, [r7, #4]
 8002582:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002584:	f7ff ff1c 	bl	80023c0 <__NVIC_GetPriorityGrouping>
 8002588:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	68b9      	ldr	r1, [r7, #8]
 800258e:	6978      	ldr	r0, [r7, #20]
 8002590:	f7ff ff90 	bl	80024b4 <NVIC_EncodePriority>
 8002594:	4602      	mov	r2, r0
 8002596:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800259a:	4611      	mov	r1, r2
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff ff5f 	bl	8002460 <__NVIC_SetPriority>
}
 80025a2:	bf00      	nop
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	4603      	mov	r3, r0
 80025b2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff ff0f 	bl	80023dc <__NVIC_EnableIRQ>
}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b082      	sub	sp, #8
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	4603      	mov	r3, r0
 80025ce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80025d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff ff1f 	bl	8002418 <__NVIC_DisableIRQ>
}
 80025da:	bf00      	nop
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7ff ff96 	bl	800251c <SysTick_Config>
 80025f0:	4603      	mov	r3, r0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002600:	f3bf 8f5f 	dmb	sy
}
 8002604:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002606:	4b07      	ldr	r3, [pc, #28]	@ (8002624 <HAL_MPU_Disable+0x28>)
 8002608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260a:	4a06      	ldr	r2, [pc, #24]	@ (8002624 <HAL_MPU_Disable+0x28>)
 800260c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002610:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002612:	4b05      	ldr	r3, [pc, #20]	@ (8002628 <HAL_MPU_Disable+0x2c>)
 8002614:	2200      	movs	r2, #0
 8002616:	605a      	str	r2, [r3, #4]
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	e000ed00 	.word	0xe000ed00
 8002628:	e000ed90 	.word	0xe000ed90

0800262c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002634:	4a0b      	ldr	r2, [pc, #44]	@ (8002664 <HAL_MPU_Enable+0x38>)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800263e:	4b0a      	ldr	r3, [pc, #40]	@ (8002668 <HAL_MPU_Enable+0x3c>)
 8002640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002642:	4a09      	ldr	r2, [pc, #36]	@ (8002668 <HAL_MPU_Enable+0x3c>)
 8002644:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002648:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800264a:	f3bf 8f4f 	dsb	sy
}
 800264e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002650:	f3bf 8f6f 	isb	sy
}
 8002654:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	e000ed90 	.word	0xe000ed90
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	785a      	ldrb	r2, [r3, #1]
 8002678:	4b1b      	ldr	r3, [pc, #108]	@ (80026e8 <HAL_MPU_ConfigRegion+0x7c>)
 800267a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800267c:	4b1a      	ldr	r3, [pc, #104]	@ (80026e8 <HAL_MPU_ConfigRegion+0x7c>)
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	4a19      	ldr	r2, [pc, #100]	@ (80026e8 <HAL_MPU_ConfigRegion+0x7c>)
 8002682:	f023 0301 	bic.w	r3, r3, #1
 8002686:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002688:	4a17      	ldr	r2, [pc, #92]	@ (80026e8 <HAL_MPU_ConfigRegion+0x7c>)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	7b1b      	ldrb	r3, [r3, #12]
 8002694:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	7adb      	ldrb	r3, [r3, #11]
 800269a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800269c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	7a9b      	ldrb	r3, [r3, #10]
 80026a2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80026a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	7b5b      	ldrb	r3, [r3, #13]
 80026aa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80026ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	7b9b      	ldrb	r3, [r3, #14]
 80026b2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80026b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	7bdb      	ldrb	r3, [r3, #15]
 80026ba:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80026bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	7a5b      	ldrb	r3, [r3, #9]
 80026c2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80026c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	7a1b      	ldrb	r3, [r3, #8]
 80026ca:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80026cc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	7812      	ldrb	r2, [r2, #0]
 80026d2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80026d4:	4a04      	ldr	r2, [pc, #16]	@ (80026e8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80026d6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80026d8:	6113      	str	r3, [r2, #16]
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	e000ed90 	.word	0xe000ed90

080026ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80026f4:	f7ff fe28 	bl	8002348 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e316      	b.n	8002d32 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a66      	ldr	r2, [pc, #408]	@ (80028a4 <HAL_DMA_Init+0x1b8>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d04a      	beq.n	80027a4 <HAL_DMA_Init+0xb8>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a65      	ldr	r2, [pc, #404]	@ (80028a8 <HAL_DMA_Init+0x1bc>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d045      	beq.n	80027a4 <HAL_DMA_Init+0xb8>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a63      	ldr	r2, [pc, #396]	@ (80028ac <HAL_DMA_Init+0x1c0>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d040      	beq.n	80027a4 <HAL_DMA_Init+0xb8>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a62      	ldr	r2, [pc, #392]	@ (80028b0 <HAL_DMA_Init+0x1c4>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d03b      	beq.n	80027a4 <HAL_DMA_Init+0xb8>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a60      	ldr	r2, [pc, #384]	@ (80028b4 <HAL_DMA_Init+0x1c8>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d036      	beq.n	80027a4 <HAL_DMA_Init+0xb8>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a5f      	ldr	r2, [pc, #380]	@ (80028b8 <HAL_DMA_Init+0x1cc>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d031      	beq.n	80027a4 <HAL_DMA_Init+0xb8>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a5d      	ldr	r2, [pc, #372]	@ (80028bc <HAL_DMA_Init+0x1d0>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d02c      	beq.n	80027a4 <HAL_DMA_Init+0xb8>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a5c      	ldr	r2, [pc, #368]	@ (80028c0 <HAL_DMA_Init+0x1d4>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d027      	beq.n	80027a4 <HAL_DMA_Init+0xb8>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a5a      	ldr	r2, [pc, #360]	@ (80028c4 <HAL_DMA_Init+0x1d8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d022      	beq.n	80027a4 <HAL_DMA_Init+0xb8>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a59      	ldr	r2, [pc, #356]	@ (80028c8 <HAL_DMA_Init+0x1dc>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d01d      	beq.n	80027a4 <HAL_DMA_Init+0xb8>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a57      	ldr	r2, [pc, #348]	@ (80028cc <HAL_DMA_Init+0x1e0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d018      	beq.n	80027a4 <HAL_DMA_Init+0xb8>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a56      	ldr	r2, [pc, #344]	@ (80028d0 <HAL_DMA_Init+0x1e4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d013      	beq.n	80027a4 <HAL_DMA_Init+0xb8>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a54      	ldr	r2, [pc, #336]	@ (80028d4 <HAL_DMA_Init+0x1e8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d00e      	beq.n	80027a4 <HAL_DMA_Init+0xb8>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a53      	ldr	r2, [pc, #332]	@ (80028d8 <HAL_DMA_Init+0x1ec>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d009      	beq.n	80027a4 <HAL_DMA_Init+0xb8>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a51      	ldr	r2, [pc, #324]	@ (80028dc <HAL_DMA_Init+0x1f0>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d004      	beq.n	80027a4 <HAL_DMA_Init+0xb8>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a50      	ldr	r2, [pc, #320]	@ (80028e0 <HAL_DMA_Init+0x1f4>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d101      	bne.n	80027a8 <HAL_DMA_Init+0xbc>
 80027a4:	2301      	movs	r3, #1
 80027a6:	e000      	b.n	80027aa <HAL_DMA_Init+0xbe>
 80027a8:	2300      	movs	r3, #0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 813b 	beq.w	8002a26 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2202      	movs	r2, #2
 80027b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a37      	ldr	r2, [pc, #220]	@ (80028a4 <HAL_DMA_Init+0x1b8>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d04a      	beq.n	8002860 <HAL_DMA_Init+0x174>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a36      	ldr	r2, [pc, #216]	@ (80028a8 <HAL_DMA_Init+0x1bc>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d045      	beq.n	8002860 <HAL_DMA_Init+0x174>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a34      	ldr	r2, [pc, #208]	@ (80028ac <HAL_DMA_Init+0x1c0>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d040      	beq.n	8002860 <HAL_DMA_Init+0x174>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a33      	ldr	r2, [pc, #204]	@ (80028b0 <HAL_DMA_Init+0x1c4>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d03b      	beq.n	8002860 <HAL_DMA_Init+0x174>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a31      	ldr	r2, [pc, #196]	@ (80028b4 <HAL_DMA_Init+0x1c8>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d036      	beq.n	8002860 <HAL_DMA_Init+0x174>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a30      	ldr	r2, [pc, #192]	@ (80028b8 <HAL_DMA_Init+0x1cc>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d031      	beq.n	8002860 <HAL_DMA_Init+0x174>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a2e      	ldr	r2, [pc, #184]	@ (80028bc <HAL_DMA_Init+0x1d0>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d02c      	beq.n	8002860 <HAL_DMA_Init+0x174>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a2d      	ldr	r2, [pc, #180]	@ (80028c0 <HAL_DMA_Init+0x1d4>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d027      	beq.n	8002860 <HAL_DMA_Init+0x174>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a2b      	ldr	r2, [pc, #172]	@ (80028c4 <HAL_DMA_Init+0x1d8>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d022      	beq.n	8002860 <HAL_DMA_Init+0x174>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a2a      	ldr	r2, [pc, #168]	@ (80028c8 <HAL_DMA_Init+0x1dc>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d01d      	beq.n	8002860 <HAL_DMA_Init+0x174>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a28      	ldr	r2, [pc, #160]	@ (80028cc <HAL_DMA_Init+0x1e0>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d018      	beq.n	8002860 <HAL_DMA_Init+0x174>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a27      	ldr	r2, [pc, #156]	@ (80028d0 <HAL_DMA_Init+0x1e4>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d013      	beq.n	8002860 <HAL_DMA_Init+0x174>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a25      	ldr	r2, [pc, #148]	@ (80028d4 <HAL_DMA_Init+0x1e8>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d00e      	beq.n	8002860 <HAL_DMA_Init+0x174>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a24      	ldr	r2, [pc, #144]	@ (80028d8 <HAL_DMA_Init+0x1ec>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d009      	beq.n	8002860 <HAL_DMA_Init+0x174>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a22      	ldr	r2, [pc, #136]	@ (80028dc <HAL_DMA_Init+0x1f0>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d004      	beq.n	8002860 <HAL_DMA_Init+0x174>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a21      	ldr	r2, [pc, #132]	@ (80028e0 <HAL_DMA_Init+0x1f4>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d108      	bne.n	8002872 <HAL_DMA_Init+0x186>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0201 	bic.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	e007      	b.n	8002882 <HAL_DMA_Init+0x196>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0201 	bic.w	r2, r2, #1
 8002880:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002882:	e02f      	b.n	80028e4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002884:	f7ff fd60 	bl	8002348 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b05      	cmp	r3, #5
 8002890:	d928      	bls.n	80028e4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2220      	movs	r2, #32
 8002896:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2203      	movs	r2, #3
 800289c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e246      	b.n	8002d32 <HAL_DMA_Init+0x646>
 80028a4:	40020010 	.word	0x40020010
 80028a8:	40020028 	.word	0x40020028
 80028ac:	40020040 	.word	0x40020040
 80028b0:	40020058 	.word	0x40020058
 80028b4:	40020070 	.word	0x40020070
 80028b8:	40020088 	.word	0x40020088
 80028bc:	400200a0 	.word	0x400200a0
 80028c0:	400200b8 	.word	0x400200b8
 80028c4:	40020410 	.word	0x40020410
 80028c8:	40020428 	.word	0x40020428
 80028cc:	40020440 	.word	0x40020440
 80028d0:	40020458 	.word	0x40020458
 80028d4:	40020470 	.word	0x40020470
 80028d8:	40020488 	.word	0x40020488
 80028dc:	400204a0 	.word	0x400204a0
 80028e0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1c8      	bne.n	8002884 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	4b83      	ldr	r3, [pc, #524]	@ (8002b0c <HAL_DMA_Init+0x420>)
 80028fe:	4013      	ands	r3, r2
 8002900:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800290a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002916:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002922:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4313      	orrs	r3, r2
 800292e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002934:	2b04      	cmp	r3, #4
 8002936:	d107      	bne.n	8002948 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002940:	4313      	orrs	r3, r2
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	4313      	orrs	r3, r2
 8002946:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002948:	4b71      	ldr	r3, [pc, #452]	@ (8002b10 <HAL_DMA_Init+0x424>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	4b71      	ldr	r3, [pc, #452]	@ (8002b14 <HAL_DMA_Init+0x428>)
 800294e:	4013      	ands	r3, r2
 8002950:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002954:	d328      	bcc.n	80029a8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b28      	cmp	r3, #40	@ 0x28
 800295c:	d903      	bls.n	8002966 <HAL_DMA_Init+0x27a>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b2e      	cmp	r3, #46	@ 0x2e
 8002964:	d917      	bls.n	8002996 <HAL_DMA_Init+0x2aa>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b3e      	cmp	r3, #62	@ 0x3e
 800296c:	d903      	bls.n	8002976 <HAL_DMA_Init+0x28a>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b42      	cmp	r3, #66	@ 0x42
 8002974:	d90f      	bls.n	8002996 <HAL_DMA_Init+0x2aa>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2b46      	cmp	r3, #70	@ 0x46
 800297c:	d903      	bls.n	8002986 <HAL_DMA_Init+0x29a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b48      	cmp	r3, #72	@ 0x48
 8002984:	d907      	bls.n	8002996 <HAL_DMA_Init+0x2aa>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b4e      	cmp	r3, #78	@ 0x4e
 800298c:	d905      	bls.n	800299a <HAL_DMA_Init+0x2ae>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b52      	cmp	r3, #82	@ 0x52
 8002994:	d801      	bhi.n	800299a <HAL_DMA_Init+0x2ae>
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <HAL_DMA_Init+0x2b0>
 800299a:	2300      	movs	r3, #0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029a6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	f023 0307 	bic.w	r3, r3, #7
 80029be:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d117      	bne.n	8002a02 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	4313      	orrs	r3, r2
 80029da:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00e      	beq.n	8002a02 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f001 fdcf 	bl	8004588 <DMA_CheckFifoParam>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d008      	beq.n	8002a02 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2240      	movs	r2, #64	@ 0x40
 80029f4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e197      	b.n	8002d32 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f001 fd0a 	bl	8004424 <DMA_CalcBaseAndBitshift>
 8002a10:	4603      	mov	r3, r0
 8002a12:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a18:	f003 031f 	and.w	r3, r3, #31
 8002a1c:	223f      	movs	r2, #63	@ 0x3f
 8002a1e:	409a      	lsls	r2, r3
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	e0cd      	b.n	8002bc2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a3b      	ldr	r2, [pc, #236]	@ (8002b18 <HAL_DMA_Init+0x42c>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d022      	beq.n	8002a76 <HAL_DMA_Init+0x38a>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a39      	ldr	r2, [pc, #228]	@ (8002b1c <HAL_DMA_Init+0x430>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d01d      	beq.n	8002a76 <HAL_DMA_Init+0x38a>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a38      	ldr	r2, [pc, #224]	@ (8002b20 <HAL_DMA_Init+0x434>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d018      	beq.n	8002a76 <HAL_DMA_Init+0x38a>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a36      	ldr	r2, [pc, #216]	@ (8002b24 <HAL_DMA_Init+0x438>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d013      	beq.n	8002a76 <HAL_DMA_Init+0x38a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a35      	ldr	r2, [pc, #212]	@ (8002b28 <HAL_DMA_Init+0x43c>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d00e      	beq.n	8002a76 <HAL_DMA_Init+0x38a>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a33      	ldr	r2, [pc, #204]	@ (8002b2c <HAL_DMA_Init+0x440>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d009      	beq.n	8002a76 <HAL_DMA_Init+0x38a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a32      	ldr	r2, [pc, #200]	@ (8002b30 <HAL_DMA_Init+0x444>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d004      	beq.n	8002a76 <HAL_DMA_Init+0x38a>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a30      	ldr	r2, [pc, #192]	@ (8002b34 <HAL_DMA_Init+0x448>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d101      	bne.n	8002a7a <HAL_DMA_Init+0x38e>
 8002a76:	2301      	movs	r3, #1
 8002a78:	e000      	b.n	8002a7c <HAL_DMA_Init+0x390>
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 8097 	beq.w	8002bb0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a24      	ldr	r2, [pc, #144]	@ (8002b18 <HAL_DMA_Init+0x42c>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d021      	beq.n	8002ad0 <HAL_DMA_Init+0x3e4>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a22      	ldr	r2, [pc, #136]	@ (8002b1c <HAL_DMA_Init+0x430>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d01c      	beq.n	8002ad0 <HAL_DMA_Init+0x3e4>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a21      	ldr	r2, [pc, #132]	@ (8002b20 <HAL_DMA_Init+0x434>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d017      	beq.n	8002ad0 <HAL_DMA_Init+0x3e4>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a1f      	ldr	r2, [pc, #124]	@ (8002b24 <HAL_DMA_Init+0x438>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d012      	beq.n	8002ad0 <HAL_DMA_Init+0x3e4>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a1e      	ldr	r2, [pc, #120]	@ (8002b28 <HAL_DMA_Init+0x43c>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d00d      	beq.n	8002ad0 <HAL_DMA_Init+0x3e4>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a1c      	ldr	r2, [pc, #112]	@ (8002b2c <HAL_DMA_Init+0x440>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d008      	beq.n	8002ad0 <HAL_DMA_Init+0x3e4>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a1b      	ldr	r2, [pc, #108]	@ (8002b30 <HAL_DMA_Init+0x444>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d003      	beq.n	8002ad0 <HAL_DMA_Init+0x3e4>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a19      	ldr	r2, [pc, #100]	@ (8002b34 <HAL_DMA_Init+0x448>)
 8002ace:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	4b13      	ldr	r3, [pc, #76]	@ (8002b38 <HAL_DMA_Init+0x44c>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	2b40      	cmp	r3, #64	@ 0x40
 8002af6:	d021      	beq.n	8002b3c <HAL_DMA_Init+0x450>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	2b80      	cmp	r3, #128	@ 0x80
 8002afe:	d102      	bne.n	8002b06 <HAL_DMA_Init+0x41a>
 8002b00:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b04:	e01b      	b.n	8002b3e <HAL_DMA_Init+0x452>
 8002b06:	2300      	movs	r3, #0
 8002b08:	e019      	b.n	8002b3e <HAL_DMA_Init+0x452>
 8002b0a:	bf00      	nop
 8002b0c:	fe10803f 	.word	0xfe10803f
 8002b10:	5c001000 	.word	0x5c001000
 8002b14:	ffff0000 	.word	0xffff0000
 8002b18:	58025408 	.word	0x58025408
 8002b1c:	5802541c 	.word	0x5802541c
 8002b20:	58025430 	.word	0x58025430
 8002b24:	58025444 	.word	0x58025444
 8002b28:	58025458 	.word	0x58025458
 8002b2c:	5802546c 	.word	0x5802546c
 8002b30:	58025480 	.word	0x58025480
 8002b34:	58025494 	.word	0x58025494
 8002b38:	fffe000f 	.word	0xfffe000f
 8002b3c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	68d2      	ldr	r2, [r2, #12]
 8002b42:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002b54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002b5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002b64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002b6c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	461a      	mov	r2, r3
 8002b82:	4b6e      	ldr	r3, [pc, #440]	@ (8002d3c <HAL_DMA_Init+0x650>)
 8002b84:	4413      	add	r3, r2
 8002b86:	4a6e      	ldr	r2, [pc, #440]	@ (8002d40 <HAL_DMA_Init+0x654>)
 8002b88:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8c:	091b      	lsrs	r3, r3, #4
 8002b8e:	009a      	lsls	r2, r3, #2
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f001 fc45 	bl	8004424 <DMA_CalcBaseAndBitshift>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba2:	f003 031f 	and.w	r3, r3, #31
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	409a      	lsls	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	e008      	b.n	8002bc2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2240      	movs	r2, #64	@ 0x40
 8002bb4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2203      	movs	r2, #3
 8002bba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e0b7      	b.n	8002d32 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a5f      	ldr	r2, [pc, #380]	@ (8002d44 <HAL_DMA_Init+0x658>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d072      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a5d      	ldr	r2, [pc, #372]	@ (8002d48 <HAL_DMA_Init+0x65c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d06d      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a5c      	ldr	r2, [pc, #368]	@ (8002d4c <HAL_DMA_Init+0x660>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d068      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a5a      	ldr	r2, [pc, #360]	@ (8002d50 <HAL_DMA_Init+0x664>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d063      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a59      	ldr	r2, [pc, #356]	@ (8002d54 <HAL_DMA_Init+0x668>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d05e      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a57      	ldr	r2, [pc, #348]	@ (8002d58 <HAL_DMA_Init+0x66c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d059      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a56      	ldr	r2, [pc, #344]	@ (8002d5c <HAL_DMA_Init+0x670>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d054      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a54      	ldr	r2, [pc, #336]	@ (8002d60 <HAL_DMA_Init+0x674>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d04f      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a53      	ldr	r2, [pc, #332]	@ (8002d64 <HAL_DMA_Init+0x678>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d04a      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a51      	ldr	r2, [pc, #324]	@ (8002d68 <HAL_DMA_Init+0x67c>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d045      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a50      	ldr	r2, [pc, #320]	@ (8002d6c <HAL_DMA_Init+0x680>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d040      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a4e      	ldr	r2, [pc, #312]	@ (8002d70 <HAL_DMA_Init+0x684>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d03b      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a4d      	ldr	r2, [pc, #308]	@ (8002d74 <HAL_DMA_Init+0x688>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d036      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a4b      	ldr	r2, [pc, #300]	@ (8002d78 <HAL_DMA_Init+0x68c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d031      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a4a      	ldr	r2, [pc, #296]	@ (8002d7c <HAL_DMA_Init+0x690>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d02c      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a48      	ldr	r2, [pc, #288]	@ (8002d80 <HAL_DMA_Init+0x694>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d027      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a47      	ldr	r2, [pc, #284]	@ (8002d84 <HAL_DMA_Init+0x698>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d022      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a45      	ldr	r2, [pc, #276]	@ (8002d88 <HAL_DMA_Init+0x69c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d01d      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a44      	ldr	r2, [pc, #272]	@ (8002d8c <HAL_DMA_Init+0x6a0>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d018      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a42      	ldr	r2, [pc, #264]	@ (8002d90 <HAL_DMA_Init+0x6a4>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d013      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a41      	ldr	r2, [pc, #260]	@ (8002d94 <HAL_DMA_Init+0x6a8>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d00e      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a3f      	ldr	r2, [pc, #252]	@ (8002d98 <HAL_DMA_Init+0x6ac>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d009      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a3e      	ldr	r2, [pc, #248]	@ (8002d9c <HAL_DMA_Init+0x6b0>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d004      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a3c      	ldr	r2, [pc, #240]	@ (8002da0 <HAL_DMA_Init+0x6b4>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d101      	bne.n	8002cb6 <HAL_DMA_Init+0x5ca>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <HAL_DMA_Init+0x5cc>
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d032      	beq.n	8002d22 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f001 fcdf 	bl	8004680 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	2b80      	cmp	r3, #128	@ 0x80
 8002cc8:	d102      	bne.n	8002cd0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002ce4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d010      	beq.n	8002d10 <HAL_DMA_Init+0x624>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d80c      	bhi.n	8002d10 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f001 fd5c 	bl	80047b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002d0c:	605a      	str	r2, [r3, #4]
 8002d0e:	e008      	b.n	8002d22 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	a7fdabf8 	.word	0xa7fdabf8
 8002d40:	cccccccd 	.word	0xcccccccd
 8002d44:	40020010 	.word	0x40020010
 8002d48:	40020028 	.word	0x40020028
 8002d4c:	40020040 	.word	0x40020040
 8002d50:	40020058 	.word	0x40020058
 8002d54:	40020070 	.word	0x40020070
 8002d58:	40020088 	.word	0x40020088
 8002d5c:	400200a0 	.word	0x400200a0
 8002d60:	400200b8 	.word	0x400200b8
 8002d64:	40020410 	.word	0x40020410
 8002d68:	40020428 	.word	0x40020428
 8002d6c:	40020440 	.word	0x40020440
 8002d70:	40020458 	.word	0x40020458
 8002d74:	40020470 	.word	0x40020470
 8002d78:	40020488 	.word	0x40020488
 8002d7c:	400204a0 	.word	0x400204a0
 8002d80:	400204b8 	.word	0x400204b8
 8002d84:	58025408 	.word	0x58025408
 8002d88:	5802541c 	.word	0x5802541c
 8002d8c:	58025430 	.word	0x58025430
 8002d90:	58025444 	.word	0x58025444
 8002d94:	58025458 	.word	0x58025458
 8002d98:	5802546c 	.word	0x5802546c
 8002d9c:	58025480 	.word	0x58025480
 8002da0:	58025494 	.word	0x58025494

08002da4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
 8002db0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002db2:	2300      	movs	r3, #0
 8002db4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e226      	b.n	800320e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <HAL_DMA_Start_IT+0x2a>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e21f      	b.n	800320e <HAL_DMA_Start_IT+0x46a>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	f040 820a 	bne.w	80031f8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2202      	movs	r2, #2
 8002de8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a68      	ldr	r2, [pc, #416]	@ (8002f98 <HAL_DMA_Start_IT+0x1f4>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d04a      	beq.n	8002e92 <HAL_DMA_Start_IT+0xee>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a66      	ldr	r2, [pc, #408]	@ (8002f9c <HAL_DMA_Start_IT+0x1f8>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d045      	beq.n	8002e92 <HAL_DMA_Start_IT+0xee>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a65      	ldr	r2, [pc, #404]	@ (8002fa0 <HAL_DMA_Start_IT+0x1fc>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d040      	beq.n	8002e92 <HAL_DMA_Start_IT+0xee>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a63      	ldr	r2, [pc, #396]	@ (8002fa4 <HAL_DMA_Start_IT+0x200>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d03b      	beq.n	8002e92 <HAL_DMA_Start_IT+0xee>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a62      	ldr	r2, [pc, #392]	@ (8002fa8 <HAL_DMA_Start_IT+0x204>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d036      	beq.n	8002e92 <HAL_DMA_Start_IT+0xee>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a60      	ldr	r2, [pc, #384]	@ (8002fac <HAL_DMA_Start_IT+0x208>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d031      	beq.n	8002e92 <HAL_DMA_Start_IT+0xee>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a5f      	ldr	r2, [pc, #380]	@ (8002fb0 <HAL_DMA_Start_IT+0x20c>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d02c      	beq.n	8002e92 <HAL_DMA_Start_IT+0xee>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a5d      	ldr	r2, [pc, #372]	@ (8002fb4 <HAL_DMA_Start_IT+0x210>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d027      	beq.n	8002e92 <HAL_DMA_Start_IT+0xee>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a5c      	ldr	r2, [pc, #368]	@ (8002fb8 <HAL_DMA_Start_IT+0x214>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d022      	beq.n	8002e92 <HAL_DMA_Start_IT+0xee>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a5a      	ldr	r2, [pc, #360]	@ (8002fbc <HAL_DMA_Start_IT+0x218>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d01d      	beq.n	8002e92 <HAL_DMA_Start_IT+0xee>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a59      	ldr	r2, [pc, #356]	@ (8002fc0 <HAL_DMA_Start_IT+0x21c>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d018      	beq.n	8002e92 <HAL_DMA_Start_IT+0xee>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a57      	ldr	r2, [pc, #348]	@ (8002fc4 <HAL_DMA_Start_IT+0x220>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d013      	beq.n	8002e92 <HAL_DMA_Start_IT+0xee>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a56      	ldr	r2, [pc, #344]	@ (8002fc8 <HAL_DMA_Start_IT+0x224>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d00e      	beq.n	8002e92 <HAL_DMA_Start_IT+0xee>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a54      	ldr	r2, [pc, #336]	@ (8002fcc <HAL_DMA_Start_IT+0x228>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d009      	beq.n	8002e92 <HAL_DMA_Start_IT+0xee>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a53      	ldr	r2, [pc, #332]	@ (8002fd0 <HAL_DMA_Start_IT+0x22c>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d004      	beq.n	8002e92 <HAL_DMA_Start_IT+0xee>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a51      	ldr	r2, [pc, #324]	@ (8002fd4 <HAL_DMA_Start_IT+0x230>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d108      	bne.n	8002ea4 <HAL_DMA_Start_IT+0x100>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0201 	bic.w	r2, r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	e007      	b.n	8002eb4 <HAL_DMA_Start_IT+0x110>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0201 	bic.w	r2, r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	68b9      	ldr	r1, [r7, #8]
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f001 f906 	bl	80040cc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a34      	ldr	r2, [pc, #208]	@ (8002f98 <HAL_DMA_Start_IT+0x1f4>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d04a      	beq.n	8002f60 <HAL_DMA_Start_IT+0x1bc>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a33      	ldr	r2, [pc, #204]	@ (8002f9c <HAL_DMA_Start_IT+0x1f8>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d045      	beq.n	8002f60 <HAL_DMA_Start_IT+0x1bc>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a31      	ldr	r2, [pc, #196]	@ (8002fa0 <HAL_DMA_Start_IT+0x1fc>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d040      	beq.n	8002f60 <HAL_DMA_Start_IT+0x1bc>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a30      	ldr	r2, [pc, #192]	@ (8002fa4 <HAL_DMA_Start_IT+0x200>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d03b      	beq.n	8002f60 <HAL_DMA_Start_IT+0x1bc>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a2e      	ldr	r2, [pc, #184]	@ (8002fa8 <HAL_DMA_Start_IT+0x204>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d036      	beq.n	8002f60 <HAL_DMA_Start_IT+0x1bc>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a2d      	ldr	r2, [pc, #180]	@ (8002fac <HAL_DMA_Start_IT+0x208>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d031      	beq.n	8002f60 <HAL_DMA_Start_IT+0x1bc>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a2b      	ldr	r2, [pc, #172]	@ (8002fb0 <HAL_DMA_Start_IT+0x20c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d02c      	beq.n	8002f60 <HAL_DMA_Start_IT+0x1bc>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a2a      	ldr	r2, [pc, #168]	@ (8002fb4 <HAL_DMA_Start_IT+0x210>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d027      	beq.n	8002f60 <HAL_DMA_Start_IT+0x1bc>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a28      	ldr	r2, [pc, #160]	@ (8002fb8 <HAL_DMA_Start_IT+0x214>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d022      	beq.n	8002f60 <HAL_DMA_Start_IT+0x1bc>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a27      	ldr	r2, [pc, #156]	@ (8002fbc <HAL_DMA_Start_IT+0x218>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d01d      	beq.n	8002f60 <HAL_DMA_Start_IT+0x1bc>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a25      	ldr	r2, [pc, #148]	@ (8002fc0 <HAL_DMA_Start_IT+0x21c>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d018      	beq.n	8002f60 <HAL_DMA_Start_IT+0x1bc>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a24      	ldr	r2, [pc, #144]	@ (8002fc4 <HAL_DMA_Start_IT+0x220>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d013      	beq.n	8002f60 <HAL_DMA_Start_IT+0x1bc>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a22      	ldr	r2, [pc, #136]	@ (8002fc8 <HAL_DMA_Start_IT+0x224>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d00e      	beq.n	8002f60 <HAL_DMA_Start_IT+0x1bc>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a21      	ldr	r2, [pc, #132]	@ (8002fcc <HAL_DMA_Start_IT+0x228>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d009      	beq.n	8002f60 <HAL_DMA_Start_IT+0x1bc>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a1f      	ldr	r2, [pc, #124]	@ (8002fd0 <HAL_DMA_Start_IT+0x22c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d004      	beq.n	8002f60 <HAL_DMA_Start_IT+0x1bc>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a1e      	ldr	r2, [pc, #120]	@ (8002fd4 <HAL_DMA_Start_IT+0x230>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d101      	bne.n	8002f64 <HAL_DMA_Start_IT+0x1c0>
 8002f60:	2301      	movs	r3, #1
 8002f62:	e000      	b.n	8002f66 <HAL_DMA_Start_IT+0x1c2>
 8002f64:	2300      	movs	r3, #0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d036      	beq.n	8002fd8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f023 021e 	bic.w	r2, r3, #30
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f042 0216 	orr.w	r2, r2, #22
 8002f7c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d03e      	beq.n	8003004 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 0208 	orr.w	r2, r2, #8
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	e035      	b.n	8003004 <HAL_DMA_Start_IT+0x260>
 8002f98:	40020010 	.word	0x40020010
 8002f9c:	40020028 	.word	0x40020028
 8002fa0:	40020040 	.word	0x40020040
 8002fa4:	40020058 	.word	0x40020058
 8002fa8:	40020070 	.word	0x40020070
 8002fac:	40020088 	.word	0x40020088
 8002fb0:	400200a0 	.word	0x400200a0
 8002fb4:	400200b8 	.word	0x400200b8
 8002fb8:	40020410 	.word	0x40020410
 8002fbc:	40020428 	.word	0x40020428
 8002fc0:	40020440 	.word	0x40020440
 8002fc4:	40020458 	.word	0x40020458
 8002fc8:	40020470 	.word	0x40020470
 8002fcc:	40020488 	.word	0x40020488
 8002fd0:	400204a0 	.word	0x400204a0
 8002fd4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f023 020e 	bic.w	r2, r3, #14
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 020a 	orr.w	r2, r2, #10
 8002fea:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d007      	beq.n	8003004 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0204 	orr.w	r2, r2, #4
 8003002:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a83      	ldr	r2, [pc, #524]	@ (8003218 <HAL_DMA_Start_IT+0x474>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d072      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a82      	ldr	r2, [pc, #520]	@ (800321c <HAL_DMA_Start_IT+0x478>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d06d      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a80      	ldr	r2, [pc, #512]	@ (8003220 <HAL_DMA_Start_IT+0x47c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d068      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a7f      	ldr	r2, [pc, #508]	@ (8003224 <HAL_DMA_Start_IT+0x480>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d063      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a7d      	ldr	r2, [pc, #500]	@ (8003228 <HAL_DMA_Start_IT+0x484>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d05e      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a7c      	ldr	r2, [pc, #496]	@ (800322c <HAL_DMA_Start_IT+0x488>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d059      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a7a      	ldr	r2, [pc, #488]	@ (8003230 <HAL_DMA_Start_IT+0x48c>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d054      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a79      	ldr	r2, [pc, #484]	@ (8003234 <HAL_DMA_Start_IT+0x490>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d04f      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a77      	ldr	r2, [pc, #476]	@ (8003238 <HAL_DMA_Start_IT+0x494>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d04a      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a76      	ldr	r2, [pc, #472]	@ (800323c <HAL_DMA_Start_IT+0x498>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d045      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a74      	ldr	r2, [pc, #464]	@ (8003240 <HAL_DMA_Start_IT+0x49c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d040      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a73      	ldr	r2, [pc, #460]	@ (8003244 <HAL_DMA_Start_IT+0x4a0>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d03b      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a71      	ldr	r2, [pc, #452]	@ (8003248 <HAL_DMA_Start_IT+0x4a4>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d036      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a70      	ldr	r2, [pc, #448]	@ (800324c <HAL_DMA_Start_IT+0x4a8>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d031      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a6e      	ldr	r2, [pc, #440]	@ (8003250 <HAL_DMA_Start_IT+0x4ac>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d02c      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a6d      	ldr	r2, [pc, #436]	@ (8003254 <HAL_DMA_Start_IT+0x4b0>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d027      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a6b      	ldr	r2, [pc, #428]	@ (8003258 <HAL_DMA_Start_IT+0x4b4>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d022      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a6a      	ldr	r2, [pc, #424]	@ (800325c <HAL_DMA_Start_IT+0x4b8>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d01d      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a68      	ldr	r2, [pc, #416]	@ (8003260 <HAL_DMA_Start_IT+0x4bc>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d018      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a67      	ldr	r2, [pc, #412]	@ (8003264 <HAL_DMA_Start_IT+0x4c0>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d013      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a65      	ldr	r2, [pc, #404]	@ (8003268 <HAL_DMA_Start_IT+0x4c4>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d00e      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a64      	ldr	r2, [pc, #400]	@ (800326c <HAL_DMA_Start_IT+0x4c8>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d009      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a62      	ldr	r2, [pc, #392]	@ (8003270 <HAL_DMA_Start_IT+0x4cc>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d004      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a61      	ldr	r2, [pc, #388]	@ (8003274 <HAL_DMA_Start_IT+0x4d0>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d101      	bne.n	80030f8 <HAL_DMA_Start_IT+0x354>
 80030f4:	2301      	movs	r3, #1
 80030f6:	e000      	b.n	80030fa <HAL_DMA_Start_IT+0x356>
 80030f8:	2300      	movs	r3, #0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d01a      	beq.n	8003134 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d007      	beq.n	800311c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003116:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800311a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003120:	2b00      	cmp	r3, #0
 8003122:	d007      	beq.n	8003134 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800312e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003132:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a37      	ldr	r2, [pc, #220]	@ (8003218 <HAL_DMA_Start_IT+0x474>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d04a      	beq.n	80031d4 <HAL_DMA_Start_IT+0x430>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a36      	ldr	r2, [pc, #216]	@ (800321c <HAL_DMA_Start_IT+0x478>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d045      	beq.n	80031d4 <HAL_DMA_Start_IT+0x430>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a34      	ldr	r2, [pc, #208]	@ (8003220 <HAL_DMA_Start_IT+0x47c>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d040      	beq.n	80031d4 <HAL_DMA_Start_IT+0x430>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a33      	ldr	r2, [pc, #204]	@ (8003224 <HAL_DMA_Start_IT+0x480>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d03b      	beq.n	80031d4 <HAL_DMA_Start_IT+0x430>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a31      	ldr	r2, [pc, #196]	@ (8003228 <HAL_DMA_Start_IT+0x484>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d036      	beq.n	80031d4 <HAL_DMA_Start_IT+0x430>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a30      	ldr	r2, [pc, #192]	@ (800322c <HAL_DMA_Start_IT+0x488>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d031      	beq.n	80031d4 <HAL_DMA_Start_IT+0x430>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a2e      	ldr	r2, [pc, #184]	@ (8003230 <HAL_DMA_Start_IT+0x48c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d02c      	beq.n	80031d4 <HAL_DMA_Start_IT+0x430>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a2d      	ldr	r2, [pc, #180]	@ (8003234 <HAL_DMA_Start_IT+0x490>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d027      	beq.n	80031d4 <HAL_DMA_Start_IT+0x430>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a2b      	ldr	r2, [pc, #172]	@ (8003238 <HAL_DMA_Start_IT+0x494>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d022      	beq.n	80031d4 <HAL_DMA_Start_IT+0x430>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a2a      	ldr	r2, [pc, #168]	@ (800323c <HAL_DMA_Start_IT+0x498>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d01d      	beq.n	80031d4 <HAL_DMA_Start_IT+0x430>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a28      	ldr	r2, [pc, #160]	@ (8003240 <HAL_DMA_Start_IT+0x49c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d018      	beq.n	80031d4 <HAL_DMA_Start_IT+0x430>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a27      	ldr	r2, [pc, #156]	@ (8003244 <HAL_DMA_Start_IT+0x4a0>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d013      	beq.n	80031d4 <HAL_DMA_Start_IT+0x430>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a25      	ldr	r2, [pc, #148]	@ (8003248 <HAL_DMA_Start_IT+0x4a4>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d00e      	beq.n	80031d4 <HAL_DMA_Start_IT+0x430>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a24      	ldr	r2, [pc, #144]	@ (800324c <HAL_DMA_Start_IT+0x4a8>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d009      	beq.n	80031d4 <HAL_DMA_Start_IT+0x430>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a22      	ldr	r2, [pc, #136]	@ (8003250 <HAL_DMA_Start_IT+0x4ac>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d004      	beq.n	80031d4 <HAL_DMA_Start_IT+0x430>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a21      	ldr	r2, [pc, #132]	@ (8003254 <HAL_DMA_Start_IT+0x4b0>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d108      	bne.n	80031e6 <HAL_DMA_Start_IT+0x442>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	e012      	b.n	800320c <HAL_DMA_Start_IT+0x468>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f042 0201 	orr.w	r2, r2, #1
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	e009      	b.n	800320c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80031fe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800320c:	7dfb      	ldrb	r3, [r7, #23]
}
 800320e:	4618      	mov	r0, r3
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40020010 	.word	0x40020010
 800321c:	40020028 	.word	0x40020028
 8003220:	40020040 	.word	0x40020040
 8003224:	40020058 	.word	0x40020058
 8003228:	40020070 	.word	0x40020070
 800322c:	40020088 	.word	0x40020088
 8003230:	400200a0 	.word	0x400200a0
 8003234:	400200b8 	.word	0x400200b8
 8003238:	40020410 	.word	0x40020410
 800323c:	40020428 	.word	0x40020428
 8003240:	40020440 	.word	0x40020440
 8003244:	40020458 	.word	0x40020458
 8003248:	40020470 	.word	0x40020470
 800324c:	40020488 	.word	0x40020488
 8003250:	400204a0 	.word	0x400204a0
 8003254:	400204b8 	.word	0x400204b8
 8003258:	58025408 	.word	0x58025408
 800325c:	5802541c 	.word	0x5802541c
 8003260:	58025430 	.word	0x58025430
 8003264:	58025444 	.word	0x58025444
 8003268:	58025458 	.word	0x58025458
 800326c:	5802546c 	.word	0x5802546c
 8003270:	58025480 	.word	0x58025480
 8003274:	58025494 	.word	0x58025494

08003278 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b08a      	sub	sp, #40	@ 0x28
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003284:	4b67      	ldr	r3, [pc, #412]	@ (8003424 <HAL_DMA_IRQHandler+0x1ac>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a67      	ldr	r2, [pc, #412]	@ (8003428 <HAL_DMA_IRQHandler+0x1b0>)
 800328a:	fba2 2303 	umull	r2, r3, r2, r3
 800328e:	0a9b      	lsrs	r3, r3, #10
 8003290:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003296:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800329c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a5f      	ldr	r2, [pc, #380]	@ (800342c <HAL_DMA_IRQHandler+0x1b4>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d04a      	beq.n	800334a <HAL_DMA_IRQHandler+0xd2>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a5d      	ldr	r2, [pc, #372]	@ (8003430 <HAL_DMA_IRQHandler+0x1b8>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d045      	beq.n	800334a <HAL_DMA_IRQHandler+0xd2>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a5c      	ldr	r2, [pc, #368]	@ (8003434 <HAL_DMA_IRQHandler+0x1bc>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d040      	beq.n	800334a <HAL_DMA_IRQHandler+0xd2>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a5a      	ldr	r2, [pc, #360]	@ (8003438 <HAL_DMA_IRQHandler+0x1c0>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d03b      	beq.n	800334a <HAL_DMA_IRQHandler+0xd2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a59      	ldr	r2, [pc, #356]	@ (800343c <HAL_DMA_IRQHandler+0x1c4>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d036      	beq.n	800334a <HAL_DMA_IRQHandler+0xd2>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a57      	ldr	r2, [pc, #348]	@ (8003440 <HAL_DMA_IRQHandler+0x1c8>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d031      	beq.n	800334a <HAL_DMA_IRQHandler+0xd2>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a56      	ldr	r2, [pc, #344]	@ (8003444 <HAL_DMA_IRQHandler+0x1cc>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d02c      	beq.n	800334a <HAL_DMA_IRQHandler+0xd2>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a54      	ldr	r2, [pc, #336]	@ (8003448 <HAL_DMA_IRQHandler+0x1d0>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d027      	beq.n	800334a <HAL_DMA_IRQHandler+0xd2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a53      	ldr	r2, [pc, #332]	@ (800344c <HAL_DMA_IRQHandler+0x1d4>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d022      	beq.n	800334a <HAL_DMA_IRQHandler+0xd2>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a51      	ldr	r2, [pc, #324]	@ (8003450 <HAL_DMA_IRQHandler+0x1d8>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d01d      	beq.n	800334a <HAL_DMA_IRQHandler+0xd2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a50      	ldr	r2, [pc, #320]	@ (8003454 <HAL_DMA_IRQHandler+0x1dc>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d018      	beq.n	800334a <HAL_DMA_IRQHandler+0xd2>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a4e      	ldr	r2, [pc, #312]	@ (8003458 <HAL_DMA_IRQHandler+0x1e0>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d013      	beq.n	800334a <HAL_DMA_IRQHandler+0xd2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a4d      	ldr	r2, [pc, #308]	@ (800345c <HAL_DMA_IRQHandler+0x1e4>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d00e      	beq.n	800334a <HAL_DMA_IRQHandler+0xd2>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a4b      	ldr	r2, [pc, #300]	@ (8003460 <HAL_DMA_IRQHandler+0x1e8>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d009      	beq.n	800334a <HAL_DMA_IRQHandler+0xd2>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a4a      	ldr	r2, [pc, #296]	@ (8003464 <HAL_DMA_IRQHandler+0x1ec>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d004      	beq.n	800334a <HAL_DMA_IRQHandler+0xd2>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a48      	ldr	r2, [pc, #288]	@ (8003468 <HAL_DMA_IRQHandler+0x1f0>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d101      	bne.n	800334e <HAL_DMA_IRQHandler+0xd6>
 800334a:	2301      	movs	r3, #1
 800334c:	e000      	b.n	8003350 <HAL_DMA_IRQHandler+0xd8>
 800334e:	2300      	movs	r3, #0
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 842b 	beq.w	8003bac <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800335a:	f003 031f 	and.w	r3, r3, #31
 800335e:	2208      	movs	r2, #8
 8003360:	409a      	lsls	r2, r3
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	4013      	ands	r3, r2
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 80a2 	beq.w	80034b0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a2e      	ldr	r2, [pc, #184]	@ (800342c <HAL_DMA_IRQHandler+0x1b4>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d04a      	beq.n	800340c <HAL_DMA_IRQHandler+0x194>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a2d      	ldr	r2, [pc, #180]	@ (8003430 <HAL_DMA_IRQHandler+0x1b8>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d045      	beq.n	800340c <HAL_DMA_IRQHandler+0x194>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a2b      	ldr	r2, [pc, #172]	@ (8003434 <HAL_DMA_IRQHandler+0x1bc>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d040      	beq.n	800340c <HAL_DMA_IRQHandler+0x194>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a2a      	ldr	r2, [pc, #168]	@ (8003438 <HAL_DMA_IRQHandler+0x1c0>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d03b      	beq.n	800340c <HAL_DMA_IRQHandler+0x194>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a28      	ldr	r2, [pc, #160]	@ (800343c <HAL_DMA_IRQHandler+0x1c4>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d036      	beq.n	800340c <HAL_DMA_IRQHandler+0x194>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a27      	ldr	r2, [pc, #156]	@ (8003440 <HAL_DMA_IRQHandler+0x1c8>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d031      	beq.n	800340c <HAL_DMA_IRQHandler+0x194>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a25      	ldr	r2, [pc, #148]	@ (8003444 <HAL_DMA_IRQHandler+0x1cc>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d02c      	beq.n	800340c <HAL_DMA_IRQHandler+0x194>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a24      	ldr	r2, [pc, #144]	@ (8003448 <HAL_DMA_IRQHandler+0x1d0>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d027      	beq.n	800340c <HAL_DMA_IRQHandler+0x194>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a22      	ldr	r2, [pc, #136]	@ (800344c <HAL_DMA_IRQHandler+0x1d4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d022      	beq.n	800340c <HAL_DMA_IRQHandler+0x194>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a21      	ldr	r2, [pc, #132]	@ (8003450 <HAL_DMA_IRQHandler+0x1d8>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d01d      	beq.n	800340c <HAL_DMA_IRQHandler+0x194>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a1f      	ldr	r2, [pc, #124]	@ (8003454 <HAL_DMA_IRQHandler+0x1dc>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d018      	beq.n	800340c <HAL_DMA_IRQHandler+0x194>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a1e      	ldr	r2, [pc, #120]	@ (8003458 <HAL_DMA_IRQHandler+0x1e0>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d013      	beq.n	800340c <HAL_DMA_IRQHandler+0x194>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a1c      	ldr	r2, [pc, #112]	@ (800345c <HAL_DMA_IRQHandler+0x1e4>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00e      	beq.n	800340c <HAL_DMA_IRQHandler+0x194>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a1b      	ldr	r2, [pc, #108]	@ (8003460 <HAL_DMA_IRQHandler+0x1e8>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d009      	beq.n	800340c <HAL_DMA_IRQHandler+0x194>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a19      	ldr	r2, [pc, #100]	@ (8003464 <HAL_DMA_IRQHandler+0x1ec>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d004      	beq.n	800340c <HAL_DMA_IRQHandler+0x194>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a18      	ldr	r2, [pc, #96]	@ (8003468 <HAL_DMA_IRQHandler+0x1f0>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d12f      	bne.n	800346c <HAL_DMA_IRQHandler+0x1f4>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0304 	and.w	r3, r3, #4
 8003416:	2b00      	cmp	r3, #0
 8003418:	bf14      	ite	ne
 800341a:	2301      	movne	r3, #1
 800341c:	2300      	moveq	r3, #0
 800341e:	b2db      	uxtb	r3, r3
 8003420:	e02e      	b.n	8003480 <HAL_DMA_IRQHandler+0x208>
 8003422:	bf00      	nop
 8003424:	24000010 	.word	0x24000010
 8003428:	1b4e81b5 	.word	0x1b4e81b5
 800342c:	40020010 	.word	0x40020010
 8003430:	40020028 	.word	0x40020028
 8003434:	40020040 	.word	0x40020040
 8003438:	40020058 	.word	0x40020058
 800343c:	40020070 	.word	0x40020070
 8003440:	40020088 	.word	0x40020088
 8003444:	400200a0 	.word	0x400200a0
 8003448:	400200b8 	.word	0x400200b8
 800344c:	40020410 	.word	0x40020410
 8003450:	40020428 	.word	0x40020428
 8003454:	40020440 	.word	0x40020440
 8003458:	40020458 	.word	0x40020458
 800345c:	40020470 	.word	0x40020470
 8003460:	40020488 	.word	0x40020488
 8003464:	400204a0 	.word	0x400204a0
 8003468:	400204b8 	.word	0x400204b8
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b00      	cmp	r3, #0
 8003478:	bf14      	ite	ne
 800347a:	2301      	movne	r3, #1
 800347c:	2300      	moveq	r3, #0
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	d015      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0204 	bic.w	r2, r2, #4
 8003492:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003498:	f003 031f 	and.w	r3, r3, #31
 800349c:	2208      	movs	r2, #8
 800349e:	409a      	lsls	r2, r3
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034a8:	f043 0201 	orr.w	r2, r3, #1
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b4:	f003 031f 	and.w	r3, r3, #31
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	fa22 f303 	lsr.w	r3, r2, r3
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d06e      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a69      	ldr	r2, [pc, #420]	@ (8003670 <HAL_DMA_IRQHandler+0x3f8>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d04a      	beq.n	8003566 <HAL_DMA_IRQHandler+0x2ee>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a67      	ldr	r2, [pc, #412]	@ (8003674 <HAL_DMA_IRQHandler+0x3fc>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d045      	beq.n	8003566 <HAL_DMA_IRQHandler+0x2ee>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a66      	ldr	r2, [pc, #408]	@ (8003678 <HAL_DMA_IRQHandler+0x400>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d040      	beq.n	8003566 <HAL_DMA_IRQHandler+0x2ee>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a64      	ldr	r2, [pc, #400]	@ (800367c <HAL_DMA_IRQHandler+0x404>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d03b      	beq.n	8003566 <HAL_DMA_IRQHandler+0x2ee>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a63      	ldr	r2, [pc, #396]	@ (8003680 <HAL_DMA_IRQHandler+0x408>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d036      	beq.n	8003566 <HAL_DMA_IRQHandler+0x2ee>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a61      	ldr	r2, [pc, #388]	@ (8003684 <HAL_DMA_IRQHandler+0x40c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d031      	beq.n	8003566 <HAL_DMA_IRQHandler+0x2ee>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a60      	ldr	r2, [pc, #384]	@ (8003688 <HAL_DMA_IRQHandler+0x410>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d02c      	beq.n	8003566 <HAL_DMA_IRQHandler+0x2ee>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a5e      	ldr	r2, [pc, #376]	@ (800368c <HAL_DMA_IRQHandler+0x414>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d027      	beq.n	8003566 <HAL_DMA_IRQHandler+0x2ee>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a5d      	ldr	r2, [pc, #372]	@ (8003690 <HAL_DMA_IRQHandler+0x418>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d022      	beq.n	8003566 <HAL_DMA_IRQHandler+0x2ee>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a5b      	ldr	r2, [pc, #364]	@ (8003694 <HAL_DMA_IRQHandler+0x41c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d01d      	beq.n	8003566 <HAL_DMA_IRQHandler+0x2ee>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a5a      	ldr	r2, [pc, #360]	@ (8003698 <HAL_DMA_IRQHandler+0x420>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d018      	beq.n	8003566 <HAL_DMA_IRQHandler+0x2ee>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a58      	ldr	r2, [pc, #352]	@ (800369c <HAL_DMA_IRQHandler+0x424>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d013      	beq.n	8003566 <HAL_DMA_IRQHandler+0x2ee>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a57      	ldr	r2, [pc, #348]	@ (80036a0 <HAL_DMA_IRQHandler+0x428>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d00e      	beq.n	8003566 <HAL_DMA_IRQHandler+0x2ee>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a55      	ldr	r2, [pc, #340]	@ (80036a4 <HAL_DMA_IRQHandler+0x42c>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d009      	beq.n	8003566 <HAL_DMA_IRQHandler+0x2ee>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a54      	ldr	r2, [pc, #336]	@ (80036a8 <HAL_DMA_IRQHandler+0x430>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d004      	beq.n	8003566 <HAL_DMA_IRQHandler+0x2ee>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a52      	ldr	r2, [pc, #328]	@ (80036ac <HAL_DMA_IRQHandler+0x434>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d10a      	bne.n	800357c <HAL_DMA_IRQHandler+0x304>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003570:	2b00      	cmp	r3, #0
 8003572:	bf14      	ite	ne
 8003574:	2301      	movne	r3, #1
 8003576:	2300      	moveq	r3, #0
 8003578:	b2db      	uxtb	r3, r3
 800357a:	e003      	b.n	8003584 <HAL_DMA_IRQHandler+0x30c>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2300      	movs	r3, #0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00d      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800358c:	f003 031f 	and.w	r3, r3, #31
 8003590:	2201      	movs	r2, #1
 8003592:	409a      	lsls	r2, r3
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800359c:	f043 0202 	orr.w	r2, r3, #2
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a8:	f003 031f 	and.w	r3, r3, #31
 80035ac:	2204      	movs	r2, #4
 80035ae:	409a      	lsls	r2, r3
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	4013      	ands	r3, r2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 808f 	beq.w	80036d8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a2c      	ldr	r2, [pc, #176]	@ (8003670 <HAL_DMA_IRQHandler+0x3f8>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d04a      	beq.n	800365a <HAL_DMA_IRQHandler+0x3e2>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a2a      	ldr	r2, [pc, #168]	@ (8003674 <HAL_DMA_IRQHandler+0x3fc>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d045      	beq.n	800365a <HAL_DMA_IRQHandler+0x3e2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a29      	ldr	r2, [pc, #164]	@ (8003678 <HAL_DMA_IRQHandler+0x400>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d040      	beq.n	800365a <HAL_DMA_IRQHandler+0x3e2>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a27      	ldr	r2, [pc, #156]	@ (800367c <HAL_DMA_IRQHandler+0x404>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d03b      	beq.n	800365a <HAL_DMA_IRQHandler+0x3e2>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a26      	ldr	r2, [pc, #152]	@ (8003680 <HAL_DMA_IRQHandler+0x408>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d036      	beq.n	800365a <HAL_DMA_IRQHandler+0x3e2>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a24      	ldr	r2, [pc, #144]	@ (8003684 <HAL_DMA_IRQHandler+0x40c>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d031      	beq.n	800365a <HAL_DMA_IRQHandler+0x3e2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a23      	ldr	r2, [pc, #140]	@ (8003688 <HAL_DMA_IRQHandler+0x410>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d02c      	beq.n	800365a <HAL_DMA_IRQHandler+0x3e2>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a21      	ldr	r2, [pc, #132]	@ (800368c <HAL_DMA_IRQHandler+0x414>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d027      	beq.n	800365a <HAL_DMA_IRQHandler+0x3e2>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a20      	ldr	r2, [pc, #128]	@ (8003690 <HAL_DMA_IRQHandler+0x418>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d022      	beq.n	800365a <HAL_DMA_IRQHandler+0x3e2>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a1e      	ldr	r2, [pc, #120]	@ (8003694 <HAL_DMA_IRQHandler+0x41c>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d01d      	beq.n	800365a <HAL_DMA_IRQHandler+0x3e2>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a1d      	ldr	r2, [pc, #116]	@ (8003698 <HAL_DMA_IRQHandler+0x420>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d018      	beq.n	800365a <HAL_DMA_IRQHandler+0x3e2>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a1b      	ldr	r2, [pc, #108]	@ (800369c <HAL_DMA_IRQHandler+0x424>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d013      	beq.n	800365a <HAL_DMA_IRQHandler+0x3e2>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a1a      	ldr	r2, [pc, #104]	@ (80036a0 <HAL_DMA_IRQHandler+0x428>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d00e      	beq.n	800365a <HAL_DMA_IRQHandler+0x3e2>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a18      	ldr	r2, [pc, #96]	@ (80036a4 <HAL_DMA_IRQHandler+0x42c>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d009      	beq.n	800365a <HAL_DMA_IRQHandler+0x3e2>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a17      	ldr	r2, [pc, #92]	@ (80036a8 <HAL_DMA_IRQHandler+0x430>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d004      	beq.n	800365a <HAL_DMA_IRQHandler+0x3e2>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a15      	ldr	r2, [pc, #84]	@ (80036ac <HAL_DMA_IRQHandler+0x434>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d12a      	bne.n	80036b0 <HAL_DMA_IRQHandler+0x438>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	bf14      	ite	ne
 8003668:	2301      	movne	r3, #1
 800366a:	2300      	moveq	r3, #0
 800366c:	b2db      	uxtb	r3, r3
 800366e:	e023      	b.n	80036b8 <HAL_DMA_IRQHandler+0x440>
 8003670:	40020010 	.word	0x40020010
 8003674:	40020028 	.word	0x40020028
 8003678:	40020040 	.word	0x40020040
 800367c:	40020058 	.word	0x40020058
 8003680:	40020070 	.word	0x40020070
 8003684:	40020088 	.word	0x40020088
 8003688:	400200a0 	.word	0x400200a0
 800368c:	400200b8 	.word	0x400200b8
 8003690:	40020410 	.word	0x40020410
 8003694:	40020428 	.word	0x40020428
 8003698:	40020440 	.word	0x40020440
 800369c:	40020458 	.word	0x40020458
 80036a0:	40020470 	.word	0x40020470
 80036a4:	40020488 	.word	0x40020488
 80036a8:	400204a0 	.word	0x400204a0
 80036ac:	400204b8 	.word	0x400204b8
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2300      	movs	r3, #0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00d      	beq.n	80036d8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c0:	f003 031f 	and.w	r3, r3, #31
 80036c4:	2204      	movs	r2, #4
 80036c6:	409a      	lsls	r2, r3
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036d0:	f043 0204 	orr.w	r2, r3, #4
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036dc:	f003 031f 	and.w	r3, r3, #31
 80036e0:	2210      	movs	r2, #16
 80036e2:	409a      	lsls	r2, r3
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	4013      	ands	r3, r2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 80a6 	beq.w	800383a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a85      	ldr	r2, [pc, #532]	@ (8003908 <HAL_DMA_IRQHandler+0x690>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d04a      	beq.n	800378e <HAL_DMA_IRQHandler+0x516>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a83      	ldr	r2, [pc, #524]	@ (800390c <HAL_DMA_IRQHandler+0x694>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d045      	beq.n	800378e <HAL_DMA_IRQHandler+0x516>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a82      	ldr	r2, [pc, #520]	@ (8003910 <HAL_DMA_IRQHandler+0x698>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d040      	beq.n	800378e <HAL_DMA_IRQHandler+0x516>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a80      	ldr	r2, [pc, #512]	@ (8003914 <HAL_DMA_IRQHandler+0x69c>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d03b      	beq.n	800378e <HAL_DMA_IRQHandler+0x516>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a7f      	ldr	r2, [pc, #508]	@ (8003918 <HAL_DMA_IRQHandler+0x6a0>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d036      	beq.n	800378e <HAL_DMA_IRQHandler+0x516>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a7d      	ldr	r2, [pc, #500]	@ (800391c <HAL_DMA_IRQHandler+0x6a4>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d031      	beq.n	800378e <HAL_DMA_IRQHandler+0x516>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a7c      	ldr	r2, [pc, #496]	@ (8003920 <HAL_DMA_IRQHandler+0x6a8>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d02c      	beq.n	800378e <HAL_DMA_IRQHandler+0x516>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a7a      	ldr	r2, [pc, #488]	@ (8003924 <HAL_DMA_IRQHandler+0x6ac>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d027      	beq.n	800378e <HAL_DMA_IRQHandler+0x516>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a79      	ldr	r2, [pc, #484]	@ (8003928 <HAL_DMA_IRQHandler+0x6b0>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d022      	beq.n	800378e <HAL_DMA_IRQHandler+0x516>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a77      	ldr	r2, [pc, #476]	@ (800392c <HAL_DMA_IRQHandler+0x6b4>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d01d      	beq.n	800378e <HAL_DMA_IRQHandler+0x516>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a76      	ldr	r2, [pc, #472]	@ (8003930 <HAL_DMA_IRQHandler+0x6b8>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d018      	beq.n	800378e <HAL_DMA_IRQHandler+0x516>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a74      	ldr	r2, [pc, #464]	@ (8003934 <HAL_DMA_IRQHandler+0x6bc>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d013      	beq.n	800378e <HAL_DMA_IRQHandler+0x516>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a73      	ldr	r2, [pc, #460]	@ (8003938 <HAL_DMA_IRQHandler+0x6c0>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d00e      	beq.n	800378e <HAL_DMA_IRQHandler+0x516>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a71      	ldr	r2, [pc, #452]	@ (800393c <HAL_DMA_IRQHandler+0x6c4>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d009      	beq.n	800378e <HAL_DMA_IRQHandler+0x516>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a70      	ldr	r2, [pc, #448]	@ (8003940 <HAL_DMA_IRQHandler+0x6c8>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d004      	beq.n	800378e <HAL_DMA_IRQHandler+0x516>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a6e      	ldr	r2, [pc, #440]	@ (8003944 <HAL_DMA_IRQHandler+0x6cc>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d10a      	bne.n	80037a4 <HAL_DMA_IRQHandler+0x52c>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0308 	and.w	r3, r3, #8
 8003798:	2b00      	cmp	r3, #0
 800379a:	bf14      	ite	ne
 800379c:	2301      	movne	r3, #1
 800379e:	2300      	moveq	r3, #0
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	e009      	b.n	80037b8 <HAL_DMA_IRQHandler+0x540>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0304 	and.w	r3, r3, #4
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	bf14      	ite	ne
 80037b2:	2301      	movne	r3, #1
 80037b4:	2300      	moveq	r3, #0
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d03e      	beq.n	800383a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037c0:	f003 031f 	and.w	r3, r3, #31
 80037c4:	2210      	movs	r2, #16
 80037c6:	409a      	lsls	r2, r3
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d018      	beq.n	800380c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d108      	bne.n	80037fa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d024      	beq.n	800383a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	4798      	blx	r3
 80037f8:	e01f      	b.n	800383a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d01b      	beq.n	800383a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	4798      	blx	r3
 800380a:	e016      	b.n	800383a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003816:	2b00      	cmp	r3, #0
 8003818:	d107      	bne.n	800382a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0208 	bic.w	r2, r2, #8
 8003828:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800383e:	f003 031f 	and.w	r3, r3, #31
 8003842:	2220      	movs	r2, #32
 8003844:	409a      	lsls	r2, r3
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	4013      	ands	r3, r2
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 8110 	beq.w	8003a70 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a2c      	ldr	r2, [pc, #176]	@ (8003908 <HAL_DMA_IRQHandler+0x690>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d04a      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x678>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a2b      	ldr	r2, [pc, #172]	@ (800390c <HAL_DMA_IRQHandler+0x694>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d045      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x678>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a29      	ldr	r2, [pc, #164]	@ (8003910 <HAL_DMA_IRQHandler+0x698>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d040      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x678>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a28      	ldr	r2, [pc, #160]	@ (8003914 <HAL_DMA_IRQHandler+0x69c>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d03b      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x678>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a26      	ldr	r2, [pc, #152]	@ (8003918 <HAL_DMA_IRQHandler+0x6a0>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d036      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x678>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a25      	ldr	r2, [pc, #148]	@ (800391c <HAL_DMA_IRQHandler+0x6a4>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d031      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x678>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a23      	ldr	r2, [pc, #140]	@ (8003920 <HAL_DMA_IRQHandler+0x6a8>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d02c      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x678>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a22      	ldr	r2, [pc, #136]	@ (8003924 <HAL_DMA_IRQHandler+0x6ac>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d027      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x678>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a20      	ldr	r2, [pc, #128]	@ (8003928 <HAL_DMA_IRQHandler+0x6b0>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d022      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x678>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a1f      	ldr	r2, [pc, #124]	@ (800392c <HAL_DMA_IRQHandler+0x6b4>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d01d      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x678>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003930 <HAL_DMA_IRQHandler+0x6b8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d018      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x678>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a1c      	ldr	r2, [pc, #112]	@ (8003934 <HAL_DMA_IRQHandler+0x6bc>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d013      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x678>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a1a      	ldr	r2, [pc, #104]	@ (8003938 <HAL_DMA_IRQHandler+0x6c0>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d00e      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x678>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a19      	ldr	r2, [pc, #100]	@ (800393c <HAL_DMA_IRQHandler+0x6c4>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d009      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x678>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a17      	ldr	r2, [pc, #92]	@ (8003940 <HAL_DMA_IRQHandler+0x6c8>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d004      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x678>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a16      	ldr	r2, [pc, #88]	@ (8003944 <HAL_DMA_IRQHandler+0x6cc>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d12b      	bne.n	8003948 <HAL_DMA_IRQHandler+0x6d0>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0310 	and.w	r3, r3, #16
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	bf14      	ite	ne
 80038fe:	2301      	movne	r3, #1
 8003900:	2300      	moveq	r3, #0
 8003902:	b2db      	uxtb	r3, r3
 8003904:	e02a      	b.n	800395c <HAL_DMA_IRQHandler+0x6e4>
 8003906:	bf00      	nop
 8003908:	40020010 	.word	0x40020010
 800390c:	40020028 	.word	0x40020028
 8003910:	40020040 	.word	0x40020040
 8003914:	40020058 	.word	0x40020058
 8003918:	40020070 	.word	0x40020070
 800391c:	40020088 	.word	0x40020088
 8003920:	400200a0 	.word	0x400200a0
 8003924:	400200b8 	.word	0x400200b8
 8003928:	40020410 	.word	0x40020410
 800392c:	40020428 	.word	0x40020428
 8003930:	40020440 	.word	0x40020440
 8003934:	40020458 	.word	0x40020458
 8003938:	40020470 	.word	0x40020470
 800393c:	40020488 	.word	0x40020488
 8003940:	400204a0 	.word	0x400204a0
 8003944:	400204b8 	.word	0x400204b8
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	bf14      	ite	ne
 8003956:	2301      	movne	r3, #1
 8003958:	2300      	moveq	r3, #0
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 8087 	beq.w	8003a70 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003966:	f003 031f 	and.w	r3, r3, #31
 800396a:	2220      	movs	r2, #32
 800396c:	409a      	lsls	r2, r3
 800396e:	6a3b      	ldr	r3, [r7, #32]
 8003970:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b04      	cmp	r3, #4
 800397c:	d139      	bne.n	80039f2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0216 	bic.w	r2, r2, #22
 800398c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695a      	ldr	r2, [r3, #20]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800399c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d103      	bne.n	80039ae <HAL_DMA_IRQHandler+0x736>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d007      	beq.n	80039be <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 0208 	bic.w	r2, r2, #8
 80039bc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039c2:	f003 031f 	and.w	r3, r3, #31
 80039c6:	223f      	movs	r2, #63	@ 0x3f
 80039c8:	409a      	lsls	r2, r3
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 834a 	beq.w	800407c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	4798      	blx	r3
          }
          return;
 80039f0:	e344      	b.n	800407c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d018      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d108      	bne.n	8003a20 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d02c      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	4798      	blx	r3
 8003a1e:	e027      	b.n	8003a70 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d023      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	4798      	blx	r3
 8003a30:	e01e      	b.n	8003a70 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10f      	bne.n	8003a60 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0210 	bic.w	r2, r2, #16
 8003a4e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d003      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 8306 	beq.w	8004086 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 8088 	beq.w	8003b98 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2204      	movs	r2, #4
 8003a8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a7a      	ldr	r2, [pc, #488]	@ (8003c80 <HAL_DMA_IRQHandler+0xa08>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d04a      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x8b8>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a79      	ldr	r2, [pc, #484]	@ (8003c84 <HAL_DMA_IRQHandler+0xa0c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d045      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x8b8>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a77      	ldr	r2, [pc, #476]	@ (8003c88 <HAL_DMA_IRQHandler+0xa10>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d040      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x8b8>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a76      	ldr	r2, [pc, #472]	@ (8003c8c <HAL_DMA_IRQHandler+0xa14>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d03b      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x8b8>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a74      	ldr	r2, [pc, #464]	@ (8003c90 <HAL_DMA_IRQHandler+0xa18>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d036      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x8b8>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a73      	ldr	r2, [pc, #460]	@ (8003c94 <HAL_DMA_IRQHandler+0xa1c>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d031      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x8b8>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a71      	ldr	r2, [pc, #452]	@ (8003c98 <HAL_DMA_IRQHandler+0xa20>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d02c      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x8b8>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a70      	ldr	r2, [pc, #448]	@ (8003c9c <HAL_DMA_IRQHandler+0xa24>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d027      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x8b8>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a6e      	ldr	r2, [pc, #440]	@ (8003ca0 <HAL_DMA_IRQHandler+0xa28>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d022      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x8b8>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a6d      	ldr	r2, [pc, #436]	@ (8003ca4 <HAL_DMA_IRQHandler+0xa2c>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d01d      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x8b8>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a6b      	ldr	r2, [pc, #428]	@ (8003ca8 <HAL_DMA_IRQHandler+0xa30>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d018      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x8b8>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a6a      	ldr	r2, [pc, #424]	@ (8003cac <HAL_DMA_IRQHandler+0xa34>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d013      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x8b8>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a68      	ldr	r2, [pc, #416]	@ (8003cb0 <HAL_DMA_IRQHandler+0xa38>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d00e      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x8b8>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a67      	ldr	r2, [pc, #412]	@ (8003cb4 <HAL_DMA_IRQHandler+0xa3c>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d009      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x8b8>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a65      	ldr	r2, [pc, #404]	@ (8003cb8 <HAL_DMA_IRQHandler+0xa40>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d004      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x8b8>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a64      	ldr	r2, [pc, #400]	@ (8003cbc <HAL_DMA_IRQHandler+0xa44>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d108      	bne.n	8003b42 <HAL_DMA_IRQHandler+0x8ca>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0201 	bic.w	r2, r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	e007      	b.n	8003b52 <HAL_DMA_IRQHandler+0x8da>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0201 	bic.w	r2, r2, #1
 8003b50:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	3301      	adds	r3, #1
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d307      	bcc.n	8003b6e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1f2      	bne.n	8003b52 <HAL_DMA_IRQHandler+0x8da>
 8003b6c:	e000      	b.n	8003b70 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003b6e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d004      	beq.n	8003b88 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2203      	movs	r2, #3
 8003b82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003b86:	e003      	b.n	8003b90 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 8272 	beq.w	8004086 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	4798      	blx	r3
 8003baa:	e26c      	b.n	8004086 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a43      	ldr	r2, [pc, #268]	@ (8003cc0 <HAL_DMA_IRQHandler+0xa48>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d022      	beq.n	8003bfc <HAL_DMA_IRQHandler+0x984>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a42      	ldr	r2, [pc, #264]	@ (8003cc4 <HAL_DMA_IRQHandler+0xa4c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d01d      	beq.n	8003bfc <HAL_DMA_IRQHandler+0x984>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a40      	ldr	r2, [pc, #256]	@ (8003cc8 <HAL_DMA_IRQHandler+0xa50>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d018      	beq.n	8003bfc <HAL_DMA_IRQHandler+0x984>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a3f      	ldr	r2, [pc, #252]	@ (8003ccc <HAL_DMA_IRQHandler+0xa54>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d013      	beq.n	8003bfc <HAL_DMA_IRQHandler+0x984>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a3d      	ldr	r2, [pc, #244]	@ (8003cd0 <HAL_DMA_IRQHandler+0xa58>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00e      	beq.n	8003bfc <HAL_DMA_IRQHandler+0x984>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a3c      	ldr	r2, [pc, #240]	@ (8003cd4 <HAL_DMA_IRQHandler+0xa5c>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d009      	beq.n	8003bfc <HAL_DMA_IRQHandler+0x984>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a3a      	ldr	r2, [pc, #232]	@ (8003cd8 <HAL_DMA_IRQHandler+0xa60>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d004      	beq.n	8003bfc <HAL_DMA_IRQHandler+0x984>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a39      	ldr	r2, [pc, #228]	@ (8003cdc <HAL_DMA_IRQHandler+0xa64>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d101      	bne.n	8003c00 <HAL_DMA_IRQHandler+0x988>
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e000      	b.n	8003c02 <HAL_DMA_IRQHandler+0x98a>
 8003c00:	2300      	movs	r3, #0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 823f 	beq.w	8004086 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c14:	f003 031f 	and.w	r3, r3, #31
 8003c18:	2204      	movs	r2, #4
 8003c1a:	409a      	lsls	r2, r3
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 80cd 	beq.w	8003dc0 <HAL_DMA_IRQHandler+0xb48>
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 80c7 	beq.w	8003dc0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c36:	f003 031f 	and.w	r3, r3, #31
 8003c3a:	2204      	movs	r2, #4
 8003c3c:	409a      	lsls	r2, r3
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d049      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d109      	bne.n	8003c6a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 8210 	beq.w	8004080 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c68:	e20a      	b.n	8004080 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 8206 	beq.w	8004080 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c7c:	e200      	b.n	8004080 <HAL_DMA_IRQHandler+0xe08>
 8003c7e:	bf00      	nop
 8003c80:	40020010 	.word	0x40020010
 8003c84:	40020028 	.word	0x40020028
 8003c88:	40020040 	.word	0x40020040
 8003c8c:	40020058 	.word	0x40020058
 8003c90:	40020070 	.word	0x40020070
 8003c94:	40020088 	.word	0x40020088
 8003c98:	400200a0 	.word	0x400200a0
 8003c9c:	400200b8 	.word	0x400200b8
 8003ca0:	40020410 	.word	0x40020410
 8003ca4:	40020428 	.word	0x40020428
 8003ca8:	40020440 	.word	0x40020440
 8003cac:	40020458 	.word	0x40020458
 8003cb0:	40020470 	.word	0x40020470
 8003cb4:	40020488 	.word	0x40020488
 8003cb8:	400204a0 	.word	0x400204a0
 8003cbc:	400204b8 	.word	0x400204b8
 8003cc0:	58025408 	.word	0x58025408
 8003cc4:	5802541c 	.word	0x5802541c
 8003cc8:	58025430 	.word	0x58025430
 8003ccc:	58025444 	.word	0x58025444
 8003cd0:	58025458 	.word	0x58025458
 8003cd4:	5802546c 	.word	0x5802546c
 8003cd8:	58025480 	.word	0x58025480
 8003cdc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	f003 0320 	and.w	r3, r3, #32
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d160      	bne.n	8003dac <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a7f      	ldr	r2, [pc, #508]	@ (8003eec <HAL_DMA_IRQHandler+0xc74>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d04a      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xb12>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a7d      	ldr	r2, [pc, #500]	@ (8003ef0 <HAL_DMA_IRQHandler+0xc78>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d045      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xb12>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a7c      	ldr	r2, [pc, #496]	@ (8003ef4 <HAL_DMA_IRQHandler+0xc7c>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d040      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xb12>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a7a      	ldr	r2, [pc, #488]	@ (8003ef8 <HAL_DMA_IRQHandler+0xc80>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d03b      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xb12>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a79      	ldr	r2, [pc, #484]	@ (8003efc <HAL_DMA_IRQHandler+0xc84>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d036      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xb12>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a77      	ldr	r2, [pc, #476]	@ (8003f00 <HAL_DMA_IRQHandler+0xc88>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d031      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xb12>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a76      	ldr	r2, [pc, #472]	@ (8003f04 <HAL_DMA_IRQHandler+0xc8c>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d02c      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xb12>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a74      	ldr	r2, [pc, #464]	@ (8003f08 <HAL_DMA_IRQHandler+0xc90>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d027      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xb12>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a73      	ldr	r2, [pc, #460]	@ (8003f0c <HAL_DMA_IRQHandler+0xc94>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d022      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xb12>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a71      	ldr	r2, [pc, #452]	@ (8003f10 <HAL_DMA_IRQHandler+0xc98>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d01d      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xb12>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a70      	ldr	r2, [pc, #448]	@ (8003f14 <HAL_DMA_IRQHandler+0xc9c>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d018      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xb12>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a6e      	ldr	r2, [pc, #440]	@ (8003f18 <HAL_DMA_IRQHandler+0xca0>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d013      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xb12>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a6d      	ldr	r2, [pc, #436]	@ (8003f1c <HAL_DMA_IRQHandler+0xca4>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d00e      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xb12>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a6b      	ldr	r2, [pc, #428]	@ (8003f20 <HAL_DMA_IRQHandler+0xca8>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d009      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xb12>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a6a      	ldr	r2, [pc, #424]	@ (8003f24 <HAL_DMA_IRQHandler+0xcac>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d004      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xb12>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a68      	ldr	r2, [pc, #416]	@ (8003f28 <HAL_DMA_IRQHandler+0xcb0>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d108      	bne.n	8003d9c <HAL_DMA_IRQHandler+0xb24>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0208 	bic.w	r2, r2, #8
 8003d98:	601a      	str	r2, [r3, #0]
 8003d9a:	e007      	b.n	8003dac <HAL_DMA_IRQHandler+0xb34>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0204 	bic.w	r2, r2, #4
 8003daa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 8165 	beq.w	8004080 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dbe:	e15f      	b.n	8004080 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dc4:	f003 031f 	and.w	r3, r3, #31
 8003dc8:	2202      	movs	r2, #2
 8003dca:	409a      	lsls	r2, r3
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 80c5 	beq.w	8003f60 <HAL_DMA_IRQHandler+0xce8>
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 80bf 	beq.w	8003f60 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de6:	f003 031f 	and.w	r3, r3, #31
 8003dea:	2202      	movs	r2, #2
 8003dec:	409a      	lsls	r2, r3
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d018      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d109      	bne.n	8003e1a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 813a 	beq.w	8004084 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e18:	e134      	b.n	8004084 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f000 8130 	beq.w	8004084 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e2c:	e12a      	b.n	8004084 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	f003 0320 	and.w	r3, r3, #32
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f040 8089 	bne.w	8003f4c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a2b      	ldr	r2, [pc, #172]	@ (8003eec <HAL_DMA_IRQHandler+0xc74>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d04a      	beq.n	8003eda <HAL_DMA_IRQHandler+0xc62>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a29      	ldr	r2, [pc, #164]	@ (8003ef0 <HAL_DMA_IRQHandler+0xc78>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d045      	beq.n	8003eda <HAL_DMA_IRQHandler+0xc62>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a28      	ldr	r2, [pc, #160]	@ (8003ef4 <HAL_DMA_IRQHandler+0xc7c>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d040      	beq.n	8003eda <HAL_DMA_IRQHandler+0xc62>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a26      	ldr	r2, [pc, #152]	@ (8003ef8 <HAL_DMA_IRQHandler+0xc80>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d03b      	beq.n	8003eda <HAL_DMA_IRQHandler+0xc62>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a25      	ldr	r2, [pc, #148]	@ (8003efc <HAL_DMA_IRQHandler+0xc84>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d036      	beq.n	8003eda <HAL_DMA_IRQHandler+0xc62>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a23      	ldr	r2, [pc, #140]	@ (8003f00 <HAL_DMA_IRQHandler+0xc88>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d031      	beq.n	8003eda <HAL_DMA_IRQHandler+0xc62>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a22      	ldr	r2, [pc, #136]	@ (8003f04 <HAL_DMA_IRQHandler+0xc8c>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d02c      	beq.n	8003eda <HAL_DMA_IRQHandler+0xc62>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a20      	ldr	r2, [pc, #128]	@ (8003f08 <HAL_DMA_IRQHandler+0xc90>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d027      	beq.n	8003eda <HAL_DMA_IRQHandler+0xc62>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a1f      	ldr	r2, [pc, #124]	@ (8003f0c <HAL_DMA_IRQHandler+0xc94>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d022      	beq.n	8003eda <HAL_DMA_IRQHandler+0xc62>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a1d      	ldr	r2, [pc, #116]	@ (8003f10 <HAL_DMA_IRQHandler+0xc98>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d01d      	beq.n	8003eda <HAL_DMA_IRQHandler+0xc62>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a1c      	ldr	r2, [pc, #112]	@ (8003f14 <HAL_DMA_IRQHandler+0xc9c>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d018      	beq.n	8003eda <HAL_DMA_IRQHandler+0xc62>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a1a      	ldr	r2, [pc, #104]	@ (8003f18 <HAL_DMA_IRQHandler+0xca0>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d013      	beq.n	8003eda <HAL_DMA_IRQHandler+0xc62>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a19      	ldr	r2, [pc, #100]	@ (8003f1c <HAL_DMA_IRQHandler+0xca4>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d00e      	beq.n	8003eda <HAL_DMA_IRQHandler+0xc62>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a17      	ldr	r2, [pc, #92]	@ (8003f20 <HAL_DMA_IRQHandler+0xca8>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d009      	beq.n	8003eda <HAL_DMA_IRQHandler+0xc62>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a16      	ldr	r2, [pc, #88]	@ (8003f24 <HAL_DMA_IRQHandler+0xcac>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d004      	beq.n	8003eda <HAL_DMA_IRQHandler+0xc62>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a14      	ldr	r2, [pc, #80]	@ (8003f28 <HAL_DMA_IRQHandler+0xcb0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d128      	bne.n	8003f2c <HAL_DMA_IRQHandler+0xcb4>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 0214 	bic.w	r2, r2, #20
 8003ee8:	601a      	str	r2, [r3, #0]
 8003eea:	e027      	b.n	8003f3c <HAL_DMA_IRQHandler+0xcc4>
 8003eec:	40020010 	.word	0x40020010
 8003ef0:	40020028 	.word	0x40020028
 8003ef4:	40020040 	.word	0x40020040
 8003ef8:	40020058 	.word	0x40020058
 8003efc:	40020070 	.word	0x40020070
 8003f00:	40020088 	.word	0x40020088
 8003f04:	400200a0 	.word	0x400200a0
 8003f08:	400200b8 	.word	0x400200b8
 8003f0c:	40020410 	.word	0x40020410
 8003f10:	40020428 	.word	0x40020428
 8003f14:	40020440 	.word	0x40020440
 8003f18:	40020458 	.word	0x40020458
 8003f1c:	40020470 	.word	0x40020470
 8003f20:	40020488 	.word	0x40020488
 8003f24:	400204a0 	.word	0x400204a0
 8003f28:	400204b8 	.word	0x400204b8
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 020a 	bic.w	r2, r2, #10
 8003f3a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 8097 	beq.w	8004084 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f5e:	e091      	b.n	8004084 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f64:	f003 031f 	and.w	r3, r3, #31
 8003f68:	2208      	movs	r2, #8
 8003f6a:	409a      	lsls	r2, r3
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 8088 	beq.w	8004086 <HAL_DMA_IRQHandler+0xe0e>
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	f003 0308 	and.w	r3, r3, #8
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 8082 	beq.w	8004086 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a41      	ldr	r2, [pc, #260]	@ (800408c <HAL_DMA_IRQHandler+0xe14>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d04a      	beq.n	8004022 <HAL_DMA_IRQHandler+0xdaa>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a3f      	ldr	r2, [pc, #252]	@ (8004090 <HAL_DMA_IRQHandler+0xe18>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d045      	beq.n	8004022 <HAL_DMA_IRQHandler+0xdaa>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a3e      	ldr	r2, [pc, #248]	@ (8004094 <HAL_DMA_IRQHandler+0xe1c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d040      	beq.n	8004022 <HAL_DMA_IRQHandler+0xdaa>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a3c      	ldr	r2, [pc, #240]	@ (8004098 <HAL_DMA_IRQHandler+0xe20>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d03b      	beq.n	8004022 <HAL_DMA_IRQHandler+0xdaa>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a3b      	ldr	r2, [pc, #236]	@ (800409c <HAL_DMA_IRQHandler+0xe24>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d036      	beq.n	8004022 <HAL_DMA_IRQHandler+0xdaa>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a39      	ldr	r2, [pc, #228]	@ (80040a0 <HAL_DMA_IRQHandler+0xe28>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d031      	beq.n	8004022 <HAL_DMA_IRQHandler+0xdaa>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a38      	ldr	r2, [pc, #224]	@ (80040a4 <HAL_DMA_IRQHandler+0xe2c>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d02c      	beq.n	8004022 <HAL_DMA_IRQHandler+0xdaa>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a36      	ldr	r2, [pc, #216]	@ (80040a8 <HAL_DMA_IRQHandler+0xe30>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d027      	beq.n	8004022 <HAL_DMA_IRQHandler+0xdaa>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a35      	ldr	r2, [pc, #212]	@ (80040ac <HAL_DMA_IRQHandler+0xe34>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d022      	beq.n	8004022 <HAL_DMA_IRQHandler+0xdaa>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a33      	ldr	r2, [pc, #204]	@ (80040b0 <HAL_DMA_IRQHandler+0xe38>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d01d      	beq.n	8004022 <HAL_DMA_IRQHandler+0xdaa>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a32      	ldr	r2, [pc, #200]	@ (80040b4 <HAL_DMA_IRQHandler+0xe3c>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d018      	beq.n	8004022 <HAL_DMA_IRQHandler+0xdaa>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a30      	ldr	r2, [pc, #192]	@ (80040b8 <HAL_DMA_IRQHandler+0xe40>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d013      	beq.n	8004022 <HAL_DMA_IRQHandler+0xdaa>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a2f      	ldr	r2, [pc, #188]	@ (80040bc <HAL_DMA_IRQHandler+0xe44>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d00e      	beq.n	8004022 <HAL_DMA_IRQHandler+0xdaa>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a2d      	ldr	r2, [pc, #180]	@ (80040c0 <HAL_DMA_IRQHandler+0xe48>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d009      	beq.n	8004022 <HAL_DMA_IRQHandler+0xdaa>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a2c      	ldr	r2, [pc, #176]	@ (80040c4 <HAL_DMA_IRQHandler+0xe4c>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d004      	beq.n	8004022 <HAL_DMA_IRQHandler+0xdaa>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a2a      	ldr	r2, [pc, #168]	@ (80040c8 <HAL_DMA_IRQHandler+0xe50>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d108      	bne.n	8004034 <HAL_DMA_IRQHandler+0xdbc>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 021c 	bic.w	r2, r2, #28
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	e007      	b.n	8004044 <HAL_DMA_IRQHandler+0xdcc>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 020e 	bic.w	r2, r2, #14
 8004042:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004048:	f003 031f 	and.w	r3, r3, #31
 800404c:	2201      	movs	r2, #1
 800404e:	409a      	lsls	r2, r3
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800406e:	2b00      	cmp	r3, #0
 8004070:	d009      	beq.n	8004086 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	4798      	blx	r3
 800407a:	e004      	b.n	8004086 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800407c:	bf00      	nop
 800407e:	e002      	b.n	8004086 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004080:	bf00      	nop
 8004082:	e000      	b.n	8004086 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004084:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004086:	3728      	adds	r7, #40	@ 0x28
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40020010 	.word	0x40020010
 8004090:	40020028 	.word	0x40020028
 8004094:	40020040 	.word	0x40020040
 8004098:	40020058 	.word	0x40020058
 800409c:	40020070 	.word	0x40020070
 80040a0:	40020088 	.word	0x40020088
 80040a4:	400200a0 	.word	0x400200a0
 80040a8:	400200b8 	.word	0x400200b8
 80040ac:	40020410 	.word	0x40020410
 80040b0:	40020428 	.word	0x40020428
 80040b4:	40020440 	.word	0x40020440
 80040b8:	40020458 	.word	0x40020458
 80040bc:	40020470 	.word	0x40020470
 80040c0:	40020488 	.word	0x40020488
 80040c4:	400204a0 	.word	0x400204a0
 80040c8:	400204b8 	.word	0x400204b8

080040cc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
 80040d8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040de:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a7f      	ldr	r2, [pc, #508]	@ (80042e8 <DMA_SetConfig+0x21c>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d072      	beq.n	80041d6 <DMA_SetConfig+0x10a>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a7d      	ldr	r2, [pc, #500]	@ (80042ec <DMA_SetConfig+0x220>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d06d      	beq.n	80041d6 <DMA_SetConfig+0x10a>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a7c      	ldr	r2, [pc, #496]	@ (80042f0 <DMA_SetConfig+0x224>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d068      	beq.n	80041d6 <DMA_SetConfig+0x10a>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a7a      	ldr	r2, [pc, #488]	@ (80042f4 <DMA_SetConfig+0x228>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d063      	beq.n	80041d6 <DMA_SetConfig+0x10a>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a79      	ldr	r2, [pc, #484]	@ (80042f8 <DMA_SetConfig+0x22c>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d05e      	beq.n	80041d6 <DMA_SetConfig+0x10a>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a77      	ldr	r2, [pc, #476]	@ (80042fc <DMA_SetConfig+0x230>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d059      	beq.n	80041d6 <DMA_SetConfig+0x10a>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a76      	ldr	r2, [pc, #472]	@ (8004300 <DMA_SetConfig+0x234>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d054      	beq.n	80041d6 <DMA_SetConfig+0x10a>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a74      	ldr	r2, [pc, #464]	@ (8004304 <DMA_SetConfig+0x238>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d04f      	beq.n	80041d6 <DMA_SetConfig+0x10a>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a73      	ldr	r2, [pc, #460]	@ (8004308 <DMA_SetConfig+0x23c>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d04a      	beq.n	80041d6 <DMA_SetConfig+0x10a>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a71      	ldr	r2, [pc, #452]	@ (800430c <DMA_SetConfig+0x240>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d045      	beq.n	80041d6 <DMA_SetConfig+0x10a>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a70      	ldr	r2, [pc, #448]	@ (8004310 <DMA_SetConfig+0x244>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d040      	beq.n	80041d6 <DMA_SetConfig+0x10a>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a6e      	ldr	r2, [pc, #440]	@ (8004314 <DMA_SetConfig+0x248>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d03b      	beq.n	80041d6 <DMA_SetConfig+0x10a>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a6d      	ldr	r2, [pc, #436]	@ (8004318 <DMA_SetConfig+0x24c>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d036      	beq.n	80041d6 <DMA_SetConfig+0x10a>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a6b      	ldr	r2, [pc, #428]	@ (800431c <DMA_SetConfig+0x250>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d031      	beq.n	80041d6 <DMA_SetConfig+0x10a>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a6a      	ldr	r2, [pc, #424]	@ (8004320 <DMA_SetConfig+0x254>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d02c      	beq.n	80041d6 <DMA_SetConfig+0x10a>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a68      	ldr	r2, [pc, #416]	@ (8004324 <DMA_SetConfig+0x258>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d027      	beq.n	80041d6 <DMA_SetConfig+0x10a>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a67      	ldr	r2, [pc, #412]	@ (8004328 <DMA_SetConfig+0x25c>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d022      	beq.n	80041d6 <DMA_SetConfig+0x10a>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a65      	ldr	r2, [pc, #404]	@ (800432c <DMA_SetConfig+0x260>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d01d      	beq.n	80041d6 <DMA_SetConfig+0x10a>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a64      	ldr	r2, [pc, #400]	@ (8004330 <DMA_SetConfig+0x264>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d018      	beq.n	80041d6 <DMA_SetConfig+0x10a>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a62      	ldr	r2, [pc, #392]	@ (8004334 <DMA_SetConfig+0x268>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d013      	beq.n	80041d6 <DMA_SetConfig+0x10a>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a61      	ldr	r2, [pc, #388]	@ (8004338 <DMA_SetConfig+0x26c>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d00e      	beq.n	80041d6 <DMA_SetConfig+0x10a>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a5f      	ldr	r2, [pc, #380]	@ (800433c <DMA_SetConfig+0x270>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d009      	beq.n	80041d6 <DMA_SetConfig+0x10a>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a5e      	ldr	r2, [pc, #376]	@ (8004340 <DMA_SetConfig+0x274>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d004      	beq.n	80041d6 <DMA_SetConfig+0x10a>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a5c      	ldr	r2, [pc, #368]	@ (8004344 <DMA_SetConfig+0x278>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d101      	bne.n	80041da <DMA_SetConfig+0x10e>
 80041d6:	2301      	movs	r3, #1
 80041d8:	e000      	b.n	80041dc <DMA_SetConfig+0x110>
 80041da:	2300      	movs	r3, #0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00d      	beq.n	80041fc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80041e8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d004      	beq.n	80041fc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80041fa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a39      	ldr	r2, [pc, #228]	@ (80042e8 <DMA_SetConfig+0x21c>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d04a      	beq.n	800429c <DMA_SetConfig+0x1d0>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a38      	ldr	r2, [pc, #224]	@ (80042ec <DMA_SetConfig+0x220>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d045      	beq.n	800429c <DMA_SetConfig+0x1d0>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a36      	ldr	r2, [pc, #216]	@ (80042f0 <DMA_SetConfig+0x224>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d040      	beq.n	800429c <DMA_SetConfig+0x1d0>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a35      	ldr	r2, [pc, #212]	@ (80042f4 <DMA_SetConfig+0x228>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d03b      	beq.n	800429c <DMA_SetConfig+0x1d0>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a33      	ldr	r2, [pc, #204]	@ (80042f8 <DMA_SetConfig+0x22c>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d036      	beq.n	800429c <DMA_SetConfig+0x1d0>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a32      	ldr	r2, [pc, #200]	@ (80042fc <DMA_SetConfig+0x230>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d031      	beq.n	800429c <DMA_SetConfig+0x1d0>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a30      	ldr	r2, [pc, #192]	@ (8004300 <DMA_SetConfig+0x234>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d02c      	beq.n	800429c <DMA_SetConfig+0x1d0>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a2f      	ldr	r2, [pc, #188]	@ (8004304 <DMA_SetConfig+0x238>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d027      	beq.n	800429c <DMA_SetConfig+0x1d0>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a2d      	ldr	r2, [pc, #180]	@ (8004308 <DMA_SetConfig+0x23c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d022      	beq.n	800429c <DMA_SetConfig+0x1d0>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a2c      	ldr	r2, [pc, #176]	@ (800430c <DMA_SetConfig+0x240>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d01d      	beq.n	800429c <DMA_SetConfig+0x1d0>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a2a      	ldr	r2, [pc, #168]	@ (8004310 <DMA_SetConfig+0x244>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d018      	beq.n	800429c <DMA_SetConfig+0x1d0>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a29      	ldr	r2, [pc, #164]	@ (8004314 <DMA_SetConfig+0x248>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d013      	beq.n	800429c <DMA_SetConfig+0x1d0>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a27      	ldr	r2, [pc, #156]	@ (8004318 <DMA_SetConfig+0x24c>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d00e      	beq.n	800429c <DMA_SetConfig+0x1d0>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a26      	ldr	r2, [pc, #152]	@ (800431c <DMA_SetConfig+0x250>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d009      	beq.n	800429c <DMA_SetConfig+0x1d0>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a24      	ldr	r2, [pc, #144]	@ (8004320 <DMA_SetConfig+0x254>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d004      	beq.n	800429c <DMA_SetConfig+0x1d0>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a23      	ldr	r2, [pc, #140]	@ (8004324 <DMA_SetConfig+0x258>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d101      	bne.n	80042a0 <DMA_SetConfig+0x1d4>
 800429c:	2301      	movs	r3, #1
 800429e:	e000      	b.n	80042a2 <DMA_SetConfig+0x1d6>
 80042a0:	2300      	movs	r3, #0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d059      	beq.n	800435a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042aa:	f003 031f 	and.w	r3, r3, #31
 80042ae:	223f      	movs	r2, #63	@ 0x3f
 80042b0:	409a      	lsls	r2, r3
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80042c4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	2b40      	cmp	r3, #64	@ 0x40
 80042d4:	d138      	bne.n	8004348 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80042e6:	e086      	b.n	80043f6 <DMA_SetConfig+0x32a>
 80042e8:	40020010 	.word	0x40020010
 80042ec:	40020028 	.word	0x40020028
 80042f0:	40020040 	.word	0x40020040
 80042f4:	40020058 	.word	0x40020058
 80042f8:	40020070 	.word	0x40020070
 80042fc:	40020088 	.word	0x40020088
 8004300:	400200a0 	.word	0x400200a0
 8004304:	400200b8 	.word	0x400200b8
 8004308:	40020410 	.word	0x40020410
 800430c:	40020428 	.word	0x40020428
 8004310:	40020440 	.word	0x40020440
 8004314:	40020458 	.word	0x40020458
 8004318:	40020470 	.word	0x40020470
 800431c:	40020488 	.word	0x40020488
 8004320:	400204a0 	.word	0x400204a0
 8004324:	400204b8 	.word	0x400204b8
 8004328:	58025408 	.word	0x58025408
 800432c:	5802541c 	.word	0x5802541c
 8004330:	58025430 	.word	0x58025430
 8004334:	58025444 	.word	0x58025444
 8004338:	58025458 	.word	0x58025458
 800433c:	5802546c 	.word	0x5802546c
 8004340:	58025480 	.word	0x58025480
 8004344:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	60da      	str	r2, [r3, #12]
}
 8004358:	e04d      	b.n	80043f6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a29      	ldr	r2, [pc, #164]	@ (8004404 <DMA_SetConfig+0x338>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d022      	beq.n	80043aa <DMA_SetConfig+0x2de>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a27      	ldr	r2, [pc, #156]	@ (8004408 <DMA_SetConfig+0x33c>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d01d      	beq.n	80043aa <DMA_SetConfig+0x2de>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a26      	ldr	r2, [pc, #152]	@ (800440c <DMA_SetConfig+0x340>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d018      	beq.n	80043aa <DMA_SetConfig+0x2de>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a24      	ldr	r2, [pc, #144]	@ (8004410 <DMA_SetConfig+0x344>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d013      	beq.n	80043aa <DMA_SetConfig+0x2de>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a23      	ldr	r2, [pc, #140]	@ (8004414 <DMA_SetConfig+0x348>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d00e      	beq.n	80043aa <DMA_SetConfig+0x2de>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a21      	ldr	r2, [pc, #132]	@ (8004418 <DMA_SetConfig+0x34c>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d009      	beq.n	80043aa <DMA_SetConfig+0x2de>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a20      	ldr	r2, [pc, #128]	@ (800441c <DMA_SetConfig+0x350>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d004      	beq.n	80043aa <DMA_SetConfig+0x2de>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a1e      	ldr	r2, [pc, #120]	@ (8004420 <DMA_SetConfig+0x354>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d101      	bne.n	80043ae <DMA_SetConfig+0x2e2>
 80043aa:	2301      	movs	r3, #1
 80043ac:	e000      	b.n	80043b0 <DMA_SetConfig+0x2e4>
 80043ae:	2300      	movs	r3, #0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d020      	beq.n	80043f6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043b8:	f003 031f 	and.w	r3, r3, #31
 80043bc:	2201      	movs	r2, #1
 80043be:	409a      	lsls	r2, r3
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	2b40      	cmp	r3, #64	@ 0x40
 80043d2:	d108      	bne.n	80043e6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68ba      	ldr	r2, [r7, #8]
 80043e2:	60da      	str	r2, [r3, #12]
}
 80043e4:	e007      	b.n	80043f6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	60da      	str	r2, [r3, #12]
}
 80043f6:	bf00      	nop
 80043f8:	371c      	adds	r7, #28
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	58025408 	.word	0x58025408
 8004408:	5802541c 	.word	0x5802541c
 800440c:	58025430 	.word	0x58025430
 8004410:	58025444 	.word	0x58025444
 8004414:	58025458 	.word	0x58025458
 8004418:	5802546c 	.word	0x5802546c
 800441c:	58025480 	.word	0x58025480
 8004420:	58025494 	.word	0x58025494

08004424 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a42      	ldr	r2, [pc, #264]	@ (800453c <DMA_CalcBaseAndBitshift+0x118>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d04a      	beq.n	80044cc <DMA_CalcBaseAndBitshift+0xa8>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a41      	ldr	r2, [pc, #260]	@ (8004540 <DMA_CalcBaseAndBitshift+0x11c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d045      	beq.n	80044cc <DMA_CalcBaseAndBitshift+0xa8>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a3f      	ldr	r2, [pc, #252]	@ (8004544 <DMA_CalcBaseAndBitshift+0x120>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d040      	beq.n	80044cc <DMA_CalcBaseAndBitshift+0xa8>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a3e      	ldr	r2, [pc, #248]	@ (8004548 <DMA_CalcBaseAndBitshift+0x124>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d03b      	beq.n	80044cc <DMA_CalcBaseAndBitshift+0xa8>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a3c      	ldr	r2, [pc, #240]	@ (800454c <DMA_CalcBaseAndBitshift+0x128>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d036      	beq.n	80044cc <DMA_CalcBaseAndBitshift+0xa8>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a3b      	ldr	r2, [pc, #236]	@ (8004550 <DMA_CalcBaseAndBitshift+0x12c>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d031      	beq.n	80044cc <DMA_CalcBaseAndBitshift+0xa8>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a39      	ldr	r2, [pc, #228]	@ (8004554 <DMA_CalcBaseAndBitshift+0x130>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d02c      	beq.n	80044cc <DMA_CalcBaseAndBitshift+0xa8>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a38      	ldr	r2, [pc, #224]	@ (8004558 <DMA_CalcBaseAndBitshift+0x134>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d027      	beq.n	80044cc <DMA_CalcBaseAndBitshift+0xa8>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a36      	ldr	r2, [pc, #216]	@ (800455c <DMA_CalcBaseAndBitshift+0x138>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d022      	beq.n	80044cc <DMA_CalcBaseAndBitshift+0xa8>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a35      	ldr	r2, [pc, #212]	@ (8004560 <DMA_CalcBaseAndBitshift+0x13c>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d01d      	beq.n	80044cc <DMA_CalcBaseAndBitshift+0xa8>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a33      	ldr	r2, [pc, #204]	@ (8004564 <DMA_CalcBaseAndBitshift+0x140>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d018      	beq.n	80044cc <DMA_CalcBaseAndBitshift+0xa8>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a32      	ldr	r2, [pc, #200]	@ (8004568 <DMA_CalcBaseAndBitshift+0x144>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d013      	beq.n	80044cc <DMA_CalcBaseAndBitshift+0xa8>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a30      	ldr	r2, [pc, #192]	@ (800456c <DMA_CalcBaseAndBitshift+0x148>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d00e      	beq.n	80044cc <DMA_CalcBaseAndBitshift+0xa8>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a2f      	ldr	r2, [pc, #188]	@ (8004570 <DMA_CalcBaseAndBitshift+0x14c>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d009      	beq.n	80044cc <DMA_CalcBaseAndBitshift+0xa8>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a2d      	ldr	r2, [pc, #180]	@ (8004574 <DMA_CalcBaseAndBitshift+0x150>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d004      	beq.n	80044cc <DMA_CalcBaseAndBitshift+0xa8>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a2c      	ldr	r2, [pc, #176]	@ (8004578 <DMA_CalcBaseAndBitshift+0x154>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d101      	bne.n	80044d0 <DMA_CalcBaseAndBitshift+0xac>
 80044cc:	2301      	movs	r3, #1
 80044ce:	e000      	b.n	80044d2 <DMA_CalcBaseAndBitshift+0xae>
 80044d0:	2300      	movs	r3, #0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d024      	beq.n	8004520 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	3b10      	subs	r3, #16
 80044de:	4a27      	ldr	r2, [pc, #156]	@ (800457c <DMA_CalcBaseAndBitshift+0x158>)
 80044e0:	fba2 2303 	umull	r2, r3, r2, r3
 80044e4:	091b      	lsrs	r3, r3, #4
 80044e6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f003 0307 	and.w	r3, r3, #7
 80044ee:	4a24      	ldr	r2, [pc, #144]	@ (8004580 <DMA_CalcBaseAndBitshift+0x15c>)
 80044f0:	5cd3      	ldrb	r3, [r2, r3]
 80044f2:	461a      	mov	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2b03      	cmp	r3, #3
 80044fc:	d908      	bls.n	8004510 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	461a      	mov	r2, r3
 8004504:	4b1f      	ldr	r3, [pc, #124]	@ (8004584 <DMA_CalcBaseAndBitshift+0x160>)
 8004506:	4013      	ands	r3, r2
 8004508:	1d1a      	adds	r2, r3, #4
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	659a      	str	r2, [r3, #88]	@ 0x58
 800450e:	e00d      	b.n	800452c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	461a      	mov	r2, r3
 8004516:	4b1b      	ldr	r3, [pc, #108]	@ (8004584 <DMA_CalcBaseAndBitshift+0x160>)
 8004518:	4013      	ands	r3, r2
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	6593      	str	r3, [r2, #88]	@ 0x58
 800451e:	e005      	b.n	800452c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004530:	4618      	mov	r0, r3
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	40020010 	.word	0x40020010
 8004540:	40020028 	.word	0x40020028
 8004544:	40020040 	.word	0x40020040
 8004548:	40020058 	.word	0x40020058
 800454c:	40020070 	.word	0x40020070
 8004550:	40020088 	.word	0x40020088
 8004554:	400200a0 	.word	0x400200a0
 8004558:	400200b8 	.word	0x400200b8
 800455c:	40020410 	.word	0x40020410
 8004560:	40020428 	.word	0x40020428
 8004564:	40020440 	.word	0x40020440
 8004568:	40020458 	.word	0x40020458
 800456c:	40020470 	.word	0x40020470
 8004570:	40020488 	.word	0x40020488
 8004574:	400204a0 	.word	0x400204a0
 8004578:	400204b8 	.word	0x400204b8
 800457c:	aaaaaaab 	.word	0xaaaaaaab
 8004580:	0800c074 	.word	0x0800c074
 8004584:	fffffc00 	.word	0xfffffc00

08004588 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004590:	2300      	movs	r3, #0
 8004592:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d120      	bne.n	80045de <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a0:	2b03      	cmp	r3, #3
 80045a2:	d858      	bhi.n	8004656 <DMA_CheckFifoParam+0xce>
 80045a4:	a201      	add	r2, pc, #4	@ (adr r2, 80045ac <DMA_CheckFifoParam+0x24>)
 80045a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045aa:	bf00      	nop
 80045ac:	080045bd 	.word	0x080045bd
 80045b0:	080045cf 	.word	0x080045cf
 80045b4:	080045bd 	.word	0x080045bd
 80045b8:	08004657 	.word	0x08004657
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d048      	beq.n	800465a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045cc:	e045      	b.n	800465a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80045d6:	d142      	bne.n	800465e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045dc:	e03f      	b.n	800465e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045e6:	d123      	bne.n	8004630 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ec:	2b03      	cmp	r3, #3
 80045ee:	d838      	bhi.n	8004662 <DMA_CheckFifoParam+0xda>
 80045f0:	a201      	add	r2, pc, #4	@ (adr r2, 80045f8 <DMA_CheckFifoParam+0x70>)
 80045f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f6:	bf00      	nop
 80045f8:	08004609 	.word	0x08004609
 80045fc:	0800460f 	.word	0x0800460f
 8004600:	08004609 	.word	0x08004609
 8004604:	08004621 	.word	0x08004621
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	73fb      	strb	r3, [r7, #15]
        break;
 800460c:	e030      	b.n	8004670 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004612:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d025      	beq.n	8004666 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800461e:	e022      	b.n	8004666 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004624:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004628:	d11f      	bne.n	800466a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800462e:	e01c      	b.n	800466a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004634:	2b02      	cmp	r3, #2
 8004636:	d902      	bls.n	800463e <DMA_CheckFifoParam+0xb6>
 8004638:	2b03      	cmp	r3, #3
 800463a:	d003      	beq.n	8004644 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800463c:	e018      	b.n	8004670 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	73fb      	strb	r3, [r7, #15]
        break;
 8004642:	e015      	b.n	8004670 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004648:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00e      	beq.n	800466e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	73fb      	strb	r3, [r7, #15]
    break;
 8004654:	e00b      	b.n	800466e <DMA_CheckFifoParam+0xe6>
        break;
 8004656:	bf00      	nop
 8004658:	e00a      	b.n	8004670 <DMA_CheckFifoParam+0xe8>
        break;
 800465a:	bf00      	nop
 800465c:	e008      	b.n	8004670 <DMA_CheckFifoParam+0xe8>
        break;
 800465e:	bf00      	nop
 8004660:	e006      	b.n	8004670 <DMA_CheckFifoParam+0xe8>
        break;
 8004662:	bf00      	nop
 8004664:	e004      	b.n	8004670 <DMA_CheckFifoParam+0xe8>
        break;
 8004666:	bf00      	nop
 8004668:	e002      	b.n	8004670 <DMA_CheckFifoParam+0xe8>
        break;
 800466a:	bf00      	nop
 800466c:	e000      	b.n	8004670 <DMA_CheckFifoParam+0xe8>
    break;
 800466e:	bf00      	nop
    }
  }

  return status;
 8004670:	7bfb      	ldrb	r3, [r7, #15]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop

08004680 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a38      	ldr	r2, [pc, #224]	@ (8004774 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d022      	beq.n	80046de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a36      	ldr	r2, [pc, #216]	@ (8004778 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d01d      	beq.n	80046de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a35      	ldr	r2, [pc, #212]	@ (800477c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d018      	beq.n	80046de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a33      	ldr	r2, [pc, #204]	@ (8004780 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d013      	beq.n	80046de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a32      	ldr	r2, [pc, #200]	@ (8004784 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d00e      	beq.n	80046de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a30      	ldr	r2, [pc, #192]	@ (8004788 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d009      	beq.n	80046de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a2f      	ldr	r2, [pc, #188]	@ (800478c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d004      	beq.n	80046de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a2d      	ldr	r2, [pc, #180]	@ (8004790 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d101      	bne.n	80046e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80046de:	2301      	movs	r3, #1
 80046e0:	e000      	b.n	80046e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80046e2:	2300      	movs	r3, #0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d01a      	beq.n	800471e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	3b08      	subs	r3, #8
 80046f0:	4a28      	ldr	r2, [pc, #160]	@ (8004794 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80046f2:	fba2 2303 	umull	r2, r3, r2, r3
 80046f6:	091b      	lsrs	r3, r3, #4
 80046f8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	4b26      	ldr	r3, [pc, #152]	@ (8004798 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80046fe:	4413      	add	r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	461a      	mov	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a24      	ldr	r2, [pc, #144]	@ (800479c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800470c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f003 031f 	and.w	r3, r3, #31
 8004714:	2201      	movs	r2, #1
 8004716:	409a      	lsls	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800471c:	e024      	b.n	8004768 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	b2db      	uxtb	r3, r3
 8004724:	3b10      	subs	r3, #16
 8004726:	4a1e      	ldr	r2, [pc, #120]	@ (80047a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004728:	fba2 2303 	umull	r2, r3, r2, r3
 800472c:	091b      	lsrs	r3, r3, #4
 800472e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	4a1c      	ldr	r2, [pc, #112]	@ (80047a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d806      	bhi.n	8004746 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	4a1b      	ldr	r2, [pc, #108]	@ (80047a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d902      	bls.n	8004746 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	3308      	adds	r3, #8
 8004744:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	4b18      	ldr	r3, [pc, #96]	@ (80047ac <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800474a:	4413      	add	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	461a      	mov	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a16      	ldr	r2, [pc, #88]	@ (80047b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004758:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f003 031f 	and.w	r3, r3, #31
 8004760:	2201      	movs	r2, #1
 8004762:	409a      	lsls	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004768:	bf00      	nop
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr
 8004774:	58025408 	.word	0x58025408
 8004778:	5802541c 	.word	0x5802541c
 800477c:	58025430 	.word	0x58025430
 8004780:	58025444 	.word	0x58025444
 8004784:	58025458 	.word	0x58025458
 8004788:	5802546c 	.word	0x5802546c
 800478c:	58025480 	.word	0x58025480
 8004790:	58025494 	.word	0x58025494
 8004794:	cccccccd 	.word	0xcccccccd
 8004798:	16009600 	.word	0x16009600
 800479c:	58025880 	.word	0x58025880
 80047a0:	aaaaaaab 	.word	0xaaaaaaab
 80047a4:	400204b8 	.word	0x400204b8
 80047a8:	4002040f 	.word	0x4002040f
 80047ac:	10008200 	.word	0x10008200
 80047b0:	40020880 	.word	0x40020880

080047b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d04a      	beq.n	8004860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2b08      	cmp	r3, #8
 80047ce:	d847      	bhi.n	8004860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a25      	ldr	r2, [pc, #148]	@ (800486c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d022      	beq.n	8004820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a24      	ldr	r2, [pc, #144]	@ (8004870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d01d      	beq.n	8004820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a22      	ldr	r2, [pc, #136]	@ (8004874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d018      	beq.n	8004820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a21      	ldr	r2, [pc, #132]	@ (8004878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d013      	beq.n	8004820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a1f      	ldr	r2, [pc, #124]	@ (800487c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d00e      	beq.n	8004820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a1e      	ldr	r2, [pc, #120]	@ (8004880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d009      	beq.n	8004820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a1c      	ldr	r2, [pc, #112]	@ (8004884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d004      	beq.n	8004820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a1b      	ldr	r2, [pc, #108]	@ (8004888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d101      	bne.n	8004824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004820:	2301      	movs	r3, #1
 8004822:	e000      	b.n	8004826 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004824:	2300      	movs	r3, #0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00a      	beq.n	8004840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	4b17      	ldr	r3, [pc, #92]	@ (800488c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800482e:	4413      	add	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	461a      	mov	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a15      	ldr	r2, [pc, #84]	@ (8004890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800483c:	671a      	str	r2, [r3, #112]	@ 0x70
 800483e:	e009      	b.n	8004854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	4b14      	ldr	r3, [pc, #80]	@ (8004894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004844:	4413      	add	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	461a      	mov	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a11      	ldr	r2, [pc, #68]	@ (8004898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004852:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	3b01      	subs	r3, #1
 8004858:	2201      	movs	r2, #1
 800485a:	409a      	lsls	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004860:	bf00      	nop
 8004862:	3714      	adds	r7, #20
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	58025408 	.word	0x58025408
 8004870:	5802541c 	.word	0x5802541c
 8004874:	58025430 	.word	0x58025430
 8004878:	58025444 	.word	0x58025444
 800487c:	58025458 	.word	0x58025458
 8004880:	5802546c 	.word	0x5802546c
 8004884:	58025480 	.word	0x58025480
 8004888:	58025494 	.word	0x58025494
 800488c:	1600963f 	.word	0x1600963f
 8004890:	58025940 	.word	0x58025940
 8004894:	1000823f 	.word	0x1000823f
 8004898:	40020940 	.word	0x40020940

0800489c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b098      	sub	sp, #96	@ 0x60
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80048a4:	4a84      	ldr	r2, [pc, #528]	@ (8004ab8 <HAL_FDCAN_Init+0x21c>)
 80048a6:	f107 030c 	add.w	r3, r7, #12
 80048aa:	4611      	mov	r1, r2
 80048ac:	224c      	movs	r2, #76	@ 0x4c
 80048ae:	4618      	mov	r0, r3
 80048b0:	f006 fa7b 	bl	800adaa <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e1c6      	b.n	8004c4c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a7e      	ldr	r2, [pc, #504]	@ (8004abc <HAL_FDCAN_Init+0x220>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d106      	bne.n	80048d6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80048d0:	461a      	mov	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d106      	bne.n	80048f0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7fb ff6a 	bl	80007c4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699a      	ldr	r2, [r3, #24]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f022 0210 	bic.w	r2, r2, #16
 80048fe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004900:	f7fd fd22 	bl	8002348 <HAL_GetTick>
 8004904:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004906:	e014      	b.n	8004932 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004908:	f7fd fd1e 	bl	8002348 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b0a      	cmp	r3, #10
 8004914:	d90d      	bls.n	8004932 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800491c:	f043 0201 	orr.w	r2, r3, #1
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2203      	movs	r2, #3
 800492a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e18c      	b.n	8004c4c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	f003 0308 	and.w	r3, r3, #8
 800493c:	2b08      	cmp	r3, #8
 800493e:	d0e3      	beq.n	8004908 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699a      	ldr	r2, [r3, #24]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f042 0201 	orr.w	r2, r2, #1
 800494e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004950:	f7fd fcfa 	bl	8002348 <HAL_GetTick>
 8004954:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004956:	e014      	b.n	8004982 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004958:	f7fd fcf6 	bl	8002348 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b0a      	cmp	r3, #10
 8004964:	d90d      	bls.n	8004982 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800496c:	f043 0201 	orr.w	r2, r3, #1
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2203      	movs	r2, #3
 800497a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e164      	b.n	8004c4c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b00      	cmp	r3, #0
 800498e:	d0e3      	beq.n	8004958 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	699a      	ldr	r2, [r3, #24]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f042 0202 	orr.w	r2, r2, #2
 800499e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	7c1b      	ldrb	r3, [r3, #16]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d108      	bne.n	80049ba <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	699a      	ldr	r2, [r3, #24]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049b6:	619a      	str	r2, [r3, #24]
 80049b8:	e007      	b.n	80049ca <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	699a      	ldr	r2, [r3, #24]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049c8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	7c5b      	ldrb	r3, [r3, #17]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d108      	bne.n	80049e4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	699a      	ldr	r2, [r3, #24]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049e0:	619a      	str	r2, [r3, #24]
 80049e2:	e007      	b.n	80049f4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	699a      	ldr	r2, [r3, #24]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80049f2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	7c9b      	ldrb	r3, [r3, #18]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d108      	bne.n	8004a0e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	699a      	ldr	r2, [r3, #24]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004a0a:	619a      	str	r2, [r3, #24]
 8004a0c:	e007      	b.n	8004a1e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	699a      	ldr	r2, [r3, #24]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004a1c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689a      	ldr	r2, [r3, #8]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	699a      	ldr	r2, [r3, #24]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004a42:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	691a      	ldr	r2, [r3, #16]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 0210 	bic.w	r2, r2, #16
 8004a52:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d108      	bne.n	8004a6e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	699a      	ldr	r2, [r3, #24]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f042 0204 	orr.w	r2, r2, #4
 8004a6a:	619a      	str	r2, [r3, #24]
 8004a6c:	e030      	b.n	8004ad0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d02c      	beq.n	8004ad0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d020      	beq.n	8004ac0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	699a      	ldr	r2, [r3, #24]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004a8c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	691a      	ldr	r2, [r3, #16]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f042 0210 	orr.w	r2, r2, #16
 8004a9c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	2b03      	cmp	r3, #3
 8004aa4:	d114      	bne.n	8004ad0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	699a      	ldr	r2, [r3, #24]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f042 0220 	orr.w	r2, r2, #32
 8004ab4:	619a      	str	r2, [r3, #24]
 8004ab6:	e00b      	b.n	8004ad0 <HAL_FDCAN_Init+0x234>
 8004ab8:	0800bfc8 	.word	0x0800bfc8
 8004abc:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	699a      	ldr	r2, [r3, #24]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f042 0220 	orr.w	r2, r2, #32
 8004ace:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	69db      	ldr	r3, [r3, #28]
 8004adc:	3b01      	subs	r3, #1
 8004ade:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ae0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004ae8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	3b01      	subs	r3, #1
 8004af2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004af8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004afa:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b04:	d115      	bne.n	8004b32 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b0a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b10:	3b01      	subs	r3, #1
 8004b12:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004b14:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004b1e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b26:	3b01      	subs	r3, #1
 8004b28:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004b2e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004b30:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b58:	4413      	add	r3, r2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d011      	beq.n	8004b82 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004b66:	f023 0107 	bic.w	r1, r3, #7
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	3360      	adds	r3, #96	@ 0x60
 8004b72:	443b      	add	r3, r7
 8004b74:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d011      	beq.n	8004bae <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004b92:	f023 0107 	bic.w	r1, r3, #7
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	3360      	adds	r3, #96	@ 0x60
 8004b9e:	443b      	add	r3, r7
 8004ba0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d012      	beq.n	8004bdc <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004bbe:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	3360      	adds	r3, #96	@ 0x60
 8004bca:	443b      	add	r3, r7
 8004bcc:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004bd0:	011a      	lsls	r2, r3, #4
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d012      	beq.n	8004c0a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004bec:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	3360      	adds	r3, #96	@ 0x60
 8004bf8:	443b      	add	r3, r7
 8004bfa:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004bfe:	021a      	lsls	r2, r3, #8
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a11      	ldr	r2, [pc, #68]	@ (8004c54 <HAL_FDCAN_Init+0x3b8>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d107      	bne.n	8004c24 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	689a      	ldr	r2, [r3, #8]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f022 0203 	bic.w	r2, r2, #3
 8004c22:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 fedd 	bl	80059fc <FDCAN_CalcultateRamBlockAddresses>
 8004c42:	4603      	mov	r3, r0
 8004c44:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8004c48:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3760      	adds	r7, #96	@ 0x60
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	4000a000 	.word	0x4000a000

08004c58 <HAL_FDCAN_DeInit>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_DeInit(FDCAN_HandleTypeDef *hfdcan)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_FDCAN_DeInit+0x12>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e016      	b.n	8004c98 <HAL_FDCAN_DeInit+0x40>

  /* Check function parameters */
  assert_param(IS_FDCAN_ALL_INSTANCE(hfdcan->Instance));

  /* Stop the FDCAN module: return value is voluntary ignored */
  (void)HAL_FDCAN_Stop(hfdcan);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f8e6 	bl	8004e3c <HAL_FDCAN_Stop>

  /* Disable Interrupt lines */
  CLEAR_BIT(hfdcan->Instance->ILE, (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0203 	bic.w	r2, r2, #3
 8004c7e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* DeInit the low level hardware: CLOCK, NVIC */
  hfdcan->MspDeInitCallback(hfdcan);
#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_FDCAN_MspDeInit(hfdcan);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f7fb fe11 	bl	80008a8 <HAL_FDCAN_MspDeInit>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Reset the FDCAN ErrorCode */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Change FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_RESET;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Return function status */
  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004cb0:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004cb2:	7bfb      	ldrb	r3, [r7, #15]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d002      	beq.n	8004cbe <HAL_FDCAN_ConfigFilter+0x1e>
 8004cb8:	7bfb      	ldrb	r3, [r7, #15]
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d157      	bne.n	8004d6e <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d12b      	bne.n	8004d1e <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	2b07      	cmp	r3, #7
 8004ccc:	d10d      	bne.n	8004cea <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	69db      	ldr	r3, [r3, #28]
 8004cd8:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8004cda:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004ce0:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8004ce2:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8004ce6:	617b      	str	r3, [r7, #20]
 8004ce8:	e00e      	b.n	8004d08 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004cf6:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8004cfe:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004d04:	4313      	orrs	r3, r2
 8004d06:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4413      	add	r3, r2
 8004d14:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	601a      	str	r2, [r3, #0]
 8004d1c:	e025      	b.n	8004d6a <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	075a      	lsls	r2, r3, #29
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	2b07      	cmp	r3, #7
 8004d32:	d103      	bne.n	8004d3c <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	613b      	str	r3, [r7, #16]
 8004d3a:	e006      	b.n	8004d4a <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	079a      	lsls	r2, r3, #30
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	4413      	add	r3, r2
 8004d56:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	3304      	adds	r3, #4
 8004d62:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	e008      	b.n	8004d80 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d74:	f043 0202 	orr.w	r2, r3, #2
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
  }
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	371c      	adds	r7, #28
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
 8004d98:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d110      	bne.n	8004dc8 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004dae:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8004db4:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004dc0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	e008      	b.n	8004dda <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004dce:	f043 0204 	orr.w	r2, r3, #4
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
  }
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d111      	bne.n	8004e1e <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2202      	movs	r2, #2
 8004dfe:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	699a      	ldr	r2, [r3, #24]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 0201 	bic.w	r2, r2, #1
 8004e10:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	e008      	b.n	8004e30 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e24:	f043 0204 	orr.w	r2, r3, #4
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
  }
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <HAL_FDCAN_Stop>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Stop(FDCAN_HandleTypeDef *hfdcan)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  uint32_t Counter = 0U;
 8004e44:	2300      	movs	r3, #0
 8004e46:	60fb      	str	r3, [r7, #12]

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d15b      	bne.n	8004f0c <HAL_FDCAN_Stop+0xd0>
  {
    /* Request initialisation */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	699a      	ldr	r2, [r3, #24]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f042 0201 	orr.w	r2, r2, #1
 8004e62:	619a      	str	r2, [r3, #24]

    /* Wait until the INIT bit into CCCR register is set */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004e64:	e013      	b.n	8004e8e <HAL_FDCAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_COUNT)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2b32      	cmp	r3, #50	@ 0x32
 8004e6a:	d90d      	bls.n	8004e88 <HAL_FDCAN_Stop+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e72:	f043 0201 	orr.w	r2, r3, #1
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2203      	movs	r2, #3
 8004e80:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

        return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e04a      	b.n	8004f1e <HAL_FDCAN_Stop+0xe2>
      }

      /* Increment counter */
      Counter++;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d0e4      	beq.n	8004e66 <HAL_FDCAN_Stop+0x2a>
    }

    /* Reset counter */
    Counter = 0U;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	60fb      	str	r3, [r7, #12]

    /* Exit from Sleep mode */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	699a      	ldr	r2, [r3, #24]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 0210 	bic.w	r2, r2, #16
 8004eae:	619a      	str	r2, [r3, #24]

    /* Wait until FDCAN exits sleep mode */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004eb0:	e013      	b.n	8004eda <HAL_FDCAN_Stop+0x9e>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_COUNT)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2b32      	cmp	r3, #50	@ 0x32
 8004eb6:	d90d      	bls.n	8004ed4 <HAL_FDCAN_Stop+0x98>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ebe:	f043 0201 	orr.w	r2, r3, #1
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2203      	movs	r2, #3
 8004ecc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

        return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e024      	b.n	8004f1e <HAL_FDCAN_Stop+0xe2>
      }

      /* Increment counter */
      Counter++;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	f003 0308 	and.w	r3, r3, #8
 8004ee4:	2b08      	cmp	r3, #8
 8004ee6:	d0e4      	beq.n	8004eb2 <HAL_FDCAN_Stop+0x76>
    }

    /* Enable configuration change */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	699a      	ldr	r2, [r3, #24]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f042 0202 	orr.w	r2, r2, #2
 8004ef6:	619a      	str	r2, [r3, #24]

    /* Reset Latest Tx FIFO/Queue Request Buffer Index */
    hfdcan->LatestTxFifoQRequest = 0U;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Return function status */
    return HAL_OK;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	e008      	b.n	8004f1e <HAL_FDCAN_Stop+0xe2>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f12:	f043 0208 	orr.w	r2, r3, #8
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
  }
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

08004f2a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b086      	sub	sp, #24
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	60f8      	str	r0, [r7, #12]
 8004f32:	60b9      	str	r1, [r7, #8]
 8004f34:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d141      	bne.n	8004fc6 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004f4a:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d109      	bne.n	8004f66 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f58:	f043 0220 	orr.w	r2, r3, #32
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e038      	b.n	8004fd8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004f6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d009      	beq.n	8004f8a <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f7c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e026      	b.n	8004fd8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004f92:	0c1b      	lsrs	r3, r3, #16
 8004f94:	f003 031f 	and.w	r3, r3, #31
 8004f98:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	68b9      	ldr	r1, [r7, #8]
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f000 feb1 	bl	8005d08 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2101      	movs	r1, #1
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	fa01 f202 	lsl.w	r2, r1, r2
 8004fb2:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	409a      	lsls	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	e008      	b.n	8004fd8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004fcc:	f043 0208 	orr.w	r2, r3, #8
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
  }
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3718      	adds	r7, #24
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b08b      	sub	sp, #44	@ 0x2c
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
 8004fec:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004ff8:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8004ffa:	7efb      	ldrb	r3, [r7, #27]
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	f040 8149 	bne.w	8005294 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	2b40      	cmp	r3, #64	@ 0x40
 8005006:	d14c      	bne.n	80050a2 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005010:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d109      	bne.n	800502c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800501e:	f043 0220 	orr.w	r2, r3, #32
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e13c      	b.n	80052a6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005034:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005038:	2b00      	cmp	r3, #0
 800503a:	d109      	bne.n	8005050 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005042:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e12a      	b.n	80052a6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005058:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800505c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005060:	d10a      	bne.n	8005078 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800506a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800506e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005072:	d101      	bne.n	8005078 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005074:	2301      	movs	r3, #1
 8005076:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005080:	0a1b      	lsrs	r3, r3, #8
 8005082:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005086:	69fa      	ldr	r2, [r7, #28]
 8005088:	4413      	add	r3, r2
 800508a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005094:	69f9      	ldr	r1, [r7, #28]
 8005096:	fb01 f303 	mul.w	r3, r1, r3
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4413      	add	r3, r2
 800509e:	627b      	str	r3, [r7, #36]	@ 0x24
 80050a0:	e068      	b.n	8005174 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	2b41      	cmp	r3, #65	@ 0x41
 80050a6:	d14c      	bne.n	8005142 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80050b0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d109      	bne.n	80050cc <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050be:	f043 0220 	orr.w	r2, r3, #32
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e0ec      	b.n	80052a6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80050d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d109      	bne.n	80050f0 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050e2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e0da      	b.n	80052a6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80050f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005100:	d10a      	bne.n	8005118 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800510a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800510e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005112:	d101      	bne.n	8005118 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005114:	2301      	movs	r3, #1
 8005116:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005120:	0a1b      	lsrs	r3, r3, #8
 8005122:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005126:	69fa      	ldr	r2, [r7, #28]
 8005128:	4413      	add	r3, r2
 800512a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005134:	69f9      	ldr	r1, [r7, #28]
 8005136:	fb01 f303 	mul.w	r3, r1, r3
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	4413      	add	r3, r2
 800513e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005140:	e018      	b.n	8005174 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	429a      	cmp	r2, r3
 800514a:	d309      	bcc.n	8005160 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005152:	f043 0220 	orr.w	r2, r3, #32
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e0a2      	b.n	80052a6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005168:	68b9      	ldr	r1, [r7, #8]
 800516a:	fb01 f303 	mul.w	r3, r1, r3
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d107      	bne.n	8005198 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	0c9b      	lsrs	r3, r3, #18
 800518e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	e005      	b.n	80051a4 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80051a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80051b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80051bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051be:	3304      	adds	r3, #4
 80051c0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80051c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80051cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	0c1b      	lsrs	r3, r3, #16
 80051d2:	f003 020f 	and.w	r2, r3, #15
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80051da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80051e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80051f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	0e1b      	lsrs	r3, r3, #24
 80051f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	0fda      	lsrs	r2, r3, #31
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800520a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520c:	3304      	adds	r3, #4
 800520e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005212:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005214:	2300      	movs	r3, #0
 8005216:	623b      	str	r3, [r7, #32]
 8005218:	e00a      	b.n	8005230 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	6a3b      	ldr	r3, [r7, #32]
 800521e:	441a      	add	r2, r3
 8005220:	6839      	ldr	r1, [r7, #0]
 8005222:	6a3b      	ldr	r3, [r7, #32]
 8005224:	440b      	add	r3, r1
 8005226:	7812      	ldrb	r2, [r2, #0]
 8005228:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800522a:	6a3b      	ldr	r3, [r7, #32]
 800522c:	3301      	adds	r3, #1
 800522e:	623b      	str	r3, [r7, #32]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	4a1f      	ldr	r2, [pc, #124]	@ (80052b4 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8005236:	5cd3      	ldrb	r3, [r2, r3]
 8005238:	461a      	mov	r2, r3
 800523a:	6a3b      	ldr	r3, [r7, #32]
 800523c:	4293      	cmp	r3, r2
 800523e:	d3ec      	bcc.n	800521a <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2b40      	cmp	r3, #64	@ 0x40
 8005244:	d105      	bne.n	8005252 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	69fa      	ldr	r2, [r7, #28]
 800524c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8005250:	e01e      	b.n	8005290 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	2b41      	cmp	r3, #65	@ 0x41
 8005256:	d105      	bne.n	8005264 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	69fa      	ldr	r2, [r7, #28]
 800525e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8005262:	e015      	b.n	8005290 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	2b1f      	cmp	r3, #31
 8005268:	d808      	bhi.n	800527c <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2101      	movs	r1, #1
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	fa01 f202 	lsl.w	r2, r1, r2
 8005276:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800527a:	e009      	b.n	8005290 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f003 021f 	and.w	r2, r3, #31
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2101      	movs	r1, #1
 8005288:	fa01 f202 	lsl.w	r2, r1, r2
 800528c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8005290:	2300      	movs	r3, #0
 8005292:	e008      	b.n	80052a6 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800529a:	f043 0208 	orr.w	r2, r3, #8
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
  }
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	372c      	adds	r7, #44	@ 0x2c
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	0800c07c 	.word	0x0800c07c

080052b8 <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(const FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	2b40      	cmp	r3, #64	@ 0x40
 80052c6:	d107      	bne.n	80052d8 <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80052d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052d4:	60fb      	str	r3, [r7, #12]
 80052d6:	e006      	b.n	80052e6 <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80052e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052e4:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 80052e6:	68fb      	ldr	r3, [r7, #12]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b087      	sub	sp, #28
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005306:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005308:	7dfb      	ldrb	r3, [r7, #23]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d002      	beq.n	8005314 <HAL_FDCAN_ActivateNotification+0x20>
 800530e:	7dfb      	ldrb	r3, [r7, #23]
 8005310:	2b02      	cmp	r3, #2
 8005312:	d155      	bne.n	80053c0 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	4013      	ands	r3, r2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d108      	bne.n	8005334 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f042 0201 	orr.w	r2, r2, #1
 8005330:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005332:	e014      	b.n	800535e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	4013      	ands	r3, r2
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	429a      	cmp	r2, r3
 8005342:	d108      	bne.n	8005356 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f042 0202 	orr.w	r2, r2, #2
 8005352:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005354:	e003      	b.n	800535e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2203      	movs	r2, #3
 800535c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005364:	2b00      	cmp	r3, #0
 8005366:	d009      	beq.n	800537c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	430a      	orrs	r2, r1
 8005378:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005382:	2b00      	cmp	r3, #0
 8005384:	d009      	beq.n	800539a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	430a      	orrs	r2, r1
 8005396:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	4b0f      	ldr	r3, [pc, #60]	@ (80053e0 <HAL_FDCAN_ActivateNotification+0xec>)
 80053a4:	4013      	ands	r3, r2
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	6812      	ldr	r2, [r2, #0]
 80053aa:	430b      	orrs	r3, r1
 80053ac:	6553      	str	r3, [r2, #84]	@ 0x54
 80053ae:	4b0d      	ldr	r3, [pc, #52]	@ (80053e4 <HAL_FDCAN_ActivateNotification+0xf0>)
 80053b0:	695a      	ldr	r2, [r3, #20]
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	0f9b      	lsrs	r3, r3, #30
 80053b6:	490b      	ldr	r1, [pc, #44]	@ (80053e4 <HAL_FDCAN_ActivateNotification+0xf0>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80053bc:	2300      	movs	r3, #0
 80053be:	e008      	b.n	80053d2 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80053c6:	f043 0202 	orr.w	r2, r3, #2
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
  }
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	371c      	adds	r7, #28
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	3fcfffff 	.word	0x3fcfffff
 80053e4:	4000a800 	.word	0x4000a800

080053e8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b096      	sub	sp, #88	@ 0x58
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80053f0:	4b9a      	ldr	r3, [pc, #616]	@ (800565c <HAL_FDCAN_IRQHandler+0x274>)
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	079b      	lsls	r3, r3, #30
 80053f6:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80053f8:	4b98      	ldr	r3, [pc, #608]	@ (800565c <HAL_FDCAN_IRQHandler+0x274>)
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	079b      	lsls	r3, r3, #30
 80053fe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005400:	4013      	ands	r3, r2
 8005402:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800540a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800540e:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005416:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005418:	4013      	ands	r3, r2
 800541a:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005422:	f003 030f 	and.w	r3, r3, #15
 8005426:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800542e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005430:	4013      	ands	r3, r2
 8005432:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800543a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800543e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005446:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005448:	4013      	ands	r3, r2
 800544a:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005452:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8005456:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800545e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005460:	4013      	ands	r3, r2
 8005462:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800546a:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 800546e:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005476:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005478:	4013      	ands	r3, r2
 800547a:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005482:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800548a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800548c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800548e:	0a1b      	lsrs	r3, r3, #8
 8005490:	f003 0301 	and.w	r3, r3, #1
 8005494:	2b00      	cmp	r3, #0
 8005496:	d010      	beq.n	80054ba <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800549a:	0a1b      	lsrs	r3, r3, #8
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00a      	beq.n	80054ba <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80054ac:	651a      	str	r2, [r3, #80]	@ 0x50
 80054ae:	4b6b      	ldr	r3, [pc, #428]	@ (800565c <HAL_FDCAN_IRQHandler+0x274>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 fa5f 	bl	8005978 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80054ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054bc:	0a9b      	lsrs	r3, r3, #10
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d01d      	beq.n	8005502 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80054c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c8:	0a9b      	lsrs	r3, r3, #10
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d017      	beq.n	8005502 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80054da:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80054e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80054e6:	4013      	ands	r3, r2
 80054e8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80054f2:	651a      	str	r2, [r3, #80]	@ 0x50
 80054f4:	4b59      	ldr	r3, [pc, #356]	@ (800565c <HAL_FDCAN_IRQHandler+0x274>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80054fa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 fa12 	bl	8005926 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8005502:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00d      	beq.n	8005524 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800550e:	4b54      	ldr	r3, [pc, #336]	@ (8005660 <HAL_FDCAN_IRQHandler+0x278>)
 8005510:	400b      	ands	r3, r1
 8005512:	6513      	str	r3, [r2, #80]	@ 0x50
 8005514:	4a51      	ldr	r2, [pc, #324]	@ (800565c <HAL_FDCAN_IRQHandler+0x274>)
 8005516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005518:	0f9b      	lsrs	r3, r3, #30
 800551a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 800551c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f9c0 	bl	80058a4 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005524:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00d      	beq.n	8005546 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005530:	4b4b      	ldr	r3, [pc, #300]	@ (8005660 <HAL_FDCAN_IRQHandler+0x278>)
 8005532:	400b      	ands	r3, r1
 8005534:	6513      	str	r3, [r2, #80]	@ 0x50
 8005536:	4a49      	ldr	r2, [pc, #292]	@ (800565c <HAL_FDCAN_IRQHandler+0x274>)
 8005538:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800553a:	0f9b      	lsrs	r3, r3, #30
 800553c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800553e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 f9ba 	bl	80058ba <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005546:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00d      	beq.n	8005568 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005552:	4b43      	ldr	r3, [pc, #268]	@ (8005660 <HAL_FDCAN_IRQHandler+0x278>)
 8005554:	400b      	ands	r3, r1
 8005556:	6513      	str	r3, [r2, #80]	@ 0x50
 8005558:	4a40      	ldr	r2, [pc, #256]	@ (800565c <HAL_FDCAN_IRQHandler+0x274>)
 800555a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800555c:	0f9b      	lsrs	r3, r3, #30
 800555e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005560:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f9b4 	bl	80058d0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005568:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00d      	beq.n	800558a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005574:	4b3a      	ldr	r3, [pc, #232]	@ (8005660 <HAL_FDCAN_IRQHandler+0x278>)
 8005576:	400b      	ands	r3, r1
 8005578:	6513      	str	r3, [r2, #80]	@ 0x50
 800557a:	4a38      	ldr	r2, [pc, #224]	@ (800565c <HAL_FDCAN_IRQHandler+0x274>)
 800557c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800557e:	0f9b      	lsrs	r3, r3, #30
 8005580:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005582:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f9ae 	bl	80058e6 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800558a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800558c:	0adb      	lsrs	r3, r3, #11
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b00      	cmp	r3, #0
 8005594:	d010      	beq.n	80055b8 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005598:	0adb      	lsrs	r3, r3, #11
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00a      	beq.n	80055b8 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80055aa:	651a      	str	r2, [r3, #80]	@ 0x50
 80055ac:	4b2b      	ldr	r3, [pc, #172]	@ (800565c <HAL_FDCAN_IRQHandler+0x274>)
 80055ae:	2200      	movs	r2, #0
 80055b0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f9a2 	bl	80058fc <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80055b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ba:	0a5b      	lsrs	r3, r3, #9
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d01d      	beq.n	8005600 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80055c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055c6:	0a5b      	lsrs	r3, r3, #9
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d017      	beq.n	8005600 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80055d8:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055e4:	4013      	ands	r3, r2
 80055e6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055f0:	651a      	str	r2, [r3, #80]	@ 0x50
 80055f2:	4b1a      	ldr	r3, [pc, #104]	@ (800565c <HAL_FDCAN_IRQHandler+0x274>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80055f8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f988 	bl	8005910 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005602:	0cdb      	lsrs	r3, r3, #19
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	2b00      	cmp	r3, #0
 800560a:	d010      	beq.n	800562e <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 800560c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800560e:	0cdb      	lsrs	r3, r3, #19
 8005610:	f003 0301 	and.w	r3, r3, #1
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00a      	beq.n	800562e <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005620:	651a      	str	r2, [r3, #80]	@ 0x50
 8005622:	4b0e      	ldr	r3, [pc, #56]	@ (800565c <HAL_FDCAN_IRQHandler+0x274>)
 8005624:	2200      	movs	r2, #0
 8005626:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 f987 	bl	800593c <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800562e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005630:	0c1b      	lsrs	r3, r3, #16
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	d016      	beq.n	8005668 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800563a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800563c:	0c1b      	lsrs	r3, r3, #16
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b00      	cmp	r3, #0
 8005644:	d010      	beq.n	8005668 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800564e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005650:	4b02      	ldr	r3, [pc, #8]	@ (800565c <HAL_FDCAN_IRQHandler+0x274>)
 8005652:	2200      	movs	r2, #0
 8005654:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	e004      	b.n	8005664 <HAL_FDCAN_IRQHandler+0x27c>
 800565a:	bf00      	nop
 800565c:	4000a800 	.word	0x4000a800
 8005660:	3fcfffff 	.word	0x3fcfffff
 8005664:	f000 f974 	bl	8005950 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800566a:	0c9b      	lsrs	r3, r3, #18
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	2b00      	cmp	r3, #0
 8005672:	d010      	beq.n	8005696 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005676:	0c9b      	lsrs	r3, r3, #18
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00a      	beq.n	8005696 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005688:	651a      	str	r2, [r3, #80]	@ 0x50
 800568a:	4b83      	ldr	r3, [pc, #524]	@ (8005898 <HAL_FDCAN_IRQHandler+0x4b0>)
 800568c:	2200      	movs	r2, #0
 800568e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f967 	bl	8005964 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005698:	0c5b      	lsrs	r3, r3, #17
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d015      	beq.n	80056ce <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80056a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a4:	0c5b      	lsrs	r3, r3, #17
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00f      	beq.n	80056ce <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80056b6:	651a      	str	r2, [r3, #80]	@ 0x50
 80056b8:	4b77      	ldr	r3, [pc, #476]	@ (8005898 <HAL_FDCAN_IRQHandler+0x4b0>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056c4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80056ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00d      	beq.n	80056f0 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80056da:	4b70      	ldr	r3, [pc, #448]	@ (800589c <HAL_FDCAN_IRQHandler+0x4b4>)
 80056dc:	400b      	ands	r3, r1
 80056de:	6513      	str	r3, [r2, #80]	@ 0x50
 80056e0:	4a6d      	ldr	r2, [pc, #436]	@ (8005898 <HAL_FDCAN_IRQHandler+0x4b0>)
 80056e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056e4:	0f9b      	lsrs	r3, r3, #30
 80056e6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80056e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7fb f9e6 	bl	8000abc <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80056f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d011      	beq.n	800571a <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80056fc:	4b67      	ldr	r3, [pc, #412]	@ (800589c <HAL_FDCAN_IRQHandler+0x4b4>)
 80056fe:	400b      	ands	r3, r1
 8005700:	6513      	str	r3, [r2, #80]	@ 0x50
 8005702:	4a65      	ldr	r2, [pc, #404]	@ (8005898 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005704:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005706:	0f9b      	lsrs	r3, r3, #30
 8005708:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005710:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005712:	431a      	orrs	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a60      	ldr	r2, [pc, #384]	@ (80058a0 <HAL_FDCAN_IRQHandler+0x4b8>)
 8005720:	4293      	cmp	r3, r2
 8005722:	f040 80ac 	bne.w	800587e <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f003 0303 	and.w	r3, r3, #3
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 80a4 	beq.w	800587e <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	6a1b      	ldr	r3, [r3, #32]
 800573c:	f003 030f 	and.w	r3, r3, #15
 8005740:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005748:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800574a:	4013      	ands	r3, r2
 800574c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005758:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005760:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005762:	4013      	ands	r3, r2
 8005764:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005770:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005778:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800577a:	4013      	ands	r3, r2
 800577c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8005788:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005790:	6a3a      	ldr	r2, [r7, #32]
 8005792:	4013      	ands	r3, r2
 8005794:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	6a1b      	ldr	r3, [r3, #32]
 800579c:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 80057a0:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a8:	69fa      	ldr	r2, [r7, #28]
 80057aa:	4013      	ands	r3, r2
 80057ac:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b4:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	6a1b      	ldr	r3, [r3, #32]
 80057bc:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80057be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d007      	beq.n	80057d4 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057ca:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80057cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f8e6 	bl	80059a0 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80057d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d007      	beq.n	80057ea <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057e0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80057e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f8e6 	bl	80059b6 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	099b      	lsrs	r3, r3, #6
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d01a      	beq.n	800582c <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	099b      	lsrs	r3, r3, #6
 80057fa:	f003 0301 	and.w	r3, r3, #1
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d014      	beq.n	800582c <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005808:	0c1b      	lsrs	r3, r3, #16
 800580a:	b29b      	uxth	r3, r3
 800580c:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005814:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005818:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	2240      	movs	r2, #64	@ 0x40
 8005820:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	6939      	ldr	r1, [r7, #16]
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f8d0 	bl	80059cc <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800582c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582e:	2b00      	cmp	r3, #0
 8005830:	d007      	beq.n	8005842 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005838:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800583a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 f8d1 	bl	80059e4 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8005842:	6a3b      	ldr	r3, [r7, #32]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00b      	beq.n	8005860 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	6a3a      	ldr	r2, [r7, #32]
 800584e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005856:	6a3b      	ldr	r3, [r7, #32]
 8005858:	431a      	orrs	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00b      	beq.n	800587e <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	69fa      	ldr	r2, [r7, #28]
 800586c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	431a      	orrs	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005884:	2b00      	cmp	r3, #0
 8005886:	d002      	beq.n	800588e <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 f87f 	bl	800598c <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800588e:	bf00      	nop
 8005890:	3758      	adds	r7, #88	@ 0x58
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	4000a800 	.word	0x4000a800
 800589c:	3fcfffff 	.word	0x3fcfffff
 80058a0:	4000a000 	.word	0x4000a000

080058a4 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80058ae:	bf00      	nop
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80058ba:	b480      	push	{r7}
 80058bc:	b083      	sub	sp, #12
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
 80058c2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80058da:	bf00      	nop
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b083      	sub	sp, #12
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
 80058ee:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005904:	bf00      	nop
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800591a:	bf00      	nop
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005926:	b480      	push	{r7}
 8005928:	b083      	sub	sp, #12
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
 800592e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80059aa:	bf00      	nop
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b083      	sub	sp, #12
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
 80059be:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80059d8:	bf00      	nop
 80059da:	3714      	adds	r7, #20
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80059ee:	bf00      	nop
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
	...

080059fc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a08:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005a12:	4ba7      	ldr	r3, [pc, #668]	@ (8005cb0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005a14:	4013      	ands	r3, r2
 8005a16:	68ba      	ldr	r2, [r7, #8]
 8005a18:	0091      	lsls	r1, r2, #2
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	6812      	ldr	r2, [r2, #0]
 8005a1e:	430b      	orrs	r3, r1
 8005a20:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a2c:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a34:	041a      	lsls	r2, r3, #16
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a44:	68ba      	ldr	r2, [r7, #8]
 8005a46:	4413      	add	r3, r2
 8005a48:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005a52:	4b97      	ldr	r3, [pc, #604]	@ (8005cb0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005a54:	4013      	ands	r3, r2
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	0091      	lsls	r1, r2, #2
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	6812      	ldr	r2, [r2, #0]
 8005a5e:	430b      	orrs	r3, r1
 8005a60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a6c:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a74:	041a      	lsls	r2, r3, #16
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	4413      	add	r3, r2
 8005a8a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8005a94:	4b86      	ldr	r3, [pc, #536]	@ (8005cb0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005a96:	4013      	ands	r3, r2
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	0091      	lsls	r1, r2, #2
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	6812      	ldr	r2, [r2, #0]
 8005aa0:	430b      	orrs	r3, r1
 8005aa2:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005aae:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab6:	041a      	lsls	r2, r3, #16
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	430a      	orrs	r2, r1
 8005abe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005aca:	fb02 f303 	mul.w	r3, r2, r3
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005adc:	4b74      	ldr	r3, [pc, #464]	@ (8005cb0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005ade:	4013      	ands	r3, r2
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	0091      	lsls	r1, r2, #2
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	6812      	ldr	r2, [r2, #0]
 8005ae8:	430b      	orrs	r3, r1
 8005aea:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005af6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005afe:	041a      	lsls	r2, r3, #16
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	430a      	orrs	r2, r1
 8005b06:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005b12:	fb02 f303 	mul.w	r3, r2, r3
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	4413      	add	r3, r2
 8005b1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8005b24:	4b62      	ldr	r3, [pc, #392]	@ (8005cb0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005b26:	4013      	ands	r3, r2
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	0091      	lsls	r1, r2, #2
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	6812      	ldr	r2, [r2, #0]
 8005b30:	430b      	orrs	r3, r1
 8005b32:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005b3e:	fb02 f303 	mul.w	r3, r2, r3
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	4413      	add	r3, r2
 8005b46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8005b50:	4b57      	ldr	r3, [pc, #348]	@ (8005cb0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005b52:	4013      	ands	r3, r2
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	0091      	lsls	r1, r2, #2
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	6812      	ldr	r2, [r2, #0]
 8005b5c:	430b      	orrs	r3, r1
 8005b5e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b6a:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b72:	041a      	lsls	r2, r3, #16
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b82:	005b      	lsls	r3, r3, #1
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	4413      	add	r3, r2
 8005b88:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005b92:	4b47      	ldr	r3, [pc, #284]	@ (8005cb0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005b94:	4013      	ands	r3, r2
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	0091      	lsls	r1, r2, #2
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	6812      	ldr	r2, [r2, #0]
 8005b9e:	430b      	orrs	r3, r1
 8005ba0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005bac:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bb4:	041a      	lsls	r2, r3, #16
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005bc8:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bd0:	061a      	lsls	r2, r3, #24
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005be0:	4b34      	ldr	r3, [pc, #208]	@ (8005cb4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005be2:	4413      	add	r3, r2
 8005be4:	009a      	lsls	r2, r3, #2
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	441a      	add	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c02:	00db      	lsls	r3, r3, #3
 8005c04:	441a      	add	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c12:	6879      	ldr	r1, [r7, #4]
 8005c14:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8005c16:	fb01 f303 	mul.w	r3, r1, r3
 8005c1a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005c1c:	441a      	add	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c2a:	6879      	ldr	r1, [r7, #4]
 8005c2c:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8005c2e:	fb01 f303 	mul.w	r3, r1, r3
 8005c32:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005c34:	441a      	add	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c42:	6879      	ldr	r1, [r7, #4]
 8005c44:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8005c46:	fb01 f303 	mul.w	r3, r1, r3
 8005c4a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005c4c:	441a      	add	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	441a      	add	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c72:	6879      	ldr	r1, [r7, #4]
 8005c74:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005c76:	fb01 f303 	mul.w	r3, r1, r3
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	441a      	add	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c8e:	6879      	ldr	r1, [r7, #4]
 8005c90:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005c92:	fb01 f303 	mul.w	r3, r1, r3
 8005c96:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005c98:	441a      	add	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ca6:	4a04      	ldr	r2, [pc, #16]	@ (8005cb8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d915      	bls.n	8005cd8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005cac:	e006      	b.n	8005cbc <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005cae:	bf00      	nop
 8005cb0:	ffff0003 	.word	0xffff0003
 8005cb4:	10002b00 	.word	0x10002b00
 8005cb8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005cc2:	f043 0220 	orr.w	r2, r3, #32
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2203      	movs	r2, #3
 8005cd0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e010      	b.n	8005cfa <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cdc:	60fb      	str	r3, [r7, #12]
 8005cde:	e005      	b.n	8005cec <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	3304      	adds	r3, #4
 8005cea:	60fb      	str	r3, [r7, #12]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d3f3      	bcc.n	8005ce0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop

08005d08 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b089      	sub	sp, #36	@ 0x24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
 8005d14:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10a      	bne.n	8005d34 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8005d26:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	61fb      	str	r3, [r7, #28]
 8005d32:	e00a      	b.n	8005d4a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005d3c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8005d42:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005d44:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d48:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005d54:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8005d5a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8005d60:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d76:	6839      	ldr	r1, [r7, #0]
 8005d78:	fb01 f303 	mul.w	r3, r1, r3
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4413      	add	r3, r2
 8005d80:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	69fa      	ldr	r2, [r7, #28]
 8005d86:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	3304      	adds	r3, #4
 8005d8c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	3304      	adds	r3, #4
 8005d98:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	617b      	str	r3, [r7, #20]
 8005d9e:	e020      	b.n	8005de2 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	3303      	adds	r3, #3
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	4413      	add	r3, r2
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	3302      	adds	r3, #2
 8005db0:	6879      	ldr	r1, [r7, #4]
 8005db2:	440b      	add	r3, r1
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005db8:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	6879      	ldr	r1, [r7, #4]
 8005dc0:	440b      	add	r3, r1
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005dc6:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8005dc8:	6879      	ldr	r1, [r7, #4]
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	440a      	add	r2, r1
 8005dce:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005dd0:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	3304      	adds	r3, #4
 8005dda:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	3304      	adds	r3, #4
 8005de0:	617b      	str	r3, [r7, #20]
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	4a06      	ldr	r2, [pc, #24]	@ (8005e00 <FDCAN_CopyMessageToRAM+0xf8>)
 8005de8:	5cd3      	ldrb	r3, [r2, r3]
 8005dea:	461a      	mov	r2, r3
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d3d6      	bcc.n	8005da0 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8005df2:	bf00      	nop
 8005df4:	bf00      	nop
 8005df6:	3724      	adds	r7, #36	@ 0x24
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	0800c07c 	.word	0x0800c07c

08005e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b089      	sub	sp, #36	@ 0x24
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005e12:	4b89      	ldr	r3, [pc, #548]	@ (8006038 <HAL_GPIO_Init+0x234>)
 8005e14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e16:	e194      	b.n	8006142 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	2101      	movs	r1, #1
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	fa01 f303 	lsl.w	r3, r1, r3
 8005e24:	4013      	ands	r3, r2
 8005e26:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f000 8186 	beq.w	800613c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	f003 0303 	and.w	r3, r3, #3
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d005      	beq.n	8005e48 <HAL_GPIO_Init+0x44>
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	f003 0303 	and.w	r3, r3, #3
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d130      	bne.n	8005eaa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	005b      	lsls	r3, r3, #1
 8005e52:	2203      	movs	r2, #3
 8005e54:	fa02 f303 	lsl.w	r3, r2, r3
 8005e58:	43db      	mvns	r3, r3
 8005e5a:	69ba      	ldr	r2, [r7, #24]
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	68da      	ldr	r2, [r3, #12]
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	005b      	lsls	r3, r3, #1
 8005e68:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	69ba      	ldr	r2, [r7, #24]
 8005e76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e7e:	2201      	movs	r2, #1
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	fa02 f303 	lsl.w	r3, r2, r3
 8005e86:	43db      	mvns	r3, r3
 8005e88:	69ba      	ldr	r2, [r7, #24]
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	091b      	lsrs	r3, r3, #4
 8005e94:	f003 0201 	and.w	r2, r3, #1
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9e:	69ba      	ldr	r2, [r7, #24]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	69ba      	ldr	r2, [r7, #24]
 8005ea8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f003 0303 	and.w	r3, r3, #3
 8005eb2:	2b03      	cmp	r3, #3
 8005eb4:	d017      	beq.n	8005ee6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	005b      	lsls	r3, r3, #1
 8005ec0:	2203      	movs	r2, #3
 8005ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec6:	43db      	mvns	r3, r3
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	4013      	ands	r3, r2
 8005ecc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	689a      	ldr	r2, [r3, #8]
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	005b      	lsls	r3, r3, #1
 8005ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	69ba      	ldr	r2, [r7, #24]
 8005ee4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d123      	bne.n	8005f3a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	08da      	lsrs	r2, r3, #3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	3208      	adds	r2, #8
 8005efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	f003 0307 	and.w	r3, r3, #7
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	220f      	movs	r2, #15
 8005f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0e:	43db      	mvns	r3, r3
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	4013      	ands	r3, r2
 8005f14:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	691a      	ldr	r2, [r3, #16]
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	f003 0307 	and.w	r3, r3, #7
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	fa02 f303 	lsl.w	r3, r2, r3
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	08da      	lsrs	r2, r3, #3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	3208      	adds	r2, #8
 8005f34:	69b9      	ldr	r1, [r7, #24]
 8005f36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	005b      	lsls	r3, r3, #1
 8005f44:	2203      	movs	r2, #3
 8005f46:	fa02 f303 	lsl.w	r3, r2, r3
 8005f4a:	43db      	mvns	r3, r3
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	4013      	ands	r3, r2
 8005f50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f003 0203 	and.w	r2, r3, #3
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	005b      	lsls	r3, r3, #1
 8005f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f62:	69ba      	ldr	r2, [r7, #24]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	69ba      	ldr	r2, [r7, #24]
 8005f6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f000 80e0 	beq.w	800613c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f7c:	4b2f      	ldr	r3, [pc, #188]	@ (800603c <HAL_GPIO_Init+0x238>)
 8005f7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005f82:	4a2e      	ldr	r2, [pc, #184]	@ (800603c <HAL_GPIO_Init+0x238>)
 8005f84:	f043 0302 	orr.w	r3, r3, #2
 8005f88:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005f8c:	4b2b      	ldr	r3, [pc, #172]	@ (800603c <HAL_GPIO_Init+0x238>)
 8005f8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005f92:	f003 0302 	and.w	r3, r3, #2
 8005f96:	60fb      	str	r3, [r7, #12]
 8005f98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f9a:	4a29      	ldr	r2, [pc, #164]	@ (8006040 <HAL_GPIO_Init+0x23c>)
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	089b      	lsrs	r3, r3, #2
 8005fa0:	3302      	adds	r3, #2
 8005fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	f003 0303 	and.w	r3, r3, #3
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	220f      	movs	r2, #15
 8005fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb6:	43db      	mvns	r3, r3
 8005fb8:	69ba      	ldr	r2, [r7, #24]
 8005fba:	4013      	ands	r3, r2
 8005fbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a20      	ldr	r2, [pc, #128]	@ (8006044 <HAL_GPIO_Init+0x240>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d052      	beq.n	800606c <HAL_GPIO_Init+0x268>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a1f      	ldr	r2, [pc, #124]	@ (8006048 <HAL_GPIO_Init+0x244>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d031      	beq.n	8006032 <HAL_GPIO_Init+0x22e>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a1e      	ldr	r2, [pc, #120]	@ (800604c <HAL_GPIO_Init+0x248>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d02b      	beq.n	800602e <HAL_GPIO_Init+0x22a>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a1d      	ldr	r2, [pc, #116]	@ (8006050 <HAL_GPIO_Init+0x24c>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d025      	beq.n	800602a <HAL_GPIO_Init+0x226>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a1c      	ldr	r2, [pc, #112]	@ (8006054 <HAL_GPIO_Init+0x250>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d01f      	beq.n	8006026 <HAL_GPIO_Init+0x222>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a1b      	ldr	r2, [pc, #108]	@ (8006058 <HAL_GPIO_Init+0x254>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d019      	beq.n	8006022 <HAL_GPIO_Init+0x21e>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a1a      	ldr	r2, [pc, #104]	@ (800605c <HAL_GPIO_Init+0x258>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d013      	beq.n	800601e <HAL_GPIO_Init+0x21a>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a19      	ldr	r2, [pc, #100]	@ (8006060 <HAL_GPIO_Init+0x25c>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d00d      	beq.n	800601a <HAL_GPIO_Init+0x216>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a18      	ldr	r2, [pc, #96]	@ (8006064 <HAL_GPIO_Init+0x260>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d007      	beq.n	8006016 <HAL_GPIO_Init+0x212>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a17      	ldr	r2, [pc, #92]	@ (8006068 <HAL_GPIO_Init+0x264>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d101      	bne.n	8006012 <HAL_GPIO_Init+0x20e>
 800600e:	2309      	movs	r3, #9
 8006010:	e02d      	b.n	800606e <HAL_GPIO_Init+0x26a>
 8006012:	230a      	movs	r3, #10
 8006014:	e02b      	b.n	800606e <HAL_GPIO_Init+0x26a>
 8006016:	2308      	movs	r3, #8
 8006018:	e029      	b.n	800606e <HAL_GPIO_Init+0x26a>
 800601a:	2307      	movs	r3, #7
 800601c:	e027      	b.n	800606e <HAL_GPIO_Init+0x26a>
 800601e:	2306      	movs	r3, #6
 8006020:	e025      	b.n	800606e <HAL_GPIO_Init+0x26a>
 8006022:	2305      	movs	r3, #5
 8006024:	e023      	b.n	800606e <HAL_GPIO_Init+0x26a>
 8006026:	2304      	movs	r3, #4
 8006028:	e021      	b.n	800606e <HAL_GPIO_Init+0x26a>
 800602a:	2303      	movs	r3, #3
 800602c:	e01f      	b.n	800606e <HAL_GPIO_Init+0x26a>
 800602e:	2302      	movs	r3, #2
 8006030:	e01d      	b.n	800606e <HAL_GPIO_Init+0x26a>
 8006032:	2301      	movs	r3, #1
 8006034:	e01b      	b.n	800606e <HAL_GPIO_Init+0x26a>
 8006036:	bf00      	nop
 8006038:	58000080 	.word	0x58000080
 800603c:	58024400 	.word	0x58024400
 8006040:	58000400 	.word	0x58000400
 8006044:	58020000 	.word	0x58020000
 8006048:	58020400 	.word	0x58020400
 800604c:	58020800 	.word	0x58020800
 8006050:	58020c00 	.word	0x58020c00
 8006054:	58021000 	.word	0x58021000
 8006058:	58021400 	.word	0x58021400
 800605c:	58021800 	.word	0x58021800
 8006060:	58021c00 	.word	0x58021c00
 8006064:	58022000 	.word	0x58022000
 8006068:	58022400 	.word	0x58022400
 800606c:	2300      	movs	r3, #0
 800606e:	69fa      	ldr	r2, [r7, #28]
 8006070:	f002 0203 	and.w	r2, r2, #3
 8006074:	0092      	lsls	r2, r2, #2
 8006076:	4093      	lsls	r3, r2
 8006078:	69ba      	ldr	r2, [r7, #24]
 800607a:	4313      	orrs	r3, r2
 800607c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800607e:	4938      	ldr	r1, [pc, #224]	@ (8006160 <HAL_GPIO_Init+0x35c>)
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	089b      	lsrs	r3, r3, #2
 8006084:	3302      	adds	r3, #2
 8006086:	69ba      	ldr	r2, [r7, #24]
 8006088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800608c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	43db      	mvns	r3, r3
 8006098:	69ba      	ldr	r2, [r7, #24]
 800609a:	4013      	ands	r3, r2
 800609c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d003      	beq.n	80060b2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80060aa:	69ba      	ldr	r2, [r7, #24]
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80060b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80060ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	43db      	mvns	r3, r3
 80060c6:	69ba      	ldr	r2, [r7, #24]
 80060c8:	4013      	ands	r3, r2
 80060ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d003      	beq.n	80060e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80060d8:	69ba      	ldr	r2, [r7, #24]
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	4313      	orrs	r3, r2
 80060de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80060e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	43db      	mvns	r3, r3
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	4013      	ands	r3, r2
 80060f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d003      	beq.n	800610c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	4313      	orrs	r3, r2
 800610a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	43db      	mvns	r3, r3
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	4013      	ands	r3, r2
 8006120:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d003      	beq.n	8006136 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800612e:	69ba      	ldr	r2, [r7, #24]
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	4313      	orrs	r3, r2
 8006134:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	69ba      	ldr	r2, [r7, #24]
 800613a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	3301      	adds	r3, #1
 8006140:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	fa22 f303 	lsr.w	r3, r2, r3
 800614c:	2b00      	cmp	r3, #0
 800614e:	f47f ae63 	bne.w	8005e18 <HAL_GPIO_Init+0x14>
  }
}
 8006152:	bf00      	nop
 8006154:	bf00      	nop
 8006156:	3724      	adds	r7, #36	@ 0x24
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr
 8006160:	58000400 	.word	0x58000400

08006164 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006164:	b480      	push	{r7}
 8006166:	b087      	sub	sp, #28
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800616e:	2300      	movs	r3, #0
 8006170:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006172:	4b75      	ldr	r3, [pc, #468]	@ (8006348 <HAL_GPIO_DeInit+0x1e4>)
 8006174:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8006176:	e0d9      	b.n	800632c <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8006178:	2201      	movs	r2, #1
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	fa02 f303 	lsl.w	r3, r2, r3
 8006180:	683a      	ldr	r2, [r7, #0]
 8006182:	4013      	ands	r3, r2
 8006184:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2b00      	cmp	r3, #0
 800618a:	f000 80cc 	beq.w	8006326 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800618e:	4a6f      	ldr	r2, [pc, #444]	@ (800634c <HAL_GPIO_DeInit+0x1e8>)
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	089b      	lsrs	r3, r3, #2
 8006194:	3302      	adds	r3, #2
 8006196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800619a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	f003 0303 	and.w	r3, r3, #3
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	220f      	movs	r2, #15
 80061a6:	fa02 f303 	lsl.w	r3, r2, r3
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	4013      	ands	r3, r2
 80061ae:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a67      	ldr	r2, [pc, #412]	@ (8006350 <HAL_GPIO_DeInit+0x1ec>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d037      	beq.n	8006228 <HAL_GPIO_DeInit+0xc4>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a66      	ldr	r2, [pc, #408]	@ (8006354 <HAL_GPIO_DeInit+0x1f0>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d031      	beq.n	8006224 <HAL_GPIO_DeInit+0xc0>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a65      	ldr	r2, [pc, #404]	@ (8006358 <HAL_GPIO_DeInit+0x1f4>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d02b      	beq.n	8006220 <HAL_GPIO_DeInit+0xbc>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a64      	ldr	r2, [pc, #400]	@ (800635c <HAL_GPIO_DeInit+0x1f8>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d025      	beq.n	800621c <HAL_GPIO_DeInit+0xb8>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a63      	ldr	r2, [pc, #396]	@ (8006360 <HAL_GPIO_DeInit+0x1fc>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d01f      	beq.n	8006218 <HAL_GPIO_DeInit+0xb4>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a62      	ldr	r2, [pc, #392]	@ (8006364 <HAL_GPIO_DeInit+0x200>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d019      	beq.n	8006214 <HAL_GPIO_DeInit+0xb0>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a61      	ldr	r2, [pc, #388]	@ (8006368 <HAL_GPIO_DeInit+0x204>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d013      	beq.n	8006210 <HAL_GPIO_DeInit+0xac>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a60      	ldr	r2, [pc, #384]	@ (800636c <HAL_GPIO_DeInit+0x208>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d00d      	beq.n	800620c <HAL_GPIO_DeInit+0xa8>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a5f      	ldr	r2, [pc, #380]	@ (8006370 <HAL_GPIO_DeInit+0x20c>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d007      	beq.n	8006208 <HAL_GPIO_DeInit+0xa4>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a5e      	ldr	r2, [pc, #376]	@ (8006374 <HAL_GPIO_DeInit+0x210>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d101      	bne.n	8006204 <HAL_GPIO_DeInit+0xa0>
 8006200:	2309      	movs	r3, #9
 8006202:	e012      	b.n	800622a <HAL_GPIO_DeInit+0xc6>
 8006204:	230a      	movs	r3, #10
 8006206:	e010      	b.n	800622a <HAL_GPIO_DeInit+0xc6>
 8006208:	2308      	movs	r3, #8
 800620a:	e00e      	b.n	800622a <HAL_GPIO_DeInit+0xc6>
 800620c:	2307      	movs	r3, #7
 800620e:	e00c      	b.n	800622a <HAL_GPIO_DeInit+0xc6>
 8006210:	2306      	movs	r3, #6
 8006212:	e00a      	b.n	800622a <HAL_GPIO_DeInit+0xc6>
 8006214:	2305      	movs	r3, #5
 8006216:	e008      	b.n	800622a <HAL_GPIO_DeInit+0xc6>
 8006218:	2304      	movs	r3, #4
 800621a:	e006      	b.n	800622a <HAL_GPIO_DeInit+0xc6>
 800621c:	2303      	movs	r3, #3
 800621e:	e004      	b.n	800622a <HAL_GPIO_DeInit+0xc6>
 8006220:	2302      	movs	r3, #2
 8006222:	e002      	b.n	800622a <HAL_GPIO_DeInit+0xc6>
 8006224:	2301      	movs	r3, #1
 8006226:	e000      	b.n	800622a <HAL_GPIO_DeInit+0xc6>
 8006228:	2300      	movs	r3, #0
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	f002 0203 	and.w	r2, r2, #3
 8006230:	0092      	lsls	r2, r2, #2
 8006232:	4093      	lsls	r3, r2
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	429a      	cmp	r2, r3
 8006238:	d136      	bne.n	80062a8 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	43db      	mvns	r3, r3
 8006242:	401a      	ands	r2, r3
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	685a      	ldr	r2, [r3, #4]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	43db      	mvns	r3, r3
 8006250:	401a      	ands	r2, r3
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8006256:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	43db      	mvns	r3, r3
 8006260:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006264:	4013      	ands	r3, r2
 8006266:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8006268:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	43db      	mvns	r3, r3
 8006272:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006276:	4013      	ands	r3, r2
 8006278:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	f003 0303 	and.w	r3, r3, #3
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	220f      	movs	r2, #15
 8006284:	fa02 f303 	lsl.w	r3, r2, r3
 8006288:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800628a:	4a30      	ldr	r2, [pc, #192]	@ (800634c <HAL_GPIO_DeInit+0x1e8>)
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	089b      	lsrs	r3, r3, #2
 8006290:	3302      	adds	r3, #2
 8006292:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	43da      	mvns	r2, r3
 800629a:	482c      	ldr	r0, [pc, #176]	@ (800634c <HAL_GPIO_DeInit+0x1e8>)
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	089b      	lsrs	r3, r3, #2
 80062a0:	400a      	ands	r2, r1
 80062a2:	3302      	adds	r3, #2
 80062a4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	005b      	lsls	r3, r3, #1
 80062b0:	2103      	movs	r1, #3
 80062b2:	fa01 f303 	lsl.w	r3, r1, r3
 80062b6:	431a      	orrs	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	08da      	lsrs	r2, r3, #3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	3208      	adds	r2, #8
 80062c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	f003 0307 	and.w	r3, r3, #7
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	220f      	movs	r2, #15
 80062d2:	fa02 f303 	lsl.w	r3, r2, r3
 80062d6:	43db      	mvns	r3, r3
 80062d8:	697a      	ldr	r2, [r7, #20]
 80062da:	08d2      	lsrs	r2, r2, #3
 80062dc:	4019      	ands	r1, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	3208      	adds	r2, #8
 80062e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	68da      	ldr	r2, [r3, #12]
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	005b      	lsls	r3, r3, #1
 80062ee:	2103      	movs	r1, #3
 80062f0:	fa01 f303 	lsl.w	r3, r1, r3
 80062f4:	43db      	mvns	r3, r3
 80062f6:	401a      	ands	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	2101      	movs	r1, #1
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	fa01 f303 	lsl.w	r3, r1, r3
 8006308:	43db      	mvns	r3, r3
 800630a:	401a      	ands	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	689a      	ldr	r2, [r3, #8]
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	005b      	lsls	r3, r3, #1
 8006318:	2103      	movs	r1, #3
 800631a:	fa01 f303 	lsl.w	r3, r1, r3
 800631e:	43db      	mvns	r3, r3
 8006320:	401a      	ands	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	609a      	str	r2, [r3, #8]
    }

    position++;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	3301      	adds	r3, #1
 800632a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800632c:	683a      	ldr	r2, [r7, #0]
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	fa22 f303 	lsr.w	r3, r2, r3
 8006334:	2b00      	cmp	r3, #0
 8006336:	f47f af1f 	bne.w	8006178 <HAL_GPIO_DeInit+0x14>
  }
}
 800633a:	bf00      	nop
 800633c:	bf00      	nop
 800633e:	371c      	adds	r7, #28
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr
 8006348:	58000080 	.word	0x58000080
 800634c:	58000400 	.word	0x58000400
 8006350:	58020000 	.word	0x58020000
 8006354:	58020400 	.word	0x58020400
 8006358:	58020800 	.word	0x58020800
 800635c:	58020c00 	.word	0x58020c00
 8006360:	58021000 	.word	0x58021000
 8006364:	58021400 	.word	0x58021400
 8006368:	58021800 	.word	0x58021800
 800636c:	58021c00 	.word	0x58021c00
 8006370:	58022000 	.word	0x58022000
 8006374:	58022400 	.word	0x58022400

08006378 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006380:	4b19      	ldr	r3, [pc, #100]	@ (80063e8 <HAL_PWREx_ConfigSupply+0x70>)
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	f003 0304 	and.w	r3, r3, #4
 8006388:	2b04      	cmp	r3, #4
 800638a:	d00a      	beq.n	80063a2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800638c:	4b16      	ldr	r3, [pc, #88]	@ (80063e8 <HAL_PWREx_ConfigSupply+0x70>)
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	f003 0307 	and.w	r3, r3, #7
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	429a      	cmp	r2, r3
 8006398:	d001      	beq.n	800639e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e01f      	b.n	80063de <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800639e:	2300      	movs	r3, #0
 80063a0:	e01d      	b.n	80063de <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80063a2:	4b11      	ldr	r3, [pc, #68]	@ (80063e8 <HAL_PWREx_ConfigSupply+0x70>)
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	f023 0207 	bic.w	r2, r3, #7
 80063aa:	490f      	ldr	r1, [pc, #60]	@ (80063e8 <HAL_PWREx_ConfigSupply+0x70>)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80063b2:	f7fb ffc9 	bl	8002348 <HAL_GetTick>
 80063b6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80063b8:	e009      	b.n	80063ce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80063ba:	f7fb ffc5 	bl	8002348 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80063c8:	d901      	bls.n	80063ce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e007      	b.n	80063de <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80063ce:	4b06      	ldr	r3, [pc, #24]	@ (80063e8 <HAL_PWREx_ConfigSupply+0x70>)
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063da:	d1ee      	bne.n	80063ba <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	58024800 	.word	0x58024800

080063ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b08c      	sub	sp, #48	@ 0x30
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d102      	bne.n	8006400 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	f000 bc48 	b.w	8006c90 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0301 	and.w	r3, r3, #1
 8006408:	2b00      	cmp	r3, #0
 800640a:	f000 8088 	beq.w	800651e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800640e:	4b99      	ldr	r3, [pc, #612]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006416:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006418:	4b96      	ldr	r3, [pc, #600]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 800641a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800641c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800641e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006420:	2b10      	cmp	r3, #16
 8006422:	d007      	beq.n	8006434 <HAL_RCC_OscConfig+0x48>
 8006424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006426:	2b18      	cmp	r3, #24
 8006428:	d111      	bne.n	800644e <HAL_RCC_OscConfig+0x62>
 800642a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800642c:	f003 0303 	and.w	r3, r3, #3
 8006430:	2b02      	cmp	r3, #2
 8006432:	d10c      	bne.n	800644e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006434:	4b8f      	ldr	r3, [pc, #572]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d06d      	beq.n	800651c <HAL_RCC_OscConfig+0x130>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d169      	bne.n	800651c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	f000 bc21 	b.w	8006c90 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006456:	d106      	bne.n	8006466 <HAL_RCC_OscConfig+0x7a>
 8006458:	4b86      	ldr	r3, [pc, #536]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a85      	ldr	r2, [pc, #532]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 800645e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006462:	6013      	str	r3, [r2, #0]
 8006464:	e02e      	b.n	80064c4 <HAL_RCC_OscConfig+0xd8>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10c      	bne.n	8006488 <HAL_RCC_OscConfig+0x9c>
 800646e:	4b81      	ldr	r3, [pc, #516]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a80      	ldr	r2, [pc, #512]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 8006474:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006478:	6013      	str	r3, [r2, #0]
 800647a:	4b7e      	ldr	r3, [pc, #504]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a7d      	ldr	r2, [pc, #500]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 8006480:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006484:	6013      	str	r3, [r2, #0]
 8006486:	e01d      	b.n	80064c4 <HAL_RCC_OscConfig+0xd8>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006490:	d10c      	bne.n	80064ac <HAL_RCC_OscConfig+0xc0>
 8006492:	4b78      	ldr	r3, [pc, #480]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a77      	ldr	r2, [pc, #476]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 8006498:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800649c:	6013      	str	r3, [r2, #0]
 800649e:	4b75      	ldr	r3, [pc, #468]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a74      	ldr	r2, [pc, #464]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 80064a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064a8:	6013      	str	r3, [r2, #0]
 80064aa:	e00b      	b.n	80064c4 <HAL_RCC_OscConfig+0xd8>
 80064ac:	4b71      	ldr	r3, [pc, #452]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a70      	ldr	r2, [pc, #448]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 80064b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064b6:	6013      	str	r3, [r2, #0]
 80064b8:	4b6e      	ldr	r3, [pc, #440]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a6d      	ldr	r2, [pc, #436]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 80064be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80064c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d013      	beq.n	80064f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064cc:	f7fb ff3c 	bl	8002348 <HAL_GetTick>
 80064d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064d2:	e008      	b.n	80064e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064d4:	f7fb ff38 	bl	8002348 <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	2b64      	cmp	r3, #100	@ 0x64
 80064e0:	d901      	bls.n	80064e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e3d4      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064e6:	4b63      	ldr	r3, [pc, #396]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d0f0      	beq.n	80064d4 <HAL_RCC_OscConfig+0xe8>
 80064f2:	e014      	b.n	800651e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f4:	f7fb ff28 	bl	8002348 <HAL_GetTick>
 80064f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80064fa:	e008      	b.n	800650e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064fc:	f7fb ff24 	bl	8002348 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	2b64      	cmp	r3, #100	@ 0x64
 8006508:	d901      	bls.n	800650e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e3c0      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800650e:	4b59      	ldr	r3, [pc, #356]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1f0      	bne.n	80064fc <HAL_RCC_OscConfig+0x110>
 800651a:	e000      	b.n	800651e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800651c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b00      	cmp	r3, #0
 8006528:	f000 80ca 	beq.w	80066c0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800652c:	4b51      	ldr	r3, [pc, #324]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006534:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006536:	4b4f      	ldr	r3, [pc, #316]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 8006538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800653a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800653c:	6a3b      	ldr	r3, [r7, #32]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d007      	beq.n	8006552 <HAL_RCC_OscConfig+0x166>
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	2b18      	cmp	r3, #24
 8006546:	d156      	bne.n	80065f6 <HAL_RCC_OscConfig+0x20a>
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	f003 0303 	and.w	r3, r3, #3
 800654e:	2b00      	cmp	r3, #0
 8006550:	d151      	bne.n	80065f6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006552:	4b48      	ldr	r3, [pc, #288]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0304 	and.w	r3, r3, #4
 800655a:	2b00      	cmp	r3, #0
 800655c:	d005      	beq.n	800656a <HAL_RCC_OscConfig+0x17e>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e392      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800656a:	4b42      	ldr	r3, [pc, #264]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f023 0219 	bic.w	r2, r3, #25
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	493f      	ldr	r1, [pc, #252]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 8006578:	4313      	orrs	r3, r2
 800657a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800657c:	f7fb fee4 	bl	8002348 <HAL_GetTick>
 8006580:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006582:	e008      	b.n	8006596 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006584:	f7fb fee0 	bl	8002348 <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	2b02      	cmp	r3, #2
 8006590:	d901      	bls.n	8006596 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e37c      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006596:	4b37      	ldr	r3, [pc, #220]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0304 	and.w	r3, r3, #4
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d0f0      	beq.n	8006584 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065a2:	f7fb fedd 	bl	8002360 <HAL_GetREVID>
 80065a6:	4603      	mov	r3, r0
 80065a8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d817      	bhi.n	80065e0 <HAL_RCC_OscConfig+0x1f4>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	2b40      	cmp	r3, #64	@ 0x40
 80065b6:	d108      	bne.n	80065ca <HAL_RCC_OscConfig+0x1de>
 80065b8:	4b2e      	ldr	r3, [pc, #184]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80065c0:	4a2c      	ldr	r2, [pc, #176]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 80065c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065c6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065c8:	e07a      	b.n	80066c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065ca:	4b2a      	ldr	r3, [pc, #168]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	031b      	lsls	r3, r3, #12
 80065d8:	4926      	ldr	r1, [pc, #152]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 80065da:	4313      	orrs	r3, r2
 80065dc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065de:	e06f      	b.n	80066c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065e0:	4b24      	ldr	r3, [pc, #144]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	061b      	lsls	r3, r3, #24
 80065ee:	4921      	ldr	r1, [pc, #132]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065f4:	e064      	b.n	80066c0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d047      	beq.n	800668e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80065fe:	4b1d      	ldr	r3, [pc, #116]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f023 0219 	bic.w	r2, r3, #25
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	491a      	ldr	r1, [pc, #104]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 800660c:	4313      	orrs	r3, r2
 800660e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006610:	f7fb fe9a 	bl	8002348 <HAL_GetTick>
 8006614:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006616:	e008      	b.n	800662a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006618:	f7fb fe96 	bl	8002348 <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	2b02      	cmp	r3, #2
 8006624:	d901      	bls.n	800662a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e332      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800662a:	4b12      	ldr	r3, [pc, #72]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0304 	and.w	r3, r3, #4
 8006632:	2b00      	cmp	r3, #0
 8006634:	d0f0      	beq.n	8006618 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006636:	f7fb fe93 	bl	8002360 <HAL_GetREVID>
 800663a:	4603      	mov	r3, r0
 800663c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006640:	4293      	cmp	r3, r2
 8006642:	d819      	bhi.n	8006678 <HAL_RCC_OscConfig+0x28c>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	2b40      	cmp	r3, #64	@ 0x40
 800664a:	d108      	bne.n	800665e <HAL_RCC_OscConfig+0x272>
 800664c:	4b09      	ldr	r3, [pc, #36]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006654:	4a07      	ldr	r2, [pc, #28]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 8006656:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800665a:	6053      	str	r3, [r2, #4]
 800665c:	e030      	b.n	80066c0 <HAL_RCC_OscConfig+0x2d4>
 800665e:	4b05      	ldr	r3, [pc, #20]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	031b      	lsls	r3, r3, #12
 800666c:	4901      	ldr	r1, [pc, #4]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 800666e:	4313      	orrs	r3, r2
 8006670:	604b      	str	r3, [r1, #4]
 8006672:	e025      	b.n	80066c0 <HAL_RCC_OscConfig+0x2d4>
 8006674:	58024400 	.word	0x58024400
 8006678:	4b9a      	ldr	r3, [pc, #616]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	061b      	lsls	r3, r3, #24
 8006686:	4997      	ldr	r1, [pc, #604]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 8006688:	4313      	orrs	r3, r2
 800668a:	604b      	str	r3, [r1, #4]
 800668c:	e018      	b.n	80066c0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800668e:	4b95      	ldr	r3, [pc, #596]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a94      	ldr	r2, [pc, #592]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 8006694:	f023 0301 	bic.w	r3, r3, #1
 8006698:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800669a:	f7fb fe55 	bl	8002348 <HAL_GetTick>
 800669e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80066a0:	e008      	b.n	80066b4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066a2:	f7fb fe51 	bl	8002348 <HAL_GetTick>
 80066a6:	4602      	mov	r2, r0
 80066a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d901      	bls.n	80066b4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e2ed      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80066b4:	4b8b      	ldr	r3, [pc, #556]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0304 	and.w	r3, r3, #4
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1f0      	bne.n	80066a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0310 	and.w	r3, r3, #16
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f000 80a9 	beq.w	8006820 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066ce:	4b85      	ldr	r3, [pc, #532]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80066d8:	4b82      	ldr	r3, [pc, #520]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 80066da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066dc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	2b08      	cmp	r3, #8
 80066e2:	d007      	beq.n	80066f4 <HAL_RCC_OscConfig+0x308>
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	2b18      	cmp	r3, #24
 80066e8:	d13a      	bne.n	8006760 <HAL_RCC_OscConfig+0x374>
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	f003 0303 	and.w	r3, r3, #3
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d135      	bne.n	8006760 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066f4:	4b7b      	ldr	r3, [pc, #492]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d005      	beq.n	800670c <HAL_RCC_OscConfig+0x320>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	69db      	ldr	r3, [r3, #28]
 8006704:	2b80      	cmp	r3, #128	@ 0x80
 8006706:	d001      	beq.n	800670c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e2c1      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800670c:	f7fb fe28 	bl	8002360 <HAL_GetREVID>
 8006710:	4603      	mov	r3, r0
 8006712:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006716:	4293      	cmp	r3, r2
 8006718:	d817      	bhi.n	800674a <HAL_RCC_OscConfig+0x35e>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	2b20      	cmp	r3, #32
 8006720:	d108      	bne.n	8006734 <HAL_RCC_OscConfig+0x348>
 8006722:	4b70      	ldr	r3, [pc, #448]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800672a:	4a6e      	ldr	r2, [pc, #440]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 800672c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006730:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006732:	e075      	b.n	8006820 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006734:	4b6b      	ldr	r3, [pc, #428]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	069b      	lsls	r3, r3, #26
 8006742:	4968      	ldr	r1, [pc, #416]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 8006744:	4313      	orrs	r3, r2
 8006746:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006748:	e06a      	b.n	8006820 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800674a:	4b66      	ldr	r3, [pc, #408]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	061b      	lsls	r3, r3, #24
 8006758:	4962      	ldr	r1, [pc, #392]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 800675a:	4313      	orrs	r3, r2
 800675c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800675e:	e05f      	b.n	8006820 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	69db      	ldr	r3, [r3, #28]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d042      	beq.n	80067ee <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006768:	4b5e      	ldr	r3, [pc, #376]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a5d      	ldr	r2, [pc, #372]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 800676e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006772:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006774:	f7fb fde8 	bl	8002348 <HAL_GetTick>
 8006778:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800677a:	e008      	b.n	800678e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800677c:	f7fb fde4 	bl	8002348 <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	2b02      	cmp	r3, #2
 8006788:	d901      	bls.n	800678e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e280      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800678e:	4b55      	ldr	r3, [pc, #340]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006796:	2b00      	cmp	r3, #0
 8006798:	d0f0      	beq.n	800677c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800679a:	f7fb fde1 	bl	8002360 <HAL_GetREVID>
 800679e:	4603      	mov	r3, r0
 80067a0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d817      	bhi.n	80067d8 <HAL_RCC_OscConfig+0x3ec>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a1b      	ldr	r3, [r3, #32]
 80067ac:	2b20      	cmp	r3, #32
 80067ae:	d108      	bne.n	80067c2 <HAL_RCC_OscConfig+0x3d6>
 80067b0:	4b4c      	ldr	r3, [pc, #304]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80067b8:	4a4a      	ldr	r2, [pc, #296]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 80067ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067be:	6053      	str	r3, [r2, #4]
 80067c0:	e02e      	b.n	8006820 <HAL_RCC_OscConfig+0x434>
 80067c2:	4b48      	ldr	r3, [pc, #288]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	069b      	lsls	r3, r3, #26
 80067d0:	4944      	ldr	r1, [pc, #272]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 80067d2:	4313      	orrs	r3, r2
 80067d4:	604b      	str	r3, [r1, #4]
 80067d6:	e023      	b.n	8006820 <HAL_RCC_OscConfig+0x434>
 80067d8:	4b42      	ldr	r3, [pc, #264]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a1b      	ldr	r3, [r3, #32]
 80067e4:	061b      	lsls	r3, r3, #24
 80067e6:	493f      	ldr	r1, [pc, #252]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	60cb      	str	r3, [r1, #12]
 80067ec:	e018      	b.n	8006820 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80067ee:	4b3d      	ldr	r3, [pc, #244]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a3c      	ldr	r2, [pc, #240]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 80067f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067fa:	f7fb fda5 	bl	8002348 <HAL_GetTick>
 80067fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006800:	e008      	b.n	8006814 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006802:	f7fb fda1 	bl	8002348 <HAL_GetTick>
 8006806:	4602      	mov	r2, r0
 8006808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	2b02      	cmp	r3, #2
 800680e:	d901      	bls.n	8006814 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e23d      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006814:	4b33      	ldr	r3, [pc, #204]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1f0      	bne.n	8006802 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0308 	and.w	r3, r3, #8
 8006828:	2b00      	cmp	r3, #0
 800682a:	d036      	beq.n	800689a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d019      	beq.n	8006868 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006834:	4b2b      	ldr	r3, [pc, #172]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 8006836:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006838:	4a2a      	ldr	r2, [pc, #168]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 800683a:	f043 0301 	orr.w	r3, r3, #1
 800683e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006840:	f7fb fd82 	bl	8002348 <HAL_GetTick>
 8006844:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006846:	e008      	b.n	800685a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006848:	f7fb fd7e 	bl	8002348 <HAL_GetTick>
 800684c:	4602      	mov	r2, r0
 800684e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	2b02      	cmp	r3, #2
 8006854:	d901      	bls.n	800685a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e21a      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800685a:	4b22      	ldr	r3, [pc, #136]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 800685c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800685e:	f003 0302 	and.w	r3, r3, #2
 8006862:	2b00      	cmp	r3, #0
 8006864:	d0f0      	beq.n	8006848 <HAL_RCC_OscConfig+0x45c>
 8006866:	e018      	b.n	800689a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006868:	4b1e      	ldr	r3, [pc, #120]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 800686a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800686c:	4a1d      	ldr	r2, [pc, #116]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 800686e:	f023 0301 	bic.w	r3, r3, #1
 8006872:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006874:	f7fb fd68 	bl	8002348 <HAL_GetTick>
 8006878:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800687a:	e008      	b.n	800688e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800687c:	f7fb fd64 	bl	8002348 <HAL_GetTick>
 8006880:	4602      	mov	r2, r0
 8006882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	2b02      	cmp	r3, #2
 8006888:	d901      	bls.n	800688e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	e200      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800688e:	4b15      	ldr	r3, [pc, #84]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 8006890:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006892:	f003 0302 	and.w	r3, r3, #2
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1f0      	bne.n	800687c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0320 	and.w	r3, r3, #32
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d039      	beq.n	800691a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d01c      	beq.n	80068e8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80068ae:	4b0d      	ldr	r3, [pc, #52]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a0c      	ldr	r2, [pc, #48]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 80068b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80068b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80068ba:	f7fb fd45 	bl	8002348 <HAL_GetTick>
 80068be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80068c0:	e008      	b.n	80068d4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068c2:	f7fb fd41 	bl	8002348 <HAL_GetTick>
 80068c6:	4602      	mov	r2, r0
 80068c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d901      	bls.n	80068d4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e1dd      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80068d4:	4b03      	ldr	r3, [pc, #12]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d0f0      	beq.n	80068c2 <HAL_RCC_OscConfig+0x4d6>
 80068e0:	e01b      	b.n	800691a <HAL_RCC_OscConfig+0x52e>
 80068e2:	bf00      	nop
 80068e4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80068e8:	4b9b      	ldr	r3, [pc, #620]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a9a      	ldr	r2, [pc, #616]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 80068ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80068f4:	f7fb fd28 	bl	8002348 <HAL_GetTick>
 80068f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80068fa:	e008      	b.n	800690e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068fc:	f7fb fd24 	bl	8002348 <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	2b02      	cmp	r3, #2
 8006908:	d901      	bls.n	800690e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e1c0      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800690e:	4b92      	ldr	r3, [pc, #584]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1f0      	bne.n	80068fc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0304 	and.w	r3, r3, #4
 8006922:	2b00      	cmp	r3, #0
 8006924:	f000 8081 	beq.w	8006a2a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006928:	4b8c      	ldr	r3, [pc, #560]	@ (8006b5c <HAL_RCC_OscConfig+0x770>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a8b      	ldr	r2, [pc, #556]	@ (8006b5c <HAL_RCC_OscConfig+0x770>)
 800692e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006932:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006934:	f7fb fd08 	bl	8002348 <HAL_GetTick>
 8006938:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800693a:	e008      	b.n	800694e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800693c:	f7fb fd04 	bl	8002348 <HAL_GetTick>
 8006940:	4602      	mov	r2, r0
 8006942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	2b64      	cmp	r3, #100	@ 0x64
 8006948:	d901      	bls.n	800694e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	e1a0      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800694e:	4b83      	ldr	r3, [pc, #524]	@ (8006b5c <HAL_RCC_OscConfig+0x770>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006956:	2b00      	cmp	r3, #0
 8006958:	d0f0      	beq.n	800693c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d106      	bne.n	8006970 <HAL_RCC_OscConfig+0x584>
 8006962:	4b7d      	ldr	r3, [pc, #500]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006966:	4a7c      	ldr	r2, [pc, #496]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006968:	f043 0301 	orr.w	r3, r3, #1
 800696c:	6713      	str	r3, [r2, #112]	@ 0x70
 800696e:	e02d      	b.n	80069cc <HAL_RCC_OscConfig+0x5e0>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10c      	bne.n	8006992 <HAL_RCC_OscConfig+0x5a6>
 8006978:	4b77      	ldr	r3, [pc, #476]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 800697a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800697c:	4a76      	ldr	r2, [pc, #472]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 800697e:	f023 0301 	bic.w	r3, r3, #1
 8006982:	6713      	str	r3, [r2, #112]	@ 0x70
 8006984:	4b74      	ldr	r3, [pc, #464]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006988:	4a73      	ldr	r2, [pc, #460]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 800698a:	f023 0304 	bic.w	r3, r3, #4
 800698e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006990:	e01c      	b.n	80069cc <HAL_RCC_OscConfig+0x5e0>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	2b05      	cmp	r3, #5
 8006998:	d10c      	bne.n	80069b4 <HAL_RCC_OscConfig+0x5c8>
 800699a:	4b6f      	ldr	r3, [pc, #444]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 800699c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800699e:	4a6e      	ldr	r2, [pc, #440]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 80069a0:	f043 0304 	orr.w	r3, r3, #4
 80069a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80069a6:	4b6c      	ldr	r3, [pc, #432]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 80069a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069aa:	4a6b      	ldr	r2, [pc, #428]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 80069ac:	f043 0301 	orr.w	r3, r3, #1
 80069b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80069b2:	e00b      	b.n	80069cc <HAL_RCC_OscConfig+0x5e0>
 80069b4:	4b68      	ldr	r3, [pc, #416]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 80069b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069b8:	4a67      	ldr	r2, [pc, #412]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 80069ba:	f023 0301 	bic.w	r3, r3, #1
 80069be:	6713      	str	r3, [r2, #112]	@ 0x70
 80069c0:	4b65      	ldr	r3, [pc, #404]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 80069c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069c4:	4a64      	ldr	r2, [pc, #400]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 80069c6:	f023 0304 	bic.w	r3, r3, #4
 80069ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d015      	beq.n	8006a00 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069d4:	f7fb fcb8 	bl	8002348 <HAL_GetTick>
 80069d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069da:	e00a      	b.n	80069f2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069dc:	f7fb fcb4 	bl	8002348 <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d901      	bls.n	80069f2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e14e      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069f2:	4b59      	ldr	r3, [pc, #356]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 80069f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d0ee      	beq.n	80069dc <HAL_RCC_OscConfig+0x5f0>
 80069fe:	e014      	b.n	8006a2a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a00:	f7fb fca2 	bl	8002348 <HAL_GetTick>
 8006a04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006a06:	e00a      	b.n	8006a1e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a08:	f7fb fc9e 	bl	8002348 <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d901      	bls.n	8006a1e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e138      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006a1e:	4b4e      	ldr	r3, [pc, #312]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a22:	f003 0302 	and.w	r3, r3, #2
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1ee      	bne.n	8006a08 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	f000 812d 	beq.w	8006c8e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006a34:	4b48      	ldr	r3, [pc, #288]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a3c:	2b18      	cmp	r3, #24
 8006a3e:	f000 80bd 	beq.w	8006bbc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	f040 809e 	bne.w	8006b88 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a4c:	4b42      	ldr	r3, [pc, #264]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a41      	ldr	r2, [pc, #260]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006a52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a58:	f7fb fc76 	bl	8002348 <HAL_GetTick>
 8006a5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a5e:	e008      	b.n	8006a72 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a60:	f7fb fc72 	bl	8002348 <HAL_GetTick>
 8006a64:	4602      	mov	r2, r0
 8006a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d901      	bls.n	8006a72 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e10e      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a72:	4b39      	ldr	r3, [pc, #228]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d1f0      	bne.n	8006a60 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a7e:	4b36      	ldr	r3, [pc, #216]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006a80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a82:	4b37      	ldr	r3, [pc, #220]	@ (8006b60 <HAL_RCC_OscConfig+0x774>)
 8006a84:	4013      	ands	r3, r2
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006a8e:	0112      	lsls	r2, r2, #4
 8006a90:	430a      	orrs	r2, r1
 8006a92:	4931      	ldr	r1, [pc, #196]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006a94:	4313      	orrs	r3, r2
 8006a96:	628b      	str	r3, [r1, #40]	@ 0x28
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	025b      	lsls	r3, r3, #9
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	431a      	orrs	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	041b      	lsls	r3, r3, #16
 8006ab6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006aba:	431a      	orrs	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	061b      	lsls	r3, r3, #24
 8006ac4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006ac8:	4923      	ldr	r1, [pc, #140]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006aca:	4313      	orrs	r3, r2
 8006acc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006ace:	4b22      	ldr	r3, [pc, #136]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad2:	4a21      	ldr	r2, [pc, #132]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006ad4:	f023 0301 	bic.w	r3, r3, #1
 8006ad8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006ada:	4b1f      	ldr	r3, [pc, #124]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006adc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ade:	4b21      	ldr	r3, [pc, #132]	@ (8006b64 <HAL_RCC_OscConfig+0x778>)
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006ae6:	00d2      	lsls	r2, r2, #3
 8006ae8:	491b      	ldr	r1, [pc, #108]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006aea:	4313      	orrs	r3, r2
 8006aec:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006aee:	4b1a      	ldr	r3, [pc, #104]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af2:	f023 020c 	bic.w	r2, r3, #12
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006afa:	4917      	ldr	r1, [pc, #92]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006afc:	4313      	orrs	r3, r2
 8006afe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006b00:	4b15      	ldr	r3, [pc, #84]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b04:	f023 0202 	bic.w	r2, r3, #2
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b0c:	4912      	ldr	r1, [pc, #72]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006b12:	4b11      	ldr	r3, [pc, #68]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b16:	4a10      	ldr	r2, [pc, #64]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006b18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b22:	4a0d      	ldr	r2, [pc, #52]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006b24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006b30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006b36:	4b08      	ldr	r3, [pc, #32]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b3a:	4a07      	ldr	r2, [pc, #28]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006b3c:	f043 0301 	orr.w	r3, r3, #1
 8006b40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b42:	4b05      	ldr	r3, [pc, #20]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a04      	ldr	r2, [pc, #16]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006b48:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b4e:	f7fb fbfb 	bl	8002348 <HAL_GetTick>
 8006b52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b54:	e011      	b.n	8006b7a <HAL_RCC_OscConfig+0x78e>
 8006b56:	bf00      	nop
 8006b58:	58024400 	.word	0x58024400
 8006b5c:	58024800 	.word	0x58024800
 8006b60:	fffffc0c 	.word	0xfffffc0c
 8006b64:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b68:	f7fb fbee 	bl	8002348 <HAL_GetTick>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d901      	bls.n	8006b7a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e08a      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b7a:	4b47      	ldr	r3, [pc, #284]	@ (8006c98 <HAL_RCC_OscConfig+0x8ac>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d0f0      	beq.n	8006b68 <HAL_RCC_OscConfig+0x77c>
 8006b86:	e082      	b.n	8006c8e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b88:	4b43      	ldr	r3, [pc, #268]	@ (8006c98 <HAL_RCC_OscConfig+0x8ac>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a42      	ldr	r2, [pc, #264]	@ (8006c98 <HAL_RCC_OscConfig+0x8ac>)
 8006b8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b94:	f7fb fbd8 	bl	8002348 <HAL_GetTick>
 8006b98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b9a:	e008      	b.n	8006bae <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b9c:	f7fb fbd4 	bl	8002348 <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d901      	bls.n	8006bae <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e070      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006bae:	4b3a      	ldr	r3, [pc, #232]	@ (8006c98 <HAL_RCC_OscConfig+0x8ac>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1f0      	bne.n	8006b9c <HAL_RCC_OscConfig+0x7b0>
 8006bba:	e068      	b.n	8006c8e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006bbc:	4b36      	ldr	r3, [pc, #216]	@ (8006c98 <HAL_RCC_OscConfig+0x8ac>)
 8006bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006bc2:	4b35      	ldr	r3, [pc, #212]	@ (8006c98 <HAL_RCC_OscConfig+0x8ac>)
 8006bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d031      	beq.n	8006c34 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	f003 0203 	and.w	r2, r3, #3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d12a      	bne.n	8006c34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	091b      	lsrs	r3, r3, #4
 8006be2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d122      	bne.n	8006c34 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bf8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d11a      	bne.n	8006c34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	0a5b      	lsrs	r3, r3, #9
 8006c02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c0a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d111      	bne.n	8006c34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	0c1b      	lsrs	r3, r3, #16
 8006c14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d108      	bne.n	8006c34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	0e1b      	lsrs	r3, r3, #24
 8006c26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c2e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d001      	beq.n	8006c38 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e02b      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006c38:	4b17      	ldr	r3, [pc, #92]	@ (8006c98 <HAL_RCC_OscConfig+0x8ac>)
 8006c3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c3c:	08db      	lsrs	r3, r3, #3
 8006c3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c42:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d01f      	beq.n	8006c8e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006c4e:	4b12      	ldr	r3, [pc, #72]	@ (8006c98 <HAL_RCC_OscConfig+0x8ac>)
 8006c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c52:	4a11      	ldr	r2, [pc, #68]	@ (8006c98 <HAL_RCC_OscConfig+0x8ac>)
 8006c54:	f023 0301 	bic.w	r3, r3, #1
 8006c58:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006c5a:	f7fb fb75 	bl	8002348 <HAL_GetTick>
 8006c5e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006c60:	bf00      	nop
 8006c62:	f7fb fb71 	bl	8002348 <HAL_GetTick>
 8006c66:	4602      	mov	r2, r0
 8006c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d0f9      	beq.n	8006c62 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8006c98 <HAL_RCC_OscConfig+0x8ac>)
 8006c70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c72:	4b0a      	ldr	r3, [pc, #40]	@ (8006c9c <HAL_RCC_OscConfig+0x8b0>)
 8006c74:	4013      	ands	r3, r2
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006c7a:	00d2      	lsls	r2, r2, #3
 8006c7c:	4906      	ldr	r1, [pc, #24]	@ (8006c98 <HAL_RCC_OscConfig+0x8ac>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006c82:	4b05      	ldr	r3, [pc, #20]	@ (8006c98 <HAL_RCC_OscConfig+0x8ac>)
 8006c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c86:	4a04      	ldr	r2, [pc, #16]	@ (8006c98 <HAL_RCC_OscConfig+0x8ac>)
 8006c88:	f043 0301 	orr.w	r3, r3, #1
 8006c8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3730      	adds	r7, #48	@ 0x30
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	58024400 	.word	0x58024400
 8006c9c:	ffff0007 	.word	0xffff0007

08006ca0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d101      	bne.n	8006cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e19c      	b.n	8006fee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006cb4:	4b8a      	ldr	r3, [pc, #552]	@ (8006ee0 <HAL_RCC_ClockConfig+0x240>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 030f 	and.w	r3, r3, #15
 8006cbc:	683a      	ldr	r2, [r7, #0]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d910      	bls.n	8006ce4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cc2:	4b87      	ldr	r3, [pc, #540]	@ (8006ee0 <HAL_RCC_ClockConfig+0x240>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f023 020f 	bic.w	r2, r3, #15
 8006cca:	4985      	ldr	r1, [pc, #532]	@ (8006ee0 <HAL_RCC_ClockConfig+0x240>)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cd2:	4b83      	ldr	r3, [pc, #524]	@ (8006ee0 <HAL_RCC_ClockConfig+0x240>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 030f 	and.w	r3, r3, #15
 8006cda:	683a      	ldr	r2, [r7, #0]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d001      	beq.n	8006ce4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e184      	b.n	8006fee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 0304 	and.w	r3, r3, #4
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d010      	beq.n	8006d12 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	691a      	ldr	r2, [r3, #16]
 8006cf4:	4b7b      	ldr	r3, [pc, #492]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006cf6:	699b      	ldr	r3, [r3, #24]
 8006cf8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d908      	bls.n	8006d12 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006d00:	4b78      	ldr	r3, [pc, #480]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	4975      	ldr	r1, [pc, #468]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 0308 	and.w	r3, r3, #8
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d010      	beq.n	8006d40 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	695a      	ldr	r2, [r3, #20]
 8006d22:	4b70      	ldr	r3, [pc, #448]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d908      	bls.n	8006d40 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006d2e:	4b6d      	ldr	r3, [pc, #436]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006d30:	69db      	ldr	r3, [r3, #28]
 8006d32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	496a      	ldr	r1, [pc, #424]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0310 	and.w	r3, r3, #16
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d010      	beq.n	8006d6e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	699a      	ldr	r2, [r3, #24]
 8006d50:	4b64      	ldr	r3, [pc, #400]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006d52:	69db      	ldr	r3, [r3, #28]
 8006d54:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d908      	bls.n	8006d6e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006d5c:	4b61      	ldr	r3, [pc, #388]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006d5e:	69db      	ldr	r3, [r3, #28]
 8006d60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	495e      	ldr	r1, [pc, #376]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0320 	and.w	r3, r3, #32
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d010      	beq.n	8006d9c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	69da      	ldr	r2, [r3, #28]
 8006d7e:	4b59      	ldr	r3, [pc, #356]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006d80:	6a1b      	ldr	r3, [r3, #32]
 8006d82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d908      	bls.n	8006d9c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006d8a:	4b56      	ldr	r3, [pc, #344]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	69db      	ldr	r3, [r3, #28]
 8006d96:	4953      	ldr	r1, [pc, #332]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0302 	and.w	r3, r3, #2
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d010      	beq.n	8006dca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	68da      	ldr	r2, [r3, #12]
 8006dac:	4b4d      	ldr	r3, [pc, #308]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	f003 030f 	and.w	r3, r3, #15
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d908      	bls.n	8006dca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006db8:	4b4a      	ldr	r3, [pc, #296]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	f023 020f 	bic.w	r2, r3, #15
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	4947      	ldr	r1, [pc, #284]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0301 	and.w	r3, r3, #1
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d055      	beq.n	8006e82 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006dd6:	4b43      	ldr	r3, [pc, #268]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	4940      	ldr	r1, [pc, #256]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006de4:	4313      	orrs	r3, r2
 8006de6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d107      	bne.n	8006e00 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006df0:	4b3c      	ldr	r3, [pc, #240]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d121      	bne.n	8006e40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e0f6      	b.n	8006fee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	2b03      	cmp	r3, #3
 8006e06:	d107      	bne.n	8006e18 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e08:	4b36      	ldr	r3, [pc, #216]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d115      	bne.n	8006e40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e0ea      	b.n	8006fee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d107      	bne.n	8006e30 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e20:	4b30      	ldr	r3, [pc, #192]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d109      	bne.n	8006e40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e0de      	b.n	8006fee <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e30:	4b2c      	ldr	r3, [pc, #176]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0304 	and.w	r3, r3, #4
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d101      	bne.n	8006e40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e0d6      	b.n	8006fee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e40:	4b28      	ldr	r3, [pc, #160]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	f023 0207 	bic.w	r2, r3, #7
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	4925      	ldr	r1, [pc, #148]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e52:	f7fb fa79 	bl	8002348 <HAL_GetTick>
 8006e56:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e58:	e00a      	b.n	8006e70 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e5a:	f7fb fa75 	bl	8002348 <HAL_GetTick>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d901      	bls.n	8006e70 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e0be      	b.n	8006fee <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e70:	4b1c      	ldr	r3, [pc, #112]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	00db      	lsls	r3, r3, #3
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d1eb      	bne.n	8006e5a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 0302 	and.w	r3, r3, #2
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d010      	beq.n	8006eb0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	68da      	ldr	r2, [r3, #12]
 8006e92:	4b14      	ldr	r3, [pc, #80]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006e94:	699b      	ldr	r3, [r3, #24]
 8006e96:	f003 030f 	and.w	r3, r3, #15
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d208      	bcs.n	8006eb0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e9e:	4b11      	ldr	r3, [pc, #68]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006ea0:	699b      	ldr	r3, [r3, #24]
 8006ea2:	f023 020f 	bic.w	r2, r3, #15
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	490e      	ldr	r1, [pc, #56]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006eac:	4313      	orrs	r3, r2
 8006eae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8006ee0 <HAL_RCC_ClockConfig+0x240>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 030f 	and.w	r3, r3, #15
 8006eb8:	683a      	ldr	r2, [r7, #0]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d214      	bcs.n	8006ee8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ebe:	4b08      	ldr	r3, [pc, #32]	@ (8006ee0 <HAL_RCC_ClockConfig+0x240>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f023 020f 	bic.w	r2, r3, #15
 8006ec6:	4906      	ldr	r1, [pc, #24]	@ (8006ee0 <HAL_RCC_ClockConfig+0x240>)
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ece:	4b04      	ldr	r3, [pc, #16]	@ (8006ee0 <HAL_RCC_ClockConfig+0x240>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 030f 	and.w	r3, r3, #15
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d005      	beq.n	8006ee8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e086      	b.n	8006fee <HAL_RCC_ClockConfig+0x34e>
 8006ee0:	52002000 	.word	0x52002000
 8006ee4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 0304 	and.w	r3, r3, #4
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d010      	beq.n	8006f16 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	691a      	ldr	r2, [r3, #16]
 8006ef8:	4b3f      	ldr	r3, [pc, #252]	@ (8006ff8 <HAL_RCC_ClockConfig+0x358>)
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d208      	bcs.n	8006f16 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006f04:	4b3c      	ldr	r3, [pc, #240]	@ (8006ff8 <HAL_RCC_ClockConfig+0x358>)
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	4939      	ldr	r1, [pc, #228]	@ (8006ff8 <HAL_RCC_ClockConfig+0x358>)
 8006f12:	4313      	orrs	r3, r2
 8006f14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0308 	and.w	r3, r3, #8
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d010      	beq.n	8006f44 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	695a      	ldr	r2, [r3, #20]
 8006f26:	4b34      	ldr	r3, [pc, #208]	@ (8006ff8 <HAL_RCC_ClockConfig+0x358>)
 8006f28:	69db      	ldr	r3, [r3, #28]
 8006f2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d208      	bcs.n	8006f44 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006f32:	4b31      	ldr	r3, [pc, #196]	@ (8006ff8 <HAL_RCC_ClockConfig+0x358>)
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	695b      	ldr	r3, [r3, #20]
 8006f3e:	492e      	ldr	r1, [pc, #184]	@ (8006ff8 <HAL_RCC_ClockConfig+0x358>)
 8006f40:	4313      	orrs	r3, r2
 8006f42:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0310 	and.w	r3, r3, #16
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d010      	beq.n	8006f72 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	699a      	ldr	r2, [r3, #24]
 8006f54:	4b28      	ldr	r3, [pc, #160]	@ (8006ff8 <HAL_RCC_ClockConfig+0x358>)
 8006f56:	69db      	ldr	r3, [r3, #28]
 8006f58:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d208      	bcs.n	8006f72 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006f60:	4b25      	ldr	r3, [pc, #148]	@ (8006ff8 <HAL_RCC_ClockConfig+0x358>)
 8006f62:	69db      	ldr	r3, [r3, #28]
 8006f64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	699b      	ldr	r3, [r3, #24]
 8006f6c:	4922      	ldr	r1, [pc, #136]	@ (8006ff8 <HAL_RCC_ClockConfig+0x358>)
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0320 	and.w	r3, r3, #32
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d010      	beq.n	8006fa0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	69da      	ldr	r2, [r3, #28]
 8006f82:	4b1d      	ldr	r3, [pc, #116]	@ (8006ff8 <HAL_RCC_ClockConfig+0x358>)
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d208      	bcs.n	8006fa0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8006ff8 <HAL_RCC_ClockConfig+0x358>)
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	69db      	ldr	r3, [r3, #28]
 8006f9a:	4917      	ldr	r1, [pc, #92]	@ (8006ff8 <HAL_RCC_ClockConfig+0x358>)
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006fa0:	f000 f834 	bl	800700c <HAL_RCC_GetSysClockFreq>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	4b14      	ldr	r3, [pc, #80]	@ (8006ff8 <HAL_RCC_ClockConfig+0x358>)
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	0a1b      	lsrs	r3, r3, #8
 8006fac:	f003 030f 	and.w	r3, r3, #15
 8006fb0:	4912      	ldr	r1, [pc, #72]	@ (8006ffc <HAL_RCC_ClockConfig+0x35c>)
 8006fb2:	5ccb      	ldrb	r3, [r1, r3]
 8006fb4:	f003 031f 	and.w	r3, r3, #31
 8006fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8006fbc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8006ff8 <HAL_RCC_ClockConfig+0x358>)
 8006fc0:	699b      	ldr	r3, [r3, #24]
 8006fc2:	f003 030f 	and.w	r3, r3, #15
 8006fc6:	4a0d      	ldr	r2, [pc, #52]	@ (8006ffc <HAL_RCC_ClockConfig+0x35c>)
 8006fc8:	5cd3      	ldrb	r3, [r2, r3]
 8006fca:	f003 031f 	and.w	r3, r3, #31
 8006fce:	693a      	ldr	r2, [r7, #16]
 8006fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8006fd4:	4a0a      	ldr	r2, [pc, #40]	@ (8007000 <HAL_RCC_ClockConfig+0x360>)
 8006fd6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006fd8:	4a0a      	ldr	r2, [pc, #40]	@ (8007004 <HAL_RCC_ClockConfig+0x364>)
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006fde:	4b0a      	ldr	r3, [pc, #40]	@ (8007008 <HAL_RCC_ClockConfig+0x368>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7fb f966 	bl	80022b4 <HAL_InitTick>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3718      	adds	r7, #24
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	58024400 	.word	0x58024400
 8006ffc:	0800c064 	.word	0x0800c064
 8007000:	24000014 	.word	0x24000014
 8007004:	24000010 	.word	0x24000010
 8007008:	24000020 	.word	0x24000020

0800700c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800700c:	b480      	push	{r7}
 800700e:	b089      	sub	sp, #36	@ 0x24
 8007010:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007012:	4bb3      	ldr	r3, [pc, #716]	@ (80072e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800701a:	2b18      	cmp	r3, #24
 800701c:	f200 8155 	bhi.w	80072ca <HAL_RCC_GetSysClockFreq+0x2be>
 8007020:	a201      	add	r2, pc, #4	@ (adr r2, 8007028 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007026:	bf00      	nop
 8007028:	0800708d 	.word	0x0800708d
 800702c:	080072cb 	.word	0x080072cb
 8007030:	080072cb 	.word	0x080072cb
 8007034:	080072cb 	.word	0x080072cb
 8007038:	080072cb 	.word	0x080072cb
 800703c:	080072cb 	.word	0x080072cb
 8007040:	080072cb 	.word	0x080072cb
 8007044:	080072cb 	.word	0x080072cb
 8007048:	080070b3 	.word	0x080070b3
 800704c:	080072cb 	.word	0x080072cb
 8007050:	080072cb 	.word	0x080072cb
 8007054:	080072cb 	.word	0x080072cb
 8007058:	080072cb 	.word	0x080072cb
 800705c:	080072cb 	.word	0x080072cb
 8007060:	080072cb 	.word	0x080072cb
 8007064:	080072cb 	.word	0x080072cb
 8007068:	080070b9 	.word	0x080070b9
 800706c:	080072cb 	.word	0x080072cb
 8007070:	080072cb 	.word	0x080072cb
 8007074:	080072cb 	.word	0x080072cb
 8007078:	080072cb 	.word	0x080072cb
 800707c:	080072cb 	.word	0x080072cb
 8007080:	080072cb 	.word	0x080072cb
 8007084:	080072cb 	.word	0x080072cb
 8007088:	080070bf 	.word	0x080070bf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800708c:	4b94      	ldr	r3, [pc, #592]	@ (80072e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0320 	and.w	r3, r3, #32
 8007094:	2b00      	cmp	r3, #0
 8007096:	d009      	beq.n	80070ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007098:	4b91      	ldr	r3, [pc, #580]	@ (80072e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	08db      	lsrs	r3, r3, #3
 800709e:	f003 0303 	and.w	r3, r3, #3
 80070a2:	4a90      	ldr	r2, [pc, #576]	@ (80072e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80070a4:	fa22 f303 	lsr.w	r3, r2, r3
 80070a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80070aa:	e111      	b.n	80072d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80070ac:	4b8d      	ldr	r3, [pc, #564]	@ (80072e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80070ae:	61bb      	str	r3, [r7, #24]
      break;
 80070b0:	e10e      	b.n	80072d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80070b2:	4b8d      	ldr	r3, [pc, #564]	@ (80072e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80070b4:	61bb      	str	r3, [r7, #24]
      break;
 80070b6:	e10b      	b.n	80072d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80070b8:	4b8c      	ldr	r3, [pc, #560]	@ (80072ec <HAL_RCC_GetSysClockFreq+0x2e0>)
 80070ba:	61bb      	str	r3, [r7, #24]
      break;
 80070bc:	e108      	b.n	80072d0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070be:	4b88      	ldr	r3, [pc, #544]	@ (80072e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c2:	f003 0303 	and.w	r3, r3, #3
 80070c6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80070c8:	4b85      	ldr	r3, [pc, #532]	@ (80072e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070cc:	091b      	lsrs	r3, r3, #4
 80070ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070d2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80070d4:	4b82      	ldr	r3, [pc, #520]	@ (80072e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070d8:	f003 0301 	and.w	r3, r3, #1
 80070dc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80070de:	4b80      	ldr	r3, [pc, #512]	@ (80072e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070e2:	08db      	lsrs	r3, r3, #3
 80070e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	fb02 f303 	mul.w	r3, r2, r3
 80070ee:	ee07 3a90 	vmov	s15, r3
 80070f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070f6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f000 80e1 	beq.w	80072c4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	2b02      	cmp	r3, #2
 8007106:	f000 8083 	beq.w	8007210 <HAL_RCC_GetSysClockFreq+0x204>
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	2b02      	cmp	r3, #2
 800710e:	f200 80a1 	bhi.w	8007254 <HAL_RCC_GetSysClockFreq+0x248>
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d003      	beq.n	8007120 <HAL_RCC_GetSysClockFreq+0x114>
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	2b01      	cmp	r3, #1
 800711c:	d056      	beq.n	80071cc <HAL_RCC_GetSysClockFreq+0x1c0>
 800711e:	e099      	b.n	8007254 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007120:	4b6f      	ldr	r3, [pc, #444]	@ (80072e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 0320 	and.w	r3, r3, #32
 8007128:	2b00      	cmp	r3, #0
 800712a:	d02d      	beq.n	8007188 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800712c:	4b6c      	ldr	r3, [pc, #432]	@ (80072e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	08db      	lsrs	r3, r3, #3
 8007132:	f003 0303 	and.w	r3, r3, #3
 8007136:	4a6b      	ldr	r2, [pc, #428]	@ (80072e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007138:	fa22 f303 	lsr.w	r3, r2, r3
 800713c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	ee07 3a90 	vmov	s15, r3
 8007144:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	ee07 3a90 	vmov	s15, r3
 800714e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007156:	4b62      	ldr	r3, [pc, #392]	@ (80072e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800715a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800715e:	ee07 3a90 	vmov	s15, r3
 8007162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007166:	ed97 6a02 	vldr	s12, [r7, #8]
 800716a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80072f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800716e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007176:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800717a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800717e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007182:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007186:	e087      	b.n	8007298 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	ee07 3a90 	vmov	s15, r3
 800718e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007192:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80072f4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800719a:	4b51      	ldr	r3, [pc, #324]	@ (80072e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800719c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800719e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071a2:	ee07 3a90 	vmov	s15, r3
 80071a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80071ae:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80072f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80071b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80071ca:	e065      	b.n	8007298 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	ee07 3a90 	vmov	s15, r3
 80071d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071d6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80072f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80071da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071de:	4b40      	ldr	r3, [pc, #256]	@ (80072e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071e6:	ee07 3a90 	vmov	s15, r3
 80071ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80071f2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80072f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80071f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800720a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800720e:	e043      	b.n	8007298 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	ee07 3a90 	vmov	s15, r3
 8007216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800721a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80072fc <HAL_RCC_GetSysClockFreq+0x2f0>
 800721e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007222:	4b2f      	ldr	r3, [pc, #188]	@ (80072e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800722a:	ee07 3a90 	vmov	s15, r3
 800722e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007232:	ed97 6a02 	vldr	s12, [r7, #8]
 8007236:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80072f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800723a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800723e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007242:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800724a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800724e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007252:	e021      	b.n	8007298 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	ee07 3a90 	vmov	s15, r3
 800725a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800725e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80072f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007266:	4b1e      	ldr	r3, [pc, #120]	@ (80072e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800726a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800726e:	ee07 3a90 	vmov	s15, r3
 8007272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007276:	ed97 6a02 	vldr	s12, [r7, #8]
 800727a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80072f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800727e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007286:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800728a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800728e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007292:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007296:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007298:	4b11      	ldr	r3, [pc, #68]	@ (80072e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800729a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800729c:	0a5b      	lsrs	r3, r3, #9
 800729e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072a2:	3301      	adds	r3, #1
 80072a4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	ee07 3a90 	vmov	s15, r3
 80072ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80072b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80072b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072bc:	ee17 3a90 	vmov	r3, s15
 80072c0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80072c2:	e005      	b.n	80072d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80072c4:	2300      	movs	r3, #0
 80072c6:	61bb      	str	r3, [r7, #24]
      break;
 80072c8:	e002      	b.n	80072d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80072ca:	4b07      	ldr	r3, [pc, #28]	@ (80072e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80072cc:	61bb      	str	r3, [r7, #24]
      break;
 80072ce:	bf00      	nop
  }

  return sysclockfreq;
 80072d0:	69bb      	ldr	r3, [r7, #24]
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3724      	adds	r7, #36	@ 0x24
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	58024400 	.word	0x58024400
 80072e4:	03d09000 	.word	0x03d09000
 80072e8:	003d0900 	.word	0x003d0900
 80072ec:	017d7840 	.word	0x017d7840
 80072f0:	46000000 	.word	0x46000000
 80072f4:	4c742400 	.word	0x4c742400
 80072f8:	4a742400 	.word	0x4a742400
 80072fc:	4bbebc20 	.word	0x4bbebc20

08007300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007306:	f7ff fe81 	bl	800700c <HAL_RCC_GetSysClockFreq>
 800730a:	4602      	mov	r2, r0
 800730c:	4b10      	ldr	r3, [pc, #64]	@ (8007350 <HAL_RCC_GetHCLKFreq+0x50>)
 800730e:	699b      	ldr	r3, [r3, #24]
 8007310:	0a1b      	lsrs	r3, r3, #8
 8007312:	f003 030f 	and.w	r3, r3, #15
 8007316:	490f      	ldr	r1, [pc, #60]	@ (8007354 <HAL_RCC_GetHCLKFreq+0x54>)
 8007318:	5ccb      	ldrb	r3, [r1, r3]
 800731a:	f003 031f 	and.w	r3, r3, #31
 800731e:	fa22 f303 	lsr.w	r3, r2, r3
 8007322:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007324:	4b0a      	ldr	r3, [pc, #40]	@ (8007350 <HAL_RCC_GetHCLKFreq+0x50>)
 8007326:	699b      	ldr	r3, [r3, #24]
 8007328:	f003 030f 	and.w	r3, r3, #15
 800732c:	4a09      	ldr	r2, [pc, #36]	@ (8007354 <HAL_RCC_GetHCLKFreq+0x54>)
 800732e:	5cd3      	ldrb	r3, [r2, r3]
 8007330:	f003 031f 	and.w	r3, r3, #31
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	fa22 f303 	lsr.w	r3, r2, r3
 800733a:	4a07      	ldr	r2, [pc, #28]	@ (8007358 <HAL_RCC_GetHCLKFreq+0x58>)
 800733c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800733e:	4a07      	ldr	r2, [pc, #28]	@ (800735c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007344:	4b04      	ldr	r3, [pc, #16]	@ (8007358 <HAL_RCC_GetHCLKFreq+0x58>)
 8007346:	681b      	ldr	r3, [r3, #0]
}
 8007348:	4618      	mov	r0, r3
 800734a:	3708      	adds	r7, #8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}
 8007350:	58024400 	.word	0x58024400
 8007354:	0800c064 	.word	0x0800c064
 8007358:	24000014 	.word	0x24000014
 800735c:	24000010 	.word	0x24000010

08007360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007364:	f7ff ffcc 	bl	8007300 <HAL_RCC_GetHCLKFreq>
 8007368:	4602      	mov	r2, r0
 800736a:	4b06      	ldr	r3, [pc, #24]	@ (8007384 <HAL_RCC_GetPCLK1Freq+0x24>)
 800736c:	69db      	ldr	r3, [r3, #28]
 800736e:	091b      	lsrs	r3, r3, #4
 8007370:	f003 0307 	and.w	r3, r3, #7
 8007374:	4904      	ldr	r1, [pc, #16]	@ (8007388 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007376:	5ccb      	ldrb	r3, [r1, r3]
 8007378:	f003 031f 	and.w	r3, r3, #31
 800737c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007380:	4618      	mov	r0, r3
 8007382:	bd80      	pop	{r7, pc}
 8007384:	58024400 	.word	0x58024400
 8007388:	0800c064 	.word	0x0800c064

0800738c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007390:	f7ff ffb6 	bl	8007300 <HAL_RCC_GetHCLKFreq>
 8007394:	4602      	mov	r2, r0
 8007396:	4b06      	ldr	r3, [pc, #24]	@ (80073b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007398:	69db      	ldr	r3, [r3, #28]
 800739a:	0a1b      	lsrs	r3, r3, #8
 800739c:	f003 0307 	and.w	r3, r3, #7
 80073a0:	4904      	ldr	r1, [pc, #16]	@ (80073b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80073a2:	5ccb      	ldrb	r3, [r1, r3]
 80073a4:	f003 031f 	and.w	r3, r3, #31
 80073a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	58024400 	.word	0x58024400
 80073b4:	0800c064 	.word	0x0800c064

080073b8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073bc:	b0ca      	sub	sp, #296	@ 0x128
 80073be:	af00      	add	r7, sp, #0
 80073c0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80073c4:	2300      	movs	r3, #0
 80073c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80073ca:	2300      	movs	r3, #0
 80073cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80073d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80073dc:	2500      	movs	r5, #0
 80073de:	ea54 0305 	orrs.w	r3, r4, r5
 80073e2:	d049      	beq.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80073e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80073ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80073ee:	d02f      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80073f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80073f4:	d828      	bhi.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80073f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80073fa:	d01a      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80073fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007400:	d822      	bhi.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007402:	2b00      	cmp	r3, #0
 8007404:	d003      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007406:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800740a:	d007      	beq.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800740c:	e01c      	b.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800740e:	4bb8      	ldr	r3, [pc, #736]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007412:	4ab7      	ldr	r2, [pc, #732]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007414:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007418:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800741a:	e01a      	b.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800741c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007420:	3308      	adds	r3, #8
 8007422:	2102      	movs	r1, #2
 8007424:	4618      	mov	r0, r3
 8007426:	f001 fc8f 	bl	8008d48 <RCCEx_PLL2_Config>
 800742a:	4603      	mov	r3, r0
 800742c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007430:	e00f      	b.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007436:	3328      	adds	r3, #40	@ 0x28
 8007438:	2102      	movs	r1, #2
 800743a:	4618      	mov	r0, r3
 800743c:	f001 fd36 	bl	8008eac <RCCEx_PLL3_Config>
 8007440:	4603      	mov	r3, r0
 8007442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007446:	e004      	b.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800744e:	e000      	b.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007450:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007452:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007456:	2b00      	cmp	r3, #0
 8007458:	d10a      	bne.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800745a:	4ba5      	ldr	r3, [pc, #660]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800745c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800745e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007466:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007468:	4aa1      	ldr	r2, [pc, #644]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800746a:	430b      	orrs	r3, r1
 800746c:	6513      	str	r3, [r2, #80]	@ 0x50
 800746e:	e003      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007470:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007474:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800747c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007480:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007484:	f04f 0900 	mov.w	r9, #0
 8007488:	ea58 0309 	orrs.w	r3, r8, r9
 800748c:	d047      	beq.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800748e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007494:	2b04      	cmp	r3, #4
 8007496:	d82a      	bhi.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007498:	a201      	add	r2, pc, #4	@ (adr r2, 80074a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800749a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800749e:	bf00      	nop
 80074a0:	080074b5 	.word	0x080074b5
 80074a4:	080074c3 	.word	0x080074c3
 80074a8:	080074d9 	.word	0x080074d9
 80074ac:	080074f7 	.word	0x080074f7
 80074b0:	080074f7 	.word	0x080074f7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074b4:	4b8e      	ldr	r3, [pc, #568]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b8:	4a8d      	ldr	r2, [pc, #564]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80074c0:	e01a      	b.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074c6:	3308      	adds	r3, #8
 80074c8:	2100      	movs	r1, #0
 80074ca:	4618      	mov	r0, r3
 80074cc:	f001 fc3c 	bl	8008d48 <RCCEx_PLL2_Config>
 80074d0:	4603      	mov	r3, r0
 80074d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80074d6:	e00f      	b.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80074d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074dc:	3328      	adds	r3, #40	@ 0x28
 80074de:	2100      	movs	r1, #0
 80074e0:	4618      	mov	r0, r3
 80074e2:	f001 fce3 	bl	8008eac <RCCEx_PLL3_Config>
 80074e6:	4603      	mov	r3, r0
 80074e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80074ec:	e004      	b.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074f4:	e000      	b.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80074f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d10a      	bne.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007500:	4b7b      	ldr	r3, [pc, #492]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007504:	f023 0107 	bic.w	r1, r3, #7
 8007508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800750c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800750e:	4a78      	ldr	r2, [pc, #480]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007510:	430b      	orrs	r3, r1
 8007512:	6513      	str	r3, [r2, #80]	@ 0x50
 8007514:	e003      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007516:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800751a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800751e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007526:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800752a:	f04f 0b00 	mov.w	fp, #0
 800752e:	ea5a 030b 	orrs.w	r3, sl, fp
 8007532:	d04c      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800753a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800753e:	d030      	beq.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007540:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007544:	d829      	bhi.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007546:	2bc0      	cmp	r3, #192	@ 0xc0
 8007548:	d02d      	beq.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800754a:	2bc0      	cmp	r3, #192	@ 0xc0
 800754c:	d825      	bhi.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800754e:	2b80      	cmp	r3, #128	@ 0x80
 8007550:	d018      	beq.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007552:	2b80      	cmp	r3, #128	@ 0x80
 8007554:	d821      	bhi.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007556:	2b00      	cmp	r3, #0
 8007558:	d002      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800755a:	2b40      	cmp	r3, #64	@ 0x40
 800755c:	d007      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800755e:	e01c      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007560:	4b63      	ldr	r3, [pc, #396]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007564:	4a62      	ldr	r2, [pc, #392]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007566:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800756a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800756c:	e01c      	b.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800756e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007572:	3308      	adds	r3, #8
 8007574:	2100      	movs	r1, #0
 8007576:	4618      	mov	r0, r3
 8007578:	f001 fbe6 	bl	8008d48 <RCCEx_PLL2_Config>
 800757c:	4603      	mov	r3, r0
 800757e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007582:	e011      	b.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007588:	3328      	adds	r3, #40	@ 0x28
 800758a:	2100      	movs	r1, #0
 800758c:	4618      	mov	r0, r3
 800758e:	f001 fc8d 	bl	8008eac <RCCEx_PLL3_Config>
 8007592:	4603      	mov	r3, r0
 8007594:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007598:	e006      	b.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075a0:	e002      	b.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80075a2:	bf00      	nop
 80075a4:	e000      	b.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80075a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d10a      	bne.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80075b0:	4b4f      	ldr	r3, [pc, #316]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075b4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80075b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075be:	4a4c      	ldr	r2, [pc, #304]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075c0:	430b      	orrs	r3, r1
 80075c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80075c4:	e003      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80075ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80075da:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80075de:	2300      	movs	r3, #0
 80075e0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80075e4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80075e8:	460b      	mov	r3, r1
 80075ea:	4313      	orrs	r3, r2
 80075ec:	d053      	beq.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80075ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80075f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80075fa:	d035      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80075fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007600:	d82e      	bhi.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007602:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007606:	d031      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007608:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800760c:	d828      	bhi.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800760e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007612:	d01a      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007614:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007618:	d822      	bhi.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800761a:	2b00      	cmp	r3, #0
 800761c:	d003      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800761e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007622:	d007      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007624:	e01c      	b.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007626:	4b32      	ldr	r3, [pc, #200]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800762a:	4a31      	ldr	r2, [pc, #196]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800762c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007630:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007632:	e01c      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007638:	3308      	adds	r3, #8
 800763a:	2100      	movs	r1, #0
 800763c:	4618      	mov	r0, r3
 800763e:	f001 fb83 	bl	8008d48 <RCCEx_PLL2_Config>
 8007642:	4603      	mov	r3, r0
 8007644:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007648:	e011      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800764a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800764e:	3328      	adds	r3, #40	@ 0x28
 8007650:	2100      	movs	r1, #0
 8007652:	4618      	mov	r0, r3
 8007654:	f001 fc2a 	bl	8008eac <RCCEx_PLL3_Config>
 8007658:	4603      	mov	r3, r0
 800765a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800765e:	e006      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007666:	e002      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007668:	bf00      	nop
 800766a:	e000      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800766c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800766e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007672:	2b00      	cmp	r3, #0
 8007674:	d10b      	bne.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007676:	4b1e      	ldr	r3, [pc, #120]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800767a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800767e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007682:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007686:	4a1a      	ldr	r2, [pc, #104]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007688:	430b      	orrs	r3, r1
 800768a:	6593      	str	r3, [r2, #88]	@ 0x58
 800768c:	e003      	b.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800768e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007692:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800769a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80076a2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80076a6:	2300      	movs	r3, #0
 80076a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80076ac:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80076b0:	460b      	mov	r3, r1
 80076b2:	4313      	orrs	r3, r2
 80076b4:	d056      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80076b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80076be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80076c2:	d038      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80076c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80076c8:	d831      	bhi.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80076ca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80076ce:	d034      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80076d0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80076d4:	d82b      	bhi.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80076d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80076da:	d01d      	beq.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80076dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80076e0:	d825      	bhi.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d006      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80076e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80076ea:	d00a      	beq.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80076ec:	e01f      	b.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80076ee:	bf00      	nop
 80076f0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076f4:	4ba2      	ldr	r3, [pc, #648]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f8:	4aa1      	ldr	r2, [pc, #644]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007700:	e01c      	b.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007706:	3308      	adds	r3, #8
 8007708:	2100      	movs	r1, #0
 800770a:	4618      	mov	r0, r3
 800770c:	f001 fb1c 	bl	8008d48 <RCCEx_PLL2_Config>
 8007710:	4603      	mov	r3, r0
 8007712:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007716:	e011      	b.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800771c:	3328      	adds	r3, #40	@ 0x28
 800771e:	2100      	movs	r1, #0
 8007720:	4618      	mov	r0, r3
 8007722:	f001 fbc3 	bl	8008eac <RCCEx_PLL3_Config>
 8007726:	4603      	mov	r3, r0
 8007728:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800772c:	e006      	b.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007734:	e002      	b.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007736:	bf00      	nop
 8007738:	e000      	b.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800773a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800773c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007740:	2b00      	cmp	r3, #0
 8007742:	d10b      	bne.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007744:	4b8e      	ldr	r3, [pc, #568]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007748:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800774c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007750:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007754:	4a8a      	ldr	r2, [pc, #552]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007756:	430b      	orrs	r3, r1
 8007758:	6593      	str	r3, [r2, #88]	@ 0x58
 800775a:	e003      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800775c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007760:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007770:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007774:	2300      	movs	r3, #0
 8007776:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800777a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800777e:	460b      	mov	r3, r1
 8007780:	4313      	orrs	r3, r2
 8007782:	d03a      	beq.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800778a:	2b30      	cmp	r3, #48	@ 0x30
 800778c:	d01f      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x416>
 800778e:	2b30      	cmp	r3, #48	@ 0x30
 8007790:	d819      	bhi.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007792:	2b20      	cmp	r3, #32
 8007794:	d00c      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007796:	2b20      	cmp	r3, #32
 8007798:	d815      	bhi.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800779a:	2b00      	cmp	r3, #0
 800779c:	d019      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800779e:	2b10      	cmp	r3, #16
 80077a0:	d111      	bne.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077a2:	4b77      	ldr	r3, [pc, #476]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077a6:	4a76      	ldr	r2, [pc, #472]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80077ae:	e011      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80077b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077b4:	3308      	adds	r3, #8
 80077b6:	2102      	movs	r1, #2
 80077b8:	4618      	mov	r0, r3
 80077ba:	f001 fac5 	bl	8008d48 <RCCEx_PLL2_Config>
 80077be:	4603      	mov	r3, r0
 80077c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80077c4:	e006      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077cc:	e002      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80077ce:	bf00      	nop
 80077d0:	e000      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80077d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d10a      	bne.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80077dc:	4b68      	ldr	r3, [pc, #416]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077e0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80077e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077ea:	4a65      	ldr	r2, [pc, #404]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077ec:	430b      	orrs	r3, r1
 80077ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80077f0:	e003      	b.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80077fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007802:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007806:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800780a:	2300      	movs	r3, #0
 800780c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007810:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007814:	460b      	mov	r3, r1
 8007816:	4313      	orrs	r3, r2
 8007818:	d051      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800781a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800781e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007820:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007824:	d035      	beq.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007826:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800782a:	d82e      	bhi.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800782c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007830:	d031      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007832:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007836:	d828      	bhi.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007838:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800783c:	d01a      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800783e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007842:	d822      	bhi.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007844:	2b00      	cmp	r3, #0
 8007846:	d003      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007848:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800784c:	d007      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800784e:	e01c      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007850:	4b4b      	ldr	r3, [pc, #300]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007854:	4a4a      	ldr	r2, [pc, #296]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007856:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800785a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800785c:	e01c      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800785e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007862:	3308      	adds	r3, #8
 8007864:	2100      	movs	r1, #0
 8007866:	4618      	mov	r0, r3
 8007868:	f001 fa6e 	bl	8008d48 <RCCEx_PLL2_Config>
 800786c:	4603      	mov	r3, r0
 800786e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007872:	e011      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007878:	3328      	adds	r3, #40	@ 0x28
 800787a:	2100      	movs	r1, #0
 800787c:	4618      	mov	r0, r3
 800787e:	f001 fb15 	bl	8008eac <RCCEx_PLL3_Config>
 8007882:	4603      	mov	r3, r0
 8007884:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007888:	e006      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007890:	e002      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007892:	bf00      	nop
 8007894:	e000      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007896:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007898:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800789c:	2b00      	cmp	r3, #0
 800789e:	d10a      	bne.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80078a0:	4b37      	ldr	r3, [pc, #220]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078a4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80078a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078ae:	4a34      	ldr	r2, [pc, #208]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078b0:	430b      	orrs	r3, r1
 80078b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80078b4:	e003      	b.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80078be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80078ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80078ce:	2300      	movs	r3, #0
 80078d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80078d4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80078d8:	460b      	mov	r3, r1
 80078da:	4313      	orrs	r3, r2
 80078dc:	d056      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80078de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80078e8:	d033      	beq.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80078ea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80078ee:	d82c      	bhi.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80078f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80078f4:	d02f      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80078f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80078fa:	d826      	bhi.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80078fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007900:	d02b      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007902:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007906:	d820      	bhi.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007908:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800790c:	d012      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800790e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007912:	d81a      	bhi.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007914:	2b00      	cmp	r3, #0
 8007916:	d022      	beq.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007918:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800791c:	d115      	bne.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800791e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007922:	3308      	adds	r3, #8
 8007924:	2101      	movs	r1, #1
 8007926:	4618      	mov	r0, r3
 8007928:	f001 fa0e 	bl	8008d48 <RCCEx_PLL2_Config>
 800792c:	4603      	mov	r3, r0
 800792e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007932:	e015      	b.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007938:	3328      	adds	r3, #40	@ 0x28
 800793a:	2101      	movs	r1, #1
 800793c:	4618      	mov	r0, r3
 800793e:	f001 fab5 	bl	8008eac <RCCEx_PLL3_Config>
 8007942:	4603      	mov	r3, r0
 8007944:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007948:	e00a      	b.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007950:	e006      	b.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007952:	bf00      	nop
 8007954:	e004      	b.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007956:	bf00      	nop
 8007958:	e002      	b.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800795a:	bf00      	nop
 800795c:	e000      	b.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800795e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007960:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007964:	2b00      	cmp	r3, #0
 8007966:	d10d      	bne.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007968:	4b05      	ldr	r3, [pc, #20]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800796a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800796c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007974:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007976:	4a02      	ldr	r2, [pc, #8]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007978:	430b      	orrs	r3, r1
 800797a:	6513      	str	r3, [r2, #80]	@ 0x50
 800797c:	e006      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800797e:	bf00      	nop
 8007980:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007984:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007988:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800798c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007994:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007998:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800799c:	2300      	movs	r3, #0
 800799e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80079a2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80079a6:	460b      	mov	r3, r1
 80079a8:	4313      	orrs	r3, r2
 80079aa:	d055      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80079ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80079b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079b8:	d033      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80079ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079be:	d82c      	bhi.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80079c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079c4:	d02f      	beq.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80079c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079ca:	d826      	bhi.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80079cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80079d0:	d02b      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80079d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80079d6:	d820      	bhi.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80079d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079dc:	d012      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80079de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079e2:	d81a      	bhi.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d022      	beq.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80079e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079ec:	d115      	bne.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079f2:	3308      	adds	r3, #8
 80079f4:	2101      	movs	r1, #1
 80079f6:	4618      	mov	r0, r3
 80079f8:	f001 f9a6 	bl	8008d48 <RCCEx_PLL2_Config>
 80079fc:	4603      	mov	r3, r0
 80079fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007a02:	e015      	b.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a08:	3328      	adds	r3, #40	@ 0x28
 8007a0a:	2101      	movs	r1, #1
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f001 fa4d 	bl	8008eac <RCCEx_PLL3_Config>
 8007a12:	4603      	mov	r3, r0
 8007a14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007a18:	e00a      	b.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a20:	e006      	b.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007a22:	bf00      	nop
 8007a24:	e004      	b.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007a26:	bf00      	nop
 8007a28:	e002      	b.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007a2a:	bf00      	nop
 8007a2c:	e000      	b.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007a2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d10b      	bne.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007a38:	4ba3      	ldr	r3, [pc, #652]	@ (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a3c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007a48:	4a9f      	ldr	r2, [pc, #636]	@ (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a4a:	430b      	orrs	r3, r1
 8007a4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a4e:	e003      	b.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a60:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007a64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007a68:	2300      	movs	r3, #0
 8007a6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007a6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007a72:	460b      	mov	r3, r1
 8007a74:	4313      	orrs	r3, r2
 8007a76:	d037      	beq.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a82:	d00e      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007a84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a88:	d816      	bhi.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d018      	beq.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007a8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a92:	d111      	bne.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a94:	4b8c      	ldr	r3, [pc, #560]	@ (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a98:	4a8b      	ldr	r2, [pc, #556]	@ (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007aa0:	e00f      	b.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aa6:	3308      	adds	r3, #8
 8007aa8:	2101      	movs	r1, #1
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f001 f94c 	bl	8008d48 <RCCEx_PLL2_Config>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007ab6:	e004      	b.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007abe:	e000      	b.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007ac0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ac2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d10a      	bne.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007aca:	4b7f      	ldr	r3, [pc, #508]	@ (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007acc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ace:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ad8:	4a7b      	ldr	r2, [pc, #492]	@ (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ada:	430b      	orrs	r3, r1
 8007adc:	6513      	str	r3, [r2, #80]	@ 0x50
 8007ade:	e003      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ae0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ae4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007af4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007af8:	2300      	movs	r3, #0
 8007afa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007afe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007b02:	460b      	mov	r3, r1
 8007b04:	4313      	orrs	r3, r2
 8007b06:	d039      	beq.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b0e:	2b03      	cmp	r3, #3
 8007b10:	d81c      	bhi.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007b12:	a201      	add	r2, pc, #4	@ (adr r2, 8007b18 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b18:	08007b55 	.word	0x08007b55
 8007b1c:	08007b29 	.word	0x08007b29
 8007b20:	08007b37 	.word	0x08007b37
 8007b24:	08007b55 	.word	0x08007b55
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b28:	4b67      	ldr	r3, [pc, #412]	@ (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b2c:	4a66      	ldr	r2, [pc, #408]	@ (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007b34:	e00f      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b3a:	3308      	adds	r3, #8
 8007b3c:	2102      	movs	r1, #2
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f001 f902 	bl	8008d48 <RCCEx_PLL2_Config>
 8007b44:	4603      	mov	r3, r0
 8007b46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007b4a:	e004      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b52:	e000      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007b54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d10a      	bne.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007b5e:	4b5a      	ldr	r3, [pc, #360]	@ (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b62:	f023 0103 	bic.w	r1, r3, #3
 8007b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b6c:	4a56      	ldr	r2, [pc, #344]	@ (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b6e:	430b      	orrs	r3, r1
 8007b70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007b72:	e003      	b.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b84:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007b88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007b92:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007b96:	460b      	mov	r3, r1
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	f000 809f 	beq.w	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b9e:	4b4b      	ldr	r3, [pc, #300]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a4a      	ldr	r2, [pc, #296]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007ba4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ba8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007baa:	f7fa fbcd 	bl	8002348 <HAL_GetTick>
 8007bae:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007bb2:	e00b      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bb4:	f7fa fbc8 	bl	8002348 <HAL_GetTick>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	2b64      	cmp	r3, #100	@ 0x64
 8007bc2:	d903      	bls.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bca:	e005      	b.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007bcc:	4b3f      	ldr	r3, [pc, #252]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d0ed      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007bd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d179      	bne.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007be0:	4b39      	ldr	r3, [pc, #228]	@ (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007be2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007be8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007bec:	4053      	eors	r3, r2
 8007bee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d015      	beq.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007bf6:	4b34      	ldr	r3, [pc, #208]	@ (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bfe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007c02:	4b31      	ldr	r3, [pc, #196]	@ (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c06:	4a30      	ldr	r2, [pc, #192]	@ (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c0c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007c0e:	4b2e      	ldr	r3, [pc, #184]	@ (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c12:	4a2d      	ldr	r2, [pc, #180]	@ (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c18:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007c1a:	4a2b      	ldr	r2, [pc, #172]	@ (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007c20:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007c2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c2e:	d118      	bne.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c30:	f7fa fb8a 	bl	8002348 <HAL_GetTick>
 8007c34:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007c38:	e00d      	b.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c3a:	f7fa fb85 	bl	8002348 <HAL_GetTick>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007c44:	1ad2      	subs	r2, r2, r3
 8007c46:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d903      	bls.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007c54:	e005      	b.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007c56:	4b1c      	ldr	r3, [pc, #112]	@ (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c5a:	f003 0302 	and.w	r3, r3, #2
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d0eb      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007c62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d129      	bne.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007c72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c7a:	d10e      	bne.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007c7c:	4b12      	ldr	r3, [pc, #72]	@ (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c7e:	691b      	ldr	r3, [r3, #16]
 8007c80:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007c8c:	091a      	lsrs	r2, r3, #4
 8007c8e:	4b10      	ldr	r3, [pc, #64]	@ (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007c90:	4013      	ands	r3, r2
 8007c92:	4a0d      	ldr	r2, [pc, #52]	@ (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c94:	430b      	orrs	r3, r1
 8007c96:	6113      	str	r3, [r2, #16]
 8007c98:	e005      	b.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ca0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007ca4:	6113      	str	r3, [r2, #16]
 8007ca6:	4b08      	ldr	r3, [pc, #32]	@ (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ca8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007cb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cb6:	4a04      	ldr	r2, [pc, #16]	@ (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cb8:	430b      	orrs	r3, r1
 8007cba:	6713      	str	r3, [r2, #112]	@ 0x70
 8007cbc:	e00e      	b.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007cc6:	e009      	b.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007cc8:	58024400 	.word	0x58024400
 8007ccc:	58024800 	.word	0x58024800
 8007cd0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce4:	f002 0301 	and.w	r3, r2, #1
 8007ce8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007cec:	2300      	movs	r3, #0
 8007cee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007cf2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	f000 8089 	beq.w	8007e10 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d04:	2b28      	cmp	r3, #40	@ 0x28
 8007d06:	d86b      	bhi.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007d08:	a201      	add	r2, pc, #4	@ (adr r2, 8007d10 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d0e:	bf00      	nop
 8007d10:	08007de9 	.word	0x08007de9
 8007d14:	08007de1 	.word	0x08007de1
 8007d18:	08007de1 	.word	0x08007de1
 8007d1c:	08007de1 	.word	0x08007de1
 8007d20:	08007de1 	.word	0x08007de1
 8007d24:	08007de1 	.word	0x08007de1
 8007d28:	08007de1 	.word	0x08007de1
 8007d2c:	08007de1 	.word	0x08007de1
 8007d30:	08007db5 	.word	0x08007db5
 8007d34:	08007de1 	.word	0x08007de1
 8007d38:	08007de1 	.word	0x08007de1
 8007d3c:	08007de1 	.word	0x08007de1
 8007d40:	08007de1 	.word	0x08007de1
 8007d44:	08007de1 	.word	0x08007de1
 8007d48:	08007de1 	.word	0x08007de1
 8007d4c:	08007de1 	.word	0x08007de1
 8007d50:	08007dcb 	.word	0x08007dcb
 8007d54:	08007de1 	.word	0x08007de1
 8007d58:	08007de1 	.word	0x08007de1
 8007d5c:	08007de1 	.word	0x08007de1
 8007d60:	08007de1 	.word	0x08007de1
 8007d64:	08007de1 	.word	0x08007de1
 8007d68:	08007de1 	.word	0x08007de1
 8007d6c:	08007de1 	.word	0x08007de1
 8007d70:	08007de9 	.word	0x08007de9
 8007d74:	08007de1 	.word	0x08007de1
 8007d78:	08007de1 	.word	0x08007de1
 8007d7c:	08007de1 	.word	0x08007de1
 8007d80:	08007de1 	.word	0x08007de1
 8007d84:	08007de1 	.word	0x08007de1
 8007d88:	08007de1 	.word	0x08007de1
 8007d8c:	08007de1 	.word	0x08007de1
 8007d90:	08007de9 	.word	0x08007de9
 8007d94:	08007de1 	.word	0x08007de1
 8007d98:	08007de1 	.word	0x08007de1
 8007d9c:	08007de1 	.word	0x08007de1
 8007da0:	08007de1 	.word	0x08007de1
 8007da4:	08007de1 	.word	0x08007de1
 8007da8:	08007de1 	.word	0x08007de1
 8007dac:	08007de1 	.word	0x08007de1
 8007db0:	08007de9 	.word	0x08007de9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007db8:	3308      	adds	r3, #8
 8007dba:	2101      	movs	r1, #1
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f000 ffc3 	bl	8008d48 <RCCEx_PLL2_Config>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007dc8:	e00f      	b.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dce:	3328      	adds	r3, #40	@ 0x28
 8007dd0:	2101      	movs	r1, #1
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f001 f86a 	bl	8008eac <RCCEx_PLL3_Config>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007dde:	e004      	b.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007de6:	e000      	b.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007de8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d10a      	bne.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007df2:	4bbf      	ldr	r3, [pc, #764]	@ (80080f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007df6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dfe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e00:	4abb      	ldr	r2, [pc, #748]	@ (80080f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e02:	430b      	orrs	r3, r1
 8007e04:	6553      	str	r3, [r2, #84]	@ 0x54
 8007e06:	e003      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e18:	f002 0302 	and.w	r3, r2, #2
 8007e1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007e20:	2300      	movs	r3, #0
 8007e22:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007e26:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	d041      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e36:	2b05      	cmp	r3, #5
 8007e38:	d824      	bhi.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e40 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e40:	08007e8d 	.word	0x08007e8d
 8007e44:	08007e59 	.word	0x08007e59
 8007e48:	08007e6f 	.word	0x08007e6f
 8007e4c:	08007e8d 	.word	0x08007e8d
 8007e50:	08007e8d 	.word	0x08007e8d
 8007e54:	08007e8d 	.word	0x08007e8d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e5c:	3308      	adds	r3, #8
 8007e5e:	2101      	movs	r1, #1
 8007e60:	4618      	mov	r0, r3
 8007e62:	f000 ff71 	bl	8008d48 <RCCEx_PLL2_Config>
 8007e66:	4603      	mov	r3, r0
 8007e68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007e6c:	e00f      	b.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e72:	3328      	adds	r3, #40	@ 0x28
 8007e74:	2101      	movs	r1, #1
 8007e76:	4618      	mov	r0, r3
 8007e78:	f001 f818 	bl	8008eac <RCCEx_PLL3_Config>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007e82:	e004      	b.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e8a:	e000      	b.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007e8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d10a      	bne.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007e96:	4b96      	ldr	r3, [pc, #600]	@ (80080f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e9a:	f023 0107 	bic.w	r1, r3, #7
 8007e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ea2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007ea4:	4a92      	ldr	r2, [pc, #584]	@ (80080f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ea6:	430b      	orrs	r3, r1
 8007ea8:	6553      	str	r3, [r2, #84]	@ 0x54
 8007eaa:	e003      	b.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebc:	f002 0304 	and.w	r3, r2, #4
 8007ec0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007eca:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007ece:	460b      	mov	r3, r1
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	d044      	beq.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007edc:	2b05      	cmp	r3, #5
 8007ede:	d825      	bhi.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee6:	bf00      	nop
 8007ee8:	08007f35 	.word	0x08007f35
 8007eec:	08007f01 	.word	0x08007f01
 8007ef0:	08007f17 	.word	0x08007f17
 8007ef4:	08007f35 	.word	0x08007f35
 8007ef8:	08007f35 	.word	0x08007f35
 8007efc:	08007f35 	.word	0x08007f35
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f04:	3308      	adds	r3, #8
 8007f06:	2101      	movs	r1, #1
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f000 ff1d 	bl	8008d48 <RCCEx_PLL2_Config>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007f14:	e00f      	b.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f1a:	3328      	adds	r3, #40	@ 0x28
 8007f1c:	2101      	movs	r1, #1
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f000 ffc4 	bl	8008eac <RCCEx_PLL3_Config>
 8007f24:	4603      	mov	r3, r0
 8007f26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007f2a:	e004      	b.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f32:	e000      	b.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007f34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d10b      	bne.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007f3e:	4b6c      	ldr	r3, [pc, #432]	@ (80080f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f42:	f023 0107 	bic.w	r1, r3, #7
 8007f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f4e:	4a68      	ldr	r2, [pc, #416]	@ (80080f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f50:	430b      	orrs	r3, r1
 8007f52:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f54:	e003      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f66:	f002 0320 	and.w	r3, r2, #32
 8007f6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007f6e:	2300      	movs	r3, #0
 8007f70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007f74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007f78:	460b      	mov	r3, r1
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	d055      	beq.n	800802a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f8a:	d033      	beq.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007f8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f90:	d82c      	bhi.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007f92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f96:	d02f      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f9c:	d826      	bhi.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007f9e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007fa2:	d02b      	beq.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007fa4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007fa8:	d820      	bhi.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007faa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fae:	d012      	beq.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007fb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fb4:	d81a      	bhi.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d022      	beq.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007fba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007fbe:	d115      	bne.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fc4:	3308      	adds	r3, #8
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f000 febd 	bl	8008d48 <RCCEx_PLL2_Config>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007fd4:	e015      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fda:	3328      	adds	r3, #40	@ 0x28
 8007fdc:	2102      	movs	r1, #2
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f000 ff64 	bl	8008eac <RCCEx_PLL3_Config>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007fea:	e00a      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ff2:	e006      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007ff4:	bf00      	nop
 8007ff6:	e004      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007ff8:	bf00      	nop
 8007ffa:	e002      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007ffc:	bf00      	nop
 8007ffe:	e000      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008000:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008002:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008006:	2b00      	cmp	r3, #0
 8008008:	d10b      	bne.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800800a:	4b39      	ldr	r3, [pc, #228]	@ (80080f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800800c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800800e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800801a:	4a35      	ldr	r2, [pc, #212]	@ (80080f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800801c:	430b      	orrs	r3, r1
 800801e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008020:	e003      	b.n	800802a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008022:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008026:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800802a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800802e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008032:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008036:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800803a:	2300      	movs	r3, #0
 800803c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008040:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008044:	460b      	mov	r3, r1
 8008046:	4313      	orrs	r3, r2
 8008048:	d058      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800804a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800804e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008052:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008056:	d033      	beq.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008058:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800805c:	d82c      	bhi.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800805e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008062:	d02f      	beq.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008064:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008068:	d826      	bhi.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800806a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800806e:	d02b      	beq.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008070:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008074:	d820      	bhi.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008076:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800807a:	d012      	beq.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800807c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008080:	d81a      	bhi.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008082:	2b00      	cmp	r3, #0
 8008084:	d022      	beq.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008086:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800808a:	d115      	bne.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800808c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008090:	3308      	adds	r3, #8
 8008092:	2100      	movs	r1, #0
 8008094:	4618      	mov	r0, r3
 8008096:	f000 fe57 	bl	8008d48 <RCCEx_PLL2_Config>
 800809a:	4603      	mov	r3, r0
 800809c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80080a0:	e015      	b.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80080a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080a6:	3328      	adds	r3, #40	@ 0x28
 80080a8:	2102      	movs	r1, #2
 80080aa:	4618      	mov	r0, r3
 80080ac:	f000 fefe 	bl	8008eac <RCCEx_PLL3_Config>
 80080b0:	4603      	mov	r3, r0
 80080b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80080b6:	e00a      	b.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080be:	e006      	b.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80080c0:	bf00      	nop
 80080c2:	e004      	b.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80080c4:	bf00      	nop
 80080c6:	e002      	b.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80080c8:	bf00      	nop
 80080ca:	e000      	b.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80080cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d10e      	bne.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80080d6:	4b06      	ldr	r3, [pc, #24]	@ (80080f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80080d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080da:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80080de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80080e6:	4a02      	ldr	r2, [pc, #8]	@ (80080f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80080e8:	430b      	orrs	r3, r1
 80080ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80080ec:	e006      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80080ee:	bf00      	nop
 80080f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80080fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008104:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008108:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800810c:	2300      	movs	r3, #0
 800810e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008112:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008116:	460b      	mov	r3, r1
 8008118:	4313      	orrs	r3, r2
 800811a:	d055      	beq.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800811c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008120:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008124:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008128:	d033      	beq.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800812a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800812e:	d82c      	bhi.n	800818a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008130:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008134:	d02f      	beq.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008136:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800813a:	d826      	bhi.n	800818a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800813c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008140:	d02b      	beq.n	800819a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008142:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008146:	d820      	bhi.n	800818a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008148:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800814c:	d012      	beq.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800814e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008152:	d81a      	bhi.n	800818a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008154:	2b00      	cmp	r3, #0
 8008156:	d022      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008158:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800815c:	d115      	bne.n	800818a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800815e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008162:	3308      	adds	r3, #8
 8008164:	2100      	movs	r1, #0
 8008166:	4618      	mov	r0, r3
 8008168:	f000 fdee 	bl	8008d48 <RCCEx_PLL2_Config>
 800816c:	4603      	mov	r3, r0
 800816e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008172:	e015      	b.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008178:	3328      	adds	r3, #40	@ 0x28
 800817a:	2102      	movs	r1, #2
 800817c:	4618      	mov	r0, r3
 800817e:	f000 fe95 	bl	8008eac <RCCEx_PLL3_Config>
 8008182:	4603      	mov	r3, r0
 8008184:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008188:	e00a      	b.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008190:	e006      	b.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008192:	bf00      	nop
 8008194:	e004      	b.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008196:	bf00      	nop
 8008198:	e002      	b.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800819a:	bf00      	nop
 800819c:	e000      	b.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800819e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d10b      	bne.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80081a8:	4ba1      	ldr	r3, [pc, #644]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081ac:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80081b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80081b8:	4a9d      	ldr	r2, [pc, #628]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081ba:	430b      	orrs	r3, r1
 80081bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80081be:	e003      	b.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80081c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d0:	f002 0308 	and.w	r3, r2, #8
 80081d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80081d8:	2300      	movs	r3, #0
 80081da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80081de:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80081e2:	460b      	mov	r3, r1
 80081e4:	4313      	orrs	r3, r2
 80081e6:	d01e      	beq.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80081e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081f4:	d10c      	bne.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80081f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081fa:	3328      	adds	r3, #40	@ 0x28
 80081fc:	2102      	movs	r1, #2
 80081fe:	4618      	mov	r0, r3
 8008200:	f000 fe54 	bl	8008eac <RCCEx_PLL3_Config>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d002      	beq.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008210:	4b87      	ldr	r3, [pc, #540]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008214:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800821c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008220:	4a83      	ldr	r2, [pc, #524]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008222:	430b      	orrs	r3, r1
 8008224:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800822a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822e:	f002 0310 	and.w	r3, r2, #16
 8008232:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008236:	2300      	movs	r3, #0
 8008238:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800823c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008240:	460b      	mov	r3, r1
 8008242:	4313      	orrs	r3, r2
 8008244:	d01e      	beq.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800824a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800824e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008252:	d10c      	bne.n	800826e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008258:	3328      	adds	r3, #40	@ 0x28
 800825a:	2102      	movs	r1, #2
 800825c:	4618      	mov	r0, r3
 800825e:	f000 fe25 	bl	8008eac <RCCEx_PLL3_Config>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d002      	beq.n	800826e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008268:	2301      	movs	r3, #1
 800826a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800826e:	4b70      	ldr	r3, [pc, #448]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008272:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800827a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800827e:	4a6c      	ldr	r2, [pc, #432]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008280:	430b      	orrs	r3, r1
 8008282:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008290:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008294:	2300      	movs	r3, #0
 8008296:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800829a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800829e:	460b      	mov	r3, r1
 80082a0:	4313      	orrs	r3, r2
 80082a2:	d03e      	beq.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80082a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80082ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082b0:	d022      	beq.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80082b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082b6:	d81b      	bhi.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d003      	beq.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80082bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082c0:	d00b      	beq.n	80082da <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80082c2:	e015      	b.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082c8:	3308      	adds	r3, #8
 80082ca:	2100      	movs	r1, #0
 80082cc:	4618      	mov	r0, r3
 80082ce:	f000 fd3b 	bl	8008d48 <RCCEx_PLL2_Config>
 80082d2:	4603      	mov	r3, r0
 80082d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80082d8:	e00f      	b.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80082da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082de:	3328      	adds	r3, #40	@ 0x28
 80082e0:	2102      	movs	r1, #2
 80082e2:	4618      	mov	r0, r3
 80082e4:	f000 fde2 	bl	8008eac <RCCEx_PLL3_Config>
 80082e8:	4603      	mov	r3, r0
 80082ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80082ee:	e004      	b.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80082f6:	e000      	b.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80082f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d10b      	bne.n	800831a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008302:	4b4b      	ldr	r3, [pc, #300]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008306:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800830a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800830e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008312:	4a47      	ldr	r2, [pc, #284]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008314:	430b      	orrs	r3, r1
 8008316:	6593      	str	r3, [r2, #88]	@ 0x58
 8008318:	e003      	b.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800831a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800831e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800832e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008330:	2300      	movs	r3, #0
 8008332:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008334:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008338:	460b      	mov	r3, r1
 800833a:	4313      	orrs	r3, r2
 800833c:	d03b      	beq.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800833e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008346:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800834a:	d01f      	beq.n	800838c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800834c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008350:	d818      	bhi.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008352:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008356:	d003      	beq.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008358:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800835c:	d007      	beq.n	800836e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800835e:	e011      	b.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008360:	4b33      	ldr	r3, [pc, #204]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008364:	4a32      	ldr	r2, [pc, #200]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008366:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800836a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800836c:	e00f      	b.n	800838e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800836e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008372:	3328      	adds	r3, #40	@ 0x28
 8008374:	2101      	movs	r1, #1
 8008376:	4618      	mov	r0, r3
 8008378:	f000 fd98 	bl	8008eac <RCCEx_PLL3_Config>
 800837c:	4603      	mov	r3, r0
 800837e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008382:	e004      	b.n	800838e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008384:	2301      	movs	r3, #1
 8008386:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800838a:	e000      	b.n	800838e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800838c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800838e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008392:	2b00      	cmp	r3, #0
 8008394:	d10b      	bne.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008396:	4b26      	ldr	r3, [pc, #152]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800839a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800839e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083a6:	4a22      	ldr	r2, [pc, #136]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083a8:	430b      	orrs	r3, r1
 80083aa:	6553      	str	r3, [r2, #84]	@ 0x54
 80083ac:	e003      	b.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80083b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083be:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80083c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80083c4:	2300      	movs	r3, #0
 80083c6:	677b      	str	r3, [r7, #116]	@ 0x74
 80083c8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80083cc:	460b      	mov	r3, r1
 80083ce:	4313      	orrs	r3, r2
 80083d0:	d034      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80083d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d003      	beq.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80083dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083e0:	d007      	beq.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80083e2:	e011      	b.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083e4:	4b12      	ldr	r3, [pc, #72]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083e8:	4a11      	ldr	r2, [pc, #68]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80083f0:	e00e      	b.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80083f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083f6:	3308      	adds	r3, #8
 80083f8:	2102      	movs	r1, #2
 80083fa:	4618      	mov	r0, r3
 80083fc:	f000 fca4 	bl	8008d48 <RCCEx_PLL2_Config>
 8008400:	4603      	mov	r3, r0
 8008402:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008406:	e003      	b.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800840e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008410:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008414:	2b00      	cmp	r3, #0
 8008416:	d10d      	bne.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008418:	4b05      	ldr	r3, [pc, #20]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800841a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800841c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008424:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008426:	4a02      	ldr	r2, [pc, #8]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008428:	430b      	orrs	r3, r1
 800842a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800842c:	e006      	b.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800842e:	bf00      	nop
 8008430:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008434:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008438:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800843c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008444:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008448:	66bb      	str	r3, [r7, #104]	@ 0x68
 800844a:	2300      	movs	r3, #0
 800844c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800844e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008452:	460b      	mov	r3, r1
 8008454:	4313      	orrs	r3, r2
 8008456:	d00c      	beq.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800845c:	3328      	adds	r3, #40	@ 0x28
 800845e:	2102      	movs	r1, #2
 8008460:	4618      	mov	r0, r3
 8008462:	f000 fd23 	bl	8008eac <RCCEx_PLL3_Config>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d002      	beq.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800847a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800847e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008480:	2300      	movs	r3, #0
 8008482:	667b      	str	r3, [r7, #100]	@ 0x64
 8008484:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008488:	460b      	mov	r3, r1
 800848a:	4313      	orrs	r3, r2
 800848c:	d038      	beq.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800848e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008492:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008496:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800849a:	d018      	beq.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800849c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80084a0:	d811      	bhi.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80084a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084a6:	d014      	beq.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80084a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084ac:	d80b      	bhi.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d011      	beq.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80084b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084b6:	d106      	bne.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084b8:	4bc3      	ldr	r3, [pc, #780]	@ (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084bc:	4ac2      	ldr	r2, [pc, #776]	@ (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80084c4:	e008      	b.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80084cc:	e004      	b.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80084ce:	bf00      	nop
 80084d0:	e002      	b.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80084d2:	bf00      	nop
 80084d4:	e000      	b.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80084d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d10b      	bne.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80084e0:	4bb9      	ldr	r3, [pc, #740]	@ (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084e4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80084e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084f0:	4ab5      	ldr	r2, [pc, #724]	@ (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084f2:	430b      	orrs	r3, r1
 80084f4:	6553      	str	r3, [r2, #84]	@ 0x54
 80084f6:	e003      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008508:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800850c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800850e:	2300      	movs	r3, #0
 8008510:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008512:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008516:	460b      	mov	r3, r1
 8008518:	4313      	orrs	r3, r2
 800851a:	d009      	beq.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800851c:	4baa      	ldr	r3, [pc, #680]	@ (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800851e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008520:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008528:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800852a:	4aa7      	ldr	r2, [pc, #668]	@ (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800852c:	430b      	orrs	r3, r1
 800852e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008538:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800853c:	653b      	str	r3, [r7, #80]	@ 0x50
 800853e:	2300      	movs	r3, #0
 8008540:	657b      	str	r3, [r7, #84]	@ 0x54
 8008542:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008546:	460b      	mov	r3, r1
 8008548:	4313      	orrs	r3, r2
 800854a:	d00a      	beq.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800854c:	4b9e      	ldr	r3, [pc, #632]	@ (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800854e:	691b      	ldr	r3, [r3, #16]
 8008550:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008558:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800855c:	4a9a      	ldr	r2, [pc, #616]	@ (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800855e:	430b      	orrs	r3, r1
 8008560:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800856e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008570:	2300      	movs	r3, #0
 8008572:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008574:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008578:	460b      	mov	r3, r1
 800857a:	4313      	orrs	r3, r2
 800857c:	d009      	beq.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800857e:	4b92      	ldr	r3, [pc, #584]	@ (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008580:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008582:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800858a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800858c:	4a8e      	ldr	r2, [pc, #568]	@ (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800858e:	430b      	orrs	r3, r1
 8008590:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800859e:	643b      	str	r3, [r7, #64]	@ 0x40
 80085a0:	2300      	movs	r3, #0
 80085a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80085a4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80085a8:	460b      	mov	r3, r1
 80085aa:	4313      	orrs	r3, r2
 80085ac:	d00e      	beq.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80085ae:	4b86      	ldr	r3, [pc, #536]	@ (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	4a85      	ldr	r2, [pc, #532]	@ (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085b4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80085b8:	6113      	str	r3, [r2, #16]
 80085ba:	4b83      	ldr	r3, [pc, #524]	@ (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085bc:	6919      	ldr	r1, [r3, #16]
 80085be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80085c6:	4a80      	ldr	r2, [pc, #512]	@ (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085c8:	430b      	orrs	r3, r1
 80085ca:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80085cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80085d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80085da:	2300      	movs	r3, #0
 80085dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085de:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80085e2:	460b      	mov	r3, r1
 80085e4:	4313      	orrs	r3, r2
 80085e6:	d009      	beq.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80085e8:	4b77      	ldr	r3, [pc, #476]	@ (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085ec:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80085f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085f6:	4a74      	ldr	r2, [pc, #464]	@ (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085f8:	430b      	orrs	r3, r1
 80085fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80085fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008604:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008608:	633b      	str	r3, [r7, #48]	@ 0x30
 800860a:	2300      	movs	r3, #0
 800860c:	637b      	str	r3, [r7, #52]	@ 0x34
 800860e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008612:	460b      	mov	r3, r1
 8008614:	4313      	orrs	r3, r2
 8008616:	d00a      	beq.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008618:	4b6b      	ldr	r3, [pc, #428]	@ (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800861a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800861c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008624:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008628:	4a67      	ldr	r2, [pc, #412]	@ (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800862a:	430b      	orrs	r3, r1
 800862c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800862e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008636:	2100      	movs	r1, #0
 8008638:	62b9      	str	r1, [r7, #40]	@ 0x28
 800863a:	f003 0301 	and.w	r3, r3, #1
 800863e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008640:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008644:	460b      	mov	r3, r1
 8008646:	4313      	orrs	r3, r2
 8008648:	d011      	beq.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800864a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800864e:	3308      	adds	r3, #8
 8008650:	2100      	movs	r1, #0
 8008652:	4618      	mov	r0, r3
 8008654:	f000 fb78 	bl	8008d48 <RCCEx_PLL2_Config>
 8008658:	4603      	mov	r3, r0
 800865a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800865e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008662:	2b00      	cmp	r3, #0
 8008664:	d003      	beq.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008666:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800866a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800866e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008676:	2100      	movs	r1, #0
 8008678:	6239      	str	r1, [r7, #32]
 800867a:	f003 0302 	and.w	r3, r3, #2
 800867e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008680:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008684:	460b      	mov	r3, r1
 8008686:	4313      	orrs	r3, r2
 8008688:	d011      	beq.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800868a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800868e:	3308      	adds	r3, #8
 8008690:	2101      	movs	r1, #1
 8008692:	4618      	mov	r0, r3
 8008694:	f000 fb58 	bl	8008d48 <RCCEx_PLL2_Config>
 8008698:	4603      	mov	r3, r0
 800869a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800869e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d003      	beq.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80086ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b6:	2100      	movs	r1, #0
 80086b8:	61b9      	str	r1, [r7, #24]
 80086ba:	f003 0304 	and.w	r3, r3, #4
 80086be:	61fb      	str	r3, [r7, #28]
 80086c0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80086c4:	460b      	mov	r3, r1
 80086c6:	4313      	orrs	r3, r2
 80086c8:	d011      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80086ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086ce:	3308      	adds	r3, #8
 80086d0:	2102      	movs	r1, #2
 80086d2:	4618      	mov	r0, r3
 80086d4:	f000 fb38 	bl	8008d48 <RCCEx_PLL2_Config>
 80086d8:	4603      	mov	r3, r0
 80086da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80086de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d003      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80086ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f6:	2100      	movs	r1, #0
 80086f8:	6139      	str	r1, [r7, #16]
 80086fa:	f003 0308 	and.w	r3, r3, #8
 80086fe:	617b      	str	r3, [r7, #20]
 8008700:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008704:	460b      	mov	r3, r1
 8008706:	4313      	orrs	r3, r2
 8008708:	d011      	beq.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800870a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800870e:	3328      	adds	r3, #40	@ 0x28
 8008710:	2100      	movs	r1, #0
 8008712:	4618      	mov	r0, r3
 8008714:	f000 fbca 	bl	8008eac <RCCEx_PLL3_Config>
 8008718:	4603      	mov	r3, r0
 800871a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800871e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008722:	2b00      	cmp	r3, #0
 8008724:	d003      	beq.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008726:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800872a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800872e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008736:	2100      	movs	r1, #0
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	f003 0310 	and.w	r3, r3, #16
 800873e:	60fb      	str	r3, [r7, #12]
 8008740:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008744:	460b      	mov	r3, r1
 8008746:	4313      	orrs	r3, r2
 8008748:	d011      	beq.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800874a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800874e:	3328      	adds	r3, #40	@ 0x28
 8008750:	2101      	movs	r1, #1
 8008752:	4618      	mov	r0, r3
 8008754:	f000 fbaa 	bl	8008eac <RCCEx_PLL3_Config>
 8008758:	4603      	mov	r3, r0
 800875a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800875e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008762:	2b00      	cmp	r3, #0
 8008764:	d003      	beq.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008766:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800876a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800876e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008776:	2100      	movs	r1, #0
 8008778:	6039      	str	r1, [r7, #0]
 800877a:	f003 0320 	and.w	r3, r3, #32
 800877e:	607b      	str	r3, [r7, #4]
 8008780:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008784:	460b      	mov	r3, r1
 8008786:	4313      	orrs	r3, r2
 8008788:	d011      	beq.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800878a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800878e:	3328      	adds	r3, #40	@ 0x28
 8008790:	2102      	movs	r1, #2
 8008792:	4618      	mov	r0, r3
 8008794:	f000 fb8a 	bl	8008eac <RCCEx_PLL3_Config>
 8008798:	4603      	mov	r3, r0
 800879a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800879e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d003      	beq.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80087ae:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d101      	bne.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80087b6:	2300      	movs	r3, #0
 80087b8:	e000      	b.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
}
 80087bc:	4618      	mov	r0, r3
 80087be:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80087c2:	46bd      	mov	sp, r7
 80087c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087c8:	58024400 	.word	0x58024400

080087cc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80087d0:	f7fe fd96 	bl	8007300 <HAL_RCC_GetHCLKFreq>
 80087d4:	4602      	mov	r2, r0
 80087d6:	4b06      	ldr	r3, [pc, #24]	@ (80087f0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80087d8:	6a1b      	ldr	r3, [r3, #32]
 80087da:	091b      	lsrs	r3, r3, #4
 80087dc:	f003 0307 	and.w	r3, r3, #7
 80087e0:	4904      	ldr	r1, [pc, #16]	@ (80087f4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80087e2:	5ccb      	ldrb	r3, [r1, r3]
 80087e4:	f003 031f 	and.w	r3, r3, #31
 80087e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	58024400 	.word	0x58024400
 80087f4:	0800c064 	.word	0x0800c064

080087f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b089      	sub	sp, #36	@ 0x24
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008800:	4ba1      	ldr	r3, [pc, #644]	@ (8008a88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008804:	f003 0303 	and.w	r3, r3, #3
 8008808:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800880a:	4b9f      	ldr	r3, [pc, #636]	@ (8008a88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800880c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800880e:	0b1b      	lsrs	r3, r3, #12
 8008810:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008814:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008816:	4b9c      	ldr	r3, [pc, #624]	@ (8008a88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800881a:	091b      	lsrs	r3, r3, #4
 800881c:	f003 0301 	and.w	r3, r3, #1
 8008820:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008822:	4b99      	ldr	r3, [pc, #612]	@ (8008a88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008826:	08db      	lsrs	r3, r3, #3
 8008828:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800882c:	693a      	ldr	r2, [r7, #16]
 800882e:	fb02 f303 	mul.w	r3, r2, r3
 8008832:	ee07 3a90 	vmov	s15, r3
 8008836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800883a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	2b00      	cmp	r3, #0
 8008842:	f000 8111 	beq.w	8008a68 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008846:	69bb      	ldr	r3, [r7, #24]
 8008848:	2b02      	cmp	r3, #2
 800884a:	f000 8083 	beq.w	8008954 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800884e:	69bb      	ldr	r3, [r7, #24]
 8008850:	2b02      	cmp	r3, #2
 8008852:	f200 80a1 	bhi.w	8008998 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d003      	beq.n	8008864 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	2b01      	cmp	r3, #1
 8008860:	d056      	beq.n	8008910 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008862:	e099      	b.n	8008998 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008864:	4b88      	ldr	r3, [pc, #544]	@ (8008a88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f003 0320 	and.w	r3, r3, #32
 800886c:	2b00      	cmp	r3, #0
 800886e:	d02d      	beq.n	80088cc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008870:	4b85      	ldr	r3, [pc, #532]	@ (8008a88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	08db      	lsrs	r3, r3, #3
 8008876:	f003 0303 	and.w	r3, r3, #3
 800887a:	4a84      	ldr	r2, [pc, #528]	@ (8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800887c:	fa22 f303 	lsr.w	r3, r2, r3
 8008880:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	ee07 3a90 	vmov	s15, r3
 8008888:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	ee07 3a90 	vmov	s15, r3
 8008892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800889a:	4b7b      	ldr	r3, [pc, #492]	@ (8008a88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800889c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800889e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088a2:	ee07 3a90 	vmov	s15, r3
 80088a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80088ae:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008a90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80088ca:	e087      	b.n	80089dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	ee07 3a90 	vmov	s15, r3
 80088d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088d6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008a94 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80088da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088de:	4b6a      	ldr	r3, [pc, #424]	@ (8008a88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088e6:	ee07 3a90 	vmov	s15, r3
 80088ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80088f2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008a90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800890a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800890e:	e065      	b.n	80089dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	ee07 3a90 	vmov	s15, r3
 8008916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800891a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008a98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800891e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008922:	4b59      	ldr	r3, [pc, #356]	@ (8008a88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800892a:	ee07 3a90 	vmov	s15, r3
 800892e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008932:	ed97 6a03 	vldr	s12, [r7, #12]
 8008936:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008a90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800893a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800893e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008942:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800894a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800894e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008952:	e043      	b.n	80089dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	ee07 3a90 	vmov	s15, r3
 800895a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800895e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008966:	4b48      	ldr	r3, [pc, #288]	@ (8008a88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800896a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800896e:	ee07 3a90 	vmov	s15, r3
 8008972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008976:	ed97 6a03 	vldr	s12, [r7, #12]
 800897a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008a90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800897e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008986:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800898a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800898e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008992:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008996:	e021      	b.n	80089dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	ee07 3a90 	vmov	s15, r3
 800899e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089a2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008a98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80089a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089aa:	4b37      	ldr	r3, [pc, #220]	@ (8008a88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089b2:	ee07 3a90 	vmov	s15, r3
 80089b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80089be:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008a90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80089c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089da:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80089dc:	4b2a      	ldr	r3, [pc, #168]	@ (8008a88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089e0:	0a5b      	lsrs	r3, r3, #9
 80089e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089e6:	ee07 3a90 	vmov	s15, r3
 80089ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80089f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80089fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a02:	ee17 2a90 	vmov	r2, s15
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8008a88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a0e:	0c1b      	lsrs	r3, r3, #16
 8008a10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a14:	ee07 3a90 	vmov	s15, r3
 8008a18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a24:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a30:	ee17 2a90 	vmov	r2, s15
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008a38:	4b13      	ldr	r3, [pc, #76]	@ (8008a88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a3c:	0e1b      	lsrs	r3, r3, #24
 8008a3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a42:	ee07 3a90 	vmov	s15, r3
 8008a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a52:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a5e:	ee17 2a90 	vmov	r2, s15
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008a66:	e008      	b.n	8008a7a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	609a      	str	r2, [r3, #8]
}
 8008a7a:	bf00      	nop
 8008a7c:	3724      	adds	r7, #36	@ 0x24
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop
 8008a88:	58024400 	.word	0x58024400
 8008a8c:	03d09000 	.word	0x03d09000
 8008a90:	46000000 	.word	0x46000000
 8008a94:	4c742400 	.word	0x4c742400
 8008a98:	4a742400 	.word	0x4a742400
 8008a9c:	4bbebc20 	.word	0x4bbebc20

08008aa0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b089      	sub	sp, #36	@ 0x24
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008aa8:	4ba1      	ldr	r3, [pc, #644]	@ (8008d30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aac:	f003 0303 	and.w	r3, r3, #3
 8008ab0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008ab2:	4b9f      	ldr	r3, [pc, #636]	@ (8008d30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ab6:	0d1b      	lsrs	r3, r3, #20
 8008ab8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008abc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008abe:	4b9c      	ldr	r3, [pc, #624]	@ (8008d30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ac2:	0a1b      	lsrs	r3, r3, #8
 8008ac4:	f003 0301 	and.w	r3, r3, #1
 8008ac8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008aca:	4b99      	ldr	r3, [pc, #612]	@ (8008d30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ace:	08db      	lsrs	r3, r3, #3
 8008ad0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ad4:	693a      	ldr	r2, [r7, #16]
 8008ad6:	fb02 f303 	mul.w	r3, r2, r3
 8008ada:	ee07 3a90 	vmov	s15, r3
 8008ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ae2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	f000 8111 	beq.w	8008d10 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	2b02      	cmp	r3, #2
 8008af2:	f000 8083 	beq.w	8008bfc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008af6:	69bb      	ldr	r3, [r7, #24]
 8008af8:	2b02      	cmp	r3, #2
 8008afa:	f200 80a1 	bhi.w	8008c40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008afe:	69bb      	ldr	r3, [r7, #24]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d003      	beq.n	8008b0c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008b04:	69bb      	ldr	r3, [r7, #24]
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d056      	beq.n	8008bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008b0a:	e099      	b.n	8008c40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b0c:	4b88      	ldr	r3, [pc, #544]	@ (8008d30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f003 0320 	and.w	r3, r3, #32
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d02d      	beq.n	8008b74 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b18:	4b85      	ldr	r3, [pc, #532]	@ (8008d30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	08db      	lsrs	r3, r3, #3
 8008b1e:	f003 0303 	and.w	r3, r3, #3
 8008b22:	4a84      	ldr	r2, [pc, #528]	@ (8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008b24:	fa22 f303 	lsr.w	r3, r2, r3
 8008b28:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	ee07 3a90 	vmov	s15, r3
 8008b30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	ee07 3a90 	vmov	s15, r3
 8008b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b42:	4b7b      	ldr	r3, [pc, #492]	@ (8008d30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b4a:	ee07 3a90 	vmov	s15, r3
 8008b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b52:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b56:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008d38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b6e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008b72:	e087      	b.n	8008c84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	ee07 3a90 	vmov	s15, r3
 8008b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b7e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008d3c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b86:	4b6a      	ldr	r3, [pc, #424]	@ (8008d30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b8e:	ee07 3a90 	vmov	s15, r3
 8008b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b96:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b9a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008d38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ba6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bb6:	e065      	b.n	8008c84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	ee07 3a90 	vmov	s15, r3
 8008bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bc2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008d40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bca:	4b59      	ldr	r3, [pc, #356]	@ (8008d30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bd2:	ee07 3a90 	vmov	s15, r3
 8008bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bda:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bde:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008d38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bfa:	e043      	b.n	8008c84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	ee07 3a90 	vmov	s15, r3
 8008c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c06:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008d44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c0e:	4b48      	ldr	r3, [pc, #288]	@ (8008d30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c16:	ee07 3a90 	vmov	s15, r3
 8008c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c22:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008d38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c3e:	e021      	b.n	8008c84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	ee07 3a90 	vmov	s15, r3
 8008c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c4a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008d40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c52:	4b37      	ldr	r3, [pc, #220]	@ (8008d30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c5a:	ee07 3a90 	vmov	s15, r3
 8008c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c62:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c66:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008d38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c82:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008c84:	4b2a      	ldr	r3, [pc, #168]	@ (8008d30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c88:	0a5b      	lsrs	r3, r3, #9
 8008c8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c8e:	ee07 3a90 	vmov	s15, r3
 8008c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ca2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ca6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008caa:	ee17 2a90 	vmov	r2, s15
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008cb2:	4b1f      	ldr	r3, [pc, #124]	@ (8008d30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cb6:	0c1b      	lsrs	r3, r3, #16
 8008cb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cbc:	ee07 3a90 	vmov	s15, r3
 8008cc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cc4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008cc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ccc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cd8:	ee17 2a90 	vmov	r2, s15
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008ce0:	4b13      	ldr	r3, [pc, #76]	@ (8008d30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ce4:	0e1b      	lsrs	r3, r3, #24
 8008ce6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cea:	ee07 3a90 	vmov	s15, r3
 8008cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cf2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008cf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d06:	ee17 2a90 	vmov	r2, s15
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008d0e:	e008      	b.n	8008d22 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	609a      	str	r2, [r3, #8]
}
 8008d22:	bf00      	nop
 8008d24:	3724      	adds	r7, #36	@ 0x24
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr
 8008d2e:	bf00      	nop
 8008d30:	58024400 	.word	0x58024400
 8008d34:	03d09000 	.word	0x03d09000
 8008d38:	46000000 	.word	0x46000000
 8008d3c:	4c742400 	.word	0x4c742400
 8008d40:	4a742400 	.word	0x4a742400
 8008d44:	4bbebc20 	.word	0x4bbebc20

08008d48 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d52:	2300      	movs	r3, #0
 8008d54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008d56:	4b53      	ldr	r3, [pc, #332]	@ (8008ea4 <RCCEx_PLL2_Config+0x15c>)
 8008d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d5a:	f003 0303 	and.w	r3, r3, #3
 8008d5e:	2b03      	cmp	r3, #3
 8008d60:	d101      	bne.n	8008d66 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	e099      	b.n	8008e9a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008d66:	4b4f      	ldr	r3, [pc, #316]	@ (8008ea4 <RCCEx_PLL2_Config+0x15c>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a4e      	ldr	r2, [pc, #312]	@ (8008ea4 <RCCEx_PLL2_Config+0x15c>)
 8008d6c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008d70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d72:	f7f9 fae9 	bl	8002348 <HAL_GetTick>
 8008d76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008d78:	e008      	b.n	8008d8c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008d7a:	f7f9 fae5 	bl	8002348 <HAL_GetTick>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	1ad3      	subs	r3, r2, r3
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	d901      	bls.n	8008d8c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008d88:	2303      	movs	r3, #3
 8008d8a:	e086      	b.n	8008e9a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008d8c:	4b45      	ldr	r3, [pc, #276]	@ (8008ea4 <RCCEx_PLL2_Config+0x15c>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d1f0      	bne.n	8008d7a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008d98:	4b42      	ldr	r3, [pc, #264]	@ (8008ea4 <RCCEx_PLL2_Config+0x15c>)
 8008d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d9c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	031b      	lsls	r3, r3, #12
 8008da6:	493f      	ldr	r1, [pc, #252]	@ (8008ea4 <RCCEx_PLL2_Config+0x15c>)
 8008da8:	4313      	orrs	r3, r2
 8008daa:	628b      	str	r3, [r1, #40]	@ 0x28
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	3b01      	subs	r3, #1
 8008db2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	3b01      	subs	r3, #1
 8008dbc:	025b      	lsls	r3, r3, #9
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	431a      	orrs	r2, r3
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	041b      	lsls	r3, r3, #16
 8008dca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008dce:	431a      	orrs	r2, r3
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	3b01      	subs	r3, #1
 8008dd6:	061b      	lsls	r3, r3, #24
 8008dd8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008ddc:	4931      	ldr	r1, [pc, #196]	@ (8008ea4 <RCCEx_PLL2_Config+0x15c>)
 8008dde:	4313      	orrs	r3, r2
 8008de0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008de2:	4b30      	ldr	r3, [pc, #192]	@ (8008ea4 <RCCEx_PLL2_Config+0x15c>)
 8008de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008de6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	695b      	ldr	r3, [r3, #20]
 8008dee:	492d      	ldr	r1, [pc, #180]	@ (8008ea4 <RCCEx_PLL2_Config+0x15c>)
 8008df0:	4313      	orrs	r3, r2
 8008df2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008df4:	4b2b      	ldr	r3, [pc, #172]	@ (8008ea4 <RCCEx_PLL2_Config+0x15c>)
 8008df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008df8:	f023 0220 	bic.w	r2, r3, #32
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	699b      	ldr	r3, [r3, #24]
 8008e00:	4928      	ldr	r1, [pc, #160]	@ (8008ea4 <RCCEx_PLL2_Config+0x15c>)
 8008e02:	4313      	orrs	r3, r2
 8008e04:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008e06:	4b27      	ldr	r3, [pc, #156]	@ (8008ea4 <RCCEx_PLL2_Config+0x15c>)
 8008e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e0a:	4a26      	ldr	r2, [pc, #152]	@ (8008ea4 <RCCEx_PLL2_Config+0x15c>)
 8008e0c:	f023 0310 	bic.w	r3, r3, #16
 8008e10:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008e12:	4b24      	ldr	r3, [pc, #144]	@ (8008ea4 <RCCEx_PLL2_Config+0x15c>)
 8008e14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e16:	4b24      	ldr	r3, [pc, #144]	@ (8008ea8 <RCCEx_PLL2_Config+0x160>)
 8008e18:	4013      	ands	r3, r2
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	69d2      	ldr	r2, [r2, #28]
 8008e1e:	00d2      	lsls	r2, r2, #3
 8008e20:	4920      	ldr	r1, [pc, #128]	@ (8008ea4 <RCCEx_PLL2_Config+0x15c>)
 8008e22:	4313      	orrs	r3, r2
 8008e24:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008e26:	4b1f      	ldr	r3, [pc, #124]	@ (8008ea4 <RCCEx_PLL2_Config+0x15c>)
 8008e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e2a:	4a1e      	ldr	r2, [pc, #120]	@ (8008ea4 <RCCEx_PLL2_Config+0x15c>)
 8008e2c:	f043 0310 	orr.w	r3, r3, #16
 8008e30:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d106      	bne.n	8008e46 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008e38:	4b1a      	ldr	r3, [pc, #104]	@ (8008ea4 <RCCEx_PLL2_Config+0x15c>)
 8008e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e3c:	4a19      	ldr	r2, [pc, #100]	@ (8008ea4 <RCCEx_PLL2_Config+0x15c>)
 8008e3e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008e42:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008e44:	e00f      	b.n	8008e66 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d106      	bne.n	8008e5a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008e4c:	4b15      	ldr	r3, [pc, #84]	@ (8008ea4 <RCCEx_PLL2_Config+0x15c>)
 8008e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e50:	4a14      	ldr	r2, [pc, #80]	@ (8008ea4 <RCCEx_PLL2_Config+0x15c>)
 8008e52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008e56:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008e58:	e005      	b.n	8008e66 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008e5a:	4b12      	ldr	r3, [pc, #72]	@ (8008ea4 <RCCEx_PLL2_Config+0x15c>)
 8008e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e5e:	4a11      	ldr	r2, [pc, #68]	@ (8008ea4 <RCCEx_PLL2_Config+0x15c>)
 8008e60:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008e64:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008e66:	4b0f      	ldr	r3, [pc, #60]	@ (8008ea4 <RCCEx_PLL2_Config+0x15c>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a0e      	ldr	r2, [pc, #56]	@ (8008ea4 <RCCEx_PLL2_Config+0x15c>)
 8008e6c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008e70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e72:	f7f9 fa69 	bl	8002348 <HAL_GetTick>
 8008e76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008e78:	e008      	b.n	8008e8c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008e7a:	f7f9 fa65 	bl	8002348 <HAL_GetTick>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	1ad3      	subs	r3, r2, r3
 8008e84:	2b02      	cmp	r3, #2
 8008e86:	d901      	bls.n	8008e8c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008e88:	2303      	movs	r3, #3
 8008e8a:	e006      	b.n	8008e9a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008e8c:	4b05      	ldr	r3, [pc, #20]	@ (8008ea4 <RCCEx_PLL2_Config+0x15c>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d0f0      	beq.n	8008e7a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	58024400 	.word	0x58024400
 8008ea8:	ffff0007 	.word	0xffff0007

08008eac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008eba:	4b53      	ldr	r3, [pc, #332]	@ (8009008 <RCCEx_PLL3_Config+0x15c>)
 8008ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ebe:	f003 0303 	and.w	r3, r3, #3
 8008ec2:	2b03      	cmp	r3, #3
 8008ec4:	d101      	bne.n	8008eca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	e099      	b.n	8008ffe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008eca:	4b4f      	ldr	r3, [pc, #316]	@ (8009008 <RCCEx_PLL3_Config+0x15c>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a4e      	ldr	r2, [pc, #312]	@ (8009008 <RCCEx_PLL3_Config+0x15c>)
 8008ed0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ed4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ed6:	f7f9 fa37 	bl	8002348 <HAL_GetTick>
 8008eda:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008edc:	e008      	b.n	8008ef0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008ede:	f7f9 fa33 	bl	8002348 <HAL_GetTick>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	1ad3      	subs	r3, r2, r3
 8008ee8:	2b02      	cmp	r3, #2
 8008eea:	d901      	bls.n	8008ef0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008eec:	2303      	movs	r3, #3
 8008eee:	e086      	b.n	8008ffe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008ef0:	4b45      	ldr	r3, [pc, #276]	@ (8009008 <RCCEx_PLL3_Config+0x15c>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d1f0      	bne.n	8008ede <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008efc:	4b42      	ldr	r3, [pc, #264]	@ (8009008 <RCCEx_PLL3_Config+0x15c>)
 8008efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f00:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	051b      	lsls	r3, r3, #20
 8008f0a:	493f      	ldr	r1, [pc, #252]	@ (8009008 <RCCEx_PLL3_Config+0x15c>)
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	3b01      	subs	r3, #1
 8008f16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	025b      	lsls	r3, r3, #9
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	431a      	orrs	r2, r3
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	68db      	ldr	r3, [r3, #12]
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	041b      	lsls	r3, r3, #16
 8008f2e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008f32:	431a      	orrs	r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	691b      	ldr	r3, [r3, #16]
 8008f38:	3b01      	subs	r3, #1
 8008f3a:	061b      	lsls	r3, r3, #24
 8008f3c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008f40:	4931      	ldr	r1, [pc, #196]	@ (8009008 <RCCEx_PLL3_Config+0x15c>)
 8008f42:	4313      	orrs	r3, r2
 8008f44:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008f46:	4b30      	ldr	r3, [pc, #192]	@ (8009008 <RCCEx_PLL3_Config+0x15c>)
 8008f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f4a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	695b      	ldr	r3, [r3, #20]
 8008f52:	492d      	ldr	r1, [pc, #180]	@ (8009008 <RCCEx_PLL3_Config+0x15c>)
 8008f54:	4313      	orrs	r3, r2
 8008f56:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008f58:	4b2b      	ldr	r3, [pc, #172]	@ (8009008 <RCCEx_PLL3_Config+0x15c>)
 8008f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f5c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	699b      	ldr	r3, [r3, #24]
 8008f64:	4928      	ldr	r1, [pc, #160]	@ (8009008 <RCCEx_PLL3_Config+0x15c>)
 8008f66:	4313      	orrs	r3, r2
 8008f68:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008f6a:	4b27      	ldr	r3, [pc, #156]	@ (8009008 <RCCEx_PLL3_Config+0x15c>)
 8008f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f6e:	4a26      	ldr	r2, [pc, #152]	@ (8009008 <RCCEx_PLL3_Config+0x15c>)
 8008f70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f74:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008f76:	4b24      	ldr	r3, [pc, #144]	@ (8009008 <RCCEx_PLL3_Config+0x15c>)
 8008f78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f7a:	4b24      	ldr	r3, [pc, #144]	@ (800900c <RCCEx_PLL3_Config+0x160>)
 8008f7c:	4013      	ands	r3, r2
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	69d2      	ldr	r2, [r2, #28]
 8008f82:	00d2      	lsls	r2, r2, #3
 8008f84:	4920      	ldr	r1, [pc, #128]	@ (8009008 <RCCEx_PLL3_Config+0x15c>)
 8008f86:	4313      	orrs	r3, r2
 8008f88:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008f8a:	4b1f      	ldr	r3, [pc, #124]	@ (8009008 <RCCEx_PLL3_Config+0x15c>)
 8008f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f8e:	4a1e      	ldr	r2, [pc, #120]	@ (8009008 <RCCEx_PLL3_Config+0x15c>)
 8008f90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f94:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d106      	bne.n	8008faa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8009008 <RCCEx_PLL3_Config+0x15c>)
 8008f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fa0:	4a19      	ldr	r2, [pc, #100]	@ (8009008 <RCCEx_PLL3_Config+0x15c>)
 8008fa2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008fa6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008fa8:	e00f      	b.n	8008fca <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d106      	bne.n	8008fbe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008fb0:	4b15      	ldr	r3, [pc, #84]	@ (8009008 <RCCEx_PLL3_Config+0x15c>)
 8008fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fb4:	4a14      	ldr	r2, [pc, #80]	@ (8009008 <RCCEx_PLL3_Config+0x15c>)
 8008fb6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008fba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008fbc:	e005      	b.n	8008fca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008fbe:	4b12      	ldr	r3, [pc, #72]	@ (8009008 <RCCEx_PLL3_Config+0x15c>)
 8008fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fc2:	4a11      	ldr	r2, [pc, #68]	@ (8009008 <RCCEx_PLL3_Config+0x15c>)
 8008fc4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008fc8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008fca:	4b0f      	ldr	r3, [pc, #60]	@ (8009008 <RCCEx_PLL3_Config+0x15c>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a0e      	ldr	r2, [pc, #56]	@ (8009008 <RCCEx_PLL3_Config+0x15c>)
 8008fd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008fd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fd6:	f7f9 f9b7 	bl	8002348 <HAL_GetTick>
 8008fda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008fdc:	e008      	b.n	8008ff0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008fde:	f7f9 f9b3 	bl	8002348 <HAL_GetTick>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	1ad3      	subs	r3, r2, r3
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	d901      	bls.n	8008ff0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008fec:	2303      	movs	r3, #3
 8008fee:	e006      	b.n	8008ffe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ff0:	4b05      	ldr	r3, [pc, #20]	@ (8009008 <RCCEx_PLL3_Config+0x15c>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d0f0      	beq.n	8008fde <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	58024400 	.word	0x58024400
 800900c:	ffff0007 	.word	0xffff0007

08009010 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d101      	bne.n	8009022 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800901e:	2301      	movs	r3, #1
 8009020:	e042      	b.n	80090a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009028:	2b00      	cmp	r3, #0
 800902a:	d106      	bne.n	800903a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f7f8 ff8b 	bl	8001f50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2224      	movs	r2, #36	@ 0x24
 800903e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f022 0201 	bic.w	r2, r2, #1
 8009050:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009056:	2b00      	cmp	r3, #0
 8009058:	d002      	beq.n	8009060 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 fe94 	bl	8009d88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 f929 	bl	80092b8 <UART_SetConfig>
 8009066:	4603      	mov	r3, r0
 8009068:	2b01      	cmp	r3, #1
 800906a:	d101      	bne.n	8009070 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800906c:	2301      	movs	r3, #1
 800906e:	e01b      	b.n	80090a8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	685a      	ldr	r2, [r3, #4]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800907e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	689a      	ldr	r2, [r3, #8]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800908e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f042 0201 	orr.w	r2, r2, #1
 800909e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 ff13 	bl	8009ecc <UART_CheckIdleState>
 80090a6:	4603      	mov	r3, r0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3708      	adds	r7, #8
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b08a      	sub	sp, #40	@ 0x28
 80090b4:	af02      	add	r7, sp, #8
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	603b      	str	r3, [r7, #0]
 80090bc:	4613      	mov	r3, r2
 80090be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090c6:	2b20      	cmp	r3, #32
 80090c8:	d17b      	bne.n	80091c2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d002      	beq.n	80090d6 <HAL_UART_Transmit+0x26>
 80090d0:	88fb      	ldrh	r3, [r7, #6]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d101      	bne.n	80090da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80090d6:	2301      	movs	r3, #1
 80090d8:	e074      	b.n	80091c4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2200      	movs	r2, #0
 80090de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2221      	movs	r2, #33	@ 0x21
 80090e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80090ea:	f7f9 f92d 	bl	8002348 <HAL_GetTick>
 80090ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	88fa      	ldrh	r2, [r7, #6]
 80090f4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	88fa      	ldrh	r2, [r7, #6]
 80090fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009108:	d108      	bne.n	800911c <HAL_UART_Transmit+0x6c>
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	691b      	ldr	r3, [r3, #16]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d104      	bne.n	800911c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009112:	2300      	movs	r3, #0
 8009114:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	61bb      	str	r3, [r7, #24]
 800911a:	e003      	b.n	8009124 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009120:	2300      	movs	r3, #0
 8009122:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009124:	e030      	b.n	8009188 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	9300      	str	r3, [sp, #0]
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	2200      	movs	r2, #0
 800912e:	2180      	movs	r1, #128	@ 0x80
 8009130:	68f8      	ldr	r0, [r7, #12]
 8009132:	f000 ff75 	bl	800a020 <UART_WaitOnFlagUntilTimeout>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d005      	beq.n	8009148 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2220      	movs	r2, #32
 8009140:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009144:	2303      	movs	r3, #3
 8009146:	e03d      	b.n	80091c4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009148:	69fb      	ldr	r3, [r7, #28]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d10b      	bne.n	8009166 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800914e:	69bb      	ldr	r3, [r7, #24]
 8009150:	881b      	ldrh	r3, [r3, #0]
 8009152:	461a      	mov	r2, r3
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800915c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800915e:	69bb      	ldr	r3, [r7, #24]
 8009160:	3302      	adds	r3, #2
 8009162:	61bb      	str	r3, [r7, #24]
 8009164:	e007      	b.n	8009176 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	781a      	ldrb	r2, [r3, #0]
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	3301      	adds	r3, #1
 8009174:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800917c:	b29b      	uxth	r3, r3
 800917e:	3b01      	subs	r3, #1
 8009180:	b29a      	uxth	r2, r3
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800918e:	b29b      	uxth	r3, r3
 8009190:	2b00      	cmp	r3, #0
 8009192:	d1c8      	bne.n	8009126 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	9300      	str	r3, [sp, #0]
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	2200      	movs	r2, #0
 800919c:	2140      	movs	r1, #64	@ 0x40
 800919e:	68f8      	ldr	r0, [r7, #12]
 80091a0:	f000 ff3e 	bl	800a020 <UART_WaitOnFlagUntilTimeout>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d005      	beq.n	80091b6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2220      	movs	r2, #32
 80091ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80091b2:	2303      	movs	r3, #3
 80091b4:	e006      	b.n	80091c4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2220      	movs	r2, #32
 80091ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80091be:	2300      	movs	r3, #0
 80091c0:	e000      	b.n	80091c4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80091c2:	2302      	movs	r3, #2
  }
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3720      	adds	r7, #32
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}

080091cc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b08a      	sub	sp, #40	@ 0x28
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	60f8      	str	r0, [r7, #12]
 80091d4:	60b9      	str	r1, [r7, #8]
 80091d6:	4613      	mov	r3, r2
 80091d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80091e0:	2b20      	cmp	r3, #32
 80091e2:	d137      	bne.n	8009254 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d002      	beq.n	80091f0 <HAL_UART_Receive_DMA+0x24>
 80091ea:	88fb      	ldrh	r3, [r7, #6]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d101      	bne.n	80091f4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80091f0:	2301      	movs	r3, #1
 80091f2:	e030      	b.n	8009256 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2200      	movs	r2, #0
 80091f8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a18      	ldr	r2, [pc, #96]	@ (8009260 <HAL_UART_Receive_DMA+0x94>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d01f      	beq.n	8009244 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800920e:	2b00      	cmp	r3, #0
 8009210:	d018      	beq.n	8009244 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	e853 3f00 	ldrex	r3, [r3]
 800921e:	613b      	str	r3, [r7, #16]
   return(result);
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009226:	627b      	str	r3, [r7, #36]	@ 0x24
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	461a      	mov	r2, r3
 800922e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009230:	623b      	str	r3, [r7, #32]
 8009232:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009234:	69f9      	ldr	r1, [r7, #28]
 8009236:	6a3a      	ldr	r2, [r7, #32]
 8009238:	e841 2300 	strex	r3, r2, [r1]
 800923c:	61bb      	str	r3, [r7, #24]
   return(result);
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d1e6      	bne.n	8009212 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009244:	88fb      	ldrh	r3, [r7, #6]
 8009246:	461a      	mov	r2, r3
 8009248:	68b9      	ldr	r1, [r7, #8]
 800924a:	68f8      	ldr	r0, [r7, #12]
 800924c:	f000 ff56 	bl	800a0fc <UART_Start_Receive_DMA>
 8009250:	4603      	mov	r3, r0
 8009252:	e000      	b.n	8009256 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009254:	2302      	movs	r3, #2
  }
}
 8009256:	4618      	mov	r0, r3
 8009258:	3728      	adds	r7, #40	@ 0x28
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	58000c00 	.word	0x58000c00

08009264 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800926c:	bf00      	nop
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009280:	bf00      	nop
 8009282:	370c      	adds	r7, #12
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009294:	bf00      	nop
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	460b      	mov	r3, r1
 80092aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80092ac:	bf00      	nop
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092bc:	b092      	sub	sp, #72	@ 0x48
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80092c2:	2300      	movs	r3, #0
 80092c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	689a      	ldr	r2, [r3, #8]
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	431a      	orrs	r2, r3
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	695b      	ldr	r3, [r3, #20]
 80092d6:	431a      	orrs	r2, r3
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	69db      	ldr	r3, [r3, #28]
 80092dc:	4313      	orrs	r3, r2
 80092de:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	4bbe      	ldr	r3, [pc, #760]	@ (80095e0 <UART_SetConfig+0x328>)
 80092e8:	4013      	ands	r3, r2
 80092ea:	697a      	ldr	r2, [r7, #20]
 80092ec:	6812      	ldr	r2, [r2, #0]
 80092ee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80092f0:	430b      	orrs	r3, r1
 80092f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	68da      	ldr	r2, [r3, #12]
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	430a      	orrs	r2, r1
 8009308:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	699b      	ldr	r3, [r3, #24]
 800930e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4ab3      	ldr	r2, [pc, #716]	@ (80095e4 <UART_SetConfig+0x32c>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d004      	beq.n	8009324 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	6a1b      	ldr	r3, [r3, #32]
 800931e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009320:	4313      	orrs	r3, r2
 8009322:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	689a      	ldr	r2, [r3, #8]
 800932a:	4baf      	ldr	r3, [pc, #700]	@ (80095e8 <UART_SetConfig+0x330>)
 800932c:	4013      	ands	r3, r2
 800932e:	697a      	ldr	r2, [r7, #20]
 8009330:	6812      	ldr	r2, [r2, #0]
 8009332:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009334:	430b      	orrs	r3, r1
 8009336:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800933e:	f023 010f 	bic.w	r1, r3, #15
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	430a      	orrs	r2, r1
 800934c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4aa6      	ldr	r2, [pc, #664]	@ (80095ec <UART_SetConfig+0x334>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d177      	bne.n	8009448 <UART_SetConfig+0x190>
 8009358:	4ba5      	ldr	r3, [pc, #660]	@ (80095f0 <UART_SetConfig+0x338>)
 800935a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800935c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009360:	2b28      	cmp	r3, #40	@ 0x28
 8009362:	d86d      	bhi.n	8009440 <UART_SetConfig+0x188>
 8009364:	a201      	add	r2, pc, #4	@ (adr r2, 800936c <UART_SetConfig+0xb4>)
 8009366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800936a:	bf00      	nop
 800936c:	08009411 	.word	0x08009411
 8009370:	08009441 	.word	0x08009441
 8009374:	08009441 	.word	0x08009441
 8009378:	08009441 	.word	0x08009441
 800937c:	08009441 	.word	0x08009441
 8009380:	08009441 	.word	0x08009441
 8009384:	08009441 	.word	0x08009441
 8009388:	08009441 	.word	0x08009441
 800938c:	08009419 	.word	0x08009419
 8009390:	08009441 	.word	0x08009441
 8009394:	08009441 	.word	0x08009441
 8009398:	08009441 	.word	0x08009441
 800939c:	08009441 	.word	0x08009441
 80093a0:	08009441 	.word	0x08009441
 80093a4:	08009441 	.word	0x08009441
 80093a8:	08009441 	.word	0x08009441
 80093ac:	08009421 	.word	0x08009421
 80093b0:	08009441 	.word	0x08009441
 80093b4:	08009441 	.word	0x08009441
 80093b8:	08009441 	.word	0x08009441
 80093bc:	08009441 	.word	0x08009441
 80093c0:	08009441 	.word	0x08009441
 80093c4:	08009441 	.word	0x08009441
 80093c8:	08009441 	.word	0x08009441
 80093cc:	08009429 	.word	0x08009429
 80093d0:	08009441 	.word	0x08009441
 80093d4:	08009441 	.word	0x08009441
 80093d8:	08009441 	.word	0x08009441
 80093dc:	08009441 	.word	0x08009441
 80093e0:	08009441 	.word	0x08009441
 80093e4:	08009441 	.word	0x08009441
 80093e8:	08009441 	.word	0x08009441
 80093ec:	08009431 	.word	0x08009431
 80093f0:	08009441 	.word	0x08009441
 80093f4:	08009441 	.word	0x08009441
 80093f8:	08009441 	.word	0x08009441
 80093fc:	08009441 	.word	0x08009441
 8009400:	08009441 	.word	0x08009441
 8009404:	08009441 	.word	0x08009441
 8009408:	08009441 	.word	0x08009441
 800940c:	08009439 	.word	0x08009439
 8009410:	2301      	movs	r3, #1
 8009412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009416:	e222      	b.n	800985e <UART_SetConfig+0x5a6>
 8009418:	2304      	movs	r3, #4
 800941a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800941e:	e21e      	b.n	800985e <UART_SetConfig+0x5a6>
 8009420:	2308      	movs	r3, #8
 8009422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009426:	e21a      	b.n	800985e <UART_SetConfig+0x5a6>
 8009428:	2310      	movs	r3, #16
 800942a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800942e:	e216      	b.n	800985e <UART_SetConfig+0x5a6>
 8009430:	2320      	movs	r3, #32
 8009432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009436:	e212      	b.n	800985e <UART_SetConfig+0x5a6>
 8009438:	2340      	movs	r3, #64	@ 0x40
 800943a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800943e:	e20e      	b.n	800985e <UART_SetConfig+0x5a6>
 8009440:	2380      	movs	r3, #128	@ 0x80
 8009442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009446:	e20a      	b.n	800985e <UART_SetConfig+0x5a6>
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a69      	ldr	r2, [pc, #420]	@ (80095f4 <UART_SetConfig+0x33c>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d130      	bne.n	80094b4 <UART_SetConfig+0x1fc>
 8009452:	4b67      	ldr	r3, [pc, #412]	@ (80095f0 <UART_SetConfig+0x338>)
 8009454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009456:	f003 0307 	and.w	r3, r3, #7
 800945a:	2b05      	cmp	r3, #5
 800945c:	d826      	bhi.n	80094ac <UART_SetConfig+0x1f4>
 800945e:	a201      	add	r2, pc, #4	@ (adr r2, 8009464 <UART_SetConfig+0x1ac>)
 8009460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009464:	0800947d 	.word	0x0800947d
 8009468:	08009485 	.word	0x08009485
 800946c:	0800948d 	.word	0x0800948d
 8009470:	08009495 	.word	0x08009495
 8009474:	0800949d 	.word	0x0800949d
 8009478:	080094a5 	.word	0x080094a5
 800947c:	2300      	movs	r3, #0
 800947e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009482:	e1ec      	b.n	800985e <UART_SetConfig+0x5a6>
 8009484:	2304      	movs	r3, #4
 8009486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800948a:	e1e8      	b.n	800985e <UART_SetConfig+0x5a6>
 800948c:	2308      	movs	r3, #8
 800948e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009492:	e1e4      	b.n	800985e <UART_SetConfig+0x5a6>
 8009494:	2310      	movs	r3, #16
 8009496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800949a:	e1e0      	b.n	800985e <UART_SetConfig+0x5a6>
 800949c:	2320      	movs	r3, #32
 800949e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094a2:	e1dc      	b.n	800985e <UART_SetConfig+0x5a6>
 80094a4:	2340      	movs	r3, #64	@ 0x40
 80094a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094aa:	e1d8      	b.n	800985e <UART_SetConfig+0x5a6>
 80094ac:	2380      	movs	r3, #128	@ 0x80
 80094ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094b2:	e1d4      	b.n	800985e <UART_SetConfig+0x5a6>
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a4f      	ldr	r2, [pc, #316]	@ (80095f8 <UART_SetConfig+0x340>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d130      	bne.n	8009520 <UART_SetConfig+0x268>
 80094be:	4b4c      	ldr	r3, [pc, #304]	@ (80095f0 <UART_SetConfig+0x338>)
 80094c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094c2:	f003 0307 	and.w	r3, r3, #7
 80094c6:	2b05      	cmp	r3, #5
 80094c8:	d826      	bhi.n	8009518 <UART_SetConfig+0x260>
 80094ca:	a201      	add	r2, pc, #4	@ (adr r2, 80094d0 <UART_SetConfig+0x218>)
 80094cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094d0:	080094e9 	.word	0x080094e9
 80094d4:	080094f1 	.word	0x080094f1
 80094d8:	080094f9 	.word	0x080094f9
 80094dc:	08009501 	.word	0x08009501
 80094e0:	08009509 	.word	0x08009509
 80094e4:	08009511 	.word	0x08009511
 80094e8:	2300      	movs	r3, #0
 80094ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ee:	e1b6      	b.n	800985e <UART_SetConfig+0x5a6>
 80094f0:	2304      	movs	r3, #4
 80094f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094f6:	e1b2      	b.n	800985e <UART_SetConfig+0x5a6>
 80094f8:	2308      	movs	r3, #8
 80094fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094fe:	e1ae      	b.n	800985e <UART_SetConfig+0x5a6>
 8009500:	2310      	movs	r3, #16
 8009502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009506:	e1aa      	b.n	800985e <UART_SetConfig+0x5a6>
 8009508:	2320      	movs	r3, #32
 800950a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800950e:	e1a6      	b.n	800985e <UART_SetConfig+0x5a6>
 8009510:	2340      	movs	r3, #64	@ 0x40
 8009512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009516:	e1a2      	b.n	800985e <UART_SetConfig+0x5a6>
 8009518:	2380      	movs	r3, #128	@ 0x80
 800951a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800951e:	e19e      	b.n	800985e <UART_SetConfig+0x5a6>
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a35      	ldr	r2, [pc, #212]	@ (80095fc <UART_SetConfig+0x344>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d130      	bne.n	800958c <UART_SetConfig+0x2d4>
 800952a:	4b31      	ldr	r3, [pc, #196]	@ (80095f0 <UART_SetConfig+0x338>)
 800952c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800952e:	f003 0307 	and.w	r3, r3, #7
 8009532:	2b05      	cmp	r3, #5
 8009534:	d826      	bhi.n	8009584 <UART_SetConfig+0x2cc>
 8009536:	a201      	add	r2, pc, #4	@ (adr r2, 800953c <UART_SetConfig+0x284>)
 8009538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800953c:	08009555 	.word	0x08009555
 8009540:	0800955d 	.word	0x0800955d
 8009544:	08009565 	.word	0x08009565
 8009548:	0800956d 	.word	0x0800956d
 800954c:	08009575 	.word	0x08009575
 8009550:	0800957d 	.word	0x0800957d
 8009554:	2300      	movs	r3, #0
 8009556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800955a:	e180      	b.n	800985e <UART_SetConfig+0x5a6>
 800955c:	2304      	movs	r3, #4
 800955e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009562:	e17c      	b.n	800985e <UART_SetConfig+0x5a6>
 8009564:	2308      	movs	r3, #8
 8009566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800956a:	e178      	b.n	800985e <UART_SetConfig+0x5a6>
 800956c:	2310      	movs	r3, #16
 800956e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009572:	e174      	b.n	800985e <UART_SetConfig+0x5a6>
 8009574:	2320      	movs	r3, #32
 8009576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800957a:	e170      	b.n	800985e <UART_SetConfig+0x5a6>
 800957c:	2340      	movs	r3, #64	@ 0x40
 800957e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009582:	e16c      	b.n	800985e <UART_SetConfig+0x5a6>
 8009584:	2380      	movs	r3, #128	@ 0x80
 8009586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800958a:	e168      	b.n	800985e <UART_SetConfig+0x5a6>
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a1b      	ldr	r2, [pc, #108]	@ (8009600 <UART_SetConfig+0x348>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d142      	bne.n	800961c <UART_SetConfig+0x364>
 8009596:	4b16      	ldr	r3, [pc, #88]	@ (80095f0 <UART_SetConfig+0x338>)
 8009598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800959a:	f003 0307 	and.w	r3, r3, #7
 800959e:	2b05      	cmp	r3, #5
 80095a0:	d838      	bhi.n	8009614 <UART_SetConfig+0x35c>
 80095a2:	a201      	add	r2, pc, #4	@ (adr r2, 80095a8 <UART_SetConfig+0x2f0>)
 80095a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095a8:	080095c1 	.word	0x080095c1
 80095ac:	080095c9 	.word	0x080095c9
 80095b0:	080095d1 	.word	0x080095d1
 80095b4:	080095d9 	.word	0x080095d9
 80095b8:	08009605 	.word	0x08009605
 80095bc:	0800960d 	.word	0x0800960d
 80095c0:	2300      	movs	r3, #0
 80095c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095c6:	e14a      	b.n	800985e <UART_SetConfig+0x5a6>
 80095c8:	2304      	movs	r3, #4
 80095ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ce:	e146      	b.n	800985e <UART_SetConfig+0x5a6>
 80095d0:	2308      	movs	r3, #8
 80095d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095d6:	e142      	b.n	800985e <UART_SetConfig+0x5a6>
 80095d8:	2310      	movs	r3, #16
 80095da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095de:	e13e      	b.n	800985e <UART_SetConfig+0x5a6>
 80095e0:	cfff69f3 	.word	0xcfff69f3
 80095e4:	58000c00 	.word	0x58000c00
 80095e8:	11fff4ff 	.word	0x11fff4ff
 80095ec:	40011000 	.word	0x40011000
 80095f0:	58024400 	.word	0x58024400
 80095f4:	40004400 	.word	0x40004400
 80095f8:	40004800 	.word	0x40004800
 80095fc:	40004c00 	.word	0x40004c00
 8009600:	40005000 	.word	0x40005000
 8009604:	2320      	movs	r3, #32
 8009606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800960a:	e128      	b.n	800985e <UART_SetConfig+0x5a6>
 800960c:	2340      	movs	r3, #64	@ 0x40
 800960e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009612:	e124      	b.n	800985e <UART_SetConfig+0x5a6>
 8009614:	2380      	movs	r3, #128	@ 0x80
 8009616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800961a:	e120      	b.n	800985e <UART_SetConfig+0x5a6>
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4acb      	ldr	r2, [pc, #812]	@ (8009950 <UART_SetConfig+0x698>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d176      	bne.n	8009714 <UART_SetConfig+0x45c>
 8009626:	4bcb      	ldr	r3, [pc, #812]	@ (8009954 <UART_SetConfig+0x69c>)
 8009628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800962a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800962e:	2b28      	cmp	r3, #40	@ 0x28
 8009630:	d86c      	bhi.n	800970c <UART_SetConfig+0x454>
 8009632:	a201      	add	r2, pc, #4	@ (adr r2, 8009638 <UART_SetConfig+0x380>)
 8009634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009638:	080096dd 	.word	0x080096dd
 800963c:	0800970d 	.word	0x0800970d
 8009640:	0800970d 	.word	0x0800970d
 8009644:	0800970d 	.word	0x0800970d
 8009648:	0800970d 	.word	0x0800970d
 800964c:	0800970d 	.word	0x0800970d
 8009650:	0800970d 	.word	0x0800970d
 8009654:	0800970d 	.word	0x0800970d
 8009658:	080096e5 	.word	0x080096e5
 800965c:	0800970d 	.word	0x0800970d
 8009660:	0800970d 	.word	0x0800970d
 8009664:	0800970d 	.word	0x0800970d
 8009668:	0800970d 	.word	0x0800970d
 800966c:	0800970d 	.word	0x0800970d
 8009670:	0800970d 	.word	0x0800970d
 8009674:	0800970d 	.word	0x0800970d
 8009678:	080096ed 	.word	0x080096ed
 800967c:	0800970d 	.word	0x0800970d
 8009680:	0800970d 	.word	0x0800970d
 8009684:	0800970d 	.word	0x0800970d
 8009688:	0800970d 	.word	0x0800970d
 800968c:	0800970d 	.word	0x0800970d
 8009690:	0800970d 	.word	0x0800970d
 8009694:	0800970d 	.word	0x0800970d
 8009698:	080096f5 	.word	0x080096f5
 800969c:	0800970d 	.word	0x0800970d
 80096a0:	0800970d 	.word	0x0800970d
 80096a4:	0800970d 	.word	0x0800970d
 80096a8:	0800970d 	.word	0x0800970d
 80096ac:	0800970d 	.word	0x0800970d
 80096b0:	0800970d 	.word	0x0800970d
 80096b4:	0800970d 	.word	0x0800970d
 80096b8:	080096fd 	.word	0x080096fd
 80096bc:	0800970d 	.word	0x0800970d
 80096c0:	0800970d 	.word	0x0800970d
 80096c4:	0800970d 	.word	0x0800970d
 80096c8:	0800970d 	.word	0x0800970d
 80096cc:	0800970d 	.word	0x0800970d
 80096d0:	0800970d 	.word	0x0800970d
 80096d4:	0800970d 	.word	0x0800970d
 80096d8:	08009705 	.word	0x08009705
 80096dc:	2301      	movs	r3, #1
 80096de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096e2:	e0bc      	b.n	800985e <UART_SetConfig+0x5a6>
 80096e4:	2304      	movs	r3, #4
 80096e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ea:	e0b8      	b.n	800985e <UART_SetConfig+0x5a6>
 80096ec:	2308      	movs	r3, #8
 80096ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096f2:	e0b4      	b.n	800985e <UART_SetConfig+0x5a6>
 80096f4:	2310      	movs	r3, #16
 80096f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096fa:	e0b0      	b.n	800985e <UART_SetConfig+0x5a6>
 80096fc:	2320      	movs	r3, #32
 80096fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009702:	e0ac      	b.n	800985e <UART_SetConfig+0x5a6>
 8009704:	2340      	movs	r3, #64	@ 0x40
 8009706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800970a:	e0a8      	b.n	800985e <UART_SetConfig+0x5a6>
 800970c:	2380      	movs	r3, #128	@ 0x80
 800970e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009712:	e0a4      	b.n	800985e <UART_SetConfig+0x5a6>
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a8f      	ldr	r2, [pc, #572]	@ (8009958 <UART_SetConfig+0x6a0>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d130      	bne.n	8009780 <UART_SetConfig+0x4c8>
 800971e:	4b8d      	ldr	r3, [pc, #564]	@ (8009954 <UART_SetConfig+0x69c>)
 8009720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009722:	f003 0307 	and.w	r3, r3, #7
 8009726:	2b05      	cmp	r3, #5
 8009728:	d826      	bhi.n	8009778 <UART_SetConfig+0x4c0>
 800972a:	a201      	add	r2, pc, #4	@ (adr r2, 8009730 <UART_SetConfig+0x478>)
 800972c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009730:	08009749 	.word	0x08009749
 8009734:	08009751 	.word	0x08009751
 8009738:	08009759 	.word	0x08009759
 800973c:	08009761 	.word	0x08009761
 8009740:	08009769 	.word	0x08009769
 8009744:	08009771 	.word	0x08009771
 8009748:	2300      	movs	r3, #0
 800974a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800974e:	e086      	b.n	800985e <UART_SetConfig+0x5a6>
 8009750:	2304      	movs	r3, #4
 8009752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009756:	e082      	b.n	800985e <UART_SetConfig+0x5a6>
 8009758:	2308      	movs	r3, #8
 800975a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800975e:	e07e      	b.n	800985e <UART_SetConfig+0x5a6>
 8009760:	2310      	movs	r3, #16
 8009762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009766:	e07a      	b.n	800985e <UART_SetConfig+0x5a6>
 8009768:	2320      	movs	r3, #32
 800976a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800976e:	e076      	b.n	800985e <UART_SetConfig+0x5a6>
 8009770:	2340      	movs	r3, #64	@ 0x40
 8009772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009776:	e072      	b.n	800985e <UART_SetConfig+0x5a6>
 8009778:	2380      	movs	r3, #128	@ 0x80
 800977a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800977e:	e06e      	b.n	800985e <UART_SetConfig+0x5a6>
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a75      	ldr	r2, [pc, #468]	@ (800995c <UART_SetConfig+0x6a4>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d130      	bne.n	80097ec <UART_SetConfig+0x534>
 800978a:	4b72      	ldr	r3, [pc, #456]	@ (8009954 <UART_SetConfig+0x69c>)
 800978c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800978e:	f003 0307 	and.w	r3, r3, #7
 8009792:	2b05      	cmp	r3, #5
 8009794:	d826      	bhi.n	80097e4 <UART_SetConfig+0x52c>
 8009796:	a201      	add	r2, pc, #4	@ (adr r2, 800979c <UART_SetConfig+0x4e4>)
 8009798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800979c:	080097b5 	.word	0x080097b5
 80097a0:	080097bd 	.word	0x080097bd
 80097a4:	080097c5 	.word	0x080097c5
 80097a8:	080097cd 	.word	0x080097cd
 80097ac:	080097d5 	.word	0x080097d5
 80097b0:	080097dd 	.word	0x080097dd
 80097b4:	2300      	movs	r3, #0
 80097b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ba:	e050      	b.n	800985e <UART_SetConfig+0x5a6>
 80097bc:	2304      	movs	r3, #4
 80097be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097c2:	e04c      	b.n	800985e <UART_SetConfig+0x5a6>
 80097c4:	2308      	movs	r3, #8
 80097c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ca:	e048      	b.n	800985e <UART_SetConfig+0x5a6>
 80097cc:	2310      	movs	r3, #16
 80097ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097d2:	e044      	b.n	800985e <UART_SetConfig+0x5a6>
 80097d4:	2320      	movs	r3, #32
 80097d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097da:	e040      	b.n	800985e <UART_SetConfig+0x5a6>
 80097dc:	2340      	movs	r3, #64	@ 0x40
 80097de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097e2:	e03c      	b.n	800985e <UART_SetConfig+0x5a6>
 80097e4:	2380      	movs	r3, #128	@ 0x80
 80097e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ea:	e038      	b.n	800985e <UART_SetConfig+0x5a6>
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a5b      	ldr	r2, [pc, #364]	@ (8009960 <UART_SetConfig+0x6a8>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d130      	bne.n	8009858 <UART_SetConfig+0x5a0>
 80097f6:	4b57      	ldr	r3, [pc, #348]	@ (8009954 <UART_SetConfig+0x69c>)
 80097f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097fa:	f003 0307 	and.w	r3, r3, #7
 80097fe:	2b05      	cmp	r3, #5
 8009800:	d826      	bhi.n	8009850 <UART_SetConfig+0x598>
 8009802:	a201      	add	r2, pc, #4	@ (adr r2, 8009808 <UART_SetConfig+0x550>)
 8009804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009808:	08009821 	.word	0x08009821
 800980c:	08009829 	.word	0x08009829
 8009810:	08009831 	.word	0x08009831
 8009814:	08009839 	.word	0x08009839
 8009818:	08009841 	.word	0x08009841
 800981c:	08009849 	.word	0x08009849
 8009820:	2302      	movs	r3, #2
 8009822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009826:	e01a      	b.n	800985e <UART_SetConfig+0x5a6>
 8009828:	2304      	movs	r3, #4
 800982a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800982e:	e016      	b.n	800985e <UART_SetConfig+0x5a6>
 8009830:	2308      	movs	r3, #8
 8009832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009836:	e012      	b.n	800985e <UART_SetConfig+0x5a6>
 8009838:	2310      	movs	r3, #16
 800983a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800983e:	e00e      	b.n	800985e <UART_SetConfig+0x5a6>
 8009840:	2320      	movs	r3, #32
 8009842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009846:	e00a      	b.n	800985e <UART_SetConfig+0x5a6>
 8009848:	2340      	movs	r3, #64	@ 0x40
 800984a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800984e:	e006      	b.n	800985e <UART_SetConfig+0x5a6>
 8009850:	2380      	movs	r3, #128	@ 0x80
 8009852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009856:	e002      	b.n	800985e <UART_SetConfig+0x5a6>
 8009858:	2380      	movs	r3, #128	@ 0x80
 800985a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a3f      	ldr	r2, [pc, #252]	@ (8009960 <UART_SetConfig+0x6a8>)
 8009864:	4293      	cmp	r3, r2
 8009866:	f040 80f8 	bne.w	8009a5a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800986a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800986e:	2b20      	cmp	r3, #32
 8009870:	dc46      	bgt.n	8009900 <UART_SetConfig+0x648>
 8009872:	2b02      	cmp	r3, #2
 8009874:	f2c0 8082 	blt.w	800997c <UART_SetConfig+0x6c4>
 8009878:	3b02      	subs	r3, #2
 800987a:	2b1e      	cmp	r3, #30
 800987c:	d87e      	bhi.n	800997c <UART_SetConfig+0x6c4>
 800987e:	a201      	add	r2, pc, #4	@ (adr r2, 8009884 <UART_SetConfig+0x5cc>)
 8009880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009884:	08009907 	.word	0x08009907
 8009888:	0800997d 	.word	0x0800997d
 800988c:	0800990f 	.word	0x0800990f
 8009890:	0800997d 	.word	0x0800997d
 8009894:	0800997d 	.word	0x0800997d
 8009898:	0800997d 	.word	0x0800997d
 800989c:	0800991f 	.word	0x0800991f
 80098a0:	0800997d 	.word	0x0800997d
 80098a4:	0800997d 	.word	0x0800997d
 80098a8:	0800997d 	.word	0x0800997d
 80098ac:	0800997d 	.word	0x0800997d
 80098b0:	0800997d 	.word	0x0800997d
 80098b4:	0800997d 	.word	0x0800997d
 80098b8:	0800997d 	.word	0x0800997d
 80098bc:	0800992f 	.word	0x0800992f
 80098c0:	0800997d 	.word	0x0800997d
 80098c4:	0800997d 	.word	0x0800997d
 80098c8:	0800997d 	.word	0x0800997d
 80098cc:	0800997d 	.word	0x0800997d
 80098d0:	0800997d 	.word	0x0800997d
 80098d4:	0800997d 	.word	0x0800997d
 80098d8:	0800997d 	.word	0x0800997d
 80098dc:	0800997d 	.word	0x0800997d
 80098e0:	0800997d 	.word	0x0800997d
 80098e4:	0800997d 	.word	0x0800997d
 80098e8:	0800997d 	.word	0x0800997d
 80098ec:	0800997d 	.word	0x0800997d
 80098f0:	0800997d 	.word	0x0800997d
 80098f4:	0800997d 	.word	0x0800997d
 80098f8:	0800997d 	.word	0x0800997d
 80098fc:	0800996f 	.word	0x0800996f
 8009900:	2b40      	cmp	r3, #64	@ 0x40
 8009902:	d037      	beq.n	8009974 <UART_SetConfig+0x6bc>
 8009904:	e03a      	b.n	800997c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009906:	f7fe ff61 	bl	80087cc <HAL_RCCEx_GetD3PCLK1Freq>
 800990a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800990c:	e03c      	b.n	8009988 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800990e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009912:	4618      	mov	r0, r3
 8009914:	f7fe ff70 	bl	80087f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800991a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800991c:	e034      	b.n	8009988 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800991e:	f107 0318 	add.w	r3, r7, #24
 8009922:	4618      	mov	r0, r3
 8009924:	f7ff f8bc 	bl	8008aa0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800992c:	e02c      	b.n	8009988 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800992e:	4b09      	ldr	r3, [pc, #36]	@ (8009954 <UART_SetConfig+0x69c>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f003 0320 	and.w	r3, r3, #32
 8009936:	2b00      	cmp	r3, #0
 8009938:	d016      	beq.n	8009968 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800993a:	4b06      	ldr	r3, [pc, #24]	@ (8009954 <UART_SetConfig+0x69c>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	08db      	lsrs	r3, r3, #3
 8009940:	f003 0303 	and.w	r3, r3, #3
 8009944:	4a07      	ldr	r2, [pc, #28]	@ (8009964 <UART_SetConfig+0x6ac>)
 8009946:	fa22 f303 	lsr.w	r3, r2, r3
 800994a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800994c:	e01c      	b.n	8009988 <UART_SetConfig+0x6d0>
 800994e:	bf00      	nop
 8009950:	40011400 	.word	0x40011400
 8009954:	58024400 	.word	0x58024400
 8009958:	40007800 	.word	0x40007800
 800995c:	40007c00 	.word	0x40007c00
 8009960:	58000c00 	.word	0x58000c00
 8009964:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009968:	4b9d      	ldr	r3, [pc, #628]	@ (8009be0 <UART_SetConfig+0x928>)
 800996a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800996c:	e00c      	b.n	8009988 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800996e:	4b9d      	ldr	r3, [pc, #628]	@ (8009be4 <UART_SetConfig+0x92c>)
 8009970:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009972:	e009      	b.n	8009988 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009974:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009978:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800997a:	e005      	b.n	8009988 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800997c:	2300      	movs	r3, #0
 800997e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009980:	2301      	movs	r3, #1
 8009982:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009986:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009988:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800998a:	2b00      	cmp	r3, #0
 800998c:	f000 81de 	beq.w	8009d4c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009994:	4a94      	ldr	r2, [pc, #592]	@ (8009be8 <UART_SetConfig+0x930>)
 8009996:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800999a:	461a      	mov	r2, r3
 800999c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800999e:	fbb3 f3f2 	udiv	r3, r3, r2
 80099a2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	685a      	ldr	r2, [r3, #4]
 80099a8:	4613      	mov	r3, r2
 80099aa:	005b      	lsls	r3, r3, #1
 80099ac:	4413      	add	r3, r2
 80099ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d305      	bcc.n	80099c0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80099ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099bc:	429a      	cmp	r2, r3
 80099be:	d903      	bls.n	80099c8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80099c0:	2301      	movs	r3, #1
 80099c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80099c6:	e1c1      	b.n	8009d4c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099ca:	2200      	movs	r2, #0
 80099cc:	60bb      	str	r3, [r7, #8]
 80099ce:	60fa      	str	r2, [r7, #12]
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099d4:	4a84      	ldr	r2, [pc, #528]	@ (8009be8 <UART_SetConfig+0x930>)
 80099d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099da:	b29b      	uxth	r3, r3
 80099dc:	2200      	movs	r2, #0
 80099de:	603b      	str	r3, [r7, #0]
 80099e0:	607a      	str	r2, [r7, #4]
 80099e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80099ea:	f7f6 fcd1 	bl	8000390 <__aeabi_uldivmod>
 80099ee:	4602      	mov	r2, r0
 80099f0:	460b      	mov	r3, r1
 80099f2:	4610      	mov	r0, r2
 80099f4:	4619      	mov	r1, r3
 80099f6:	f04f 0200 	mov.w	r2, #0
 80099fa:	f04f 0300 	mov.w	r3, #0
 80099fe:	020b      	lsls	r3, r1, #8
 8009a00:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009a04:	0202      	lsls	r2, r0, #8
 8009a06:	6979      	ldr	r1, [r7, #20]
 8009a08:	6849      	ldr	r1, [r1, #4]
 8009a0a:	0849      	lsrs	r1, r1, #1
 8009a0c:	2000      	movs	r0, #0
 8009a0e:	460c      	mov	r4, r1
 8009a10:	4605      	mov	r5, r0
 8009a12:	eb12 0804 	adds.w	r8, r2, r4
 8009a16:	eb43 0905 	adc.w	r9, r3, r5
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	469a      	mov	sl, r3
 8009a22:	4693      	mov	fp, r2
 8009a24:	4652      	mov	r2, sl
 8009a26:	465b      	mov	r3, fp
 8009a28:	4640      	mov	r0, r8
 8009a2a:	4649      	mov	r1, r9
 8009a2c:	f7f6 fcb0 	bl	8000390 <__aeabi_uldivmod>
 8009a30:	4602      	mov	r2, r0
 8009a32:	460b      	mov	r3, r1
 8009a34:	4613      	mov	r3, r2
 8009a36:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a3e:	d308      	bcc.n	8009a52 <UART_SetConfig+0x79a>
 8009a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a46:	d204      	bcs.n	8009a52 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009a4e:	60da      	str	r2, [r3, #12]
 8009a50:	e17c      	b.n	8009d4c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009a52:	2301      	movs	r3, #1
 8009a54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009a58:	e178      	b.n	8009d4c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	69db      	ldr	r3, [r3, #28]
 8009a5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a62:	f040 80c5 	bne.w	8009bf0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009a66:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009a6a:	2b20      	cmp	r3, #32
 8009a6c:	dc48      	bgt.n	8009b00 <UART_SetConfig+0x848>
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	db7b      	blt.n	8009b6a <UART_SetConfig+0x8b2>
 8009a72:	2b20      	cmp	r3, #32
 8009a74:	d879      	bhi.n	8009b6a <UART_SetConfig+0x8b2>
 8009a76:	a201      	add	r2, pc, #4	@ (adr r2, 8009a7c <UART_SetConfig+0x7c4>)
 8009a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a7c:	08009b07 	.word	0x08009b07
 8009a80:	08009b0f 	.word	0x08009b0f
 8009a84:	08009b6b 	.word	0x08009b6b
 8009a88:	08009b6b 	.word	0x08009b6b
 8009a8c:	08009b17 	.word	0x08009b17
 8009a90:	08009b6b 	.word	0x08009b6b
 8009a94:	08009b6b 	.word	0x08009b6b
 8009a98:	08009b6b 	.word	0x08009b6b
 8009a9c:	08009b27 	.word	0x08009b27
 8009aa0:	08009b6b 	.word	0x08009b6b
 8009aa4:	08009b6b 	.word	0x08009b6b
 8009aa8:	08009b6b 	.word	0x08009b6b
 8009aac:	08009b6b 	.word	0x08009b6b
 8009ab0:	08009b6b 	.word	0x08009b6b
 8009ab4:	08009b6b 	.word	0x08009b6b
 8009ab8:	08009b6b 	.word	0x08009b6b
 8009abc:	08009b37 	.word	0x08009b37
 8009ac0:	08009b6b 	.word	0x08009b6b
 8009ac4:	08009b6b 	.word	0x08009b6b
 8009ac8:	08009b6b 	.word	0x08009b6b
 8009acc:	08009b6b 	.word	0x08009b6b
 8009ad0:	08009b6b 	.word	0x08009b6b
 8009ad4:	08009b6b 	.word	0x08009b6b
 8009ad8:	08009b6b 	.word	0x08009b6b
 8009adc:	08009b6b 	.word	0x08009b6b
 8009ae0:	08009b6b 	.word	0x08009b6b
 8009ae4:	08009b6b 	.word	0x08009b6b
 8009ae8:	08009b6b 	.word	0x08009b6b
 8009aec:	08009b6b 	.word	0x08009b6b
 8009af0:	08009b6b 	.word	0x08009b6b
 8009af4:	08009b6b 	.word	0x08009b6b
 8009af8:	08009b6b 	.word	0x08009b6b
 8009afc:	08009b5d 	.word	0x08009b5d
 8009b00:	2b40      	cmp	r3, #64	@ 0x40
 8009b02:	d02e      	beq.n	8009b62 <UART_SetConfig+0x8aa>
 8009b04:	e031      	b.n	8009b6a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b06:	f7fd fc2b 	bl	8007360 <HAL_RCC_GetPCLK1Freq>
 8009b0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009b0c:	e033      	b.n	8009b76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b0e:	f7fd fc3d 	bl	800738c <HAL_RCC_GetPCLK2Freq>
 8009b12:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009b14:	e02f      	b.n	8009b76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f7fe fe6c 	bl	80087f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b24:	e027      	b.n	8009b76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b26:	f107 0318 	add.w	r3, r7, #24
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7fe ffb8 	bl	8008aa0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009b30:	69fb      	ldr	r3, [r7, #28]
 8009b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b34:	e01f      	b.n	8009b76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b36:	4b2d      	ldr	r3, [pc, #180]	@ (8009bec <UART_SetConfig+0x934>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f003 0320 	and.w	r3, r3, #32
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d009      	beq.n	8009b56 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009b42:	4b2a      	ldr	r3, [pc, #168]	@ (8009bec <UART_SetConfig+0x934>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	08db      	lsrs	r3, r3, #3
 8009b48:	f003 0303 	and.w	r3, r3, #3
 8009b4c:	4a24      	ldr	r2, [pc, #144]	@ (8009be0 <UART_SetConfig+0x928>)
 8009b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8009b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009b54:	e00f      	b.n	8009b76 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009b56:	4b22      	ldr	r3, [pc, #136]	@ (8009be0 <UART_SetConfig+0x928>)
 8009b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b5a:	e00c      	b.n	8009b76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009b5c:	4b21      	ldr	r3, [pc, #132]	@ (8009be4 <UART_SetConfig+0x92c>)
 8009b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b60:	e009      	b.n	8009b76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b68:	e005      	b.n	8009b76 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009b74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009b76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	f000 80e7 	beq.w	8009d4c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b82:	4a19      	ldr	r2, [pc, #100]	@ (8009be8 <UART_SetConfig+0x930>)
 8009b84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b88:	461a      	mov	r2, r3
 8009b8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b90:	005a      	lsls	r2, r3, #1
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	085b      	lsrs	r3, r3, #1
 8009b98:	441a      	add	r2, r3
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ba6:	2b0f      	cmp	r3, #15
 8009ba8:	d916      	bls.n	8009bd8 <UART_SetConfig+0x920>
 8009baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009bb0:	d212      	bcs.n	8009bd8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	f023 030f 	bic.w	r3, r3, #15
 8009bba:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bbe:	085b      	lsrs	r3, r3, #1
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	f003 0307 	and.w	r3, r3, #7
 8009bc6:	b29a      	uxth	r2, r3
 8009bc8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009bd4:	60da      	str	r2, [r3, #12]
 8009bd6:	e0b9      	b.n	8009d4c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009bde:	e0b5      	b.n	8009d4c <UART_SetConfig+0xa94>
 8009be0:	03d09000 	.word	0x03d09000
 8009be4:	003d0900 	.word	0x003d0900
 8009be8:	0800c08c 	.word	0x0800c08c
 8009bec:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009bf0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009bf4:	2b20      	cmp	r3, #32
 8009bf6:	dc49      	bgt.n	8009c8c <UART_SetConfig+0x9d4>
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	db7c      	blt.n	8009cf6 <UART_SetConfig+0xa3e>
 8009bfc:	2b20      	cmp	r3, #32
 8009bfe:	d87a      	bhi.n	8009cf6 <UART_SetConfig+0xa3e>
 8009c00:	a201      	add	r2, pc, #4	@ (adr r2, 8009c08 <UART_SetConfig+0x950>)
 8009c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c06:	bf00      	nop
 8009c08:	08009c93 	.word	0x08009c93
 8009c0c:	08009c9b 	.word	0x08009c9b
 8009c10:	08009cf7 	.word	0x08009cf7
 8009c14:	08009cf7 	.word	0x08009cf7
 8009c18:	08009ca3 	.word	0x08009ca3
 8009c1c:	08009cf7 	.word	0x08009cf7
 8009c20:	08009cf7 	.word	0x08009cf7
 8009c24:	08009cf7 	.word	0x08009cf7
 8009c28:	08009cb3 	.word	0x08009cb3
 8009c2c:	08009cf7 	.word	0x08009cf7
 8009c30:	08009cf7 	.word	0x08009cf7
 8009c34:	08009cf7 	.word	0x08009cf7
 8009c38:	08009cf7 	.word	0x08009cf7
 8009c3c:	08009cf7 	.word	0x08009cf7
 8009c40:	08009cf7 	.word	0x08009cf7
 8009c44:	08009cf7 	.word	0x08009cf7
 8009c48:	08009cc3 	.word	0x08009cc3
 8009c4c:	08009cf7 	.word	0x08009cf7
 8009c50:	08009cf7 	.word	0x08009cf7
 8009c54:	08009cf7 	.word	0x08009cf7
 8009c58:	08009cf7 	.word	0x08009cf7
 8009c5c:	08009cf7 	.word	0x08009cf7
 8009c60:	08009cf7 	.word	0x08009cf7
 8009c64:	08009cf7 	.word	0x08009cf7
 8009c68:	08009cf7 	.word	0x08009cf7
 8009c6c:	08009cf7 	.word	0x08009cf7
 8009c70:	08009cf7 	.word	0x08009cf7
 8009c74:	08009cf7 	.word	0x08009cf7
 8009c78:	08009cf7 	.word	0x08009cf7
 8009c7c:	08009cf7 	.word	0x08009cf7
 8009c80:	08009cf7 	.word	0x08009cf7
 8009c84:	08009cf7 	.word	0x08009cf7
 8009c88:	08009ce9 	.word	0x08009ce9
 8009c8c:	2b40      	cmp	r3, #64	@ 0x40
 8009c8e:	d02e      	beq.n	8009cee <UART_SetConfig+0xa36>
 8009c90:	e031      	b.n	8009cf6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c92:	f7fd fb65 	bl	8007360 <HAL_RCC_GetPCLK1Freq>
 8009c96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c98:	e033      	b.n	8009d02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c9a:	f7fd fb77 	bl	800738c <HAL_RCC_GetPCLK2Freq>
 8009c9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ca0:	e02f      	b.n	8009d02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ca2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f7fe fda6 	bl	80087f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cb0:	e027      	b.n	8009d02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cb2:	f107 0318 	add.w	r3, r7, #24
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f7fe fef2 	bl	8008aa0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009cbc:	69fb      	ldr	r3, [r7, #28]
 8009cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cc0:	e01f      	b.n	8009d02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009cc2:	4b2d      	ldr	r3, [pc, #180]	@ (8009d78 <UART_SetConfig+0xac0>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f003 0320 	and.w	r3, r3, #32
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d009      	beq.n	8009ce2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009cce:	4b2a      	ldr	r3, [pc, #168]	@ (8009d78 <UART_SetConfig+0xac0>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	08db      	lsrs	r3, r3, #3
 8009cd4:	f003 0303 	and.w	r3, r3, #3
 8009cd8:	4a28      	ldr	r2, [pc, #160]	@ (8009d7c <UART_SetConfig+0xac4>)
 8009cda:	fa22 f303 	lsr.w	r3, r2, r3
 8009cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009ce0:	e00f      	b.n	8009d02 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009ce2:	4b26      	ldr	r3, [pc, #152]	@ (8009d7c <UART_SetConfig+0xac4>)
 8009ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ce6:	e00c      	b.n	8009d02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009ce8:	4b25      	ldr	r3, [pc, #148]	@ (8009d80 <UART_SetConfig+0xac8>)
 8009cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cec:	e009      	b.n	8009d02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cf4:	e005      	b.n	8009d02 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009d00:	bf00      	nop
    }

    if (pclk != 0U)
 8009d02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d021      	beq.n	8009d4c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d0c:	4a1d      	ldr	r2, [pc, #116]	@ (8009d84 <UART_SetConfig+0xacc>)
 8009d0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d12:	461a      	mov	r2, r3
 8009d14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d16:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	085b      	lsrs	r3, r3, #1
 8009d20:	441a      	add	r2, r3
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d2e:	2b0f      	cmp	r3, #15
 8009d30:	d909      	bls.n	8009d46 <UART_SetConfig+0xa8e>
 8009d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d38:	d205      	bcs.n	8009d46 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d3c:	b29a      	uxth	r2, r3
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	60da      	str	r2, [r3, #12]
 8009d44:	e002      	b.n	8009d4c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009d46:	2301      	movs	r3, #1
 8009d48:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	2201      	movs	r2, #1
 8009d50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	2200      	movs	r2, #0
 8009d66:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009d68:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3748      	adds	r7, #72	@ 0x48
 8009d70:	46bd      	mov	sp, r7
 8009d72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d76:	bf00      	nop
 8009d78:	58024400 	.word	0x58024400
 8009d7c:	03d09000 	.word	0x03d09000
 8009d80:	003d0900 	.word	0x003d0900
 8009d84:	0800c08c 	.word	0x0800c08c

08009d88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d94:	f003 0308 	and.w	r3, r3, #8
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d00a      	beq.n	8009db2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	430a      	orrs	r2, r1
 8009db0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009db6:	f003 0301 	and.w	r3, r3, #1
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d00a      	beq.n	8009dd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	430a      	orrs	r2, r1
 8009dd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dd8:	f003 0302 	and.w	r3, r3, #2
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d00a      	beq.n	8009df6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	430a      	orrs	r2, r1
 8009df4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dfa:	f003 0304 	and.w	r3, r3, #4
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d00a      	beq.n	8009e18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	430a      	orrs	r2, r1
 8009e16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e1c:	f003 0310 	and.w	r3, r3, #16
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d00a      	beq.n	8009e3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	689b      	ldr	r3, [r3, #8]
 8009e2a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	430a      	orrs	r2, r1
 8009e38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e3e:	f003 0320 	and.w	r3, r3, #32
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d00a      	beq.n	8009e5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	430a      	orrs	r2, r1
 8009e5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d01a      	beq.n	8009e9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	430a      	orrs	r2, r1
 8009e7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e86:	d10a      	bne.n	8009e9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	430a      	orrs	r2, r1
 8009e9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d00a      	beq.n	8009ec0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	430a      	orrs	r2, r1
 8009ebe:	605a      	str	r2, [r3, #4]
  }
}
 8009ec0:	bf00      	nop
 8009ec2:	370c      	adds	r7, #12
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b098      	sub	sp, #96	@ 0x60
 8009ed0:	af02      	add	r7, sp, #8
 8009ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009edc:	f7f8 fa34 	bl	8002348 <HAL_GetTick>
 8009ee0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f003 0308 	and.w	r3, r3, #8
 8009eec:	2b08      	cmp	r3, #8
 8009eee:	d12f      	bne.n	8009f50 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ef0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009ef4:	9300      	str	r3, [sp, #0]
 8009ef6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ef8:	2200      	movs	r2, #0
 8009efa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 f88e 	bl	800a020 <UART_WaitOnFlagUntilTimeout>
 8009f04:	4603      	mov	r3, r0
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d022      	beq.n	8009f50 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f12:	e853 3f00 	ldrex	r3, [r3]
 8009f16:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	461a      	mov	r2, r3
 8009f26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f28:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f2a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f30:	e841 2300 	strex	r3, r2, [r1]
 8009f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d1e6      	bne.n	8009f0a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2220      	movs	r2, #32
 8009f40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2200      	movs	r2, #0
 8009f48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f4c:	2303      	movs	r3, #3
 8009f4e:	e063      	b.n	800a018 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f003 0304 	and.w	r3, r3, #4
 8009f5a:	2b04      	cmp	r3, #4
 8009f5c:	d149      	bne.n	8009ff2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f5e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009f62:	9300      	str	r3, [sp, #0]
 8009f64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f66:	2200      	movs	r2, #0
 8009f68:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 f857 	bl	800a020 <UART_WaitOnFlagUntilTimeout>
 8009f72:	4603      	mov	r3, r0
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d03c      	beq.n	8009ff2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f80:	e853 3f00 	ldrex	r3, [r3]
 8009f84:	623b      	str	r3, [r7, #32]
   return(result);
 8009f86:	6a3b      	ldr	r3, [r7, #32]
 8009f88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	461a      	mov	r2, r3
 8009f94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f96:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f98:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f9e:	e841 2300 	strex	r3, r2, [r1]
 8009fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d1e6      	bne.n	8009f78 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	3308      	adds	r3, #8
 8009fb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	e853 3f00 	ldrex	r3, [r3]
 8009fb8:	60fb      	str	r3, [r7, #12]
   return(result);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f023 0301 	bic.w	r3, r3, #1
 8009fc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	3308      	adds	r3, #8
 8009fc8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009fca:	61fa      	str	r2, [r7, #28]
 8009fcc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fce:	69b9      	ldr	r1, [r7, #24]
 8009fd0:	69fa      	ldr	r2, [r7, #28]
 8009fd2:	e841 2300 	strex	r3, r2, [r1]
 8009fd6:	617b      	str	r3, [r7, #20]
   return(result);
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d1e5      	bne.n	8009faa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2220      	movs	r2, #32
 8009fe2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009fee:	2303      	movs	r3, #3
 8009ff0:	e012      	b.n	800a018 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2220      	movs	r2, #32
 8009ff6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2220      	movs	r2, #32
 8009ffe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2200      	movs	r2, #0
 800a00c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2200      	movs	r2, #0
 800a012:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a016:	2300      	movs	r3, #0
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3758      	adds	r7, #88	@ 0x58
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	60f8      	str	r0, [r7, #12]
 800a028:	60b9      	str	r1, [r7, #8]
 800a02a:	603b      	str	r3, [r7, #0]
 800a02c:	4613      	mov	r3, r2
 800a02e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a030:	e04f      	b.n	800a0d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a032:	69bb      	ldr	r3, [r7, #24]
 800a034:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a038:	d04b      	beq.n	800a0d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a03a:	f7f8 f985 	bl	8002348 <HAL_GetTick>
 800a03e:	4602      	mov	r2, r0
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	1ad3      	subs	r3, r2, r3
 800a044:	69ba      	ldr	r2, [r7, #24]
 800a046:	429a      	cmp	r2, r3
 800a048:	d302      	bcc.n	800a050 <UART_WaitOnFlagUntilTimeout+0x30>
 800a04a:	69bb      	ldr	r3, [r7, #24]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d101      	bne.n	800a054 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a050:	2303      	movs	r3, #3
 800a052:	e04e      	b.n	800a0f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f003 0304 	and.w	r3, r3, #4
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d037      	beq.n	800a0d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	2b80      	cmp	r3, #128	@ 0x80
 800a066:	d034      	beq.n	800a0d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	2b40      	cmp	r3, #64	@ 0x40
 800a06c:	d031      	beq.n	800a0d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	69db      	ldr	r3, [r3, #28]
 800a074:	f003 0308 	and.w	r3, r3, #8
 800a078:	2b08      	cmp	r3, #8
 800a07a:	d110      	bne.n	800a09e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2208      	movs	r2, #8
 800a082:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a084:	68f8      	ldr	r0, [r7, #12]
 800a086:	f000 f921 	bl	800a2cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2208      	movs	r2, #8
 800a08e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2200      	movs	r2, #0
 800a096:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a09a:	2301      	movs	r3, #1
 800a09c:	e029      	b.n	800a0f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	69db      	ldr	r3, [r3, #28]
 800a0a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a0a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a0ac:	d111      	bne.n	800a0d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a0b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a0b8:	68f8      	ldr	r0, [r7, #12]
 800a0ba:	f000 f907 	bl	800a2cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2220      	movs	r2, #32
 800a0c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a0ce:	2303      	movs	r3, #3
 800a0d0:	e00f      	b.n	800a0f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	69da      	ldr	r2, [r3, #28]
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	4013      	ands	r3, r2
 800a0dc:	68ba      	ldr	r2, [r7, #8]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	bf0c      	ite	eq
 800a0e2:	2301      	moveq	r3, #1
 800a0e4:	2300      	movne	r3, #0
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	79fb      	ldrb	r3, [r7, #7]
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d0a0      	beq.n	800a032 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a0f0:	2300      	movs	r3, #0
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3710      	adds	r7, #16
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
	...

0800a0fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b096      	sub	sp, #88	@ 0x58
 800a100:	af00      	add	r7, sp, #0
 800a102:	60f8      	str	r0, [r7, #12]
 800a104:	60b9      	str	r1, [r7, #8]
 800a106:	4613      	mov	r3, r2
 800a108:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	68ba      	ldr	r2, [r7, #8]
 800a10e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	88fa      	ldrh	r2, [r7, #6]
 800a114:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2200      	movs	r2, #0
 800a11c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2222      	movs	r2, #34	@ 0x22
 800a124:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d02d      	beq.n	800a18e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a138:	4a40      	ldr	r2, [pc, #256]	@ (800a23c <UART_Start_Receive_DMA+0x140>)
 800a13a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a142:	4a3f      	ldr	r2, [pc, #252]	@ (800a240 <UART_Start_Receive_DMA+0x144>)
 800a144:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a14c:	4a3d      	ldr	r2, [pc, #244]	@ (800a244 <UART_Start_Receive_DMA+0x148>)
 800a14e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a156:	2200      	movs	r2, #0
 800a158:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	3324      	adds	r3, #36	@ 0x24
 800a166:	4619      	mov	r1, r3
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a16c:	461a      	mov	r2, r3
 800a16e:	88fb      	ldrh	r3, [r7, #6]
 800a170:	f7f8 fe18 	bl	8002da4 <HAL_DMA_Start_IT>
 800a174:	4603      	mov	r3, r0
 800a176:	2b00      	cmp	r3, #0
 800a178:	d009      	beq.n	800a18e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2210      	movs	r2, #16
 800a17e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2220      	movs	r2, #32
 800a186:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a18a:	2301      	movs	r3, #1
 800a18c:	e051      	b.n	800a232 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	691b      	ldr	r3, [r3, #16]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d018      	beq.n	800a1c8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a19c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a19e:	e853 3f00 	ldrex	r3, [r3]
 800a1a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a1a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a1aa:	657b      	str	r3, [r7, #84]	@ 0x54
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a1b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1b6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a1ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a1bc:	e841 2300 	strex	r3, r2, [r1]
 800a1c0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a1c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d1e6      	bne.n	800a196 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	3308      	adds	r3, #8
 800a1ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1d2:	e853 3f00 	ldrex	r3, [r3]
 800a1d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a1d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1da:	f043 0301 	orr.w	r3, r3, #1
 800a1de:	653b      	str	r3, [r7, #80]	@ 0x50
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	3308      	adds	r3, #8
 800a1e6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a1e8:	637a      	str	r2, [r7, #52]	@ 0x34
 800a1ea:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a1ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a1f0:	e841 2300 	strex	r3, r2, [r1]
 800a1f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a1f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d1e5      	bne.n	800a1c8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	3308      	adds	r3, #8
 800a202:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	e853 3f00 	ldrex	r3, [r3]
 800a20a:	613b      	str	r3, [r7, #16]
   return(result);
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a212:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	3308      	adds	r3, #8
 800a21a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a21c:	623a      	str	r2, [r7, #32]
 800a21e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a220:	69f9      	ldr	r1, [r7, #28]
 800a222:	6a3a      	ldr	r2, [r7, #32]
 800a224:	e841 2300 	strex	r3, r2, [r1]
 800a228:	61bb      	str	r3, [r7, #24]
   return(result);
 800a22a:	69bb      	ldr	r3, [r7, #24]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d1e5      	bne.n	800a1fc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a230:	2300      	movs	r3, #0
}
 800a232:	4618      	mov	r0, r3
 800a234:	3758      	adds	r7, #88	@ 0x58
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	0800a399 	.word	0x0800a399
 800a240:	0800a4c1 	.word	0x0800a4c1
 800a244:	0800a4ff 	.word	0x0800a4ff

0800a248 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a248:	b480      	push	{r7}
 800a24a:	b08f      	sub	sp, #60	@ 0x3c
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a256:	6a3b      	ldr	r3, [r7, #32]
 800a258:	e853 3f00 	ldrex	r3, [r3]
 800a25c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a25e:	69fb      	ldr	r3, [r7, #28]
 800a260:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a264:	637b      	str	r3, [r7, #52]	@ 0x34
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	461a      	mov	r2, r3
 800a26c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a26e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a270:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a272:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a274:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a276:	e841 2300 	strex	r3, r2, [r1]
 800a27a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a27c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d1e6      	bne.n	800a250 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	3308      	adds	r3, #8
 800a288:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	e853 3f00 	ldrex	r3, [r3]
 800a290:	60bb      	str	r3, [r7, #8]
   return(result);
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a298:	633b      	str	r3, [r7, #48]	@ 0x30
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	3308      	adds	r3, #8
 800a2a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2a2:	61ba      	str	r2, [r7, #24]
 800a2a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a6:	6979      	ldr	r1, [r7, #20]
 800a2a8:	69ba      	ldr	r2, [r7, #24]
 800a2aa:	e841 2300 	strex	r3, r2, [r1]
 800a2ae:	613b      	str	r3, [r7, #16]
   return(result);
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d1e5      	bne.n	800a282 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2220      	movs	r2, #32
 800a2ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a2be:	bf00      	nop
 800a2c0:	373c      	adds	r7, #60	@ 0x3c
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr
	...

0800a2cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b095      	sub	sp, #84	@ 0x54
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2dc:	e853 3f00 	ldrex	r3, [r3]
 800a2e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a2e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a2e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2f2:	643b      	str	r3, [r7, #64]	@ 0x40
 800a2f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a2f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a2fa:	e841 2300 	strex	r3, r2, [r1]
 800a2fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a302:	2b00      	cmp	r3, #0
 800a304:	d1e6      	bne.n	800a2d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	3308      	adds	r3, #8
 800a30c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a30e:	6a3b      	ldr	r3, [r7, #32]
 800a310:	e853 3f00 	ldrex	r3, [r3]
 800a314:	61fb      	str	r3, [r7, #28]
   return(result);
 800a316:	69fa      	ldr	r2, [r7, #28]
 800a318:	4b1e      	ldr	r3, [pc, #120]	@ (800a394 <UART_EndRxTransfer+0xc8>)
 800a31a:	4013      	ands	r3, r2
 800a31c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	3308      	adds	r3, #8
 800a324:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a326:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a328:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a32a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a32c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a32e:	e841 2300 	strex	r3, r2, [r1]
 800a332:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a336:	2b00      	cmp	r3, #0
 800a338:	d1e5      	bne.n	800a306 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d118      	bne.n	800a374 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	e853 3f00 	ldrex	r3, [r3]
 800a34e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	f023 0310 	bic.w	r3, r3, #16
 800a356:	647b      	str	r3, [r7, #68]	@ 0x44
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	461a      	mov	r2, r3
 800a35e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a360:	61bb      	str	r3, [r7, #24]
 800a362:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a364:	6979      	ldr	r1, [r7, #20]
 800a366:	69ba      	ldr	r2, [r7, #24]
 800a368:	e841 2300 	strex	r3, r2, [r1]
 800a36c:	613b      	str	r3, [r7, #16]
   return(result);
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d1e6      	bne.n	800a342 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2220      	movs	r2, #32
 800a378:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2200      	movs	r2, #0
 800a386:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a388:	bf00      	nop
 800a38a:	3754      	adds	r7, #84	@ 0x54
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr
 800a394:	effffffe 	.word	0xeffffffe

0800a398 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b09c      	sub	sp, #112	@ 0x70
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3a4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	69db      	ldr	r3, [r3, #28]
 800a3aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3ae:	d071      	beq.n	800a494 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a3b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3c0:	e853 3f00 	ldrex	r3, [r3]
 800a3c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a3c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a3c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a3cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a3ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a3d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a3d8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a3dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a3de:	e841 2300 	strex	r3, r2, [r1]
 800a3e2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a3e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d1e6      	bne.n	800a3b8 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	3308      	adds	r3, #8
 800a3f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3f4:	e853 3f00 	ldrex	r3, [r3]
 800a3f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a3fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3fc:	f023 0301 	bic.w	r3, r3, #1
 800a400:	667b      	str	r3, [r7, #100]	@ 0x64
 800a402:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	3308      	adds	r3, #8
 800a408:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a40a:	647a      	str	r2, [r7, #68]	@ 0x44
 800a40c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a40e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a410:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a412:	e841 2300 	strex	r3, r2, [r1]
 800a416:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d1e5      	bne.n	800a3ea <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a41e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	3308      	adds	r3, #8
 800a424:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a428:	e853 3f00 	ldrex	r3, [r3]
 800a42c:	623b      	str	r3, [r7, #32]
   return(result);
 800a42e:	6a3b      	ldr	r3, [r7, #32]
 800a430:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a434:	663b      	str	r3, [r7, #96]	@ 0x60
 800a436:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	3308      	adds	r3, #8
 800a43c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a43e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a440:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a442:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a444:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a446:	e841 2300 	strex	r3, r2, [r1]
 800a44a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a44c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d1e5      	bne.n	800a41e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a452:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a454:	2220      	movs	r2, #32
 800a456:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a45a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a45c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a45e:	2b01      	cmp	r3, #1
 800a460:	d118      	bne.n	800a494 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a462:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	e853 3f00 	ldrex	r3, [r3]
 800a46e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f023 0310 	bic.w	r3, r3, #16
 800a476:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a478:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	461a      	mov	r2, r3
 800a47e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a480:	61fb      	str	r3, [r7, #28]
 800a482:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a484:	69b9      	ldr	r1, [r7, #24]
 800a486:	69fa      	ldr	r2, [r7, #28]
 800a488:	e841 2300 	strex	r3, r2, [r1]
 800a48c:	617b      	str	r3, [r7, #20]
   return(result);
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d1e6      	bne.n	800a462 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a494:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a496:	2200      	movs	r2, #0
 800a498:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a49a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a49c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d107      	bne.n	800a4b2 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a4a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a4a8:	4619      	mov	r1, r3
 800a4aa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a4ac:	f7fe fef8 	bl	80092a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a4b0:	e002      	b.n	800a4b8 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a4b2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a4b4:	f7fe fed6 	bl	8009264 <HAL_UART_RxCpltCallback>
}
 800a4b8:	bf00      	nop
 800a4ba:	3770      	adds	r7, #112	@ 0x70
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4cc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	d109      	bne.n	800a4f0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a4e2:	085b      	lsrs	r3, r3, #1
 800a4e4:	b29b      	uxth	r3, r3
 800a4e6:	4619      	mov	r1, r3
 800a4e8:	68f8      	ldr	r0, [r7, #12]
 800a4ea:	f7fe fed9 	bl	80092a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a4ee:	e002      	b.n	800a4f6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a4f0:	68f8      	ldr	r0, [r7, #12]
 800a4f2:	f7fe fec1 	bl	8009278 <HAL_UART_RxHalfCpltCallback>
}
 800a4f6:	bf00      	nop
 800a4f8:	3710      	adds	r7, #16
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b086      	sub	sp, #24
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a50a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a512:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a51a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	689b      	ldr	r3, [r3, #8]
 800a522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a526:	2b80      	cmp	r3, #128	@ 0x80
 800a528:	d109      	bne.n	800a53e <UART_DMAError+0x40>
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	2b21      	cmp	r3, #33	@ 0x21
 800a52e:	d106      	bne.n	800a53e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	2200      	movs	r2, #0
 800a534:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a538:	6978      	ldr	r0, [r7, #20]
 800a53a:	f7ff fe85 	bl	800a248 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	689b      	ldr	r3, [r3, #8]
 800a544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a548:	2b40      	cmp	r3, #64	@ 0x40
 800a54a:	d109      	bne.n	800a560 <UART_DMAError+0x62>
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2b22      	cmp	r3, #34	@ 0x22
 800a550:	d106      	bne.n	800a560 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	2200      	movs	r2, #0
 800a556:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a55a:	6978      	ldr	r0, [r7, #20]
 800a55c:	f7ff feb6 	bl	800a2cc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a566:	f043 0210 	orr.w	r2, r3, #16
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a570:	6978      	ldr	r0, [r7, #20]
 800a572:	f7fe fe8b 	bl	800928c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a576:	bf00      	nop
 800a578:	3718      	adds	r7, #24
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}

0800a57e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a57e:	b480      	push	{r7}
 800a580:	b085      	sub	sp, #20
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d101      	bne.n	800a594 <HAL_UARTEx_DisableFifoMode+0x16>
 800a590:	2302      	movs	r3, #2
 800a592:	e027      	b.n	800a5e4 <HAL_UARTEx_DisableFifoMode+0x66>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2201      	movs	r2, #1
 800a598:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2224      	movs	r2, #36	@ 0x24
 800a5a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	681a      	ldr	r2, [r3, #0]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f022 0201 	bic.w	r2, r2, #1
 800a5ba:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a5c2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	68fa      	ldr	r2, [r7, #12]
 800a5d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2220      	movs	r2, #32
 800a5d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a5e2:	2300      	movs	r3, #0
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3714      	adds	r7, #20
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr

0800a5f0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b084      	sub	sp, #16
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a600:	2b01      	cmp	r3, #1
 800a602:	d101      	bne.n	800a608 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a604:	2302      	movs	r3, #2
 800a606:	e02d      	b.n	800a664 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2201      	movs	r2, #1
 800a60c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2224      	movs	r2, #36	@ 0x24
 800a614:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f022 0201 	bic.w	r2, r2, #1
 800a62e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	689b      	ldr	r3, [r3, #8]
 800a636:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	683a      	ldr	r2, [r7, #0]
 800a640:	430a      	orrs	r2, r1
 800a642:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 f84f 	bl	800a6e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	68fa      	ldr	r2, [r7, #12]
 800a650:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2220      	movs	r2, #32
 800a656:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2200      	movs	r2, #0
 800a65e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a662:	2300      	movs	r3, #0
}
 800a664:	4618      	mov	r0, r3
 800a666:	3710      	adds	r7, #16
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d101      	bne.n	800a684 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a680:	2302      	movs	r3, #2
 800a682:	e02d      	b.n	800a6e0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2201      	movs	r2, #1
 800a688:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2224      	movs	r2, #36	@ 0x24
 800a690:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	681a      	ldr	r2, [r3, #0]
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f022 0201 	bic.w	r2, r2, #1
 800a6aa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	689b      	ldr	r3, [r3, #8]
 800a6b2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	683a      	ldr	r2, [r7, #0]
 800a6bc:	430a      	orrs	r2, r1
 800a6be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f000 f811 	bl	800a6e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	68fa      	ldr	r2, [r7, #12]
 800a6cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2220      	movs	r2, #32
 800a6d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a6de:	2300      	movs	r3, #0
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3710      	adds	r7, #16
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b085      	sub	sp, #20
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d108      	bne.n	800a70a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2201      	movs	r2, #1
 800a704:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a708:	e031      	b.n	800a76e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a70a:	2310      	movs	r3, #16
 800a70c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a70e:	2310      	movs	r3, #16
 800a710:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	689b      	ldr	r3, [r3, #8]
 800a718:	0e5b      	lsrs	r3, r3, #25
 800a71a:	b2db      	uxtb	r3, r3
 800a71c:	f003 0307 	and.w	r3, r3, #7
 800a720:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	689b      	ldr	r3, [r3, #8]
 800a728:	0f5b      	lsrs	r3, r3, #29
 800a72a:	b2db      	uxtb	r3, r3
 800a72c:	f003 0307 	and.w	r3, r3, #7
 800a730:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a732:	7bbb      	ldrb	r3, [r7, #14]
 800a734:	7b3a      	ldrb	r2, [r7, #12]
 800a736:	4911      	ldr	r1, [pc, #68]	@ (800a77c <UARTEx_SetNbDataToProcess+0x94>)
 800a738:	5c8a      	ldrb	r2, [r1, r2]
 800a73a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a73e:	7b3a      	ldrb	r2, [r7, #12]
 800a740:	490f      	ldr	r1, [pc, #60]	@ (800a780 <UARTEx_SetNbDataToProcess+0x98>)
 800a742:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a744:	fb93 f3f2 	sdiv	r3, r3, r2
 800a748:	b29a      	uxth	r2, r3
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a750:	7bfb      	ldrb	r3, [r7, #15]
 800a752:	7b7a      	ldrb	r2, [r7, #13]
 800a754:	4909      	ldr	r1, [pc, #36]	@ (800a77c <UARTEx_SetNbDataToProcess+0x94>)
 800a756:	5c8a      	ldrb	r2, [r1, r2]
 800a758:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a75c:	7b7a      	ldrb	r2, [r7, #13]
 800a75e:	4908      	ldr	r1, [pc, #32]	@ (800a780 <UARTEx_SetNbDataToProcess+0x98>)
 800a760:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a762:	fb93 f3f2 	sdiv	r3, r3, r2
 800a766:	b29a      	uxth	r2, r3
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a76e:	bf00      	nop
 800a770:	3714      	adds	r7, #20
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr
 800a77a:	bf00      	nop
 800a77c:	0800c0a4 	.word	0x0800c0a4
 800a780:	0800c0ac 	.word	0x0800c0ac

0800a784 <__assert_func>:
 800a784:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a786:	4614      	mov	r4, r2
 800a788:	461a      	mov	r2, r3
 800a78a:	4b09      	ldr	r3, [pc, #36]	@ (800a7b0 <__assert_func+0x2c>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4605      	mov	r5, r0
 800a790:	68d8      	ldr	r0, [r3, #12]
 800a792:	b14c      	cbz	r4, 800a7a8 <__assert_func+0x24>
 800a794:	4b07      	ldr	r3, [pc, #28]	@ (800a7b4 <__assert_func+0x30>)
 800a796:	9100      	str	r1, [sp, #0]
 800a798:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a79c:	4906      	ldr	r1, [pc, #24]	@ (800a7b8 <__assert_func+0x34>)
 800a79e:	462b      	mov	r3, r5
 800a7a0:	f000 f8b2 	bl	800a908 <fiprintf>
 800a7a4:	f000 fb0f 	bl	800adc6 <abort>
 800a7a8:	4b04      	ldr	r3, [pc, #16]	@ (800a7bc <__assert_func+0x38>)
 800a7aa:	461c      	mov	r4, r3
 800a7ac:	e7f3      	b.n	800a796 <__assert_func+0x12>
 800a7ae:	bf00      	nop
 800a7b0:	24000034 	.word	0x24000034
 800a7b4:	0800c0b4 	.word	0x0800c0b4
 800a7b8:	0800c0c1 	.word	0x0800c0c1
 800a7bc:	0800c0ef 	.word	0x0800c0ef

0800a7c0 <std>:
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	b510      	push	{r4, lr}
 800a7c4:	4604      	mov	r4, r0
 800a7c6:	e9c0 3300 	strd	r3, r3, [r0]
 800a7ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a7ce:	6083      	str	r3, [r0, #8]
 800a7d0:	8181      	strh	r1, [r0, #12]
 800a7d2:	6643      	str	r3, [r0, #100]	@ 0x64
 800a7d4:	81c2      	strh	r2, [r0, #14]
 800a7d6:	6183      	str	r3, [r0, #24]
 800a7d8:	4619      	mov	r1, r3
 800a7da:	2208      	movs	r2, #8
 800a7dc:	305c      	adds	r0, #92	@ 0x5c
 800a7de:	f000 fa69 	bl	800acb4 <memset>
 800a7e2:	4b0d      	ldr	r3, [pc, #52]	@ (800a818 <std+0x58>)
 800a7e4:	6263      	str	r3, [r4, #36]	@ 0x24
 800a7e6:	4b0d      	ldr	r3, [pc, #52]	@ (800a81c <std+0x5c>)
 800a7e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a7ea:	4b0d      	ldr	r3, [pc, #52]	@ (800a820 <std+0x60>)
 800a7ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a7ee:	4b0d      	ldr	r3, [pc, #52]	@ (800a824 <std+0x64>)
 800a7f0:	6323      	str	r3, [r4, #48]	@ 0x30
 800a7f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a828 <std+0x68>)
 800a7f4:	6224      	str	r4, [r4, #32]
 800a7f6:	429c      	cmp	r4, r3
 800a7f8:	d006      	beq.n	800a808 <std+0x48>
 800a7fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a7fe:	4294      	cmp	r4, r2
 800a800:	d002      	beq.n	800a808 <std+0x48>
 800a802:	33d0      	adds	r3, #208	@ 0xd0
 800a804:	429c      	cmp	r4, r3
 800a806:	d105      	bne.n	800a814 <std+0x54>
 800a808:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a80c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a810:	f000 bac8 	b.w	800ada4 <__retarget_lock_init_recursive>
 800a814:	bd10      	pop	{r4, pc}
 800a816:	bf00      	nop
 800a818:	0800aa8d 	.word	0x0800aa8d
 800a81c:	0800aaaf 	.word	0x0800aaaf
 800a820:	0800aae7 	.word	0x0800aae7
 800a824:	0800ab0b 	.word	0x0800ab0b
 800a828:	240023a0 	.word	0x240023a0

0800a82c <stdio_exit_handler>:
 800a82c:	4a02      	ldr	r2, [pc, #8]	@ (800a838 <stdio_exit_handler+0xc>)
 800a82e:	4903      	ldr	r1, [pc, #12]	@ (800a83c <stdio_exit_handler+0x10>)
 800a830:	4803      	ldr	r0, [pc, #12]	@ (800a840 <stdio_exit_handler+0x14>)
 800a832:	f000 b87b 	b.w	800a92c <_fwalk_sglue>
 800a836:	bf00      	nop
 800a838:	24000028 	.word	0x24000028
 800a83c:	0800b919 	.word	0x0800b919
 800a840:	24000038 	.word	0x24000038

0800a844 <cleanup_stdio>:
 800a844:	6841      	ldr	r1, [r0, #4]
 800a846:	4b0c      	ldr	r3, [pc, #48]	@ (800a878 <cleanup_stdio+0x34>)
 800a848:	4299      	cmp	r1, r3
 800a84a:	b510      	push	{r4, lr}
 800a84c:	4604      	mov	r4, r0
 800a84e:	d001      	beq.n	800a854 <cleanup_stdio+0x10>
 800a850:	f001 f862 	bl	800b918 <_fflush_r>
 800a854:	68a1      	ldr	r1, [r4, #8]
 800a856:	4b09      	ldr	r3, [pc, #36]	@ (800a87c <cleanup_stdio+0x38>)
 800a858:	4299      	cmp	r1, r3
 800a85a:	d002      	beq.n	800a862 <cleanup_stdio+0x1e>
 800a85c:	4620      	mov	r0, r4
 800a85e:	f001 f85b 	bl	800b918 <_fflush_r>
 800a862:	68e1      	ldr	r1, [r4, #12]
 800a864:	4b06      	ldr	r3, [pc, #24]	@ (800a880 <cleanup_stdio+0x3c>)
 800a866:	4299      	cmp	r1, r3
 800a868:	d004      	beq.n	800a874 <cleanup_stdio+0x30>
 800a86a:	4620      	mov	r0, r4
 800a86c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a870:	f001 b852 	b.w	800b918 <_fflush_r>
 800a874:	bd10      	pop	{r4, pc}
 800a876:	bf00      	nop
 800a878:	240023a0 	.word	0x240023a0
 800a87c:	24002408 	.word	0x24002408
 800a880:	24002470 	.word	0x24002470

0800a884 <global_stdio_init.part.0>:
 800a884:	b510      	push	{r4, lr}
 800a886:	4b0b      	ldr	r3, [pc, #44]	@ (800a8b4 <global_stdio_init.part.0+0x30>)
 800a888:	4c0b      	ldr	r4, [pc, #44]	@ (800a8b8 <global_stdio_init.part.0+0x34>)
 800a88a:	4a0c      	ldr	r2, [pc, #48]	@ (800a8bc <global_stdio_init.part.0+0x38>)
 800a88c:	601a      	str	r2, [r3, #0]
 800a88e:	4620      	mov	r0, r4
 800a890:	2200      	movs	r2, #0
 800a892:	2104      	movs	r1, #4
 800a894:	f7ff ff94 	bl	800a7c0 <std>
 800a898:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a89c:	2201      	movs	r2, #1
 800a89e:	2109      	movs	r1, #9
 800a8a0:	f7ff ff8e 	bl	800a7c0 <std>
 800a8a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a8a8:	2202      	movs	r2, #2
 800a8aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8ae:	2112      	movs	r1, #18
 800a8b0:	f7ff bf86 	b.w	800a7c0 <std>
 800a8b4:	240024d8 	.word	0x240024d8
 800a8b8:	240023a0 	.word	0x240023a0
 800a8bc:	0800a82d 	.word	0x0800a82d

0800a8c0 <__sfp_lock_acquire>:
 800a8c0:	4801      	ldr	r0, [pc, #4]	@ (800a8c8 <__sfp_lock_acquire+0x8>)
 800a8c2:	f000 ba70 	b.w	800ada6 <__retarget_lock_acquire_recursive>
 800a8c6:	bf00      	nop
 800a8c8:	240024e1 	.word	0x240024e1

0800a8cc <__sfp_lock_release>:
 800a8cc:	4801      	ldr	r0, [pc, #4]	@ (800a8d4 <__sfp_lock_release+0x8>)
 800a8ce:	f000 ba6b 	b.w	800ada8 <__retarget_lock_release_recursive>
 800a8d2:	bf00      	nop
 800a8d4:	240024e1 	.word	0x240024e1

0800a8d8 <__sinit>:
 800a8d8:	b510      	push	{r4, lr}
 800a8da:	4604      	mov	r4, r0
 800a8dc:	f7ff fff0 	bl	800a8c0 <__sfp_lock_acquire>
 800a8e0:	6a23      	ldr	r3, [r4, #32]
 800a8e2:	b11b      	cbz	r3, 800a8ec <__sinit+0x14>
 800a8e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8e8:	f7ff bff0 	b.w	800a8cc <__sfp_lock_release>
 800a8ec:	4b04      	ldr	r3, [pc, #16]	@ (800a900 <__sinit+0x28>)
 800a8ee:	6223      	str	r3, [r4, #32]
 800a8f0:	4b04      	ldr	r3, [pc, #16]	@ (800a904 <__sinit+0x2c>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d1f5      	bne.n	800a8e4 <__sinit+0xc>
 800a8f8:	f7ff ffc4 	bl	800a884 <global_stdio_init.part.0>
 800a8fc:	e7f2      	b.n	800a8e4 <__sinit+0xc>
 800a8fe:	bf00      	nop
 800a900:	0800a845 	.word	0x0800a845
 800a904:	240024d8 	.word	0x240024d8

0800a908 <fiprintf>:
 800a908:	b40e      	push	{r1, r2, r3}
 800a90a:	b503      	push	{r0, r1, lr}
 800a90c:	4601      	mov	r1, r0
 800a90e:	ab03      	add	r3, sp, #12
 800a910:	4805      	ldr	r0, [pc, #20]	@ (800a928 <fiprintf+0x20>)
 800a912:	f853 2b04 	ldr.w	r2, [r3], #4
 800a916:	6800      	ldr	r0, [r0, #0]
 800a918:	9301      	str	r3, [sp, #4]
 800a91a:	f000 fcd5 	bl	800b2c8 <_vfiprintf_r>
 800a91e:	b002      	add	sp, #8
 800a920:	f85d eb04 	ldr.w	lr, [sp], #4
 800a924:	b003      	add	sp, #12
 800a926:	4770      	bx	lr
 800a928:	24000034 	.word	0x24000034

0800a92c <_fwalk_sglue>:
 800a92c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a930:	4607      	mov	r7, r0
 800a932:	4688      	mov	r8, r1
 800a934:	4614      	mov	r4, r2
 800a936:	2600      	movs	r6, #0
 800a938:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a93c:	f1b9 0901 	subs.w	r9, r9, #1
 800a940:	d505      	bpl.n	800a94e <_fwalk_sglue+0x22>
 800a942:	6824      	ldr	r4, [r4, #0]
 800a944:	2c00      	cmp	r4, #0
 800a946:	d1f7      	bne.n	800a938 <_fwalk_sglue+0xc>
 800a948:	4630      	mov	r0, r6
 800a94a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a94e:	89ab      	ldrh	r3, [r5, #12]
 800a950:	2b01      	cmp	r3, #1
 800a952:	d907      	bls.n	800a964 <_fwalk_sglue+0x38>
 800a954:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a958:	3301      	adds	r3, #1
 800a95a:	d003      	beq.n	800a964 <_fwalk_sglue+0x38>
 800a95c:	4629      	mov	r1, r5
 800a95e:	4638      	mov	r0, r7
 800a960:	47c0      	blx	r8
 800a962:	4306      	orrs	r6, r0
 800a964:	3568      	adds	r5, #104	@ 0x68
 800a966:	e7e9      	b.n	800a93c <_fwalk_sglue+0x10>

0800a968 <iprintf>:
 800a968:	b40f      	push	{r0, r1, r2, r3}
 800a96a:	b507      	push	{r0, r1, r2, lr}
 800a96c:	4906      	ldr	r1, [pc, #24]	@ (800a988 <iprintf+0x20>)
 800a96e:	ab04      	add	r3, sp, #16
 800a970:	6808      	ldr	r0, [r1, #0]
 800a972:	f853 2b04 	ldr.w	r2, [r3], #4
 800a976:	6881      	ldr	r1, [r0, #8]
 800a978:	9301      	str	r3, [sp, #4]
 800a97a:	f000 fca5 	bl	800b2c8 <_vfiprintf_r>
 800a97e:	b003      	add	sp, #12
 800a980:	f85d eb04 	ldr.w	lr, [sp], #4
 800a984:	b004      	add	sp, #16
 800a986:	4770      	bx	lr
 800a988:	24000034 	.word	0x24000034

0800a98c <_puts_r>:
 800a98c:	6a03      	ldr	r3, [r0, #32]
 800a98e:	b570      	push	{r4, r5, r6, lr}
 800a990:	6884      	ldr	r4, [r0, #8]
 800a992:	4605      	mov	r5, r0
 800a994:	460e      	mov	r6, r1
 800a996:	b90b      	cbnz	r3, 800a99c <_puts_r+0x10>
 800a998:	f7ff ff9e 	bl	800a8d8 <__sinit>
 800a99c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a99e:	07db      	lsls	r3, r3, #31
 800a9a0:	d405      	bmi.n	800a9ae <_puts_r+0x22>
 800a9a2:	89a3      	ldrh	r3, [r4, #12]
 800a9a4:	0598      	lsls	r0, r3, #22
 800a9a6:	d402      	bmi.n	800a9ae <_puts_r+0x22>
 800a9a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9aa:	f000 f9fc 	bl	800ada6 <__retarget_lock_acquire_recursive>
 800a9ae:	89a3      	ldrh	r3, [r4, #12]
 800a9b0:	0719      	lsls	r1, r3, #28
 800a9b2:	d502      	bpl.n	800a9ba <_puts_r+0x2e>
 800a9b4:	6923      	ldr	r3, [r4, #16]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d135      	bne.n	800aa26 <_puts_r+0x9a>
 800a9ba:	4621      	mov	r1, r4
 800a9bc:	4628      	mov	r0, r5
 800a9be:	f000 f923 	bl	800ac08 <__swsetup_r>
 800a9c2:	b380      	cbz	r0, 800aa26 <_puts_r+0x9a>
 800a9c4:	f04f 35ff 	mov.w	r5, #4294967295
 800a9c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a9ca:	07da      	lsls	r2, r3, #31
 800a9cc:	d405      	bmi.n	800a9da <_puts_r+0x4e>
 800a9ce:	89a3      	ldrh	r3, [r4, #12]
 800a9d0:	059b      	lsls	r3, r3, #22
 800a9d2:	d402      	bmi.n	800a9da <_puts_r+0x4e>
 800a9d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9d6:	f000 f9e7 	bl	800ada8 <__retarget_lock_release_recursive>
 800a9da:	4628      	mov	r0, r5
 800a9dc:	bd70      	pop	{r4, r5, r6, pc}
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	da04      	bge.n	800a9ec <_puts_r+0x60>
 800a9e2:	69a2      	ldr	r2, [r4, #24]
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	dc17      	bgt.n	800aa18 <_puts_r+0x8c>
 800a9e8:	290a      	cmp	r1, #10
 800a9ea:	d015      	beq.n	800aa18 <_puts_r+0x8c>
 800a9ec:	6823      	ldr	r3, [r4, #0]
 800a9ee:	1c5a      	adds	r2, r3, #1
 800a9f0:	6022      	str	r2, [r4, #0]
 800a9f2:	7019      	strb	r1, [r3, #0]
 800a9f4:	68a3      	ldr	r3, [r4, #8]
 800a9f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a9fa:	3b01      	subs	r3, #1
 800a9fc:	60a3      	str	r3, [r4, #8]
 800a9fe:	2900      	cmp	r1, #0
 800aa00:	d1ed      	bne.n	800a9de <_puts_r+0x52>
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	da11      	bge.n	800aa2a <_puts_r+0x9e>
 800aa06:	4622      	mov	r2, r4
 800aa08:	210a      	movs	r1, #10
 800aa0a:	4628      	mov	r0, r5
 800aa0c:	f000 f8be 	bl	800ab8c <__swbuf_r>
 800aa10:	3001      	adds	r0, #1
 800aa12:	d0d7      	beq.n	800a9c4 <_puts_r+0x38>
 800aa14:	250a      	movs	r5, #10
 800aa16:	e7d7      	b.n	800a9c8 <_puts_r+0x3c>
 800aa18:	4622      	mov	r2, r4
 800aa1a:	4628      	mov	r0, r5
 800aa1c:	f000 f8b6 	bl	800ab8c <__swbuf_r>
 800aa20:	3001      	adds	r0, #1
 800aa22:	d1e7      	bne.n	800a9f4 <_puts_r+0x68>
 800aa24:	e7ce      	b.n	800a9c4 <_puts_r+0x38>
 800aa26:	3e01      	subs	r6, #1
 800aa28:	e7e4      	b.n	800a9f4 <_puts_r+0x68>
 800aa2a:	6823      	ldr	r3, [r4, #0]
 800aa2c:	1c5a      	adds	r2, r3, #1
 800aa2e:	6022      	str	r2, [r4, #0]
 800aa30:	220a      	movs	r2, #10
 800aa32:	701a      	strb	r2, [r3, #0]
 800aa34:	e7ee      	b.n	800aa14 <_puts_r+0x88>
	...

0800aa38 <puts>:
 800aa38:	4b02      	ldr	r3, [pc, #8]	@ (800aa44 <puts+0xc>)
 800aa3a:	4601      	mov	r1, r0
 800aa3c:	6818      	ldr	r0, [r3, #0]
 800aa3e:	f7ff bfa5 	b.w	800a98c <_puts_r>
 800aa42:	bf00      	nop
 800aa44:	24000034 	.word	0x24000034

0800aa48 <siprintf>:
 800aa48:	b40e      	push	{r1, r2, r3}
 800aa4a:	b510      	push	{r4, lr}
 800aa4c:	b09d      	sub	sp, #116	@ 0x74
 800aa4e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800aa50:	9002      	str	r0, [sp, #8]
 800aa52:	9006      	str	r0, [sp, #24]
 800aa54:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800aa58:	480a      	ldr	r0, [pc, #40]	@ (800aa84 <siprintf+0x3c>)
 800aa5a:	9107      	str	r1, [sp, #28]
 800aa5c:	9104      	str	r1, [sp, #16]
 800aa5e:	490a      	ldr	r1, [pc, #40]	@ (800aa88 <siprintf+0x40>)
 800aa60:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa64:	9105      	str	r1, [sp, #20]
 800aa66:	2400      	movs	r4, #0
 800aa68:	a902      	add	r1, sp, #8
 800aa6a:	6800      	ldr	r0, [r0, #0]
 800aa6c:	9301      	str	r3, [sp, #4]
 800aa6e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800aa70:	f000 fb04 	bl	800b07c <_svfiprintf_r>
 800aa74:	9b02      	ldr	r3, [sp, #8]
 800aa76:	701c      	strb	r4, [r3, #0]
 800aa78:	b01d      	add	sp, #116	@ 0x74
 800aa7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa7e:	b003      	add	sp, #12
 800aa80:	4770      	bx	lr
 800aa82:	bf00      	nop
 800aa84:	24000034 	.word	0x24000034
 800aa88:	ffff0208 	.word	0xffff0208

0800aa8c <__sread>:
 800aa8c:	b510      	push	{r4, lr}
 800aa8e:	460c      	mov	r4, r1
 800aa90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa94:	f000 f938 	bl	800ad08 <_read_r>
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	bfab      	itete	ge
 800aa9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800aa9e:	89a3      	ldrhlt	r3, [r4, #12]
 800aaa0:	181b      	addge	r3, r3, r0
 800aaa2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aaa6:	bfac      	ite	ge
 800aaa8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aaaa:	81a3      	strhlt	r3, [r4, #12]
 800aaac:	bd10      	pop	{r4, pc}

0800aaae <__swrite>:
 800aaae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aab2:	461f      	mov	r7, r3
 800aab4:	898b      	ldrh	r3, [r1, #12]
 800aab6:	05db      	lsls	r3, r3, #23
 800aab8:	4605      	mov	r5, r0
 800aaba:	460c      	mov	r4, r1
 800aabc:	4616      	mov	r6, r2
 800aabe:	d505      	bpl.n	800aacc <__swrite+0x1e>
 800aac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aac4:	2302      	movs	r3, #2
 800aac6:	2200      	movs	r2, #0
 800aac8:	f000 f90c 	bl	800ace4 <_lseek_r>
 800aacc:	89a3      	ldrh	r3, [r4, #12]
 800aace:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aad2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aad6:	81a3      	strh	r3, [r4, #12]
 800aad8:	4632      	mov	r2, r6
 800aada:	463b      	mov	r3, r7
 800aadc:	4628      	mov	r0, r5
 800aade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aae2:	f000 b923 	b.w	800ad2c <_write_r>

0800aae6 <__sseek>:
 800aae6:	b510      	push	{r4, lr}
 800aae8:	460c      	mov	r4, r1
 800aaea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaee:	f000 f8f9 	bl	800ace4 <_lseek_r>
 800aaf2:	1c43      	adds	r3, r0, #1
 800aaf4:	89a3      	ldrh	r3, [r4, #12]
 800aaf6:	bf15      	itete	ne
 800aaf8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aafa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aafe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ab02:	81a3      	strheq	r3, [r4, #12]
 800ab04:	bf18      	it	ne
 800ab06:	81a3      	strhne	r3, [r4, #12]
 800ab08:	bd10      	pop	{r4, pc}

0800ab0a <__sclose>:
 800ab0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab0e:	f000 b8d9 	b.w	800acc4 <_close_r>

0800ab12 <_vsniprintf_r>:
 800ab12:	b530      	push	{r4, r5, lr}
 800ab14:	4614      	mov	r4, r2
 800ab16:	2c00      	cmp	r4, #0
 800ab18:	b09b      	sub	sp, #108	@ 0x6c
 800ab1a:	4605      	mov	r5, r0
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	da05      	bge.n	800ab2c <_vsniprintf_r+0x1a>
 800ab20:	238b      	movs	r3, #139	@ 0x8b
 800ab22:	6003      	str	r3, [r0, #0]
 800ab24:	f04f 30ff 	mov.w	r0, #4294967295
 800ab28:	b01b      	add	sp, #108	@ 0x6c
 800ab2a:	bd30      	pop	{r4, r5, pc}
 800ab2c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ab30:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ab34:	f04f 0300 	mov.w	r3, #0
 800ab38:	9319      	str	r3, [sp, #100]	@ 0x64
 800ab3a:	bf14      	ite	ne
 800ab3c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ab40:	4623      	moveq	r3, r4
 800ab42:	9302      	str	r3, [sp, #8]
 800ab44:	9305      	str	r3, [sp, #20]
 800ab46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ab4a:	9100      	str	r1, [sp, #0]
 800ab4c:	9104      	str	r1, [sp, #16]
 800ab4e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ab52:	4669      	mov	r1, sp
 800ab54:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800ab56:	f000 fa91 	bl	800b07c <_svfiprintf_r>
 800ab5a:	1c43      	adds	r3, r0, #1
 800ab5c:	bfbc      	itt	lt
 800ab5e:	238b      	movlt	r3, #139	@ 0x8b
 800ab60:	602b      	strlt	r3, [r5, #0]
 800ab62:	2c00      	cmp	r4, #0
 800ab64:	d0e0      	beq.n	800ab28 <_vsniprintf_r+0x16>
 800ab66:	9b00      	ldr	r3, [sp, #0]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	701a      	strb	r2, [r3, #0]
 800ab6c:	e7dc      	b.n	800ab28 <_vsniprintf_r+0x16>
	...

0800ab70 <vsniprintf>:
 800ab70:	b507      	push	{r0, r1, r2, lr}
 800ab72:	9300      	str	r3, [sp, #0]
 800ab74:	4613      	mov	r3, r2
 800ab76:	460a      	mov	r2, r1
 800ab78:	4601      	mov	r1, r0
 800ab7a:	4803      	ldr	r0, [pc, #12]	@ (800ab88 <vsniprintf+0x18>)
 800ab7c:	6800      	ldr	r0, [r0, #0]
 800ab7e:	f7ff ffc8 	bl	800ab12 <_vsniprintf_r>
 800ab82:	b003      	add	sp, #12
 800ab84:	f85d fb04 	ldr.w	pc, [sp], #4
 800ab88:	24000034 	.word	0x24000034

0800ab8c <__swbuf_r>:
 800ab8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab8e:	460e      	mov	r6, r1
 800ab90:	4614      	mov	r4, r2
 800ab92:	4605      	mov	r5, r0
 800ab94:	b118      	cbz	r0, 800ab9e <__swbuf_r+0x12>
 800ab96:	6a03      	ldr	r3, [r0, #32]
 800ab98:	b90b      	cbnz	r3, 800ab9e <__swbuf_r+0x12>
 800ab9a:	f7ff fe9d 	bl	800a8d8 <__sinit>
 800ab9e:	69a3      	ldr	r3, [r4, #24]
 800aba0:	60a3      	str	r3, [r4, #8]
 800aba2:	89a3      	ldrh	r3, [r4, #12]
 800aba4:	071a      	lsls	r2, r3, #28
 800aba6:	d501      	bpl.n	800abac <__swbuf_r+0x20>
 800aba8:	6923      	ldr	r3, [r4, #16]
 800abaa:	b943      	cbnz	r3, 800abbe <__swbuf_r+0x32>
 800abac:	4621      	mov	r1, r4
 800abae:	4628      	mov	r0, r5
 800abb0:	f000 f82a 	bl	800ac08 <__swsetup_r>
 800abb4:	b118      	cbz	r0, 800abbe <__swbuf_r+0x32>
 800abb6:	f04f 37ff 	mov.w	r7, #4294967295
 800abba:	4638      	mov	r0, r7
 800abbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abbe:	6823      	ldr	r3, [r4, #0]
 800abc0:	6922      	ldr	r2, [r4, #16]
 800abc2:	1a98      	subs	r0, r3, r2
 800abc4:	6963      	ldr	r3, [r4, #20]
 800abc6:	b2f6      	uxtb	r6, r6
 800abc8:	4283      	cmp	r3, r0
 800abca:	4637      	mov	r7, r6
 800abcc:	dc05      	bgt.n	800abda <__swbuf_r+0x4e>
 800abce:	4621      	mov	r1, r4
 800abd0:	4628      	mov	r0, r5
 800abd2:	f000 fea1 	bl	800b918 <_fflush_r>
 800abd6:	2800      	cmp	r0, #0
 800abd8:	d1ed      	bne.n	800abb6 <__swbuf_r+0x2a>
 800abda:	68a3      	ldr	r3, [r4, #8]
 800abdc:	3b01      	subs	r3, #1
 800abde:	60a3      	str	r3, [r4, #8]
 800abe0:	6823      	ldr	r3, [r4, #0]
 800abe2:	1c5a      	adds	r2, r3, #1
 800abe4:	6022      	str	r2, [r4, #0]
 800abe6:	701e      	strb	r6, [r3, #0]
 800abe8:	6962      	ldr	r2, [r4, #20]
 800abea:	1c43      	adds	r3, r0, #1
 800abec:	429a      	cmp	r2, r3
 800abee:	d004      	beq.n	800abfa <__swbuf_r+0x6e>
 800abf0:	89a3      	ldrh	r3, [r4, #12]
 800abf2:	07db      	lsls	r3, r3, #31
 800abf4:	d5e1      	bpl.n	800abba <__swbuf_r+0x2e>
 800abf6:	2e0a      	cmp	r6, #10
 800abf8:	d1df      	bne.n	800abba <__swbuf_r+0x2e>
 800abfa:	4621      	mov	r1, r4
 800abfc:	4628      	mov	r0, r5
 800abfe:	f000 fe8b 	bl	800b918 <_fflush_r>
 800ac02:	2800      	cmp	r0, #0
 800ac04:	d0d9      	beq.n	800abba <__swbuf_r+0x2e>
 800ac06:	e7d6      	b.n	800abb6 <__swbuf_r+0x2a>

0800ac08 <__swsetup_r>:
 800ac08:	b538      	push	{r3, r4, r5, lr}
 800ac0a:	4b29      	ldr	r3, [pc, #164]	@ (800acb0 <__swsetup_r+0xa8>)
 800ac0c:	4605      	mov	r5, r0
 800ac0e:	6818      	ldr	r0, [r3, #0]
 800ac10:	460c      	mov	r4, r1
 800ac12:	b118      	cbz	r0, 800ac1c <__swsetup_r+0x14>
 800ac14:	6a03      	ldr	r3, [r0, #32]
 800ac16:	b90b      	cbnz	r3, 800ac1c <__swsetup_r+0x14>
 800ac18:	f7ff fe5e 	bl	800a8d8 <__sinit>
 800ac1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac20:	0719      	lsls	r1, r3, #28
 800ac22:	d422      	bmi.n	800ac6a <__swsetup_r+0x62>
 800ac24:	06da      	lsls	r2, r3, #27
 800ac26:	d407      	bmi.n	800ac38 <__swsetup_r+0x30>
 800ac28:	2209      	movs	r2, #9
 800ac2a:	602a      	str	r2, [r5, #0]
 800ac2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac30:	81a3      	strh	r3, [r4, #12]
 800ac32:	f04f 30ff 	mov.w	r0, #4294967295
 800ac36:	e033      	b.n	800aca0 <__swsetup_r+0x98>
 800ac38:	0758      	lsls	r0, r3, #29
 800ac3a:	d512      	bpl.n	800ac62 <__swsetup_r+0x5a>
 800ac3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac3e:	b141      	cbz	r1, 800ac52 <__swsetup_r+0x4a>
 800ac40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac44:	4299      	cmp	r1, r3
 800ac46:	d002      	beq.n	800ac4e <__swsetup_r+0x46>
 800ac48:	4628      	mov	r0, r5
 800ac4a:	f000 f8c3 	bl	800add4 <_free_r>
 800ac4e:	2300      	movs	r3, #0
 800ac50:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac52:	89a3      	ldrh	r3, [r4, #12]
 800ac54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ac58:	81a3      	strh	r3, [r4, #12]
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	6063      	str	r3, [r4, #4]
 800ac5e:	6923      	ldr	r3, [r4, #16]
 800ac60:	6023      	str	r3, [r4, #0]
 800ac62:	89a3      	ldrh	r3, [r4, #12]
 800ac64:	f043 0308 	orr.w	r3, r3, #8
 800ac68:	81a3      	strh	r3, [r4, #12]
 800ac6a:	6923      	ldr	r3, [r4, #16]
 800ac6c:	b94b      	cbnz	r3, 800ac82 <__swsetup_r+0x7a>
 800ac6e:	89a3      	ldrh	r3, [r4, #12]
 800ac70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ac74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac78:	d003      	beq.n	800ac82 <__swsetup_r+0x7a>
 800ac7a:	4621      	mov	r1, r4
 800ac7c:	4628      	mov	r0, r5
 800ac7e:	f000 fe99 	bl	800b9b4 <__smakebuf_r>
 800ac82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac86:	f013 0201 	ands.w	r2, r3, #1
 800ac8a:	d00a      	beq.n	800aca2 <__swsetup_r+0x9a>
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	60a2      	str	r2, [r4, #8]
 800ac90:	6962      	ldr	r2, [r4, #20]
 800ac92:	4252      	negs	r2, r2
 800ac94:	61a2      	str	r2, [r4, #24]
 800ac96:	6922      	ldr	r2, [r4, #16]
 800ac98:	b942      	cbnz	r2, 800acac <__swsetup_r+0xa4>
 800ac9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ac9e:	d1c5      	bne.n	800ac2c <__swsetup_r+0x24>
 800aca0:	bd38      	pop	{r3, r4, r5, pc}
 800aca2:	0799      	lsls	r1, r3, #30
 800aca4:	bf58      	it	pl
 800aca6:	6962      	ldrpl	r2, [r4, #20]
 800aca8:	60a2      	str	r2, [r4, #8]
 800acaa:	e7f4      	b.n	800ac96 <__swsetup_r+0x8e>
 800acac:	2000      	movs	r0, #0
 800acae:	e7f7      	b.n	800aca0 <__swsetup_r+0x98>
 800acb0:	24000034 	.word	0x24000034

0800acb4 <memset>:
 800acb4:	4402      	add	r2, r0
 800acb6:	4603      	mov	r3, r0
 800acb8:	4293      	cmp	r3, r2
 800acba:	d100      	bne.n	800acbe <memset+0xa>
 800acbc:	4770      	bx	lr
 800acbe:	f803 1b01 	strb.w	r1, [r3], #1
 800acc2:	e7f9      	b.n	800acb8 <memset+0x4>

0800acc4 <_close_r>:
 800acc4:	b538      	push	{r3, r4, r5, lr}
 800acc6:	4d06      	ldr	r5, [pc, #24]	@ (800ace0 <_close_r+0x1c>)
 800acc8:	2300      	movs	r3, #0
 800acca:	4604      	mov	r4, r0
 800accc:	4608      	mov	r0, r1
 800acce:	602b      	str	r3, [r5, #0]
 800acd0:	f7f6 ffd0 	bl	8001c74 <_close>
 800acd4:	1c43      	adds	r3, r0, #1
 800acd6:	d102      	bne.n	800acde <_close_r+0x1a>
 800acd8:	682b      	ldr	r3, [r5, #0]
 800acda:	b103      	cbz	r3, 800acde <_close_r+0x1a>
 800acdc:	6023      	str	r3, [r4, #0]
 800acde:	bd38      	pop	{r3, r4, r5, pc}
 800ace0:	240024dc 	.word	0x240024dc

0800ace4 <_lseek_r>:
 800ace4:	b538      	push	{r3, r4, r5, lr}
 800ace6:	4d07      	ldr	r5, [pc, #28]	@ (800ad04 <_lseek_r+0x20>)
 800ace8:	4604      	mov	r4, r0
 800acea:	4608      	mov	r0, r1
 800acec:	4611      	mov	r1, r2
 800acee:	2200      	movs	r2, #0
 800acf0:	602a      	str	r2, [r5, #0]
 800acf2:	461a      	mov	r2, r3
 800acf4:	f7f6 ffe5 	bl	8001cc2 <_lseek>
 800acf8:	1c43      	adds	r3, r0, #1
 800acfa:	d102      	bne.n	800ad02 <_lseek_r+0x1e>
 800acfc:	682b      	ldr	r3, [r5, #0]
 800acfe:	b103      	cbz	r3, 800ad02 <_lseek_r+0x1e>
 800ad00:	6023      	str	r3, [r4, #0]
 800ad02:	bd38      	pop	{r3, r4, r5, pc}
 800ad04:	240024dc 	.word	0x240024dc

0800ad08 <_read_r>:
 800ad08:	b538      	push	{r3, r4, r5, lr}
 800ad0a:	4d07      	ldr	r5, [pc, #28]	@ (800ad28 <_read_r+0x20>)
 800ad0c:	4604      	mov	r4, r0
 800ad0e:	4608      	mov	r0, r1
 800ad10:	4611      	mov	r1, r2
 800ad12:	2200      	movs	r2, #0
 800ad14:	602a      	str	r2, [r5, #0]
 800ad16:	461a      	mov	r2, r3
 800ad18:	f7f6 ff73 	bl	8001c02 <_read>
 800ad1c:	1c43      	adds	r3, r0, #1
 800ad1e:	d102      	bne.n	800ad26 <_read_r+0x1e>
 800ad20:	682b      	ldr	r3, [r5, #0]
 800ad22:	b103      	cbz	r3, 800ad26 <_read_r+0x1e>
 800ad24:	6023      	str	r3, [r4, #0]
 800ad26:	bd38      	pop	{r3, r4, r5, pc}
 800ad28:	240024dc 	.word	0x240024dc

0800ad2c <_write_r>:
 800ad2c:	b538      	push	{r3, r4, r5, lr}
 800ad2e:	4d07      	ldr	r5, [pc, #28]	@ (800ad4c <_write_r+0x20>)
 800ad30:	4604      	mov	r4, r0
 800ad32:	4608      	mov	r0, r1
 800ad34:	4611      	mov	r1, r2
 800ad36:	2200      	movs	r2, #0
 800ad38:	602a      	str	r2, [r5, #0]
 800ad3a:	461a      	mov	r2, r3
 800ad3c:	f7f6 ff7e 	bl	8001c3c <_write>
 800ad40:	1c43      	adds	r3, r0, #1
 800ad42:	d102      	bne.n	800ad4a <_write_r+0x1e>
 800ad44:	682b      	ldr	r3, [r5, #0]
 800ad46:	b103      	cbz	r3, 800ad4a <_write_r+0x1e>
 800ad48:	6023      	str	r3, [r4, #0]
 800ad4a:	bd38      	pop	{r3, r4, r5, pc}
 800ad4c:	240024dc 	.word	0x240024dc

0800ad50 <__errno>:
 800ad50:	4b01      	ldr	r3, [pc, #4]	@ (800ad58 <__errno+0x8>)
 800ad52:	6818      	ldr	r0, [r3, #0]
 800ad54:	4770      	bx	lr
 800ad56:	bf00      	nop
 800ad58:	24000034 	.word	0x24000034

0800ad5c <__libc_init_array>:
 800ad5c:	b570      	push	{r4, r5, r6, lr}
 800ad5e:	4d0d      	ldr	r5, [pc, #52]	@ (800ad94 <__libc_init_array+0x38>)
 800ad60:	4c0d      	ldr	r4, [pc, #52]	@ (800ad98 <__libc_init_array+0x3c>)
 800ad62:	1b64      	subs	r4, r4, r5
 800ad64:	10a4      	asrs	r4, r4, #2
 800ad66:	2600      	movs	r6, #0
 800ad68:	42a6      	cmp	r6, r4
 800ad6a:	d109      	bne.n	800ad80 <__libc_init_array+0x24>
 800ad6c:	4d0b      	ldr	r5, [pc, #44]	@ (800ad9c <__libc_init_array+0x40>)
 800ad6e:	4c0c      	ldr	r4, [pc, #48]	@ (800ada0 <__libc_init_array+0x44>)
 800ad70:	f000 ff22 	bl	800bbb8 <_init>
 800ad74:	1b64      	subs	r4, r4, r5
 800ad76:	10a4      	asrs	r4, r4, #2
 800ad78:	2600      	movs	r6, #0
 800ad7a:	42a6      	cmp	r6, r4
 800ad7c:	d105      	bne.n	800ad8a <__libc_init_array+0x2e>
 800ad7e:	bd70      	pop	{r4, r5, r6, pc}
 800ad80:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad84:	4798      	blx	r3
 800ad86:	3601      	adds	r6, #1
 800ad88:	e7ee      	b.n	800ad68 <__libc_init_array+0xc>
 800ad8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad8e:	4798      	blx	r3
 800ad90:	3601      	adds	r6, #1
 800ad92:	e7f2      	b.n	800ad7a <__libc_init_array+0x1e>
 800ad94:	0800c12c 	.word	0x0800c12c
 800ad98:	0800c12c 	.word	0x0800c12c
 800ad9c:	0800c12c 	.word	0x0800c12c
 800ada0:	0800c130 	.word	0x0800c130

0800ada4 <__retarget_lock_init_recursive>:
 800ada4:	4770      	bx	lr

0800ada6 <__retarget_lock_acquire_recursive>:
 800ada6:	4770      	bx	lr

0800ada8 <__retarget_lock_release_recursive>:
 800ada8:	4770      	bx	lr

0800adaa <memcpy>:
 800adaa:	440a      	add	r2, r1
 800adac:	4291      	cmp	r1, r2
 800adae:	f100 33ff 	add.w	r3, r0, #4294967295
 800adb2:	d100      	bne.n	800adb6 <memcpy+0xc>
 800adb4:	4770      	bx	lr
 800adb6:	b510      	push	{r4, lr}
 800adb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800adc0:	4291      	cmp	r1, r2
 800adc2:	d1f9      	bne.n	800adb8 <memcpy+0xe>
 800adc4:	bd10      	pop	{r4, pc}

0800adc6 <abort>:
 800adc6:	b508      	push	{r3, lr}
 800adc8:	2006      	movs	r0, #6
 800adca:	f000 fe71 	bl	800bab0 <raise>
 800adce:	2001      	movs	r0, #1
 800add0:	f7f6 ff0c 	bl	8001bec <_exit>

0800add4 <_free_r>:
 800add4:	b538      	push	{r3, r4, r5, lr}
 800add6:	4605      	mov	r5, r0
 800add8:	2900      	cmp	r1, #0
 800adda:	d041      	beq.n	800ae60 <_free_r+0x8c>
 800addc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ade0:	1f0c      	subs	r4, r1, #4
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	bfb8      	it	lt
 800ade6:	18e4      	addlt	r4, r4, r3
 800ade8:	f000 f8e0 	bl	800afac <__malloc_lock>
 800adec:	4a1d      	ldr	r2, [pc, #116]	@ (800ae64 <_free_r+0x90>)
 800adee:	6813      	ldr	r3, [r2, #0]
 800adf0:	b933      	cbnz	r3, 800ae00 <_free_r+0x2c>
 800adf2:	6063      	str	r3, [r4, #4]
 800adf4:	6014      	str	r4, [r2, #0]
 800adf6:	4628      	mov	r0, r5
 800adf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adfc:	f000 b8dc 	b.w	800afb8 <__malloc_unlock>
 800ae00:	42a3      	cmp	r3, r4
 800ae02:	d908      	bls.n	800ae16 <_free_r+0x42>
 800ae04:	6820      	ldr	r0, [r4, #0]
 800ae06:	1821      	adds	r1, r4, r0
 800ae08:	428b      	cmp	r3, r1
 800ae0a:	bf01      	itttt	eq
 800ae0c:	6819      	ldreq	r1, [r3, #0]
 800ae0e:	685b      	ldreq	r3, [r3, #4]
 800ae10:	1809      	addeq	r1, r1, r0
 800ae12:	6021      	streq	r1, [r4, #0]
 800ae14:	e7ed      	b.n	800adf2 <_free_r+0x1e>
 800ae16:	461a      	mov	r2, r3
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	b10b      	cbz	r3, 800ae20 <_free_r+0x4c>
 800ae1c:	42a3      	cmp	r3, r4
 800ae1e:	d9fa      	bls.n	800ae16 <_free_r+0x42>
 800ae20:	6811      	ldr	r1, [r2, #0]
 800ae22:	1850      	adds	r0, r2, r1
 800ae24:	42a0      	cmp	r0, r4
 800ae26:	d10b      	bne.n	800ae40 <_free_r+0x6c>
 800ae28:	6820      	ldr	r0, [r4, #0]
 800ae2a:	4401      	add	r1, r0
 800ae2c:	1850      	adds	r0, r2, r1
 800ae2e:	4283      	cmp	r3, r0
 800ae30:	6011      	str	r1, [r2, #0]
 800ae32:	d1e0      	bne.n	800adf6 <_free_r+0x22>
 800ae34:	6818      	ldr	r0, [r3, #0]
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	6053      	str	r3, [r2, #4]
 800ae3a:	4408      	add	r0, r1
 800ae3c:	6010      	str	r0, [r2, #0]
 800ae3e:	e7da      	b.n	800adf6 <_free_r+0x22>
 800ae40:	d902      	bls.n	800ae48 <_free_r+0x74>
 800ae42:	230c      	movs	r3, #12
 800ae44:	602b      	str	r3, [r5, #0]
 800ae46:	e7d6      	b.n	800adf6 <_free_r+0x22>
 800ae48:	6820      	ldr	r0, [r4, #0]
 800ae4a:	1821      	adds	r1, r4, r0
 800ae4c:	428b      	cmp	r3, r1
 800ae4e:	bf04      	itt	eq
 800ae50:	6819      	ldreq	r1, [r3, #0]
 800ae52:	685b      	ldreq	r3, [r3, #4]
 800ae54:	6063      	str	r3, [r4, #4]
 800ae56:	bf04      	itt	eq
 800ae58:	1809      	addeq	r1, r1, r0
 800ae5a:	6021      	streq	r1, [r4, #0]
 800ae5c:	6054      	str	r4, [r2, #4]
 800ae5e:	e7ca      	b.n	800adf6 <_free_r+0x22>
 800ae60:	bd38      	pop	{r3, r4, r5, pc}
 800ae62:	bf00      	nop
 800ae64:	240024e8 	.word	0x240024e8

0800ae68 <sbrk_aligned>:
 800ae68:	b570      	push	{r4, r5, r6, lr}
 800ae6a:	4e0f      	ldr	r6, [pc, #60]	@ (800aea8 <sbrk_aligned+0x40>)
 800ae6c:	460c      	mov	r4, r1
 800ae6e:	6831      	ldr	r1, [r6, #0]
 800ae70:	4605      	mov	r5, r0
 800ae72:	b911      	cbnz	r1, 800ae7a <sbrk_aligned+0x12>
 800ae74:	f000 fe5a 	bl	800bb2c <_sbrk_r>
 800ae78:	6030      	str	r0, [r6, #0]
 800ae7a:	4621      	mov	r1, r4
 800ae7c:	4628      	mov	r0, r5
 800ae7e:	f000 fe55 	bl	800bb2c <_sbrk_r>
 800ae82:	1c43      	adds	r3, r0, #1
 800ae84:	d103      	bne.n	800ae8e <sbrk_aligned+0x26>
 800ae86:	f04f 34ff 	mov.w	r4, #4294967295
 800ae8a:	4620      	mov	r0, r4
 800ae8c:	bd70      	pop	{r4, r5, r6, pc}
 800ae8e:	1cc4      	adds	r4, r0, #3
 800ae90:	f024 0403 	bic.w	r4, r4, #3
 800ae94:	42a0      	cmp	r0, r4
 800ae96:	d0f8      	beq.n	800ae8a <sbrk_aligned+0x22>
 800ae98:	1a21      	subs	r1, r4, r0
 800ae9a:	4628      	mov	r0, r5
 800ae9c:	f000 fe46 	bl	800bb2c <_sbrk_r>
 800aea0:	3001      	adds	r0, #1
 800aea2:	d1f2      	bne.n	800ae8a <sbrk_aligned+0x22>
 800aea4:	e7ef      	b.n	800ae86 <sbrk_aligned+0x1e>
 800aea6:	bf00      	nop
 800aea8:	240024e4 	.word	0x240024e4

0800aeac <_malloc_r>:
 800aeac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aeb0:	1ccd      	adds	r5, r1, #3
 800aeb2:	f025 0503 	bic.w	r5, r5, #3
 800aeb6:	3508      	adds	r5, #8
 800aeb8:	2d0c      	cmp	r5, #12
 800aeba:	bf38      	it	cc
 800aebc:	250c      	movcc	r5, #12
 800aebe:	2d00      	cmp	r5, #0
 800aec0:	4606      	mov	r6, r0
 800aec2:	db01      	blt.n	800aec8 <_malloc_r+0x1c>
 800aec4:	42a9      	cmp	r1, r5
 800aec6:	d904      	bls.n	800aed2 <_malloc_r+0x26>
 800aec8:	230c      	movs	r3, #12
 800aeca:	6033      	str	r3, [r6, #0]
 800aecc:	2000      	movs	r0, #0
 800aece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aed2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800afa8 <_malloc_r+0xfc>
 800aed6:	f000 f869 	bl	800afac <__malloc_lock>
 800aeda:	f8d8 3000 	ldr.w	r3, [r8]
 800aede:	461c      	mov	r4, r3
 800aee0:	bb44      	cbnz	r4, 800af34 <_malloc_r+0x88>
 800aee2:	4629      	mov	r1, r5
 800aee4:	4630      	mov	r0, r6
 800aee6:	f7ff ffbf 	bl	800ae68 <sbrk_aligned>
 800aeea:	1c43      	adds	r3, r0, #1
 800aeec:	4604      	mov	r4, r0
 800aeee:	d158      	bne.n	800afa2 <_malloc_r+0xf6>
 800aef0:	f8d8 4000 	ldr.w	r4, [r8]
 800aef4:	4627      	mov	r7, r4
 800aef6:	2f00      	cmp	r7, #0
 800aef8:	d143      	bne.n	800af82 <_malloc_r+0xd6>
 800aefa:	2c00      	cmp	r4, #0
 800aefc:	d04b      	beq.n	800af96 <_malloc_r+0xea>
 800aefe:	6823      	ldr	r3, [r4, #0]
 800af00:	4639      	mov	r1, r7
 800af02:	4630      	mov	r0, r6
 800af04:	eb04 0903 	add.w	r9, r4, r3
 800af08:	f000 fe10 	bl	800bb2c <_sbrk_r>
 800af0c:	4581      	cmp	r9, r0
 800af0e:	d142      	bne.n	800af96 <_malloc_r+0xea>
 800af10:	6821      	ldr	r1, [r4, #0]
 800af12:	1a6d      	subs	r5, r5, r1
 800af14:	4629      	mov	r1, r5
 800af16:	4630      	mov	r0, r6
 800af18:	f7ff ffa6 	bl	800ae68 <sbrk_aligned>
 800af1c:	3001      	adds	r0, #1
 800af1e:	d03a      	beq.n	800af96 <_malloc_r+0xea>
 800af20:	6823      	ldr	r3, [r4, #0]
 800af22:	442b      	add	r3, r5
 800af24:	6023      	str	r3, [r4, #0]
 800af26:	f8d8 3000 	ldr.w	r3, [r8]
 800af2a:	685a      	ldr	r2, [r3, #4]
 800af2c:	bb62      	cbnz	r2, 800af88 <_malloc_r+0xdc>
 800af2e:	f8c8 7000 	str.w	r7, [r8]
 800af32:	e00f      	b.n	800af54 <_malloc_r+0xa8>
 800af34:	6822      	ldr	r2, [r4, #0]
 800af36:	1b52      	subs	r2, r2, r5
 800af38:	d420      	bmi.n	800af7c <_malloc_r+0xd0>
 800af3a:	2a0b      	cmp	r2, #11
 800af3c:	d917      	bls.n	800af6e <_malloc_r+0xc2>
 800af3e:	1961      	adds	r1, r4, r5
 800af40:	42a3      	cmp	r3, r4
 800af42:	6025      	str	r5, [r4, #0]
 800af44:	bf18      	it	ne
 800af46:	6059      	strne	r1, [r3, #4]
 800af48:	6863      	ldr	r3, [r4, #4]
 800af4a:	bf08      	it	eq
 800af4c:	f8c8 1000 	streq.w	r1, [r8]
 800af50:	5162      	str	r2, [r4, r5]
 800af52:	604b      	str	r3, [r1, #4]
 800af54:	4630      	mov	r0, r6
 800af56:	f000 f82f 	bl	800afb8 <__malloc_unlock>
 800af5a:	f104 000b 	add.w	r0, r4, #11
 800af5e:	1d23      	adds	r3, r4, #4
 800af60:	f020 0007 	bic.w	r0, r0, #7
 800af64:	1ac2      	subs	r2, r0, r3
 800af66:	bf1c      	itt	ne
 800af68:	1a1b      	subne	r3, r3, r0
 800af6a:	50a3      	strne	r3, [r4, r2]
 800af6c:	e7af      	b.n	800aece <_malloc_r+0x22>
 800af6e:	6862      	ldr	r2, [r4, #4]
 800af70:	42a3      	cmp	r3, r4
 800af72:	bf0c      	ite	eq
 800af74:	f8c8 2000 	streq.w	r2, [r8]
 800af78:	605a      	strne	r2, [r3, #4]
 800af7a:	e7eb      	b.n	800af54 <_malloc_r+0xa8>
 800af7c:	4623      	mov	r3, r4
 800af7e:	6864      	ldr	r4, [r4, #4]
 800af80:	e7ae      	b.n	800aee0 <_malloc_r+0x34>
 800af82:	463c      	mov	r4, r7
 800af84:	687f      	ldr	r7, [r7, #4]
 800af86:	e7b6      	b.n	800aef6 <_malloc_r+0x4a>
 800af88:	461a      	mov	r2, r3
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	42a3      	cmp	r3, r4
 800af8e:	d1fb      	bne.n	800af88 <_malloc_r+0xdc>
 800af90:	2300      	movs	r3, #0
 800af92:	6053      	str	r3, [r2, #4]
 800af94:	e7de      	b.n	800af54 <_malloc_r+0xa8>
 800af96:	230c      	movs	r3, #12
 800af98:	6033      	str	r3, [r6, #0]
 800af9a:	4630      	mov	r0, r6
 800af9c:	f000 f80c 	bl	800afb8 <__malloc_unlock>
 800afa0:	e794      	b.n	800aecc <_malloc_r+0x20>
 800afa2:	6005      	str	r5, [r0, #0]
 800afa4:	e7d6      	b.n	800af54 <_malloc_r+0xa8>
 800afa6:	bf00      	nop
 800afa8:	240024e8 	.word	0x240024e8

0800afac <__malloc_lock>:
 800afac:	4801      	ldr	r0, [pc, #4]	@ (800afb4 <__malloc_lock+0x8>)
 800afae:	f7ff befa 	b.w	800ada6 <__retarget_lock_acquire_recursive>
 800afb2:	bf00      	nop
 800afb4:	240024e0 	.word	0x240024e0

0800afb8 <__malloc_unlock>:
 800afb8:	4801      	ldr	r0, [pc, #4]	@ (800afc0 <__malloc_unlock+0x8>)
 800afba:	f7ff bef5 	b.w	800ada8 <__retarget_lock_release_recursive>
 800afbe:	bf00      	nop
 800afc0:	240024e0 	.word	0x240024e0

0800afc4 <__ssputs_r>:
 800afc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afc8:	688e      	ldr	r6, [r1, #8]
 800afca:	461f      	mov	r7, r3
 800afcc:	42be      	cmp	r6, r7
 800afce:	680b      	ldr	r3, [r1, #0]
 800afd0:	4682      	mov	sl, r0
 800afd2:	460c      	mov	r4, r1
 800afd4:	4690      	mov	r8, r2
 800afd6:	d82d      	bhi.n	800b034 <__ssputs_r+0x70>
 800afd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800afdc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800afe0:	d026      	beq.n	800b030 <__ssputs_r+0x6c>
 800afe2:	6965      	ldr	r5, [r4, #20]
 800afe4:	6909      	ldr	r1, [r1, #16]
 800afe6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800afea:	eba3 0901 	sub.w	r9, r3, r1
 800afee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aff2:	1c7b      	adds	r3, r7, #1
 800aff4:	444b      	add	r3, r9
 800aff6:	106d      	asrs	r5, r5, #1
 800aff8:	429d      	cmp	r5, r3
 800affa:	bf38      	it	cc
 800affc:	461d      	movcc	r5, r3
 800affe:	0553      	lsls	r3, r2, #21
 800b000:	d527      	bpl.n	800b052 <__ssputs_r+0x8e>
 800b002:	4629      	mov	r1, r5
 800b004:	f7ff ff52 	bl	800aeac <_malloc_r>
 800b008:	4606      	mov	r6, r0
 800b00a:	b360      	cbz	r0, 800b066 <__ssputs_r+0xa2>
 800b00c:	6921      	ldr	r1, [r4, #16]
 800b00e:	464a      	mov	r2, r9
 800b010:	f7ff fecb 	bl	800adaa <memcpy>
 800b014:	89a3      	ldrh	r3, [r4, #12]
 800b016:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b01a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b01e:	81a3      	strh	r3, [r4, #12]
 800b020:	6126      	str	r6, [r4, #16]
 800b022:	6165      	str	r5, [r4, #20]
 800b024:	444e      	add	r6, r9
 800b026:	eba5 0509 	sub.w	r5, r5, r9
 800b02a:	6026      	str	r6, [r4, #0]
 800b02c:	60a5      	str	r5, [r4, #8]
 800b02e:	463e      	mov	r6, r7
 800b030:	42be      	cmp	r6, r7
 800b032:	d900      	bls.n	800b036 <__ssputs_r+0x72>
 800b034:	463e      	mov	r6, r7
 800b036:	6820      	ldr	r0, [r4, #0]
 800b038:	4632      	mov	r2, r6
 800b03a:	4641      	mov	r1, r8
 800b03c:	f000 fcf6 	bl	800ba2c <memmove>
 800b040:	68a3      	ldr	r3, [r4, #8]
 800b042:	1b9b      	subs	r3, r3, r6
 800b044:	60a3      	str	r3, [r4, #8]
 800b046:	6823      	ldr	r3, [r4, #0]
 800b048:	4433      	add	r3, r6
 800b04a:	6023      	str	r3, [r4, #0]
 800b04c:	2000      	movs	r0, #0
 800b04e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b052:	462a      	mov	r2, r5
 800b054:	f000 fd7a 	bl	800bb4c <_realloc_r>
 800b058:	4606      	mov	r6, r0
 800b05a:	2800      	cmp	r0, #0
 800b05c:	d1e0      	bne.n	800b020 <__ssputs_r+0x5c>
 800b05e:	6921      	ldr	r1, [r4, #16]
 800b060:	4650      	mov	r0, sl
 800b062:	f7ff feb7 	bl	800add4 <_free_r>
 800b066:	230c      	movs	r3, #12
 800b068:	f8ca 3000 	str.w	r3, [sl]
 800b06c:	89a3      	ldrh	r3, [r4, #12]
 800b06e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b072:	81a3      	strh	r3, [r4, #12]
 800b074:	f04f 30ff 	mov.w	r0, #4294967295
 800b078:	e7e9      	b.n	800b04e <__ssputs_r+0x8a>
	...

0800b07c <_svfiprintf_r>:
 800b07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b080:	4698      	mov	r8, r3
 800b082:	898b      	ldrh	r3, [r1, #12]
 800b084:	061b      	lsls	r3, r3, #24
 800b086:	b09d      	sub	sp, #116	@ 0x74
 800b088:	4607      	mov	r7, r0
 800b08a:	460d      	mov	r5, r1
 800b08c:	4614      	mov	r4, r2
 800b08e:	d510      	bpl.n	800b0b2 <_svfiprintf_r+0x36>
 800b090:	690b      	ldr	r3, [r1, #16]
 800b092:	b973      	cbnz	r3, 800b0b2 <_svfiprintf_r+0x36>
 800b094:	2140      	movs	r1, #64	@ 0x40
 800b096:	f7ff ff09 	bl	800aeac <_malloc_r>
 800b09a:	6028      	str	r0, [r5, #0]
 800b09c:	6128      	str	r0, [r5, #16]
 800b09e:	b930      	cbnz	r0, 800b0ae <_svfiprintf_r+0x32>
 800b0a0:	230c      	movs	r3, #12
 800b0a2:	603b      	str	r3, [r7, #0]
 800b0a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a8:	b01d      	add	sp, #116	@ 0x74
 800b0aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ae:	2340      	movs	r3, #64	@ 0x40
 800b0b0:	616b      	str	r3, [r5, #20]
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0b6:	2320      	movs	r3, #32
 800b0b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b0bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0c0:	2330      	movs	r3, #48	@ 0x30
 800b0c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b260 <_svfiprintf_r+0x1e4>
 800b0c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b0ca:	f04f 0901 	mov.w	r9, #1
 800b0ce:	4623      	mov	r3, r4
 800b0d0:	469a      	mov	sl, r3
 800b0d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0d6:	b10a      	cbz	r2, 800b0dc <_svfiprintf_r+0x60>
 800b0d8:	2a25      	cmp	r2, #37	@ 0x25
 800b0da:	d1f9      	bne.n	800b0d0 <_svfiprintf_r+0x54>
 800b0dc:	ebba 0b04 	subs.w	fp, sl, r4
 800b0e0:	d00b      	beq.n	800b0fa <_svfiprintf_r+0x7e>
 800b0e2:	465b      	mov	r3, fp
 800b0e4:	4622      	mov	r2, r4
 800b0e6:	4629      	mov	r1, r5
 800b0e8:	4638      	mov	r0, r7
 800b0ea:	f7ff ff6b 	bl	800afc4 <__ssputs_r>
 800b0ee:	3001      	adds	r0, #1
 800b0f0:	f000 80a7 	beq.w	800b242 <_svfiprintf_r+0x1c6>
 800b0f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0f6:	445a      	add	r2, fp
 800b0f8:	9209      	str	r2, [sp, #36]	@ 0x24
 800b0fa:	f89a 3000 	ldrb.w	r3, [sl]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	f000 809f 	beq.w	800b242 <_svfiprintf_r+0x1c6>
 800b104:	2300      	movs	r3, #0
 800b106:	f04f 32ff 	mov.w	r2, #4294967295
 800b10a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b10e:	f10a 0a01 	add.w	sl, sl, #1
 800b112:	9304      	str	r3, [sp, #16]
 800b114:	9307      	str	r3, [sp, #28]
 800b116:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b11a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b11c:	4654      	mov	r4, sl
 800b11e:	2205      	movs	r2, #5
 800b120:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b124:	484e      	ldr	r0, [pc, #312]	@ (800b260 <_svfiprintf_r+0x1e4>)
 800b126:	f7f5 f8e3 	bl	80002f0 <memchr>
 800b12a:	9a04      	ldr	r2, [sp, #16]
 800b12c:	b9d8      	cbnz	r0, 800b166 <_svfiprintf_r+0xea>
 800b12e:	06d0      	lsls	r0, r2, #27
 800b130:	bf44      	itt	mi
 800b132:	2320      	movmi	r3, #32
 800b134:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b138:	0711      	lsls	r1, r2, #28
 800b13a:	bf44      	itt	mi
 800b13c:	232b      	movmi	r3, #43	@ 0x2b
 800b13e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b142:	f89a 3000 	ldrb.w	r3, [sl]
 800b146:	2b2a      	cmp	r3, #42	@ 0x2a
 800b148:	d015      	beq.n	800b176 <_svfiprintf_r+0xfa>
 800b14a:	9a07      	ldr	r2, [sp, #28]
 800b14c:	4654      	mov	r4, sl
 800b14e:	2000      	movs	r0, #0
 800b150:	f04f 0c0a 	mov.w	ip, #10
 800b154:	4621      	mov	r1, r4
 800b156:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b15a:	3b30      	subs	r3, #48	@ 0x30
 800b15c:	2b09      	cmp	r3, #9
 800b15e:	d94b      	bls.n	800b1f8 <_svfiprintf_r+0x17c>
 800b160:	b1b0      	cbz	r0, 800b190 <_svfiprintf_r+0x114>
 800b162:	9207      	str	r2, [sp, #28]
 800b164:	e014      	b.n	800b190 <_svfiprintf_r+0x114>
 800b166:	eba0 0308 	sub.w	r3, r0, r8
 800b16a:	fa09 f303 	lsl.w	r3, r9, r3
 800b16e:	4313      	orrs	r3, r2
 800b170:	9304      	str	r3, [sp, #16]
 800b172:	46a2      	mov	sl, r4
 800b174:	e7d2      	b.n	800b11c <_svfiprintf_r+0xa0>
 800b176:	9b03      	ldr	r3, [sp, #12]
 800b178:	1d19      	adds	r1, r3, #4
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	9103      	str	r1, [sp, #12]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	bfbb      	ittet	lt
 800b182:	425b      	neglt	r3, r3
 800b184:	f042 0202 	orrlt.w	r2, r2, #2
 800b188:	9307      	strge	r3, [sp, #28]
 800b18a:	9307      	strlt	r3, [sp, #28]
 800b18c:	bfb8      	it	lt
 800b18e:	9204      	strlt	r2, [sp, #16]
 800b190:	7823      	ldrb	r3, [r4, #0]
 800b192:	2b2e      	cmp	r3, #46	@ 0x2e
 800b194:	d10a      	bne.n	800b1ac <_svfiprintf_r+0x130>
 800b196:	7863      	ldrb	r3, [r4, #1]
 800b198:	2b2a      	cmp	r3, #42	@ 0x2a
 800b19a:	d132      	bne.n	800b202 <_svfiprintf_r+0x186>
 800b19c:	9b03      	ldr	r3, [sp, #12]
 800b19e:	1d1a      	adds	r2, r3, #4
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	9203      	str	r2, [sp, #12]
 800b1a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b1a8:	3402      	adds	r4, #2
 800b1aa:	9305      	str	r3, [sp, #20]
 800b1ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b270 <_svfiprintf_r+0x1f4>
 800b1b0:	7821      	ldrb	r1, [r4, #0]
 800b1b2:	2203      	movs	r2, #3
 800b1b4:	4650      	mov	r0, sl
 800b1b6:	f7f5 f89b 	bl	80002f0 <memchr>
 800b1ba:	b138      	cbz	r0, 800b1cc <_svfiprintf_r+0x150>
 800b1bc:	9b04      	ldr	r3, [sp, #16]
 800b1be:	eba0 000a 	sub.w	r0, r0, sl
 800b1c2:	2240      	movs	r2, #64	@ 0x40
 800b1c4:	4082      	lsls	r2, r0
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	3401      	adds	r4, #1
 800b1ca:	9304      	str	r3, [sp, #16]
 800b1cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1d0:	4824      	ldr	r0, [pc, #144]	@ (800b264 <_svfiprintf_r+0x1e8>)
 800b1d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b1d6:	2206      	movs	r2, #6
 800b1d8:	f7f5 f88a 	bl	80002f0 <memchr>
 800b1dc:	2800      	cmp	r0, #0
 800b1de:	d036      	beq.n	800b24e <_svfiprintf_r+0x1d2>
 800b1e0:	4b21      	ldr	r3, [pc, #132]	@ (800b268 <_svfiprintf_r+0x1ec>)
 800b1e2:	bb1b      	cbnz	r3, 800b22c <_svfiprintf_r+0x1b0>
 800b1e4:	9b03      	ldr	r3, [sp, #12]
 800b1e6:	3307      	adds	r3, #7
 800b1e8:	f023 0307 	bic.w	r3, r3, #7
 800b1ec:	3308      	adds	r3, #8
 800b1ee:	9303      	str	r3, [sp, #12]
 800b1f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1f2:	4433      	add	r3, r6
 800b1f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1f6:	e76a      	b.n	800b0ce <_svfiprintf_r+0x52>
 800b1f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1fc:	460c      	mov	r4, r1
 800b1fe:	2001      	movs	r0, #1
 800b200:	e7a8      	b.n	800b154 <_svfiprintf_r+0xd8>
 800b202:	2300      	movs	r3, #0
 800b204:	3401      	adds	r4, #1
 800b206:	9305      	str	r3, [sp, #20]
 800b208:	4619      	mov	r1, r3
 800b20a:	f04f 0c0a 	mov.w	ip, #10
 800b20e:	4620      	mov	r0, r4
 800b210:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b214:	3a30      	subs	r2, #48	@ 0x30
 800b216:	2a09      	cmp	r2, #9
 800b218:	d903      	bls.n	800b222 <_svfiprintf_r+0x1a6>
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d0c6      	beq.n	800b1ac <_svfiprintf_r+0x130>
 800b21e:	9105      	str	r1, [sp, #20]
 800b220:	e7c4      	b.n	800b1ac <_svfiprintf_r+0x130>
 800b222:	fb0c 2101 	mla	r1, ip, r1, r2
 800b226:	4604      	mov	r4, r0
 800b228:	2301      	movs	r3, #1
 800b22a:	e7f0      	b.n	800b20e <_svfiprintf_r+0x192>
 800b22c:	ab03      	add	r3, sp, #12
 800b22e:	9300      	str	r3, [sp, #0]
 800b230:	462a      	mov	r2, r5
 800b232:	4b0e      	ldr	r3, [pc, #56]	@ (800b26c <_svfiprintf_r+0x1f0>)
 800b234:	a904      	add	r1, sp, #16
 800b236:	4638      	mov	r0, r7
 800b238:	f3af 8000 	nop.w
 800b23c:	1c42      	adds	r2, r0, #1
 800b23e:	4606      	mov	r6, r0
 800b240:	d1d6      	bne.n	800b1f0 <_svfiprintf_r+0x174>
 800b242:	89ab      	ldrh	r3, [r5, #12]
 800b244:	065b      	lsls	r3, r3, #25
 800b246:	f53f af2d 	bmi.w	800b0a4 <_svfiprintf_r+0x28>
 800b24a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b24c:	e72c      	b.n	800b0a8 <_svfiprintf_r+0x2c>
 800b24e:	ab03      	add	r3, sp, #12
 800b250:	9300      	str	r3, [sp, #0]
 800b252:	462a      	mov	r2, r5
 800b254:	4b05      	ldr	r3, [pc, #20]	@ (800b26c <_svfiprintf_r+0x1f0>)
 800b256:	a904      	add	r1, sp, #16
 800b258:	4638      	mov	r0, r7
 800b25a:	f000 f9bb 	bl	800b5d4 <_printf_i>
 800b25e:	e7ed      	b.n	800b23c <_svfiprintf_r+0x1c0>
 800b260:	0800c0f0 	.word	0x0800c0f0
 800b264:	0800c0fa 	.word	0x0800c0fa
 800b268:	00000000 	.word	0x00000000
 800b26c:	0800afc5 	.word	0x0800afc5
 800b270:	0800c0f6 	.word	0x0800c0f6

0800b274 <__sfputc_r>:
 800b274:	6893      	ldr	r3, [r2, #8]
 800b276:	3b01      	subs	r3, #1
 800b278:	2b00      	cmp	r3, #0
 800b27a:	b410      	push	{r4}
 800b27c:	6093      	str	r3, [r2, #8]
 800b27e:	da08      	bge.n	800b292 <__sfputc_r+0x1e>
 800b280:	6994      	ldr	r4, [r2, #24]
 800b282:	42a3      	cmp	r3, r4
 800b284:	db01      	blt.n	800b28a <__sfputc_r+0x16>
 800b286:	290a      	cmp	r1, #10
 800b288:	d103      	bne.n	800b292 <__sfputc_r+0x1e>
 800b28a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b28e:	f7ff bc7d 	b.w	800ab8c <__swbuf_r>
 800b292:	6813      	ldr	r3, [r2, #0]
 800b294:	1c58      	adds	r0, r3, #1
 800b296:	6010      	str	r0, [r2, #0]
 800b298:	7019      	strb	r1, [r3, #0]
 800b29a:	4608      	mov	r0, r1
 800b29c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2a0:	4770      	bx	lr

0800b2a2 <__sfputs_r>:
 800b2a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2a4:	4606      	mov	r6, r0
 800b2a6:	460f      	mov	r7, r1
 800b2a8:	4614      	mov	r4, r2
 800b2aa:	18d5      	adds	r5, r2, r3
 800b2ac:	42ac      	cmp	r4, r5
 800b2ae:	d101      	bne.n	800b2b4 <__sfputs_r+0x12>
 800b2b0:	2000      	movs	r0, #0
 800b2b2:	e007      	b.n	800b2c4 <__sfputs_r+0x22>
 800b2b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2b8:	463a      	mov	r2, r7
 800b2ba:	4630      	mov	r0, r6
 800b2bc:	f7ff ffda 	bl	800b274 <__sfputc_r>
 800b2c0:	1c43      	adds	r3, r0, #1
 800b2c2:	d1f3      	bne.n	800b2ac <__sfputs_r+0xa>
 800b2c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b2c8 <_vfiprintf_r>:
 800b2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2cc:	460d      	mov	r5, r1
 800b2ce:	b09d      	sub	sp, #116	@ 0x74
 800b2d0:	4614      	mov	r4, r2
 800b2d2:	4698      	mov	r8, r3
 800b2d4:	4606      	mov	r6, r0
 800b2d6:	b118      	cbz	r0, 800b2e0 <_vfiprintf_r+0x18>
 800b2d8:	6a03      	ldr	r3, [r0, #32]
 800b2da:	b90b      	cbnz	r3, 800b2e0 <_vfiprintf_r+0x18>
 800b2dc:	f7ff fafc 	bl	800a8d8 <__sinit>
 800b2e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b2e2:	07d9      	lsls	r1, r3, #31
 800b2e4:	d405      	bmi.n	800b2f2 <_vfiprintf_r+0x2a>
 800b2e6:	89ab      	ldrh	r3, [r5, #12]
 800b2e8:	059a      	lsls	r2, r3, #22
 800b2ea:	d402      	bmi.n	800b2f2 <_vfiprintf_r+0x2a>
 800b2ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b2ee:	f7ff fd5a 	bl	800ada6 <__retarget_lock_acquire_recursive>
 800b2f2:	89ab      	ldrh	r3, [r5, #12]
 800b2f4:	071b      	lsls	r3, r3, #28
 800b2f6:	d501      	bpl.n	800b2fc <_vfiprintf_r+0x34>
 800b2f8:	692b      	ldr	r3, [r5, #16]
 800b2fa:	b99b      	cbnz	r3, 800b324 <_vfiprintf_r+0x5c>
 800b2fc:	4629      	mov	r1, r5
 800b2fe:	4630      	mov	r0, r6
 800b300:	f7ff fc82 	bl	800ac08 <__swsetup_r>
 800b304:	b170      	cbz	r0, 800b324 <_vfiprintf_r+0x5c>
 800b306:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b308:	07dc      	lsls	r4, r3, #31
 800b30a:	d504      	bpl.n	800b316 <_vfiprintf_r+0x4e>
 800b30c:	f04f 30ff 	mov.w	r0, #4294967295
 800b310:	b01d      	add	sp, #116	@ 0x74
 800b312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b316:	89ab      	ldrh	r3, [r5, #12]
 800b318:	0598      	lsls	r0, r3, #22
 800b31a:	d4f7      	bmi.n	800b30c <_vfiprintf_r+0x44>
 800b31c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b31e:	f7ff fd43 	bl	800ada8 <__retarget_lock_release_recursive>
 800b322:	e7f3      	b.n	800b30c <_vfiprintf_r+0x44>
 800b324:	2300      	movs	r3, #0
 800b326:	9309      	str	r3, [sp, #36]	@ 0x24
 800b328:	2320      	movs	r3, #32
 800b32a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b32e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b332:	2330      	movs	r3, #48	@ 0x30
 800b334:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b4e4 <_vfiprintf_r+0x21c>
 800b338:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b33c:	f04f 0901 	mov.w	r9, #1
 800b340:	4623      	mov	r3, r4
 800b342:	469a      	mov	sl, r3
 800b344:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b348:	b10a      	cbz	r2, 800b34e <_vfiprintf_r+0x86>
 800b34a:	2a25      	cmp	r2, #37	@ 0x25
 800b34c:	d1f9      	bne.n	800b342 <_vfiprintf_r+0x7a>
 800b34e:	ebba 0b04 	subs.w	fp, sl, r4
 800b352:	d00b      	beq.n	800b36c <_vfiprintf_r+0xa4>
 800b354:	465b      	mov	r3, fp
 800b356:	4622      	mov	r2, r4
 800b358:	4629      	mov	r1, r5
 800b35a:	4630      	mov	r0, r6
 800b35c:	f7ff ffa1 	bl	800b2a2 <__sfputs_r>
 800b360:	3001      	adds	r0, #1
 800b362:	f000 80a7 	beq.w	800b4b4 <_vfiprintf_r+0x1ec>
 800b366:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b368:	445a      	add	r2, fp
 800b36a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b36c:	f89a 3000 	ldrb.w	r3, [sl]
 800b370:	2b00      	cmp	r3, #0
 800b372:	f000 809f 	beq.w	800b4b4 <_vfiprintf_r+0x1ec>
 800b376:	2300      	movs	r3, #0
 800b378:	f04f 32ff 	mov.w	r2, #4294967295
 800b37c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b380:	f10a 0a01 	add.w	sl, sl, #1
 800b384:	9304      	str	r3, [sp, #16]
 800b386:	9307      	str	r3, [sp, #28]
 800b388:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b38c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b38e:	4654      	mov	r4, sl
 800b390:	2205      	movs	r2, #5
 800b392:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b396:	4853      	ldr	r0, [pc, #332]	@ (800b4e4 <_vfiprintf_r+0x21c>)
 800b398:	f7f4 ffaa 	bl	80002f0 <memchr>
 800b39c:	9a04      	ldr	r2, [sp, #16]
 800b39e:	b9d8      	cbnz	r0, 800b3d8 <_vfiprintf_r+0x110>
 800b3a0:	06d1      	lsls	r1, r2, #27
 800b3a2:	bf44      	itt	mi
 800b3a4:	2320      	movmi	r3, #32
 800b3a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3aa:	0713      	lsls	r3, r2, #28
 800b3ac:	bf44      	itt	mi
 800b3ae:	232b      	movmi	r3, #43	@ 0x2b
 800b3b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3b4:	f89a 3000 	ldrb.w	r3, [sl]
 800b3b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3ba:	d015      	beq.n	800b3e8 <_vfiprintf_r+0x120>
 800b3bc:	9a07      	ldr	r2, [sp, #28]
 800b3be:	4654      	mov	r4, sl
 800b3c0:	2000      	movs	r0, #0
 800b3c2:	f04f 0c0a 	mov.w	ip, #10
 800b3c6:	4621      	mov	r1, r4
 800b3c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3cc:	3b30      	subs	r3, #48	@ 0x30
 800b3ce:	2b09      	cmp	r3, #9
 800b3d0:	d94b      	bls.n	800b46a <_vfiprintf_r+0x1a2>
 800b3d2:	b1b0      	cbz	r0, 800b402 <_vfiprintf_r+0x13a>
 800b3d4:	9207      	str	r2, [sp, #28]
 800b3d6:	e014      	b.n	800b402 <_vfiprintf_r+0x13a>
 800b3d8:	eba0 0308 	sub.w	r3, r0, r8
 800b3dc:	fa09 f303 	lsl.w	r3, r9, r3
 800b3e0:	4313      	orrs	r3, r2
 800b3e2:	9304      	str	r3, [sp, #16]
 800b3e4:	46a2      	mov	sl, r4
 800b3e6:	e7d2      	b.n	800b38e <_vfiprintf_r+0xc6>
 800b3e8:	9b03      	ldr	r3, [sp, #12]
 800b3ea:	1d19      	adds	r1, r3, #4
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	9103      	str	r1, [sp, #12]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	bfbb      	ittet	lt
 800b3f4:	425b      	neglt	r3, r3
 800b3f6:	f042 0202 	orrlt.w	r2, r2, #2
 800b3fa:	9307      	strge	r3, [sp, #28]
 800b3fc:	9307      	strlt	r3, [sp, #28]
 800b3fe:	bfb8      	it	lt
 800b400:	9204      	strlt	r2, [sp, #16]
 800b402:	7823      	ldrb	r3, [r4, #0]
 800b404:	2b2e      	cmp	r3, #46	@ 0x2e
 800b406:	d10a      	bne.n	800b41e <_vfiprintf_r+0x156>
 800b408:	7863      	ldrb	r3, [r4, #1]
 800b40a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b40c:	d132      	bne.n	800b474 <_vfiprintf_r+0x1ac>
 800b40e:	9b03      	ldr	r3, [sp, #12]
 800b410:	1d1a      	adds	r2, r3, #4
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	9203      	str	r2, [sp, #12]
 800b416:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b41a:	3402      	adds	r4, #2
 800b41c:	9305      	str	r3, [sp, #20]
 800b41e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b4f4 <_vfiprintf_r+0x22c>
 800b422:	7821      	ldrb	r1, [r4, #0]
 800b424:	2203      	movs	r2, #3
 800b426:	4650      	mov	r0, sl
 800b428:	f7f4 ff62 	bl	80002f0 <memchr>
 800b42c:	b138      	cbz	r0, 800b43e <_vfiprintf_r+0x176>
 800b42e:	9b04      	ldr	r3, [sp, #16]
 800b430:	eba0 000a 	sub.w	r0, r0, sl
 800b434:	2240      	movs	r2, #64	@ 0x40
 800b436:	4082      	lsls	r2, r0
 800b438:	4313      	orrs	r3, r2
 800b43a:	3401      	adds	r4, #1
 800b43c:	9304      	str	r3, [sp, #16]
 800b43e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b442:	4829      	ldr	r0, [pc, #164]	@ (800b4e8 <_vfiprintf_r+0x220>)
 800b444:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b448:	2206      	movs	r2, #6
 800b44a:	f7f4 ff51 	bl	80002f0 <memchr>
 800b44e:	2800      	cmp	r0, #0
 800b450:	d03f      	beq.n	800b4d2 <_vfiprintf_r+0x20a>
 800b452:	4b26      	ldr	r3, [pc, #152]	@ (800b4ec <_vfiprintf_r+0x224>)
 800b454:	bb1b      	cbnz	r3, 800b49e <_vfiprintf_r+0x1d6>
 800b456:	9b03      	ldr	r3, [sp, #12]
 800b458:	3307      	adds	r3, #7
 800b45a:	f023 0307 	bic.w	r3, r3, #7
 800b45e:	3308      	adds	r3, #8
 800b460:	9303      	str	r3, [sp, #12]
 800b462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b464:	443b      	add	r3, r7
 800b466:	9309      	str	r3, [sp, #36]	@ 0x24
 800b468:	e76a      	b.n	800b340 <_vfiprintf_r+0x78>
 800b46a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b46e:	460c      	mov	r4, r1
 800b470:	2001      	movs	r0, #1
 800b472:	e7a8      	b.n	800b3c6 <_vfiprintf_r+0xfe>
 800b474:	2300      	movs	r3, #0
 800b476:	3401      	adds	r4, #1
 800b478:	9305      	str	r3, [sp, #20]
 800b47a:	4619      	mov	r1, r3
 800b47c:	f04f 0c0a 	mov.w	ip, #10
 800b480:	4620      	mov	r0, r4
 800b482:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b486:	3a30      	subs	r2, #48	@ 0x30
 800b488:	2a09      	cmp	r2, #9
 800b48a:	d903      	bls.n	800b494 <_vfiprintf_r+0x1cc>
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d0c6      	beq.n	800b41e <_vfiprintf_r+0x156>
 800b490:	9105      	str	r1, [sp, #20]
 800b492:	e7c4      	b.n	800b41e <_vfiprintf_r+0x156>
 800b494:	fb0c 2101 	mla	r1, ip, r1, r2
 800b498:	4604      	mov	r4, r0
 800b49a:	2301      	movs	r3, #1
 800b49c:	e7f0      	b.n	800b480 <_vfiprintf_r+0x1b8>
 800b49e:	ab03      	add	r3, sp, #12
 800b4a0:	9300      	str	r3, [sp, #0]
 800b4a2:	462a      	mov	r2, r5
 800b4a4:	4b12      	ldr	r3, [pc, #72]	@ (800b4f0 <_vfiprintf_r+0x228>)
 800b4a6:	a904      	add	r1, sp, #16
 800b4a8:	4630      	mov	r0, r6
 800b4aa:	f3af 8000 	nop.w
 800b4ae:	4607      	mov	r7, r0
 800b4b0:	1c78      	adds	r0, r7, #1
 800b4b2:	d1d6      	bne.n	800b462 <_vfiprintf_r+0x19a>
 800b4b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b4b6:	07d9      	lsls	r1, r3, #31
 800b4b8:	d405      	bmi.n	800b4c6 <_vfiprintf_r+0x1fe>
 800b4ba:	89ab      	ldrh	r3, [r5, #12]
 800b4bc:	059a      	lsls	r2, r3, #22
 800b4be:	d402      	bmi.n	800b4c6 <_vfiprintf_r+0x1fe>
 800b4c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b4c2:	f7ff fc71 	bl	800ada8 <__retarget_lock_release_recursive>
 800b4c6:	89ab      	ldrh	r3, [r5, #12]
 800b4c8:	065b      	lsls	r3, r3, #25
 800b4ca:	f53f af1f 	bmi.w	800b30c <_vfiprintf_r+0x44>
 800b4ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b4d0:	e71e      	b.n	800b310 <_vfiprintf_r+0x48>
 800b4d2:	ab03      	add	r3, sp, #12
 800b4d4:	9300      	str	r3, [sp, #0]
 800b4d6:	462a      	mov	r2, r5
 800b4d8:	4b05      	ldr	r3, [pc, #20]	@ (800b4f0 <_vfiprintf_r+0x228>)
 800b4da:	a904      	add	r1, sp, #16
 800b4dc:	4630      	mov	r0, r6
 800b4de:	f000 f879 	bl	800b5d4 <_printf_i>
 800b4e2:	e7e4      	b.n	800b4ae <_vfiprintf_r+0x1e6>
 800b4e4:	0800c0f0 	.word	0x0800c0f0
 800b4e8:	0800c0fa 	.word	0x0800c0fa
 800b4ec:	00000000 	.word	0x00000000
 800b4f0:	0800b2a3 	.word	0x0800b2a3
 800b4f4:	0800c0f6 	.word	0x0800c0f6

0800b4f8 <_printf_common>:
 800b4f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4fc:	4616      	mov	r6, r2
 800b4fe:	4698      	mov	r8, r3
 800b500:	688a      	ldr	r2, [r1, #8]
 800b502:	690b      	ldr	r3, [r1, #16]
 800b504:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b508:	4293      	cmp	r3, r2
 800b50a:	bfb8      	it	lt
 800b50c:	4613      	movlt	r3, r2
 800b50e:	6033      	str	r3, [r6, #0]
 800b510:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b514:	4607      	mov	r7, r0
 800b516:	460c      	mov	r4, r1
 800b518:	b10a      	cbz	r2, 800b51e <_printf_common+0x26>
 800b51a:	3301      	adds	r3, #1
 800b51c:	6033      	str	r3, [r6, #0]
 800b51e:	6823      	ldr	r3, [r4, #0]
 800b520:	0699      	lsls	r1, r3, #26
 800b522:	bf42      	ittt	mi
 800b524:	6833      	ldrmi	r3, [r6, #0]
 800b526:	3302      	addmi	r3, #2
 800b528:	6033      	strmi	r3, [r6, #0]
 800b52a:	6825      	ldr	r5, [r4, #0]
 800b52c:	f015 0506 	ands.w	r5, r5, #6
 800b530:	d106      	bne.n	800b540 <_printf_common+0x48>
 800b532:	f104 0a19 	add.w	sl, r4, #25
 800b536:	68e3      	ldr	r3, [r4, #12]
 800b538:	6832      	ldr	r2, [r6, #0]
 800b53a:	1a9b      	subs	r3, r3, r2
 800b53c:	42ab      	cmp	r3, r5
 800b53e:	dc26      	bgt.n	800b58e <_printf_common+0x96>
 800b540:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b544:	6822      	ldr	r2, [r4, #0]
 800b546:	3b00      	subs	r3, #0
 800b548:	bf18      	it	ne
 800b54a:	2301      	movne	r3, #1
 800b54c:	0692      	lsls	r2, r2, #26
 800b54e:	d42b      	bmi.n	800b5a8 <_printf_common+0xb0>
 800b550:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b554:	4641      	mov	r1, r8
 800b556:	4638      	mov	r0, r7
 800b558:	47c8      	blx	r9
 800b55a:	3001      	adds	r0, #1
 800b55c:	d01e      	beq.n	800b59c <_printf_common+0xa4>
 800b55e:	6823      	ldr	r3, [r4, #0]
 800b560:	6922      	ldr	r2, [r4, #16]
 800b562:	f003 0306 	and.w	r3, r3, #6
 800b566:	2b04      	cmp	r3, #4
 800b568:	bf02      	ittt	eq
 800b56a:	68e5      	ldreq	r5, [r4, #12]
 800b56c:	6833      	ldreq	r3, [r6, #0]
 800b56e:	1aed      	subeq	r5, r5, r3
 800b570:	68a3      	ldr	r3, [r4, #8]
 800b572:	bf0c      	ite	eq
 800b574:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b578:	2500      	movne	r5, #0
 800b57a:	4293      	cmp	r3, r2
 800b57c:	bfc4      	itt	gt
 800b57e:	1a9b      	subgt	r3, r3, r2
 800b580:	18ed      	addgt	r5, r5, r3
 800b582:	2600      	movs	r6, #0
 800b584:	341a      	adds	r4, #26
 800b586:	42b5      	cmp	r5, r6
 800b588:	d11a      	bne.n	800b5c0 <_printf_common+0xc8>
 800b58a:	2000      	movs	r0, #0
 800b58c:	e008      	b.n	800b5a0 <_printf_common+0xa8>
 800b58e:	2301      	movs	r3, #1
 800b590:	4652      	mov	r2, sl
 800b592:	4641      	mov	r1, r8
 800b594:	4638      	mov	r0, r7
 800b596:	47c8      	blx	r9
 800b598:	3001      	adds	r0, #1
 800b59a:	d103      	bne.n	800b5a4 <_printf_common+0xac>
 800b59c:	f04f 30ff 	mov.w	r0, #4294967295
 800b5a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5a4:	3501      	adds	r5, #1
 800b5a6:	e7c6      	b.n	800b536 <_printf_common+0x3e>
 800b5a8:	18e1      	adds	r1, r4, r3
 800b5aa:	1c5a      	adds	r2, r3, #1
 800b5ac:	2030      	movs	r0, #48	@ 0x30
 800b5ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b5b2:	4422      	add	r2, r4
 800b5b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b5b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b5bc:	3302      	adds	r3, #2
 800b5be:	e7c7      	b.n	800b550 <_printf_common+0x58>
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	4622      	mov	r2, r4
 800b5c4:	4641      	mov	r1, r8
 800b5c6:	4638      	mov	r0, r7
 800b5c8:	47c8      	blx	r9
 800b5ca:	3001      	adds	r0, #1
 800b5cc:	d0e6      	beq.n	800b59c <_printf_common+0xa4>
 800b5ce:	3601      	adds	r6, #1
 800b5d0:	e7d9      	b.n	800b586 <_printf_common+0x8e>
	...

0800b5d4 <_printf_i>:
 800b5d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b5d8:	7e0f      	ldrb	r7, [r1, #24]
 800b5da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b5dc:	2f78      	cmp	r7, #120	@ 0x78
 800b5de:	4691      	mov	r9, r2
 800b5e0:	4680      	mov	r8, r0
 800b5e2:	460c      	mov	r4, r1
 800b5e4:	469a      	mov	sl, r3
 800b5e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b5ea:	d807      	bhi.n	800b5fc <_printf_i+0x28>
 800b5ec:	2f62      	cmp	r7, #98	@ 0x62
 800b5ee:	d80a      	bhi.n	800b606 <_printf_i+0x32>
 800b5f0:	2f00      	cmp	r7, #0
 800b5f2:	f000 80d1 	beq.w	800b798 <_printf_i+0x1c4>
 800b5f6:	2f58      	cmp	r7, #88	@ 0x58
 800b5f8:	f000 80b8 	beq.w	800b76c <_printf_i+0x198>
 800b5fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b600:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b604:	e03a      	b.n	800b67c <_printf_i+0xa8>
 800b606:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b60a:	2b15      	cmp	r3, #21
 800b60c:	d8f6      	bhi.n	800b5fc <_printf_i+0x28>
 800b60e:	a101      	add	r1, pc, #4	@ (adr r1, 800b614 <_printf_i+0x40>)
 800b610:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b614:	0800b66d 	.word	0x0800b66d
 800b618:	0800b681 	.word	0x0800b681
 800b61c:	0800b5fd 	.word	0x0800b5fd
 800b620:	0800b5fd 	.word	0x0800b5fd
 800b624:	0800b5fd 	.word	0x0800b5fd
 800b628:	0800b5fd 	.word	0x0800b5fd
 800b62c:	0800b681 	.word	0x0800b681
 800b630:	0800b5fd 	.word	0x0800b5fd
 800b634:	0800b5fd 	.word	0x0800b5fd
 800b638:	0800b5fd 	.word	0x0800b5fd
 800b63c:	0800b5fd 	.word	0x0800b5fd
 800b640:	0800b77f 	.word	0x0800b77f
 800b644:	0800b6ab 	.word	0x0800b6ab
 800b648:	0800b739 	.word	0x0800b739
 800b64c:	0800b5fd 	.word	0x0800b5fd
 800b650:	0800b5fd 	.word	0x0800b5fd
 800b654:	0800b7a1 	.word	0x0800b7a1
 800b658:	0800b5fd 	.word	0x0800b5fd
 800b65c:	0800b6ab 	.word	0x0800b6ab
 800b660:	0800b5fd 	.word	0x0800b5fd
 800b664:	0800b5fd 	.word	0x0800b5fd
 800b668:	0800b741 	.word	0x0800b741
 800b66c:	6833      	ldr	r3, [r6, #0]
 800b66e:	1d1a      	adds	r2, r3, #4
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	6032      	str	r2, [r6, #0]
 800b674:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b678:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b67c:	2301      	movs	r3, #1
 800b67e:	e09c      	b.n	800b7ba <_printf_i+0x1e6>
 800b680:	6833      	ldr	r3, [r6, #0]
 800b682:	6820      	ldr	r0, [r4, #0]
 800b684:	1d19      	adds	r1, r3, #4
 800b686:	6031      	str	r1, [r6, #0]
 800b688:	0606      	lsls	r6, r0, #24
 800b68a:	d501      	bpl.n	800b690 <_printf_i+0xbc>
 800b68c:	681d      	ldr	r5, [r3, #0]
 800b68e:	e003      	b.n	800b698 <_printf_i+0xc4>
 800b690:	0645      	lsls	r5, r0, #25
 800b692:	d5fb      	bpl.n	800b68c <_printf_i+0xb8>
 800b694:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b698:	2d00      	cmp	r5, #0
 800b69a:	da03      	bge.n	800b6a4 <_printf_i+0xd0>
 800b69c:	232d      	movs	r3, #45	@ 0x2d
 800b69e:	426d      	negs	r5, r5
 800b6a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6a4:	4858      	ldr	r0, [pc, #352]	@ (800b808 <_printf_i+0x234>)
 800b6a6:	230a      	movs	r3, #10
 800b6a8:	e011      	b.n	800b6ce <_printf_i+0xfa>
 800b6aa:	6821      	ldr	r1, [r4, #0]
 800b6ac:	6833      	ldr	r3, [r6, #0]
 800b6ae:	0608      	lsls	r0, r1, #24
 800b6b0:	f853 5b04 	ldr.w	r5, [r3], #4
 800b6b4:	d402      	bmi.n	800b6bc <_printf_i+0xe8>
 800b6b6:	0649      	lsls	r1, r1, #25
 800b6b8:	bf48      	it	mi
 800b6ba:	b2ad      	uxthmi	r5, r5
 800b6bc:	2f6f      	cmp	r7, #111	@ 0x6f
 800b6be:	4852      	ldr	r0, [pc, #328]	@ (800b808 <_printf_i+0x234>)
 800b6c0:	6033      	str	r3, [r6, #0]
 800b6c2:	bf14      	ite	ne
 800b6c4:	230a      	movne	r3, #10
 800b6c6:	2308      	moveq	r3, #8
 800b6c8:	2100      	movs	r1, #0
 800b6ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b6ce:	6866      	ldr	r6, [r4, #4]
 800b6d0:	60a6      	str	r6, [r4, #8]
 800b6d2:	2e00      	cmp	r6, #0
 800b6d4:	db05      	blt.n	800b6e2 <_printf_i+0x10e>
 800b6d6:	6821      	ldr	r1, [r4, #0]
 800b6d8:	432e      	orrs	r6, r5
 800b6da:	f021 0104 	bic.w	r1, r1, #4
 800b6de:	6021      	str	r1, [r4, #0]
 800b6e0:	d04b      	beq.n	800b77a <_printf_i+0x1a6>
 800b6e2:	4616      	mov	r6, r2
 800b6e4:	fbb5 f1f3 	udiv	r1, r5, r3
 800b6e8:	fb03 5711 	mls	r7, r3, r1, r5
 800b6ec:	5dc7      	ldrb	r7, [r0, r7]
 800b6ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b6f2:	462f      	mov	r7, r5
 800b6f4:	42bb      	cmp	r3, r7
 800b6f6:	460d      	mov	r5, r1
 800b6f8:	d9f4      	bls.n	800b6e4 <_printf_i+0x110>
 800b6fa:	2b08      	cmp	r3, #8
 800b6fc:	d10b      	bne.n	800b716 <_printf_i+0x142>
 800b6fe:	6823      	ldr	r3, [r4, #0]
 800b700:	07df      	lsls	r7, r3, #31
 800b702:	d508      	bpl.n	800b716 <_printf_i+0x142>
 800b704:	6923      	ldr	r3, [r4, #16]
 800b706:	6861      	ldr	r1, [r4, #4]
 800b708:	4299      	cmp	r1, r3
 800b70a:	bfde      	ittt	le
 800b70c:	2330      	movle	r3, #48	@ 0x30
 800b70e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b712:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b716:	1b92      	subs	r2, r2, r6
 800b718:	6122      	str	r2, [r4, #16]
 800b71a:	f8cd a000 	str.w	sl, [sp]
 800b71e:	464b      	mov	r3, r9
 800b720:	aa03      	add	r2, sp, #12
 800b722:	4621      	mov	r1, r4
 800b724:	4640      	mov	r0, r8
 800b726:	f7ff fee7 	bl	800b4f8 <_printf_common>
 800b72a:	3001      	adds	r0, #1
 800b72c:	d14a      	bne.n	800b7c4 <_printf_i+0x1f0>
 800b72e:	f04f 30ff 	mov.w	r0, #4294967295
 800b732:	b004      	add	sp, #16
 800b734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b738:	6823      	ldr	r3, [r4, #0]
 800b73a:	f043 0320 	orr.w	r3, r3, #32
 800b73e:	6023      	str	r3, [r4, #0]
 800b740:	4832      	ldr	r0, [pc, #200]	@ (800b80c <_printf_i+0x238>)
 800b742:	2778      	movs	r7, #120	@ 0x78
 800b744:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b748:	6823      	ldr	r3, [r4, #0]
 800b74a:	6831      	ldr	r1, [r6, #0]
 800b74c:	061f      	lsls	r7, r3, #24
 800b74e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b752:	d402      	bmi.n	800b75a <_printf_i+0x186>
 800b754:	065f      	lsls	r7, r3, #25
 800b756:	bf48      	it	mi
 800b758:	b2ad      	uxthmi	r5, r5
 800b75a:	6031      	str	r1, [r6, #0]
 800b75c:	07d9      	lsls	r1, r3, #31
 800b75e:	bf44      	itt	mi
 800b760:	f043 0320 	orrmi.w	r3, r3, #32
 800b764:	6023      	strmi	r3, [r4, #0]
 800b766:	b11d      	cbz	r5, 800b770 <_printf_i+0x19c>
 800b768:	2310      	movs	r3, #16
 800b76a:	e7ad      	b.n	800b6c8 <_printf_i+0xf4>
 800b76c:	4826      	ldr	r0, [pc, #152]	@ (800b808 <_printf_i+0x234>)
 800b76e:	e7e9      	b.n	800b744 <_printf_i+0x170>
 800b770:	6823      	ldr	r3, [r4, #0]
 800b772:	f023 0320 	bic.w	r3, r3, #32
 800b776:	6023      	str	r3, [r4, #0]
 800b778:	e7f6      	b.n	800b768 <_printf_i+0x194>
 800b77a:	4616      	mov	r6, r2
 800b77c:	e7bd      	b.n	800b6fa <_printf_i+0x126>
 800b77e:	6833      	ldr	r3, [r6, #0]
 800b780:	6825      	ldr	r5, [r4, #0]
 800b782:	6961      	ldr	r1, [r4, #20]
 800b784:	1d18      	adds	r0, r3, #4
 800b786:	6030      	str	r0, [r6, #0]
 800b788:	062e      	lsls	r6, r5, #24
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	d501      	bpl.n	800b792 <_printf_i+0x1be>
 800b78e:	6019      	str	r1, [r3, #0]
 800b790:	e002      	b.n	800b798 <_printf_i+0x1c4>
 800b792:	0668      	lsls	r0, r5, #25
 800b794:	d5fb      	bpl.n	800b78e <_printf_i+0x1ba>
 800b796:	8019      	strh	r1, [r3, #0]
 800b798:	2300      	movs	r3, #0
 800b79a:	6123      	str	r3, [r4, #16]
 800b79c:	4616      	mov	r6, r2
 800b79e:	e7bc      	b.n	800b71a <_printf_i+0x146>
 800b7a0:	6833      	ldr	r3, [r6, #0]
 800b7a2:	1d1a      	adds	r2, r3, #4
 800b7a4:	6032      	str	r2, [r6, #0]
 800b7a6:	681e      	ldr	r6, [r3, #0]
 800b7a8:	6862      	ldr	r2, [r4, #4]
 800b7aa:	2100      	movs	r1, #0
 800b7ac:	4630      	mov	r0, r6
 800b7ae:	f7f4 fd9f 	bl	80002f0 <memchr>
 800b7b2:	b108      	cbz	r0, 800b7b8 <_printf_i+0x1e4>
 800b7b4:	1b80      	subs	r0, r0, r6
 800b7b6:	6060      	str	r0, [r4, #4]
 800b7b8:	6863      	ldr	r3, [r4, #4]
 800b7ba:	6123      	str	r3, [r4, #16]
 800b7bc:	2300      	movs	r3, #0
 800b7be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7c2:	e7aa      	b.n	800b71a <_printf_i+0x146>
 800b7c4:	6923      	ldr	r3, [r4, #16]
 800b7c6:	4632      	mov	r2, r6
 800b7c8:	4649      	mov	r1, r9
 800b7ca:	4640      	mov	r0, r8
 800b7cc:	47d0      	blx	sl
 800b7ce:	3001      	adds	r0, #1
 800b7d0:	d0ad      	beq.n	800b72e <_printf_i+0x15a>
 800b7d2:	6823      	ldr	r3, [r4, #0]
 800b7d4:	079b      	lsls	r3, r3, #30
 800b7d6:	d413      	bmi.n	800b800 <_printf_i+0x22c>
 800b7d8:	68e0      	ldr	r0, [r4, #12]
 800b7da:	9b03      	ldr	r3, [sp, #12]
 800b7dc:	4298      	cmp	r0, r3
 800b7de:	bfb8      	it	lt
 800b7e0:	4618      	movlt	r0, r3
 800b7e2:	e7a6      	b.n	800b732 <_printf_i+0x15e>
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	4632      	mov	r2, r6
 800b7e8:	4649      	mov	r1, r9
 800b7ea:	4640      	mov	r0, r8
 800b7ec:	47d0      	blx	sl
 800b7ee:	3001      	adds	r0, #1
 800b7f0:	d09d      	beq.n	800b72e <_printf_i+0x15a>
 800b7f2:	3501      	adds	r5, #1
 800b7f4:	68e3      	ldr	r3, [r4, #12]
 800b7f6:	9903      	ldr	r1, [sp, #12]
 800b7f8:	1a5b      	subs	r3, r3, r1
 800b7fa:	42ab      	cmp	r3, r5
 800b7fc:	dcf2      	bgt.n	800b7e4 <_printf_i+0x210>
 800b7fe:	e7eb      	b.n	800b7d8 <_printf_i+0x204>
 800b800:	2500      	movs	r5, #0
 800b802:	f104 0619 	add.w	r6, r4, #25
 800b806:	e7f5      	b.n	800b7f4 <_printf_i+0x220>
 800b808:	0800c101 	.word	0x0800c101
 800b80c:	0800c112 	.word	0x0800c112

0800b810 <__sflush_r>:
 800b810:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b818:	0716      	lsls	r6, r2, #28
 800b81a:	4605      	mov	r5, r0
 800b81c:	460c      	mov	r4, r1
 800b81e:	d454      	bmi.n	800b8ca <__sflush_r+0xba>
 800b820:	684b      	ldr	r3, [r1, #4]
 800b822:	2b00      	cmp	r3, #0
 800b824:	dc02      	bgt.n	800b82c <__sflush_r+0x1c>
 800b826:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b828:	2b00      	cmp	r3, #0
 800b82a:	dd48      	ble.n	800b8be <__sflush_r+0xae>
 800b82c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b82e:	2e00      	cmp	r6, #0
 800b830:	d045      	beq.n	800b8be <__sflush_r+0xae>
 800b832:	2300      	movs	r3, #0
 800b834:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b838:	682f      	ldr	r7, [r5, #0]
 800b83a:	6a21      	ldr	r1, [r4, #32]
 800b83c:	602b      	str	r3, [r5, #0]
 800b83e:	d030      	beq.n	800b8a2 <__sflush_r+0x92>
 800b840:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b842:	89a3      	ldrh	r3, [r4, #12]
 800b844:	0759      	lsls	r1, r3, #29
 800b846:	d505      	bpl.n	800b854 <__sflush_r+0x44>
 800b848:	6863      	ldr	r3, [r4, #4]
 800b84a:	1ad2      	subs	r2, r2, r3
 800b84c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b84e:	b10b      	cbz	r3, 800b854 <__sflush_r+0x44>
 800b850:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b852:	1ad2      	subs	r2, r2, r3
 800b854:	2300      	movs	r3, #0
 800b856:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b858:	6a21      	ldr	r1, [r4, #32]
 800b85a:	4628      	mov	r0, r5
 800b85c:	47b0      	blx	r6
 800b85e:	1c43      	adds	r3, r0, #1
 800b860:	89a3      	ldrh	r3, [r4, #12]
 800b862:	d106      	bne.n	800b872 <__sflush_r+0x62>
 800b864:	6829      	ldr	r1, [r5, #0]
 800b866:	291d      	cmp	r1, #29
 800b868:	d82b      	bhi.n	800b8c2 <__sflush_r+0xb2>
 800b86a:	4a2a      	ldr	r2, [pc, #168]	@ (800b914 <__sflush_r+0x104>)
 800b86c:	40ca      	lsrs	r2, r1
 800b86e:	07d6      	lsls	r6, r2, #31
 800b870:	d527      	bpl.n	800b8c2 <__sflush_r+0xb2>
 800b872:	2200      	movs	r2, #0
 800b874:	6062      	str	r2, [r4, #4]
 800b876:	04d9      	lsls	r1, r3, #19
 800b878:	6922      	ldr	r2, [r4, #16]
 800b87a:	6022      	str	r2, [r4, #0]
 800b87c:	d504      	bpl.n	800b888 <__sflush_r+0x78>
 800b87e:	1c42      	adds	r2, r0, #1
 800b880:	d101      	bne.n	800b886 <__sflush_r+0x76>
 800b882:	682b      	ldr	r3, [r5, #0]
 800b884:	b903      	cbnz	r3, 800b888 <__sflush_r+0x78>
 800b886:	6560      	str	r0, [r4, #84]	@ 0x54
 800b888:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b88a:	602f      	str	r7, [r5, #0]
 800b88c:	b1b9      	cbz	r1, 800b8be <__sflush_r+0xae>
 800b88e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b892:	4299      	cmp	r1, r3
 800b894:	d002      	beq.n	800b89c <__sflush_r+0x8c>
 800b896:	4628      	mov	r0, r5
 800b898:	f7ff fa9c 	bl	800add4 <_free_r>
 800b89c:	2300      	movs	r3, #0
 800b89e:	6363      	str	r3, [r4, #52]	@ 0x34
 800b8a0:	e00d      	b.n	800b8be <__sflush_r+0xae>
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	4628      	mov	r0, r5
 800b8a6:	47b0      	blx	r6
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	1c50      	adds	r0, r2, #1
 800b8ac:	d1c9      	bne.n	800b842 <__sflush_r+0x32>
 800b8ae:	682b      	ldr	r3, [r5, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d0c6      	beq.n	800b842 <__sflush_r+0x32>
 800b8b4:	2b1d      	cmp	r3, #29
 800b8b6:	d001      	beq.n	800b8bc <__sflush_r+0xac>
 800b8b8:	2b16      	cmp	r3, #22
 800b8ba:	d11e      	bne.n	800b8fa <__sflush_r+0xea>
 800b8bc:	602f      	str	r7, [r5, #0]
 800b8be:	2000      	movs	r0, #0
 800b8c0:	e022      	b.n	800b908 <__sflush_r+0xf8>
 800b8c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8c6:	b21b      	sxth	r3, r3
 800b8c8:	e01b      	b.n	800b902 <__sflush_r+0xf2>
 800b8ca:	690f      	ldr	r7, [r1, #16]
 800b8cc:	2f00      	cmp	r7, #0
 800b8ce:	d0f6      	beq.n	800b8be <__sflush_r+0xae>
 800b8d0:	0793      	lsls	r3, r2, #30
 800b8d2:	680e      	ldr	r6, [r1, #0]
 800b8d4:	bf08      	it	eq
 800b8d6:	694b      	ldreq	r3, [r1, #20]
 800b8d8:	600f      	str	r7, [r1, #0]
 800b8da:	bf18      	it	ne
 800b8dc:	2300      	movne	r3, #0
 800b8de:	eba6 0807 	sub.w	r8, r6, r7
 800b8e2:	608b      	str	r3, [r1, #8]
 800b8e4:	f1b8 0f00 	cmp.w	r8, #0
 800b8e8:	dde9      	ble.n	800b8be <__sflush_r+0xae>
 800b8ea:	6a21      	ldr	r1, [r4, #32]
 800b8ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b8ee:	4643      	mov	r3, r8
 800b8f0:	463a      	mov	r2, r7
 800b8f2:	4628      	mov	r0, r5
 800b8f4:	47b0      	blx	r6
 800b8f6:	2800      	cmp	r0, #0
 800b8f8:	dc08      	bgt.n	800b90c <__sflush_r+0xfc>
 800b8fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b902:	81a3      	strh	r3, [r4, #12]
 800b904:	f04f 30ff 	mov.w	r0, #4294967295
 800b908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b90c:	4407      	add	r7, r0
 800b90e:	eba8 0800 	sub.w	r8, r8, r0
 800b912:	e7e7      	b.n	800b8e4 <__sflush_r+0xd4>
 800b914:	20400001 	.word	0x20400001

0800b918 <_fflush_r>:
 800b918:	b538      	push	{r3, r4, r5, lr}
 800b91a:	690b      	ldr	r3, [r1, #16]
 800b91c:	4605      	mov	r5, r0
 800b91e:	460c      	mov	r4, r1
 800b920:	b913      	cbnz	r3, 800b928 <_fflush_r+0x10>
 800b922:	2500      	movs	r5, #0
 800b924:	4628      	mov	r0, r5
 800b926:	bd38      	pop	{r3, r4, r5, pc}
 800b928:	b118      	cbz	r0, 800b932 <_fflush_r+0x1a>
 800b92a:	6a03      	ldr	r3, [r0, #32]
 800b92c:	b90b      	cbnz	r3, 800b932 <_fflush_r+0x1a>
 800b92e:	f7fe ffd3 	bl	800a8d8 <__sinit>
 800b932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d0f3      	beq.n	800b922 <_fflush_r+0xa>
 800b93a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b93c:	07d0      	lsls	r0, r2, #31
 800b93e:	d404      	bmi.n	800b94a <_fflush_r+0x32>
 800b940:	0599      	lsls	r1, r3, #22
 800b942:	d402      	bmi.n	800b94a <_fflush_r+0x32>
 800b944:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b946:	f7ff fa2e 	bl	800ada6 <__retarget_lock_acquire_recursive>
 800b94a:	4628      	mov	r0, r5
 800b94c:	4621      	mov	r1, r4
 800b94e:	f7ff ff5f 	bl	800b810 <__sflush_r>
 800b952:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b954:	07da      	lsls	r2, r3, #31
 800b956:	4605      	mov	r5, r0
 800b958:	d4e4      	bmi.n	800b924 <_fflush_r+0xc>
 800b95a:	89a3      	ldrh	r3, [r4, #12]
 800b95c:	059b      	lsls	r3, r3, #22
 800b95e:	d4e1      	bmi.n	800b924 <_fflush_r+0xc>
 800b960:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b962:	f7ff fa21 	bl	800ada8 <__retarget_lock_release_recursive>
 800b966:	e7dd      	b.n	800b924 <_fflush_r+0xc>

0800b968 <__swhatbuf_r>:
 800b968:	b570      	push	{r4, r5, r6, lr}
 800b96a:	460c      	mov	r4, r1
 800b96c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b970:	2900      	cmp	r1, #0
 800b972:	b096      	sub	sp, #88	@ 0x58
 800b974:	4615      	mov	r5, r2
 800b976:	461e      	mov	r6, r3
 800b978:	da0d      	bge.n	800b996 <__swhatbuf_r+0x2e>
 800b97a:	89a3      	ldrh	r3, [r4, #12]
 800b97c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b980:	f04f 0100 	mov.w	r1, #0
 800b984:	bf14      	ite	ne
 800b986:	2340      	movne	r3, #64	@ 0x40
 800b988:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b98c:	2000      	movs	r0, #0
 800b98e:	6031      	str	r1, [r6, #0]
 800b990:	602b      	str	r3, [r5, #0]
 800b992:	b016      	add	sp, #88	@ 0x58
 800b994:	bd70      	pop	{r4, r5, r6, pc}
 800b996:	466a      	mov	r2, sp
 800b998:	f000 f892 	bl	800bac0 <_fstat_r>
 800b99c:	2800      	cmp	r0, #0
 800b99e:	dbec      	blt.n	800b97a <__swhatbuf_r+0x12>
 800b9a0:	9901      	ldr	r1, [sp, #4]
 800b9a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b9a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b9aa:	4259      	negs	r1, r3
 800b9ac:	4159      	adcs	r1, r3
 800b9ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b9b2:	e7eb      	b.n	800b98c <__swhatbuf_r+0x24>

0800b9b4 <__smakebuf_r>:
 800b9b4:	898b      	ldrh	r3, [r1, #12]
 800b9b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b9b8:	079d      	lsls	r5, r3, #30
 800b9ba:	4606      	mov	r6, r0
 800b9bc:	460c      	mov	r4, r1
 800b9be:	d507      	bpl.n	800b9d0 <__smakebuf_r+0x1c>
 800b9c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b9c4:	6023      	str	r3, [r4, #0]
 800b9c6:	6123      	str	r3, [r4, #16]
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	6163      	str	r3, [r4, #20]
 800b9cc:	b003      	add	sp, #12
 800b9ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9d0:	ab01      	add	r3, sp, #4
 800b9d2:	466a      	mov	r2, sp
 800b9d4:	f7ff ffc8 	bl	800b968 <__swhatbuf_r>
 800b9d8:	9f00      	ldr	r7, [sp, #0]
 800b9da:	4605      	mov	r5, r0
 800b9dc:	4639      	mov	r1, r7
 800b9de:	4630      	mov	r0, r6
 800b9e0:	f7ff fa64 	bl	800aeac <_malloc_r>
 800b9e4:	b948      	cbnz	r0, 800b9fa <__smakebuf_r+0x46>
 800b9e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9ea:	059a      	lsls	r2, r3, #22
 800b9ec:	d4ee      	bmi.n	800b9cc <__smakebuf_r+0x18>
 800b9ee:	f023 0303 	bic.w	r3, r3, #3
 800b9f2:	f043 0302 	orr.w	r3, r3, #2
 800b9f6:	81a3      	strh	r3, [r4, #12]
 800b9f8:	e7e2      	b.n	800b9c0 <__smakebuf_r+0xc>
 800b9fa:	89a3      	ldrh	r3, [r4, #12]
 800b9fc:	6020      	str	r0, [r4, #0]
 800b9fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba02:	81a3      	strh	r3, [r4, #12]
 800ba04:	9b01      	ldr	r3, [sp, #4]
 800ba06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ba0a:	b15b      	cbz	r3, 800ba24 <__smakebuf_r+0x70>
 800ba0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba10:	4630      	mov	r0, r6
 800ba12:	f000 f867 	bl	800bae4 <_isatty_r>
 800ba16:	b128      	cbz	r0, 800ba24 <__smakebuf_r+0x70>
 800ba18:	89a3      	ldrh	r3, [r4, #12]
 800ba1a:	f023 0303 	bic.w	r3, r3, #3
 800ba1e:	f043 0301 	orr.w	r3, r3, #1
 800ba22:	81a3      	strh	r3, [r4, #12]
 800ba24:	89a3      	ldrh	r3, [r4, #12]
 800ba26:	431d      	orrs	r5, r3
 800ba28:	81a5      	strh	r5, [r4, #12]
 800ba2a:	e7cf      	b.n	800b9cc <__smakebuf_r+0x18>

0800ba2c <memmove>:
 800ba2c:	4288      	cmp	r0, r1
 800ba2e:	b510      	push	{r4, lr}
 800ba30:	eb01 0402 	add.w	r4, r1, r2
 800ba34:	d902      	bls.n	800ba3c <memmove+0x10>
 800ba36:	4284      	cmp	r4, r0
 800ba38:	4623      	mov	r3, r4
 800ba3a:	d807      	bhi.n	800ba4c <memmove+0x20>
 800ba3c:	1e43      	subs	r3, r0, #1
 800ba3e:	42a1      	cmp	r1, r4
 800ba40:	d008      	beq.n	800ba54 <memmove+0x28>
 800ba42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba46:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba4a:	e7f8      	b.n	800ba3e <memmove+0x12>
 800ba4c:	4402      	add	r2, r0
 800ba4e:	4601      	mov	r1, r0
 800ba50:	428a      	cmp	r2, r1
 800ba52:	d100      	bne.n	800ba56 <memmove+0x2a>
 800ba54:	bd10      	pop	{r4, pc}
 800ba56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba5e:	e7f7      	b.n	800ba50 <memmove+0x24>

0800ba60 <_raise_r>:
 800ba60:	291f      	cmp	r1, #31
 800ba62:	b538      	push	{r3, r4, r5, lr}
 800ba64:	4605      	mov	r5, r0
 800ba66:	460c      	mov	r4, r1
 800ba68:	d904      	bls.n	800ba74 <_raise_r+0x14>
 800ba6a:	2316      	movs	r3, #22
 800ba6c:	6003      	str	r3, [r0, #0]
 800ba6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ba72:	bd38      	pop	{r3, r4, r5, pc}
 800ba74:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ba76:	b112      	cbz	r2, 800ba7e <_raise_r+0x1e>
 800ba78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba7c:	b94b      	cbnz	r3, 800ba92 <_raise_r+0x32>
 800ba7e:	4628      	mov	r0, r5
 800ba80:	f000 f852 	bl	800bb28 <_getpid_r>
 800ba84:	4622      	mov	r2, r4
 800ba86:	4601      	mov	r1, r0
 800ba88:	4628      	mov	r0, r5
 800ba8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba8e:	f000 b839 	b.w	800bb04 <_kill_r>
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d00a      	beq.n	800baac <_raise_r+0x4c>
 800ba96:	1c59      	adds	r1, r3, #1
 800ba98:	d103      	bne.n	800baa2 <_raise_r+0x42>
 800ba9a:	2316      	movs	r3, #22
 800ba9c:	6003      	str	r3, [r0, #0]
 800ba9e:	2001      	movs	r0, #1
 800baa0:	e7e7      	b.n	800ba72 <_raise_r+0x12>
 800baa2:	2100      	movs	r1, #0
 800baa4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800baa8:	4620      	mov	r0, r4
 800baaa:	4798      	blx	r3
 800baac:	2000      	movs	r0, #0
 800baae:	e7e0      	b.n	800ba72 <_raise_r+0x12>

0800bab0 <raise>:
 800bab0:	4b02      	ldr	r3, [pc, #8]	@ (800babc <raise+0xc>)
 800bab2:	4601      	mov	r1, r0
 800bab4:	6818      	ldr	r0, [r3, #0]
 800bab6:	f7ff bfd3 	b.w	800ba60 <_raise_r>
 800baba:	bf00      	nop
 800babc:	24000034 	.word	0x24000034

0800bac0 <_fstat_r>:
 800bac0:	b538      	push	{r3, r4, r5, lr}
 800bac2:	4d07      	ldr	r5, [pc, #28]	@ (800bae0 <_fstat_r+0x20>)
 800bac4:	2300      	movs	r3, #0
 800bac6:	4604      	mov	r4, r0
 800bac8:	4608      	mov	r0, r1
 800baca:	4611      	mov	r1, r2
 800bacc:	602b      	str	r3, [r5, #0]
 800bace:	f7f6 f8dd 	bl	8001c8c <_fstat>
 800bad2:	1c43      	adds	r3, r0, #1
 800bad4:	d102      	bne.n	800badc <_fstat_r+0x1c>
 800bad6:	682b      	ldr	r3, [r5, #0]
 800bad8:	b103      	cbz	r3, 800badc <_fstat_r+0x1c>
 800bada:	6023      	str	r3, [r4, #0]
 800badc:	bd38      	pop	{r3, r4, r5, pc}
 800bade:	bf00      	nop
 800bae0:	240024dc 	.word	0x240024dc

0800bae4 <_isatty_r>:
 800bae4:	b538      	push	{r3, r4, r5, lr}
 800bae6:	4d06      	ldr	r5, [pc, #24]	@ (800bb00 <_isatty_r+0x1c>)
 800bae8:	2300      	movs	r3, #0
 800baea:	4604      	mov	r4, r0
 800baec:	4608      	mov	r0, r1
 800baee:	602b      	str	r3, [r5, #0]
 800baf0:	f7f6 f8dc 	bl	8001cac <_isatty>
 800baf4:	1c43      	adds	r3, r0, #1
 800baf6:	d102      	bne.n	800bafe <_isatty_r+0x1a>
 800baf8:	682b      	ldr	r3, [r5, #0]
 800bafa:	b103      	cbz	r3, 800bafe <_isatty_r+0x1a>
 800bafc:	6023      	str	r3, [r4, #0]
 800bafe:	bd38      	pop	{r3, r4, r5, pc}
 800bb00:	240024dc 	.word	0x240024dc

0800bb04 <_kill_r>:
 800bb04:	b538      	push	{r3, r4, r5, lr}
 800bb06:	4d07      	ldr	r5, [pc, #28]	@ (800bb24 <_kill_r+0x20>)
 800bb08:	2300      	movs	r3, #0
 800bb0a:	4604      	mov	r4, r0
 800bb0c:	4608      	mov	r0, r1
 800bb0e:	4611      	mov	r1, r2
 800bb10:	602b      	str	r3, [r5, #0]
 800bb12:	f7f6 f85b 	bl	8001bcc <_kill>
 800bb16:	1c43      	adds	r3, r0, #1
 800bb18:	d102      	bne.n	800bb20 <_kill_r+0x1c>
 800bb1a:	682b      	ldr	r3, [r5, #0]
 800bb1c:	b103      	cbz	r3, 800bb20 <_kill_r+0x1c>
 800bb1e:	6023      	str	r3, [r4, #0]
 800bb20:	bd38      	pop	{r3, r4, r5, pc}
 800bb22:	bf00      	nop
 800bb24:	240024dc 	.word	0x240024dc

0800bb28 <_getpid_r>:
 800bb28:	f7f6 b848 	b.w	8001bbc <_getpid>

0800bb2c <_sbrk_r>:
 800bb2c:	b538      	push	{r3, r4, r5, lr}
 800bb2e:	4d06      	ldr	r5, [pc, #24]	@ (800bb48 <_sbrk_r+0x1c>)
 800bb30:	2300      	movs	r3, #0
 800bb32:	4604      	mov	r4, r0
 800bb34:	4608      	mov	r0, r1
 800bb36:	602b      	str	r3, [r5, #0]
 800bb38:	f7f6 f8d0 	bl	8001cdc <_sbrk>
 800bb3c:	1c43      	adds	r3, r0, #1
 800bb3e:	d102      	bne.n	800bb46 <_sbrk_r+0x1a>
 800bb40:	682b      	ldr	r3, [r5, #0]
 800bb42:	b103      	cbz	r3, 800bb46 <_sbrk_r+0x1a>
 800bb44:	6023      	str	r3, [r4, #0]
 800bb46:	bd38      	pop	{r3, r4, r5, pc}
 800bb48:	240024dc 	.word	0x240024dc

0800bb4c <_realloc_r>:
 800bb4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb50:	4607      	mov	r7, r0
 800bb52:	4614      	mov	r4, r2
 800bb54:	460d      	mov	r5, r1
 800bb56:	b921      	cbnz	r1, 800bb62 <_realloc_r+0x16>
 800bb58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb5c:	4611      	mov	r1, r2
 800bb5e:	f7ff b9a5 	b.w	800aeac <_malloc_r>
 800bb62:	b92a      	cbnz	r2, 800bb70 <_realloc_r+0x24>
 800bb64:	f7ff f936 	bl	800add4 <_free_r>
 800bb68:	4625      	mov	r5, r4
 800bb6a:	4628      	mov	r0, r5
 800bb6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb70:	f000 f81a 	bl	800bba8 <_malloc_usable_size_r>
 800bb74:	4284      	cmp	r4, r0
 800bb76:	4606      	mov	r6, r0
 800bb78:	d802      	bhi.n	800bb80 <_realloc_r+0x34>
 800bb7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bb7e:	d8f4      	bhi.n	800bb6a <_realloc_r+0x1e>
 800bb80:	4621      	mov	r1, r4
 800bb82:	4638      	mov	r0, r7
 800bb84:	f7ff f992 	bl	800aeac <_malloc_r>
 800bb88:	4680      	mov	r8, r0
 800bb8a:	b908      	cbnz	r0, 800bb90 <_realloc_r+0x44>
 800bb8c:	4645      	mov	r5, r8
 800bb8e:	e7ec      	b.n	800bb6a <_realloc_r+0x1e>
 800bb90:	42b4      	cmp	r4, r6
 800bb92:	4622      	mov	r2, r4
 800bb94:	4629      	mov	r1, r5
 800bb96:	bf28      	it	cs
 800bb98:	4632      	movcs	r2, r6
 800bb9a:	f7ff f906 	bl	800adaa <memcpy>
 800bb9e:	4629      	mov	r1, r5
 800bba0:	4638      	mov	r0, r7
 800bba2:	f7ff f917 	bl	800add4 <_free_r>
 800bba6:	e7f1      	b.n	800bb8c <_realloc_r+0x40>

0800bba8 <_malloc_usable_size_r>:
 800bba8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbac:	1f18      	subs	r0, r3, #4
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	bfbc      	itt	lt
 800bbb2:	580b      	ldrlt	r3, [r1, r0]
 800bbb4:	18c0      	addlt	r0, r0, r3
 800bbb6:	4770      	bx	lr

0800bbb8 <_init>:
 800bbb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbba:	bf00      	nop
 800bbbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbbe:	bc08      	pop	{r3}
 800bbc0:	469e      	mov	lr, r3
 800bbc2:	4770      	bx	lr

0800bbc4 <_fini>:
 800bbc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbc6:	bf00      	nop
 800bbc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbca:	bc08      	pop	{r3}
 800bbcc:	469e      	mov	lr, r3
 800bbce:	4770      	bx	lr
