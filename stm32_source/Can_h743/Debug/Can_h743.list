
Can_h743.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b918  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800bbb8  0800bbb8  0000cbb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c10c  0800c10c  0000d10c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c114  0800c114  0000d114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c118  0800c118  0000d118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000084  24000000  0800c11c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002464  24000084  0800c1a0  0000e084  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240024e8  0800c1a0  0000e4e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e084  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016d4b  00000000  00000000  0000e0b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002fef  00000000  00000000  00024dfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001068  00000000  00000000  00027df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000c93  00000000  00000000  00028e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003991a  00000000  00000000  00029aeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001809e  00000000  00000000  00063405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016472a  00000000  00000000  0007b4a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001dfbcd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004f9c  00000000  00000000  001dfc10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000049  00000000  00000000  001e4bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000084 	.word	0x24000084
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bba0 	.word	0x0800bba0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000088 	.word	0x24000088
 80002dc:	0800bba0 	.word	0x0800bba0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006c2:	4b0d      	ldr	r3, [pc, #52]	@ (80006f8 <MX_DMA_Init+0x3c>)
 80006c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006c8:	4a0b      	ldr	r2, [pc, #44]	@ (80006f8 <MX_DMA_Init+0x3c>)
 80006ca:	f043 0301 	orr.w	r3, r3, #1
 80006ce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80006d2:	4b09      	ldr	r3, [pc, #36]	@ (80006f8 <MX_DMA_Init+0x3c>)
 80006d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006d8:	f003 0301 	and.w	r3, r3, #1
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2100      	movs	r1, #0
 80006e4:	200b      	movs	r0, #11
 80006e6:	f001 ff3a 	bl	800255e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006ea:	200b      	movs	r0, #11
 80006ec:	f001 ff51 	bl	8002592 <HAL_NVIC_EnableIRQ>

}
 80006f0:	bf00      	nop
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	58024400 	.word	0x58024400

080006fc <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000700:	4b2e      	ldr	r3, [pc, #184]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 8000702:	4a2f      	ldr	r2, [pc, #188]	@ (80007c0 <MX_FDCAN1_Init+0xc4>)
 8000704:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000706:	4b2d      	ldr	r3, [pc, #180]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800070c:	4b2b      	ldr	r3, [pc, #172]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000712:	4b2a      	ldr	r3, [pc, #168]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 8000714:	2201      	movs	r2, #1
 8000716:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000718:	4b28      	ldr	r3, [pc, #160]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 800071a:	2200      	movs	r2, #0
 800071c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 800071e:	4b27      	ldr	r3, [pc, #156]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 8000720:	2201      	movs	r2, #1
 8000722:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 6;
 8000724:	4b25      	ldr	r3, [pc, #148]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 8000726:	2206      	movs	r2, #6
 8000728:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 4;
 800072a:	4b24      	ldr	r3, [pc, #144]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 800072c:	2204      	movs	r2, #4
 800072e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 8000730:	4b22      	ldr	r3, [pc, #136]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 8000732:	220e      	movs	r2, #14
 8000734:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8000736:	4b21      	ldr	r3, [pc, #132]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 8000738:	2205      	movs	r2, #5
 800073a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800073c:	4b1f      	ldr	r3, [pc, #124]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 800073e:	2201      	movs	r2, #1
 8000740:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000742:	4b1e      	ldr	r3, [pc, #120]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 8000744:	2201      	movs	r2, #1
 8000746:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000748:	4b1c      	ldr	r3, [pc, #112]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 800074a:	2201      	movs	r2, #1
 800074c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800074e:	4b1b      	ldr	r3, [pc, #108]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 8000750:	2201      	movs	r2, #1
 8000752:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000754:	4b19      	ldr	r3, [pc, #100]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 8000756:	2200      	movs	r2, #0
 8000758:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 2;
 800075a:	4b18      	ldr	r3, [pc, #96]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 800075c:	2202      	movs	r2, #2
 800075e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000760:	4b16      	ldr	r3, [pc, #88]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 8000762:	2200      	movs	r2, #0
 8000764:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8000766:	4b15      	ldr	r3, [pc, #84]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 8000768:	2220      	movs	r2, #32
 800076a:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800076c:	4b13      	ldr	r3, [pc, #76]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 800076e:	2204      	movs	r2, #4
 8000770:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000772:	4b12      	ldr	r3, [pc, #72]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 8000774:	2200      	movs	r2, #0
 8000776:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000778:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 800077a:	2204      	movs	r2, #4
 800077c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800077e:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 8000780:	2200      	movs	r2, #0
 8000782:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000784:	4b0d      	ldr	r3, [pc, #52]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 8000786:	2204      	movs	r2, #4
 8000788:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 1;
 800078a:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 800078c:	2201      	movs	r2, #1
 800078e:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000790:	4b0a      	ldr	r3, [pc, #40]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 8000792:	2200      	movs	r2, #0
 8000794:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8000796:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 8000798:	2220      	movs	r2, #32
 800079a:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800079c:	4b07      	ldr	r3, [pc, #28]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 800079e:	2200      	movs	r2, #0
 80007a0:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80007a2:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 80007a4:	2204      	movs	r2, #4
 80007a6:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80007a8:	4804      	ldr	r0, [pc, #16]	@ (80007bc <MX_FDCAN1_Init+0xc0>)
 80007aa:	f004 f86b 	bl	8004884 <HAL_FDCAN_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80007b4:	f001 f992 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	240000a0 	.word	0x240000a0
 80007c0:	4000a000 	.word	0x4000a000

080007c4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b0ba      	sub	sp, #232	@ 0xe8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007cc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007dc:	f107 0310 	add.w	r3, r7, #16
 80007e0:	22c0      	movs	r2, #192	@ 0xc0
 80007e2:	2100      	movs	r1, #0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f00a fa59 	bl	800ac9c <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a2b      	ldr	r2, [pc, #172]	@ (800089c <HAL_FDCAN_MspInit+0xd8>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d14f      	bne.n	8000894 <HAL_FDCAN_MspInit+0xd0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80007f4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000800:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000804:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000808:	f107 0310 	add.w	r3, r7, #16
 800080c:	4618      	mov	r0, r3
 800080e:	f006 fdc7 	bl	80073a0 <HAL_RCCEx_PeriphCLKConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000818:	f001 f960 	bl	8001adc <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800081c:	4b20      	ldr	r3, [pc, #128]	@ (80008a0 <HAL_FDCAN_MspInit+0xdc>)
 800081e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000822:	4a1f      	ldr	r2, [pc, #124]	@ (80008a0 <HAL_FDCAN_MspInit+0xdc>)
 8000824:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000828:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800082c:	4b1c      	ldr	r3, [pc, #112]	@ (80008a0 <HAL_FDCAN_MspInit+0xdc>)
 800082e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b19      	ldr	r3, [pc, #100]	@ (80008a0 <HAL_FDCAN_MspInit+0xdc>)
 800083c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000840:	4a17      	ldr	r2, [pc, #92]	@ (80008a0 <HAL_FDCAN_MspInit+0xdc>)
 8000842:	f043 0301 	orr.w	r3, r3, #1
 8000846:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800084a:	4b15      	ldr	r3, [pc, #84]	@ (80008a0 <HAL_FDCAN_MspInit+0xdc>)
 800084c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000850:	f003 0301 	and.w	r3, r3, #1
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000858:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800085c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000860:	2302      	movs	r3, #2
 8000862:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000872:	2309      	movs	r3, #9
 8000874:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000878:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800087c:	4619      	mov	r1, r3
 800087e:	4809      	ldr	r0, [pc, #36]	@ (80008a4 <HAL_FDCAN_MspInit+0xe0>)
 8000880:	f005 fab4 	bl	8005dec <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000884:	2200      	movs	r2, #0
 8000886:	2100      	movs	r1, #0
 8000888:	2013      	movs	r0, #19
 800088a:	f001 fe68 	bl	800255e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800088e:	2013      	movs	r0, #19
 8000890:	f001 fe7f 	bl	8002592 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000894:	bf00      	nop
 8000896:	37e8      	adds	r7, #232	@ 0xe8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	4000a000 	.word	0x4000a000
 80008a0:	58024400 	.word	0x58024400
 80008a4:	58020000 	.word	0x58020000

080008a8 <HAL_FDCAN_MspDeInit>:

void HAL_FDCAN_MspDeInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]

  if(fdcanHandle->Instance==FDCAN1)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a0b      	ldr	r2, [pc, #44]	@ (80008e4 <HAL_FDCAN_MspDeInit+0x3c>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d10f      	bne.n	80008da <HAL_FDCAN_MspDeInit+0x32>
  {
  /* USER CODE BEGIN FDCAN1_MspDeInit 0 */

  /* USER CODE END FDCAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_FDCAN_CLK_DISABLE();
 80008ba:	4b0b      	ldr	r3, [pc, #44]	@ (80008e8 <HAL_FDCAN_MspDeInit+0x40>)
 80008bc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80008c0:	4a09      	ldr	r2, [pc, #36]	@ (80008e8 <HAL_FDCAN_MspDeInit+0x40>)
 80008c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80008c6:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec

    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 80008ca:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80008ce:	4807      	ldr	r0, [pc, #28]	@ (80008ec <HAL_FDCAN_MspDeInit+0x44>)
 80008d0:	f005 fc3c 	bl	800614c <HAL_GPIO_DeInit>

    /* FDCAN1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(FDCAN1_IT0_IRQn);
 80008d4:	2013      	movs	r0, #19
 80008d6:	f001 fe6a 	bl	80025ae <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN FDCAN1_MspDeInit 1 */

  /* USER CODE END FDCAN1_MspDeInit 1 */
  }
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	4000a000 	.word	0x4000a000
 80008e8:	58024400 	.word	0x58024400
 80008ec:	58020000 	.word	0x58020000

080008f0 <sizeof_candl>:
/* USER CODE BEGIN 1 */
static IsoTpLink can1_link1 = {0, };
uint8_t can1_link1_recv[ISOTP_MAX_SIZE] = {0, };
uint8_t can1_link1_send[ISOTP_MAX_SIZE] = {0, };
int sizeof_candl(int can_size)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	if(can_size <= 8)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b08      	cmp	r3, #8
 80008fc:	dc01      	bgt.n	8000902 <sizeof_candl+0x12>
	{
		return can_size;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	e024      	b.n	800094c <sizeof_candl+0x5c>
	}
	else if(can_size == 12)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2b0c      	cmp	r3, #12
 8000906:	d101      	bne.n	800090c <sizeof_candl+0x1c>
	{
		return FDCAN_DLC_BYTES_12;
 8000908:	2309      	movs	r3, #9
 800090a:	e01f      	b.n	800094c <sizeof_candl+0x5c>
	}
	else if (can_size == 16)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2b10      	cmp	r3, #16
 8000910:	d101      	bne.n	8000916 <sizeof_candl+0x26>
	{
		return FDCAN_DLC_BYTES_16;
 8000912:	230a      	movs	r3, #10
 8000914:	e01a      	b.n	800094c <sizeof_candl+0x5c>
	}
	else if (can_size == 20)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2b14      	cmp	r3, #20
 800091a:	d101      	bne.n	8000920 <sizeof_candl+0x30>
	{
		return FDCAN_DLC_BYTES_20;
 800091c:	230b      	movs	r3, #11
 800091e:	e015      	b.n	800094c <sizeof_candl+0x5c>
	}
	else if (can_size == 24)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2b18      	cmp	r3, #24
 8000924:	d101      	bne.n	800092a <sizeof_candl+0x3a>
	{
		return FDCAN_DLC_BYTES_24;
 8000926:	230c      	movs	r3, #12
 8000928:	e010      	b.n	800094c <sizeof_candl+0x5c>
	}
	else if (can_size == 32)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2b20      	cmp	r3, #32
 800092e:	d101      	bne.n	8000934 <sizeof_candl+0x44>
	{
		return FDCAN_DLC_BYTES_32;
 8000930:	230d      	movs	r3, #13
 8000932:	e00b      	b.n	800094c <sizeof_candl+0x5c>
	}
	else if (can_size == 48)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2b30      	cmp	r3, #48	@ 0x30
 8000938:	d101      	bne.n	800093e <sizeof_candl+0x4e>
	{
		return FDCAN_DLC_BYTES_48;
 800093a:	230e      	movs	r3, #14
 800093c:	e006      	b.n	800094c <sizeof_candl+0x5c>
	}
	else if (can_size == 64)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2b40      	cmp	r3, #64	@ 0x40
 8000942:	d101      	bne.n	8000948 <sizeof_candl+0x58>
	{
		return FDCAN_DLC_BYTES_64;
 8000944:	230f      	movs	r3, #15
 8000946:	e001      	b.n	800094c <sizeof_candl+0x5c>
	}

	return -1;
 8000948:	f04f 33ff 	mov.w	r3, #4294967295
}
 800094c:	4618      	mov	r0, r3
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <sizeof_can>:

int sizeof_can(int can_size)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	switch(can_size)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3b04      	subs	r3, #4
 8000964:	2b0e      	cmp	r3, #14
 8000966:	d831      	bhi.n	80009cc <sizeof_can+0x74>
 8000968:	a201      	add	r2, pc, #4	@ (adr r2, 8000970 <sizeof_can+0x18>)
 800096a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800096e:	bf00      	nop
 8000970:	080009ad 	.word	0x080009ad
 8000974:	080009b1 	.word	0x080009b1
 8000978:	080009b5 	.word	0x080009b5
 800097c:	080009b9 	.word	0x080009b9
 8000980:	080009bd 	.word	0x080009bd
 8000984:	080009cd 	.word	0x080009cd
 8000988:	080009c1 	.word	0x080009c1
 800098c:	080009cd 	.word	0x080009cd
 8000990:	080009cd 	.word	0x080009cd
 8000994:	080009cd 	.word	0x080009cd
 8000998:	080009c5 	.word	0x080009c5
 800099c:	080009cd 	.word	0x080009cd
 80009a0:	080009cd 	.word	0x080009cd
 80009a4:	080009cd 	.word	0x080009cd
 80009a8:	080009c9 	.word	0x080009c9
	{
	case FDCAN_DATA_BYTES_8:
		return 8;
 80009ac:	2308      	movs	r3, #8
 80009ae:	e00f      	b.n	80009d0 <sizeof_can+0x78>
	case FDCAN_DATA_BYTES_12:
		return 12;
 80009b0:	230c      	movs	r3, #12
 80009b2:	e00d      	b.n	80009d0 <sizeof_can+0x78>
	case FDCAN_DATA_BYTES_16:
		return 16;
 80009b4:	2310      	movs	r3, #16
 80009b6:	e00b      	b.n	80009d0 <sizeof_can+0x78>
	case FDCAN_DATA_BYTES_20:
		return 20;
 80009b8:	2314      	movs	r3, #20
 80009ba:	e009      	b.n	80009d0 <sizeof_can+0x78>
	case FDCAN_DATA_BYTES_24:
		return 24;
 80009bc:	2318      	movs	r3, #24
 80009be:	e007      	b.n	80009d0 <sizeof_can+0x78>
	case FDCAN_DATA_BYTES_32:
		return 32;
 80009c0:	2320      	movs	r3, #32
 80009c2:	e005      	b.n	80009d0 <sizeof_can+0x78>
	case FDCAN_DATA_BYTES_48:
		return 48;
 80009c4:	2330      	movs	r3, #48	@ 0x30
 80009c6:	e003      	b.n	80009d0 <sizeof_can+0x78>
	case FDCAN_DATA_BYTES_64:
		return 64;
 80009c8:	2340      	movs	r3, #64	@ 0x40
 80009ca:	e001      	b.n	80009d0 <sizeof_can+0x78>
	default:
		return -1;
 80009cc:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <can1_init>:

void can1_init()
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	@ 0x28
 80009e0:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef can1_filter = {0, };
 80009e2:	463b      	mov	r3, r7
 80009e4:	2220      	movs	r2, #32
 80009e6:	2100      	movs	r1, #0
 80009e8:	4618      	mov	r0, r3
 80009ea:	f00a f957 	bl	800ac9c <memset>

	can1_filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80009ee:	2301      	movs	r3, #1
 80009f0:	60fb      	str	r3, [r7, #12]
	can1_filter.FilterID1 = 0x01;
 80009f2:	2301      	movs	r3, #1
 80009f4:	613b      	str	r3, [r7, #16]
	can1_filter.FilterID2 = 0x02;
 80009f6:	2302      	movs	r3, #2
 80009f8:	617b      	str	r3, [r7, #20]
	can1_filter.FilterIndex = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
	can1_filter.FilterType = FDCAN_FILTER_RANGE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60bb      	str	r3, [r7, #8]
	can1_filter.IdType = FDCAN_STANDARD_ID;
 8000a02:	2300      	movs	r3, #0
 8000a04:	603b      	str	r3, [r7, #0]
	can1_filter.IsCalibrationMsg = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
	can1_filter.RxBufferIndex = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61bb      	str	r3, [r7, #24]

	if(HAL_FDCAN_ConfigFilter(&hfdcan1, &can1_filter) != HAL_OK)
 8000a0e:	463b      	mov	r3, r7
 8000a10:	4619      	mov	r1, r3
 8000a12:	4822      	ldr	r0, [pc, #136]	@ (8000a9c <can1_init+0xc0>)
 8000a14:	f004 f938 	bl	8004c88 <HAL_FDCAN_ConfigFilter>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d004      	beq.n	8000a28 <can1_init+0x4c>
	{
		printr("fail to configure filter in can 1");
 8000a1e:	4820      	ldr	r0, [pc, #128]	@ (8000aa0 <can1_init+0xc4>)
 8000a20:	f009 fffe 	bl	800aa20 <puts>
		Error_Handler();
 8000a24:	f001 f85a 	bl	8001adc <Error_Handler>
	}

	if(HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 8000a28:	2300      	movs	r3, #0
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	2202      	movs	r2, #2
 8000a30:	2102      	movs	r1, #2
 8000a32:	481a      	ldr	r0, [pc, #104]	@ (8000a9c <can1_init+0xc0>)
 8000a34:	f004 f99e 	bl	8004d74 <HAL_FDCAN_ConfigGlobalFilter>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d004      	beq.n	8000a48 <can1_init+0x6c>
	{
		printr("fail to configure global filter in can 1");
 8000a3e:	4819      	ldr	r0, [pc, #100]	@ (8000aa4 <can1_init+0xc8>)
 8000a40:	f009 ffee 	bl	800aa20 <puts>
		Error_Handler();
 8000a44:	f001 f84a 	bl	8001adc <Error_Handler>
	}

	if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_BUS_OFF, 0) != HAL_OK)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8000a4e:	4813      	ldr	r0, [pc, #76]	@ (8000a9c <can1_init+0xc0>)
 8000a50:	f004 fc44 	bl	80052dc <HAL_FDCAN_ActivateNotification>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d004      	beq.n	8000a64 <can1_init+0x88>
	{
		printr("fail to activate Notification");
 8000a5a:	4813      	ldr	r0, [pc, #76]	@ (8000aa8 <can1_init+0xcc>)
 8000a5c:	f009 ffe0 	bl	800aa20 <puts>
		Error_Handler();
 8000a60:	f001 f83c 	bl	8001adc <Error_Handler>
	}

	if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8000a64:	480d      	ldr	r0, [pc, #52]	@ (8000a9c <can1_init+0xc0>)
 8000a66:	f004 f9b2 	bl	8004dce <HAL_FDCAN_Start>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d004      	beq.n	8000a7a <can1_init+0x9e>
	{
		printr("fail to start in can 1");
 8000a70:	480e      	ldr	r0, [pc, #56]	@ (8000aac <can1_init+0xd0>)
 8000a72:	f009 ffd5 	bl	800aa20 <puts>
		Error_Handler();
 8000a76:	f001 f831 	bl	8001adc <Error_Handler>
	}

	isotp_init_link(&can1_link1, ISOTP_ID, can1_link1_send, sizeof(can1_link1_send), can1_link1_recv, sizeof(can1_link1_recv));
 8000a7a:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000a7e:	9301      	str	r3, [sp, #4]
 8000a80:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab0 <can1_init+0xd4>)
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000a88:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab4 <can1_init+0xd8>)
 8000a8a:	2103      	movs	r1, #3
 8000a8c:	480a      	ldr	r0, [pc, #40]	@ (8000ab8 <can1_init+0xdc>)
 8000a8e:	f000 fe61 	bl	8001754 <isotp_init_link>
}
 8000a92:	bf00      	nop
 8000a94:	3720      	adds	r7, #32
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	240000a0 	.word	0x240000a0
 8000aa0:	0800bbb8 	.word	0x0800bbb8
 8000aa4:	0800bbec 	.word	0x0800bbec
 8000aa8:	0800bc24 	.word	0x0800bc24
 8000aac:	0800bc54 	.word	0x0800bc54
 8000ab0:	24000180 	.word	0x24000180
 8000ab4:	24001180 	.word	0x24001180
 8000ab8:	24000140 	.word	0x24000140

08000abc <HAL_FDCAN_ErrorStatusCallback>:

void  HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
	if ((ErrorStatusITs & FDCAN_IE_BOE) != 0) /* If Bus-Off error occured */
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d007      	beq.n	8000ae0 <HAL_FDCAN_ErrorStatusCallback+0x24>
	{
		hfdcan->Instance->CCCR &= FDCAN_CCCR_INIT; /* set fdcan init */
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	699a      	ldr	r2, [r3, #24]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f002 0201 	and.w	r2, r2, #1
 8000ade:	619a      	str	r2, [r3, #24]
	}
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <can1_recv>:

static int can1_recv(uint8_t *buf, uint32_t buf_size, uint16_t *id)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08e      	sub	sp, #56	@ 0x38
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
	FDCAN_RxHeaderTypeDef can1_rx = {0, };
 8000af8:	f107 0310 	add.w	r3, r7, #16
 8000afc:	2228      	movs	r2, #40	@ 0x28
 8000afe:	2100      	movs	r1, #0
 8000b00:	4618      	mov	r0, r3
 8000b02:	f00a f8cb 	bl	800ac9c <memset>

	if(buf_size != sizeof_can(hfdcan1.Init.RxFifo0ElmtSize))
 8000b06:	4b1f      	ldr	r3, [pc, #124]	@ (8000b84 <can1_recv+0x98>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff ff24 	bl	8000958 <sizeof_can>
 8000b10:	4602      	mov	r2, r0
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d00c      	beq.n	8000b32 <can1_recv+0x46>
	{
		printr("element size is not equal to %d", sizeof_can(hfdcan1.Init.RxFifo0ElmtSize));
 8000b18:	4b1a      	ldr	r3, [pc, #104]	@ (8000b84 <can1_recv+0x98>)
 8000b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff ff1b 	bl	8000958 <sizeof_can>
 8000b22:	4603      	mov	r3, r0
 8000b24:	4619      	mov	r1, r3
 8000b26:	4818      	ldr	r0, [pc, #96]	@ (8000b88 <can1_recv+0x9c>)
 8000b28:	f009 ff12 	bl	800a950 <iprintf>
		return -1;
 8000b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b30:	e023      	b.n	8000b7a <can1_recv+0x8e>
	}

	if(HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO0) <= 0)
 8000b32:	2140      	movs	r1, #64	@ 0x40
 8000b34:	4813      	ldr	r0, [pc, #76]	@ (8000b84 <can1_recv+0x98>)
 8000b36:	f004 fbb3 	bl	80052a0 <HAL_FDCAN_GetRxFifoFillLevel>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d102      	bne.n	8000b46 <can1_recv+0x5a>
	{
		return -1;
 8000b40:	f04f 33ff 	mov.w	r3, #4294967295
 8000b44:	e019      	b.n	8000b7a <can1_recv+0x8e>
	}

	if(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &can1_rx, buf) != HAL_OK)
 8000b46:	f107 0210 	add.w	r2, r7, #16
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	2140      	movs	r1, #64	@ 0x40
 8000b4e:	480d      	ldr	r0, [pc, #52]	@ (8000b84 <can1_recv+0x98>)
 8000b50:	f004 fa3a 	bl	8004fc8 <HAL_FDCAN_GetRxMessage>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d005      	beq.n	8000b66 <can1_recv+0x7a>
	{
		printr("can 1 get rx message fail");
 8000b5a:	480c      	ldr	r0, [pc, #48]	@ (8000b8c <can1_recv+0xa0>)
 8000b5c:	f009 ff60 	bl	800aa20 <puts>
		return -1;
 8000b60:	f04f 33ff 	mov.w	r3, #4294967295
 8000b64:	e009      	b.n	8000b7a <can1_recv+0x8e>
	}

	*id = can1_rx.Identifier;
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	b29a      	uxth	r2, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	801a      	strh	r2, [r3, #0]
	return sizeof_can(hfdcan1.Init.RxFifo0ElmtSize);
 8000b6e:	4b05      	ldr	r3, [pc, #20]	@ (8000b84 <can1_recv+0x98>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff fef0 	bl	8000958 <sizeof_can>
 8000b78:	4603      	mov	r3, r0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3738      	adds	r7, #56	@ 0x38
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	240000a0 	.word	0x240000a0
 8000b88:	0800bc7c 	.word	0x0800bc7c
 8000b8c:	0800bcac 	.word	0x0800bcac

08000b90 <can1_send>:

int can1_send(uint8_t *buf, uint32_t buf_size, int send_id)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08e      	sub	sp, #56	@ 0x38
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
	FDCAN_TxHeaderTypeDef can1_tx = {0, };
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	2224      	movs	r2, #36	@ 0x24
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f00a f879 	bl	800ac9c <memset>

	if(buf_size != sizeof_can(hfdcan1.Init.TxElmtSize))
 8000baa:	4b23      	ldr	r3, [pc, #140]	@ (8000c38 <can1_send+0xa8>)
 8000bac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fed2 	bl	8000958 <sizeof_can>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d00c      	beq.n	8000bd6 <can1_send+0x46>
	{
		printr("element size is not equal to %d", sizeof_can(hfdcan1.Init.RxFifo0ElmtSize));
 8000bbc:	4b1e      	ldr	r3, [pc, #120]	@ (8000c38 <can1_send+0xa8>)
 8000bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fec9 	bl	8000958 <sizeof_can>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	4619      	mov	r1, r3
 8000bca:	481c      	ldr	r0, [pc, #112]	@ (8000c3c <can1_send+0xac>)
 8000bcc:	f009 fec0 	bl	800a950 <iprintf>
		return -1;
 8000bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd4:	e02c      	b.n	8000c30 <can1_send+0xa0>
	}

	can1_tx.BitRateSwitch = FDCAN_BRS_OFF;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
	can1_tx.DataLength = sizeof_candl(buf_size);
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff fe87 	bl	80008f0 <sizeof_candl>
 8000be2:	4603      	mov	r3, r0
 8000be4:	623b      	str	r3, [r7, #32]
	can1_tx.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	627b      	str	r3, [r7, #36]	@ 0x24
	can1_tx.FDFormat = FDCAN_CLASSIC_CAN;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	can1_tx.IdType = FDCAN_STANDARD_ID;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61bb      	str	r3, [r7, #24]
	can1_tx.Identifier = send_id;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	617b      	str	r3, [r7, #20]
	can1_tx.MessageMarker = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	637b      	str	r3, [r7, #52]	@ 0x34
	can1_tx.TxEventFifoControl = FDCAN_STORE_TX_EVENTS;
 8000bfa:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8000bfe:	633b      	str	r3, [r7, #48]	@ 0x30
	can1_tx.TxFrameType = FDCAN_DATA_FRAME;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]

	if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &can1_tx, buf) != HAL_OK)
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	68fa      	ldr	r2, [r7, #12]
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	480a      	ldr	r0, [pc, #40]	@ (8000c38 <can1_send+0xa8>)
 8000c0e:	f004 f980 	bl	8004f12 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d005      	beq.n	8000c24 <can1_send+0x94>
	{
		printr("fail to can 1 add message to tx fifioq");
 8000c18:	4809      	ldr	r0, [pc, #36]	@ (8000c40 <can1_send+0xb0>)
 8000c1a:	f009 ff01 	bl	800aa20 <puts>
		return -1;
 8000c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c22:	e005      	b.n	8000c30 <can1_send+0xa0>
	}

	return sizeof_can(hfdcan1.Init.RxFifo0ElmtSize);
 8000c24:	4b04      	ldr	r3, [pc, #16]	@ (8000c38 <can1_send+0xa8>)
 8000c26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fe95 	bl	8000958 <sizeof_can>
 8000c2e:	4603      	mov	r3, r0
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3738      	adds	r7, #56	@ 0x38
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	240000a0 	.word	0x240000a0
 8000c3c:	0800bc7c 	.word	0x0800bc7c
 8000c40:	0800bcd8 	.word	0x0800bcd8

08000c44 <can1_work>:

void can1_work()
{
 8000c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c46:	f5ad 5d00 	sub.w	sp, sp, #8192	@ 0x2000
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
	uint8_t recv[CLASSIC_CAN_SIZE] = {0, };
 8000c4e:	f242 0304 	movw	r3, #8196	@ 0x2004
 8000c52:	443b      	add	r3, r7
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
	uint8_t can1_isotp_recv1[ISOTP_MAX_SIZE] = {0, };
 8000c5a:	f241 0310 	movw	r3, #4112	@ 0x1010
 8000c5e:	443b      	add	r3, r7
 8000c60:	3b0c      	subs	r3, #12
 8000c62:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f00a f817 	bl	800ac9c <memset>
	uint8_t can1_isotp_send1[ISOTP_MAX_SIZE] = "hellow world! this is isotp can 1 send data.";
 8000c6e:	f107 0310 	add.w	r3, r7, #16
 8000c72:	469c      	mov	ip, r3
 8000c74:	4b6c      	ldr	r3, [pc, #432]	@ (8000e28 <can1_work+0x1e4>)
 8000c76:	461c      	mov	r4, r3
 8000c78:	f1ac 060c 	sub.w	r6, ip, #12
 8000c7c:	f104 0e20 	add.w	lr, r4, #32
 8000c80:	4635      	mov	r5, r6
 8000c82:	4623      	mov	r3, r4
 8000c84:	6818      	ldr	r0, [r3, #0]
 8000c86:	6859      	ldr	r1, [r3, #4]
 8000c88:	689a      	ldr	r2, [r3, #8]
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c8e:	3410      	adds	r4, #16
 8000c90:	3610      	adds	r6, #16
 8000c92:	4574      	cmp	r4, lr
 8000c94:	d1f4      	bne.n	8000c80 <can1_work+0x3c>
 8000c96:	4633      	mov	r3, r6
 8000c98:	6820      	ldr	r0, [r4, #0]
 8000c9a:	6861      	ldr	r1, [r4, #4]
 8000c9c:	68a2      	ldr	r2, [r4, #8]
 8000c9e:	c307      	stmia	r3!, {r0, r1, r2}
 8000ca0:	7b22      	ldrb	r2, [r4, #12]
 8000ca2:	701a      	strb	r2, [r3, #0]
 8000ca4:	f10c 0321 	add.w	r3, ip, #33	@ 0x21
 8000ca8:	f640 72d2 	movw	r2, #4050	@ 0xfd2
 8000cac:	2100      	movs	r1, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f009 fff4 	bl	800ac9c <memset>
	uint16_t id = 0;
 8000cb4:	f107 0310 	add.w	r3, r7, #16
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f823 2c0e 	strh.w	r2, [r3, #-14]
	uint16_t out_size = 0;
 8000cbe:	f107 0310 	add.w	r3, r7, #16
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f823 2c10 	strh.w	r2, [r3, #-16]
	int ret = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	f242 020c 	movw	r2, #8204	@ 0x200c
 8000cce:	443a      	add	r2, r7
 8000cd0:	6013      	str	r3, [r2, #0]
	{
		.timer = 0,
		.condition = 100
	};

	if((hfdcan1.Instance->CCCR & FDCAN_CCCR_INIT_Msk) == FDCAN_CCCR_INIT && init_flag == 0)
 8000cd2:	4b56      	ldr	r3, [pc, #344]	@ (8000e2c <can1_work+0x1e8>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d106      	bne.n	8000cee <can1_work+0xaa>
 8000ce0:	4b53      	ldr	r3, [pc, #332]	@ (8000e30 <can1_work+0x1ec>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d102      	bne.n	8000cee <can1_work+0xaa>
	{
		/* reset init */
		init_flag = 1;
 8000ce8:	4b51      	ldr	r3, [pc, #324]	@ (8000e30 <can1_work+0x1ec>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	601a      	str	r2, [r3, #0]
	}

	if(init_flag == 1)
 8000cee:	4b50      	ldr	r3, [pc, #320]	@ (8000e30 <can1_work+0x1ec>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d10e      	bne.n	8000d14 <can1_work+0xd0>
	{
		HAL_FDCAN_DeInit(&hfdcan1);
 8000cf6:	484d      	ldr	r0, [pc, #308]	@ (8000e2c <can1_work+0x1e8>)
 8000cf8:	f003 ffa2 	bl	8004c40 <HAL_FDCAN_DeInit>
		HAL_FDCAN_Init(&hfdcan1);
 8000cfc:	484b      	ldr	r0, [pc, #300]	@ (8000e2c <can1_work+0x1e8>)
 8000cfe:	f003 fdc1 	bl	8004884 <HAL_FDCAN_Init>
		reset_timer.timer = HAL_GetTick();
 8000d02:	f001 fb15 	bl	8002330 <HAL_GetTick>
 8000d06:	4603      	mov	r3, r0
 8000d08:	4a4a      	ldr	r2, [pc, #296]	@ (8000e34 <can1_work+0x1f0>)
 8000d0a:	6013      	str	r3, [r2, #0]
		init_flag = 2;
 8000d0c:	4b48      	ldr	r3, [pc, #288]	@ (8000e30 <can1_work+0x1ec>)
 8000d0e:	2202      	movs	r2, #2
 8000d10:	601a      	str	r2, [r3, #0]
		return;
 8000d12:	e083      	b.n	8000e1c <can1_work+0x1d8>
	}

	else if(init_flag == 2)
 8000d14:	4b46      	ldr	r3, [pc, #280]	@ (8000e30 <can1_work+0x1ec>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d10f      	bne.n	8000d3c <can1_work+0xf8>
	{
		check_timer(&reset_timer)
 8000d1c:	f001 fb08 	bl	8002330 <HAL_GetTick>
 8000d20:	4602      	mov	r2, r0
 8000d22:	4b44      	ldr	r3, [pc, #272]	@ (8000e34 <can1_work+0x1f0>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	1ad2      	subs	r2, r2, r3
 8000d28:	4b42      	ldr	r3, [pc, #264]	@ (8000e34 <can1_work+0x1f0>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d974      	bls.n	8000e1a <can1_work+0x1d6>
		{
			can1_init();
 8000d30:	f7ff fe54 	bl	80009dc <can1_init>
			init_flag = 0;
 8000d34:	4b3e      	ldr	r3, [pc, #248]	@ (8000e30 <can1_work+0x1ec>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
		}
		return;
 8000d3a:	e06e      	b.n	8000e1a <can1_work+0x1d6>
	}

	if ((ret = can1_recv(recv, sizeof(recv), &id)) > 0)
 8000d3c:	4b3e      	ldr	r3, [pc, #248]	@ (8000e38 <can1_work+0x1f4>)
 8000d3e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000d42:	f103 0310 	add.w	r3, r3, #16
 8000d46:	443b      	add	r3, r7
 8000d48:	f242 0004 	movw	r0, #8196	@ 0x2004
 8000d4c:	4438      	add	r0, r7
 8000d4e:	461a      	mov	r2, r3
 8000d50:	2108      	movs	r1, #8
 8000d52:	f7ff fecb 	bl	8000aec <can1_recv>
 8000d56:	f242 030c 	movw	r3, #8204	@ 0x200c
 8000d5a:	443b      	add	r3, r7
 8000d5c:	6018      	str	r0, [r3, #0]
 8000d5e:	f242 030c 	movw	r3, #8204	@ 0x200c
 8000d62:	443b      	add	r3, r7
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	dd0b      	ble.n	8000d82 <can1_work+0x13e>
	{
		isotp_on_can_message(&can1_link1, recv, ret);
 8000d6a:	f242 030c 	movw	r3, #8204	@ 0x200c
 8000d6e:	443b      	add	r3, r7
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	f242 0304 	movw	r3, #8196	@ 0x2004
 8000d78:	443b      	add	r3, r7
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	482f      	ldr	r0, [pc, #188]	@ (8000e3c <can1_work+0x1f8>)
 8000d7e:	f000 fb6b 	bl	8001458 <isotp_on_can_message>
	}
	isotp_poll(&can1_link1);
 8000d82:	482e      	ldr	r0, [pc, #184]	@ (8000e3c <can1_work+0x1f8>)
 8000d84:	f000 fd0d 	bl	80017a2 <isotp_poll>
	ret = isotp_receive(&can1_link1, can1_isotp_recv1, sizeof(can1_isotp_recv1), &out_size);
 8000d88:	4b2d      	ldr	r3, [pc, #180]	@ (8000e40 <can1_work+0x1fc>)
 8000d8a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000d8e:	f103 0310 	add.w	r3, r3, #16
 8000d92:	443b      	add	r3, r7
 8000d94:	492b      	ldr	r1, [pc, #172]	@ (8000e44 <can1_work+0x200>)
 8000d96:	f242 0210 	movw	r2, #8208	@ 0x2010
 8000d9a:	440a      	add	r2, r1
 8000d9c:	19d1      	adds	r1, r2, r7
 8000d9e:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000da2:	4826      	ldr	r0, [pc, #152]	@ (8000e3c <can1_work+0x1f8>)
 8000da4:	f000 fcaa 	bl	80016fc <isotp_receive>
 8000da8:	f242 030c 	movw	r3, #8204	@ 0x200c
 8000dac:	443b      	add	r3, r7
 8000dae:	6018      	str	r0, [r3, #0]
	if (ISOTP_RET_OK == ret)
 8000db0:	f242 030c 	movw	r3, #8204	@ 0x200c
 8000db4:	443b      	add	r3, r7
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d109      	bne.n	8000dd0 <can1_work+0x18c>
	{
		printb("can 1 recv : %s", can1_isotp_recv1);
 8000dbc:	4b21      	ldr	r3, [pc, #132]	@ (8000e44 <can1_work+0x200>)
 8000dbe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000dc2:	f103 0310 	add.w	r3, r3, #16
 8000dc6:	443b      	add	r3, r7
 8000dc8:	4619      	mov	r1, r3
 8000dca:	481f      	ldr	r0, [pc, #124]	@ (8000e48 <can1_work+0x204>)
 8000dcc:	f009 fdc0 	bl	800a950 <iprintf>
	}

	check_timer(&user_timer)
 8000dd0:	f001 faae 	bl	8002330 <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e4c <can1_work+0x208>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	1ad2      	subs	r2, r2, r3
 8000ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8000e4c <can1_work+0x208>)
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d91b      	bls.n	8000e1c <can1_work+0x1d8>
	{
		user_timer.timer = HAL_GetTick();
 8000de4:	f001 faa4 	bl	8002330 <HAL_GetTick>
 8000de8:	4603      	mov	r3, r0
 8000dea:	4a18      	ldr	r2, [pc, #96]	@ (8000e4c <can1_work+0x208>)
 8000dec:	6013      	str	r3, [r2, #0]
		isotp_send(&can1_link1, can1_isotp_send1, strlen((char *)can1_isotp_send1));
 8000dee:	4b18      	ldr	r3, [pc, #96]	@ (8000e50 <can1_work+0x20c>)
 8000df0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000df4:	f103 0310 	add.w	r3, r3, #16
 8000df8:	443b      	add	r3, r7
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fa70 	bl	80002e0 <strlen>
 8000e00:	4603      	mov	r3, r0
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	4b12      	ldr	r3, [pc, #72]	@ (8000e50 <can1_work+0x20c>)
 8000e06:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000e0a:	f103 0310 	add.w	r3, r3, #16
 8000e0e:	443b      	add	r3, r7
 8000e10:	4619      	mov	r1, r3
 8000e12:	480a      	ldr	r0, [pc, #40]	@ (8000e3c <can1_work+0x1f8>)
 8000e14:	f000 fa92 	bl	800133c <isotp_send>
 8000e18:	e000      	b.n	8000e1c <can1_work+0x1d8>
		return;
 8000e1a:	bf00      	nop
	}
}
 8000e1c:	f507 5700 	add.w	r7, r7, #8192	@ 0x2000
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e26:	bf00      	nop
 8000e28:	0800bd34 	.word	0x0800bd34
 8000e2c:	240000a0 	.word	0x240000a0
 8000e30:	24002180 	.word	0x24002180
 8000e34:	24000000 	.word	0x24000000
 8000e38:	ffffdff2 	.word	0xffffdff2
 8000e3c:	24000140 	.word	0x24000140
 8000e40:	ffffdff0 	.word	0xffffdff0
 8000e44:	ffffeff4 	.word	0xffffeff4
 8000e48:	0800bd10 	.word	0x0800bd10
 8000e4c:	24000008 	.word	0x24000008
 8000e50:	ffffdff4 	.word	0xffffdff4

08000e54 <MX_GPIO_Init>:
/** Configure pins
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e84 <MX_GPIO_Init+0x30>)
 8000e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e60:	4a08      	ldr	r2, [pc, #32]	@ (8000e84 <MX_GPIO_Init+0x30>)
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e6a:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <MX_GPIO_Init+0x30>)
 8000e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	687b      	ldr	r3, [r7, #4]

}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	58024400 	.word	0x58024400

08000e88 <isotp_ms_to_st_min>:
///////////////////////////////////////////////////////
///                 STATIC FUNCTIONS                ///
///////////////////////////////////////////////////////

/* st_min to microsecond */
static uint8_t isotp_ms_to_st_min(uint8_t ms) {
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
    uint8_t st_min;

    st_min = ms;
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	73fb      	strb	r3, [r7, #15]
    if (st_min > 0x7F) {
 8000e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	da01      	bge.n	8000ea2 <isotp_ms_to_st_min+0x1a>
        st_min = 0x7F;
 8000e9e:	237f      	movs	r3, #127	@ 0x7f
 8000ea0:	73fb      	strb	r3, [r7, #15]
    }

    return st_min;
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <isotp_st_min_to_ms>:

/* st_min to msec  */
static uint8_t isotp_st_min_to_ms(uint8_t st_min) {
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
    uint8_t ms;

    if (st_min >= 0xF1 && st_min <= 0xF9) {
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	2bf0      	cmp	r3, #240	@ 0xf0
 8000ebe:	d905      	bls.n	8000ecc <isotp_st_min_to_ms+0x1c>
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	2bf9      	cmp	r3, #249	@ 0xf9
 8000ec4:	d802      	bhi.n	8000ecc <isotp_st_min_to_ms+0x1c>
        ms = 1;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	73fb      	strb	r3, [r7, #15]
 8000eca:	e008      	b.n	8000ede <isotp_st_min_to_ms+0x2e>
    } else if (st_min <= 0x7F) {
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	db02      	blt.n	8000eda <isotp_st_min_to_ms+0x2a>
        ms = st_min;
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	73fb      	strb	r3, [r7, #15]
 8000ed8:	e001      	b.n	8000ede <isotp_st_min_to_ms+0x2e>
    } else {
        ms = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	73fb      	strb	r3, [r7, #15]
    }

    return ms;
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <isotp_send_flow_control>:

static int isotp_send_flow_control(IsoTpLink* link, uint8_t flow_status, uint8_t block_size, uint8_t st_min_ms) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	4608      	mov	r0, r1
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4603      	mov	r3, r0
 8000efc:	70fb      	strb	r3, [r7, #3]
 8000efe:	460b      	mov	r3, r1
 8000f00:	70bb      	strb	r3, [r7, #2]
 8000f02:	4613      	mov	r3, r2
 8000f04:	707b      	strb	r3, [r7, #1]

    IsoTpCanMessage message;
    int ret;

    /* setup message  */
    message.as.flow_control.type = ISOTP_PCI_TYPE_FLOW_CONTROL_FRAME;
 8000f06:	7b3b      	ldrb	r3, [r7, #12]
 8000f08:	2203      	movs	r2, #3
 8000f0a:	f362 1307 	bfi	r3, r2, #4, #4
 8000f0e:	733b      	strb	r3, [r7, #12]
    message.as.flow_control.FS = flow_status;
 8000f10:	78fb      	ldrb	r3, [r7, #3]
 8000f12:	f003 030f 	and.w	r3, r3, #15
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	7b3b      	ldrb	r3, [r7, #12]
 8000f1a:	f362 0303 	bfi	r3, r2, #0, #4
 8000f1e:	733b      	strb	r3, [r7, #12]
    message.as.flow_control.BS = block_size;
 8000f20:	78bb      	ldrb	r3, [r7, #2]
 8000f22:	737b      	strb	r3, [r7, #13]
    message.as.flow_control.STmin = isotp_ms_to_st_min(st_min_ms);
 8000f24:	787b      	ldrb	r3, [r7, #1]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff ffae 	bl	8000e88 <isotp_ms_to_st_min>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	73bb      	strb	r3, [r7, #14]

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void) memset(message.as.flow_control.reserve, 0, sizeof(message.as.flow_control.reserve));
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	3303      	adds	r3, #3
 8000f36:	2205      	movs	r2, #5
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f009 feae 	bl	800ac9c <memset>
    ret = isotp_user_send_can(link->send_arbitration_id, message.as.data_array.ptr, sizeof(message));
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f107 010c 	add.w	r1, r7, #12
 8000f48:	2208      	movs	r2, #8
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 fce4 	bl	8001918 <isotp_user_send_can>
 8000f50:	6178      	str	r0, [r7, #20]
    ret = isotp_user_send_can(link->send_arbitration_id,
            message.as.data_array.ptr,
            3);
#endif

    return ret;
 8000f52:	697b      	ldr	r3, [r7, #20]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3718      	adds	r7, #24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <isotp_send_single_frame>:

static int isotp_send_single_frame(IsoTpLink* link, uint32_t id) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]

    IsoTpCanMessage message;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size <= 7);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	895b      	ldrh	r3, [r3, #10]
 8000f6a:	2b07      	cmp	r3, #7
 8000f6c:	d905      	bls.n	8000f7a <isotp_send_single_frame+0x1e>
 8000f6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe4 <isotp_send_single_frame+0x88>)
 8000f70:	4a1d      	ldr	r2, [pc, #116]	@ (8000fe8 <isotp_send_single_frame+0x8c>)
 8000f72:	2142      	movs	r1, #66	@ 0x42
 8000f74:	481d      	ldr	r0, [pc, #116]	@ (8000fec <isotp_send_single_frame+0x90>)
 8000f76:	f009 fbf9 	bl	800a76c <__assert_func>

    /* setup message  */
    message.as.single_frame.type = ISOTP_PCI_TYPE_SINGLE;
 8000f7a:	7b3b      	ldrb	r3, [r7, #12]
 8000f7c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000f80:	733b      	strb	r3, [r7, #12]
    message.as.single_frame.SF_DL = (uint8_t) link->send_size;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	895b      	ldrh	r3, [r3, #10]
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	7b3b      	ldrb	r3, [r7, #12]
 8000f8e:	f362 0303 	bfi	r3, r2, #0, #4
 8000f92:	733b      	strb	r3, [r7, #12]
    (void) memcpy(message.as.single_frame.data, link->send_buffer, link->send_size);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6859      	ldr	r1, [r3, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	895b      	ldrh	r3, [r3, #10]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	f107 030c 	add.w	r3, r7, #12
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f009 fef4 	bl	800ad92 <memcpy>

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void) memset(message.as.single_frame.data + link->send_size, 0, sizeof(message.as.single_frame.data) - link->send_size);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	895b      	ldrh	r3, [r3, #10]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	1898      	adds	r0, r3, r2
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	895b      	ldrh	r3, [r3, #10]
 8000fbc:	f1c3 0307 	rsb	r3, r3, #7
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	f009 fe6a 	bl	800ac9c <memset>
    ret = isotp_user_send_can(id, message.as.data_array.ptr, sizeof(message));
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	2208      	movs	r2, #8
 8000fce:	4619      	mov	r1, r3
 8000fd0:	6838      	ldr	r0, [r7, #0]
 8000fd2:	f000 fca1 	bl	8001918 <isotp_user_send_can>
 8000fd6:	6178      	str	r0, [r7, #20]
    ret = isotp_user_send_can(id,
            message.as.data_array.ptr,
            link->send_size + 1);
#endif

    return ret;
 8000fd8:	697b      	ldr	r3, [r7, #20]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	0800bd64 	.word	0x0800bd64
 8000fe8:	0800bffc 	.word	0x0800bffc
 8000fec:	0800bd7c 	.word	0x0800bd7c

08000ff0 <isotp_send_first_frame>:

static int isotp_send_first_frame(IsoTpLink* link, uint32_t id) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]

    IsoTpCanMessage message;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size > 7);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	895b      	ldrh	r3, [r3, #10]
 8000ffe:	2b07      	cmp	r3, #7
 8001000:	d805      	bhi.n	800100e <isotp_send_first_frame+0x1e>
 8001002:	4b1d      	ldr	r3, [pc, #116]	@ (8001078 <isotp_send_first_frame+0x88>)
 8001004:	4a1d      	ldr	r2, [pc, #116]	@ (800107c <isotp_send_first_frame+0x8c>)
 8001006:	215c      	movs	r1, #92	@ 0x5c
 8001008:	481d      	ldr	r0, [pc, #116]	@ (8001080 <isotp_send_first_frame+0x90>)
 800100a:	f009 fbaf 	bl	800a76c <__assert_func>

    /* setup message  */
    message.as.first_frame.type = ISOTP_PCI_TYPE_FIRST_FRAME;
 800100e:	7b3b      	ldrb	r3, [r7, #12]
 8001010:	2201      	movs	r2, #1
 8001012:	f362 1307 	bfi	r3, r2, #4, #4
 8001016:	733b      	strb	r3, [r7, #12]
    message.as.first_frame.FF_DL_low = (uint8_t) link->send_size;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	895b      	ldrh	r3, [r3, #10]
 800101c:	b2db      	uxtb	r3, r3
 800101e:	737b      	strb	r3, [r7, #13]
    message.as.first_frame.FF_DL_high = (uint8_t) (0x0F & (link->send_size >> 8));
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	895b      	ldrh	r3, [r3, #10]
 8001024:	0a1b      	lsrs	r3, r3, #8
 8001026:	b29b      	uxth	r3, r3
 8001028:	f003 030f 	and.w	r3, r3, #15
 800102c:	b2da      	uxtb	r2, r3
 800102e:	7b3b      	ldrb	r3, [r7, #12]
 8001030:	f362 0303 	bfi	r3, r2, #0, #4
 8001034:	733b      	strb	r3, [r7, #12]
    (void) memcpy(message.as.first_frame.data, link->send_buffer, sizeof(message.as.first_frame.data));
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685a      	ldr	r2, [r3, #4]
 800103a:	f107 030e 	add.w	r3, r7, #14
 800103e:	6811      	ldr	r1, [r2, #0]
 8001040:	6019      	str	r1, [r3, #0]
 8001042:	8892      	ldrh	r2, [r2, #4]
 8001044:	809a      	strh	r2, [r3, #4]

    /* send message */
    ret = isotp_user_send_can(id, message.as.data_array.ptr, sizeof(message));
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	2208      	movs	r2, #8
 800104c:	4619      	mov	r1, r3
 800104e:	6838      	ldr	r0, [r7, #0]
 8001050:	f000 fc62 	bl	8001918 <isotp_user_send_can>
 8001054:	6178      	str	r0, [r7, #20]
    if (ISOTP_RET_OK == ret) {
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d108      	bne.n	800106e <isotp_send_first_frame+0x7e>
        link->send_offset += sizeof(message.as.first_frame.data);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	899b      	ldrh	r3, [r3, #12]
 8001060:	3306      	adds	r3, #6
 8001062:	b29a      	uxth	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	819a      	strh	r2, [r3, #12]
        link->send_sn = 1;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2201      	movs	r2, #1
 800106c:	739a      	strb	r2, [r3, #14]
    }

    return ret;
 800106e:	697b      	ldr	r3, [r7, #20]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	0800bd90 	.word	0x0800bd90
 800107c:	0800c014 	.word	0x0800c014
 8001080:	0800bd7c 	.word	0x0800bd7c

08001084 <isotp_send_consecutive_frame>:

static int isotp_send_consecutive_frame(IsoTpLink* link) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
    IsoTpCanMessage message;
    uint16_t data_length;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size > 7);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	895b      	ldrh	r3, [r3, #10]
 8001090:	2b07      	cmp	r3, #7
 8001092:	d805      	bhi.n	80010a0 <isotp_send_consecutive_frame+0x1c>
 8001094:	4b2d      	ldr	r3, [pc, #180]	@ (800114c <isotp_send_consecutive_frame+0xc8>)
 8001096:	4a2e      	ldr	r2, [pc, #184]	@ (8001150 <isotp_send_consecutive_frame+0xcc>)
 8001098:	2175      	movs	r1, #117	@ 0x75
 800109a:	482e      	ldr	r0, [pc, #184]	@ (8001154 <isotp_send_consecutive_frame+0xd0>)
 800109c:	f009 fb66 	bl	800a76c <__assert_func>

    /* setup message  */
    message.as.consecutive_frame.type = TSOTP_PCI_TYPE_CONSECUTIVE_FRAME;
 80010a0:	7a3b      	ldrb	r3, [r7, #8]
 80010a2:	2202      	movs	r2, #2
 80010a4:	f362 1307 	bfi	r3, r2, #4, #4
 80010a8:	723b      	strb	r3, [r7, #8]
    message.as.consecutive_frame.SN = link->send_sn;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	7b9b      	ldrb	r3, [r3, #14]
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	7a3b      	ldrb	r3, [r7, #8]
 80010b6:	f362 0303 	bfi	r3, r2, #0, #4
 80010ba:	723b      	strb	r3, [r7, #8]
    data_length = link->send_size - link->send_offset;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	895a      	ldrh	r2, [r3, #10]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	899b      	ldrh	r3, [r3, #12]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	82fb      	strh	r3, [r7, #22]
    if (data_length > sizeof(message.as.consecutive_frame.data)) {
 80010c8:	8afb      	ldrh	r3, [r7, #22]
 80010ca:	2b07      	cmp	r3, #7
 80010cc:	d901      	bls.n	80010d2 <isotp_send_consecutive_frame+0x4e>
        data_length = sizeof(message.as.consecutive_frame.data);
 80010ce:	2307      	movs	r3, #7
 80010d0:	82fb      	strh	r3, [r7, #22]
    }
    (void) memcpy(message.as.consecutive_frame.data, link->send_buffer + link->send_offset, data_length);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	8992      	ldrh	r2, [r2, #12]
 80010da:	1899      	adds	r1, r3, r2
 80010dc:	8afa      	ldrh	r2, [r7, #22]
 80010de:	f107 0308 	add.w	r3, r7, #8
 80010e2:	3301      	adds	r3, #1
 80010e4:	4618      	mov	r0, r3
 80010e6:	f009 fe54 	bl	800ad92 <memcpy>

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void) memset(message.as.consecutive_frame.data + data_length, 0, sizeof(message.as.consecutive_frame.data) - data_length);
 80010ea:	8afb      	ldrh	r3, [r7, #22]
 80010ec:	f107 0208 	add.w	r2, r7, #8
 80010f0:	3201      	adds	r2, #1
 80010f2:	18d0      	adds	r0, r2, r3
 80010f4:	8afb      	ldrh	r3, [r7, #22]
 80010f6:	f1c3 0307 	rsb	r3, r3, #7
 80010fa:	461a      	mov	r2, r3
 80010fc:	2100      	movs	r1, #0
 80010fe:	f009 fdcd 	bl	800ac9c <memset>
    ret = isotp_user_send_can(link->send_arbitration_id, message.as.data_array.ptr, sizeof(message));
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f107 0108 	add.w	r1, r7, #8
 800110a:	2208      	movs	r2, #8
 800110c:	4618      	mov	r0, r3
 800110e:	f000 fc03 	bl	8001918 <isotp_user_send_can>
 8001112:	6138      	str	r0, [r7, #16]
#else
    ret = isotp_user_send_can(link->send_arbitration_id,
            message.as.data_array.ptr,
            data_length + 1);
#endif
    if (ISOTP_RET_OK == ret) {
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d113      	bne.n	8001142 <isotp_send_consecutive_frame+0xbe>
        link->send_offset += data_length;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	899a      	ldrh	r2, [r3, #12]
 800111e:	8afb      	ldrh	r3, [r7, #22]
 8001120:	4413      	add	r3, r2
 8001122:	b29a      	uxth	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	819a      	strh	r2, [r3, #12]
        if (++(link->send_sn) > 0x0F) {
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	7b9b      	ldrb	r3, [r3, #14]
 800112c:	3301      	adds	r3, #1
 800112e:	b2da      	uxtb	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	739a      	strb	r2, [r3, #14]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	7b9b      	ldrb	r3, [r3, #14]
 8001138:	2b0f      	cmp	r3, #15
 800113a:	d902      	bls.n	8001142 <isotp_send_consecutive_frame+0xbe>
            link->send_sn = 0;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	739a      	strb	r2, [r3, #14]
        }
    }

    return ret;
 8001142:	693b      	ldr	r3, [r7, #16]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	0800bd90 	.word	0x0800bd90
 8001150:	0800c02c 	.word	0x0800c02c
 8001154:	0800bd7c 	.word	0x0800bd7c

08001158 <isotp_receive_single_frame>:

static int isotp_receive_single_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	4613      	mov	r3, r2
 8001164:	71fb      	strb	r3, [r7, #7]
    /* check data length */
    if ((0 == message->as.single_frame.SF_DL) || (message->as.single_frame.SF_DL > (len - 1))) {
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	f003 030f 	and.w	r3, r3, #15
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b00      	cmp	r3, #0
 8001172:	d008      	beq.n	8001186 <isotp_receive_single_frame+0x2e>
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800117c:	b2db      	uxtb	r3, r3
 800117e:	461a      	mov	r2, r3
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	4293      	cmp	r3, r2
 8001184:	d805      	bhi.n	8001192 <isotp_receive_single_frame+0x3a>
        isotp_user_debug("Single-frame length too small.");
 8001186:	480f      	ldr	r0, [pc, #60]	@ (80011c4 <isotp_receive_single_frame+0x6c>)
 8001188:	f000 fb8c 	bl	80018a4 <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 800118c:	f06f 0306 	mvn.w	r3, #6
 8001190:	e014      	b.n	80011bc <isotp_receive_single_frame+0x64>
    }

    /* copying data */
    (void) memcpy(link->receive_buffer, message->as.single_frame.data, message->as.single_frame.SF_DL);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	1c59      	adds	r1, r3, #1
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	461a      	mov	r2, r3
 80011a6:	f009 fdf4 	bl	800ad92 <memcpy>
    link->receive_size = message->as.single_frame.SF_DL;
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	461a      	mov	r2, r3
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    return ISOTP_RET_OK;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	0800bda4 	.word	0x0800bda4

080011c8 <isotp_receive_first_frame>:

static int isotp_receive_first_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	4613      	mov	r3, r2
 80011d4:	71fb      	strb	r3, [r7, #7]
    uint16_t payload_length;

    if (8 != len) {
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	2b08      	cmp	r3, #8
 80011da:	d005      	beq.n	80011e8 <isotp_receive_first_frame+0x20>
        isotp_user_debug("First frame should be 8 bytes in length.");
 80011dc:	481e      	ldr	r0, [pc, #120]	@ (8001258 <isotp_receive_first_frame+0x90>)
 80011de:	f000 fb61 	bl	80018a4 <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 80011e2:	f06f 0306 	mvn.w	r3, #6
 80011e6:	e033      	b.n	8001250 <isotp_receive_first_frame+0x88>
    }

    /* check data length */
    payload_length = message->as.first_frame.FF_DL_high;
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	82fb      	strh	r3, [r7, #22]
    payload_length = (payload_length << 8) + message->as.first_frame.FF_DL_low;
 80011f4:	8afb      	ldrh	r3, [r7, #22]
 80011f6:	021b      	lsls	r3, r3, #8
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	7852      	ldrb	r2, [r2, #1]
 80011fe:	4413      	add	r3, r2
 8001200:	82fb      	strh	r3, [r7, #22]

    /* should not use multiple frame transmition */
    if (payload_length <= 7) {
 8001202:	8afb      	ldrh	r3, [r7, #22]
 8001204:	2b07      	cmp	r3, #7
 8001206:	d805      	bhi.n	8001214 <isotp_receive_first_frame+0x4c>
        isotp_user_debug("Should not use multiple frame transmission.");
 8001208:	4814      	ldr	r0, [pc, #80]	@ (800125c <isotp_receive_first_frame+0x94>)
 800120a:	f000 fb4b 	bl	80018a4 <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 800120e:	f06f 0306 	mvn.w	r3, #6
 8001212:	e01d      	b.n	8001250 <isotp_receive_first_frame+0x88>
    }

    if (payload_length > link->receive_buf_size) {
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001218:	8afa      	ldrh	r2, [r7, #22]
 800121a:	429a      	cmp	r2, r3
 800121c:	d905      	bls.n	800122a <isotp_receive_first_frame+0x62>
        isotp_user_debug("Multi-frame response too large for receiving buffer.");
 800121e:	4810      	ldr	r0, [pc, #64]	@ (8001260 <isotp_receive_first_frame+0x98>)
 8001220:	f000 fb40 	bl	80018a4 <isotp_user_debug>
        return ISOTP_RET_OVERFLOW;
 8001224:	f06f 0302 	mvn.w	r3, #2
 8001228:	e012      	b.n	8001250 <isotp_receive_first_frame+0x88>
    }

    /* copying data */
    (void) memcpy(link->receive_buffer, message->as.first_frame.data, sizeof(message->as.first_frame.data));
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	3302      	adds	r3, #2
 8001232:	2206      	movs	r2, #6
 8001234:	4619      	mov	r1, r3
 8001236:	f009 fdac 	bl	800ad92 <memcpy>
    link->receive_size = payload_length;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	8afa      	ldrh	r2, [r7, #22]
 800123e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    link->receive_offset = sizeof(message->as.first_frame.data);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2206      	movs	r2, #6
 8001244:	861a      	strh	r2, [r3, #48]	@ 0x30
    link->receive_sn = 1;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2201      	movs	r2, #1
 800124a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

    return ISOTP_RET_OK;
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	0800bdc4 	.word	0x0800bdc4
 800125c:	0800bdf0 	.word	0x0800bdf0
 8001260:	0800be1c 	.word	0x0800be1c

08001264 <isotp_receive_consecutive_frame>:

static int isotp_receive_consecutive_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	4613      	mov	r3, r2
 8001270:	71fb      	strb	r3, [r7, #7]
    uint16_t remaining_bytes;

    /* check sn */
    if (link->receive_sn != message->as.consecutive_frame.SN) {
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001278:	68ba      	ldr	r2, [r7, #8]
 800127a:	7812      	ldrb	r2, [r2, #0]
 800127c:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	4293      	cmp	r3, r2
 8001284:	d002      	beq.n	800128c <isotp_receive_consecutive_frame+0x28>
        return ISOTP_RET_WRONG_SN;
 8001286:	f06f 0303 	mvn.w	r3, #3
 800128a:	e038      	b.n	80012fe <isotp_receive_consecutive_frame+0x9a>
    }

    /* check data length */
    remaining_bytes = link->receive_size - link->receive_offset;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	8dda      	ldrh	r2, [r3, #46]	@ 0x2e
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	82fb      	strh	r3, [r7, #22]
    if (remaining_bytes > sizeof(message->as.consecutive_frame.data)) {
 8001298:	8afb      	ldrh	r3, [r7, #22]
 800129a:	2b07      	cmp	r3, #7
 800129c:	d901      	bls.n	80012a2 <isotp_receive_consecutive_frame+0x3e>
        remaining_bytes = sizeof(message->as.consecutive_frame.data);
 800129e:	2307      	movs	r3, #7
 80012a0:	82fb      	strh	r3, [r7, #22]
    }
    if (remaining_bytes > len - 1) {
 80012a2:	79fa      	ldrb	r2, [r7, #7]
 80012a4:	8afb      	ldrh	r3, [r7, #22]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	dc05      	bgt.n	80012b6 <isotp_receive_consecutive_frame+0x52>
        isotp_user_debug("Consecutive frame too short.");
 80012aa:	4817      	ldr	r0, [pc, #92]	@ (8001308 <isotp_receive_consecutive_frame+0xa4>)
 80012ac:	f000 fafa 	bl	80018a4 <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 80012b0:	f06f 0306 	mvn.w	r3, #6
 80012b4:	e023      	b.n	80012fe <isotp_receive_consecutive_frame+0x9a>
    }

    /* copying data */
    (void) memcpy(link->receive_buffer + link->receive_offset, message->as.consecutive_frame.data, remaining_bytes);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	8e12      	ldrh	r2, [r2, #48]	@ 0x30
 80012be:	1898      	adds	r0, r3, r2
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	3301      	adds	r3, #1
 80012c4:	8afa      	ldrh	r2, [r7, #22]
 80012c6:	4619      	mov	r1, r3
 80012c8:	f009 fd63 	bl	800ad92 <memcpy>

    link->receive_offset += remaining_bytes;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 80012d0:	8afb      	ldrh	r3, [r7, #22]
 80012d2:	4413      	add	r3, r2
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	861a      	strh	r2, [r3, #48]	@ 0x30
    if (++(link->receive_sn) > 0x0F) {
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80012e0:	3301      	adds	r3, #1
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80012f0:	2b0f      	cmp	r3, #15
 80012f2:	d903      	bls.n	80012fc <isotp_receive_consecutive_frame+0x98>
        link->receive_sn = 0;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    }

    return ISOTP_RET_OK;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	0800be54 	.word	0x0800be54

0800130c <isotp_receive_flow_control_frame>:

static int isotp_receive_flow_control_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	4613      	mov	r3, r2
 8001318:	71fb      	strb	r3, [r7, #7]
    /* check message length */
    if (len < 3) {
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	2b02      	cmp	r3, #2
 800131e:	d805      	bhi.n	800132c <isotp_receive_flow_control_frame+0x20>
        isotp_user_debug("Flow control frame too short.");
 8001320:	4805      	ldr	r0, [pc, #20]	@ (8001338 <isotp_receive_flow_control_frame+0x2c>)
 8001322:	f000 fabf 	bl	80018a4 <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 8001326:	f06f 0306 	mvn.w	r3, #6
 800132a:	e000      	b.n	800132e <isotp_receive_flow_control_frame+0x22>
    }

    return ISOTP_RET_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	0800be74 	.word	0x0800be74

0800133c <isotp_send>:

///////////////////////////////////////////////////////
///                 PUBLIC FUNCTIONS                ///
///////////////////////////////////////////////////////

int isotp_send(IsoTpLink *link, const uint8_t payload[], uint16_t size) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	4613      	mov	r3, r2
 8001348:	80fb      	strh	r3, [r7, #6]
    return isotp_send_with_id(link, link->send_arbitration_id, payload, size);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	6819      	ldr	r1, [r3, #0]
 800134e:	88fb      	ldrh	r3, [r7, #6]
 8001350:	68ba      	ldr	r2, [r7, #8]
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f000 f806 	bl	8001364 <isotp_send_with_id>
 8001358:	4603      	mov	r3, r0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <isotp_send_with_id>:

int isotp_send_with_id(IsoTpLink *link, uint32_t id, const uint8_t payload[], uint16_t size) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b0a6      	sub	sp, #152	@ 0x98
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
 8001370:	807b      	strh	r3, [r7, #2]
    int ret;

    if (link == 0x0) {
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d105      	bne.n	8001384 <isotp_send_with_id+0x20>
        isotp_user_debug("Link is null!");
 8001378:	4833      	ldr	r0, [pc, #204]	@ (8001448 <isotp_send_with_id+0xe4>)
 800137a:	f000 fa93 	bl	80018a4 <isotp_user_debug>
        return ISOTP_RET_ERROR;
 800137e:	f04f 33ff 	mov.w	r3, #4294967295
 8001382:	e05d      	b.n	8001440 <isotp_send_with_id+0xdc>
    }

    if (size > link->send_buf_size) {
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	891b      	ldrh	r3, [r3, #8]
 8001388:	887a      	ldrh	r2, [r7, #2]
 800138a:	429a      	cmp	r2, r3
 800138c:	d90d      	bls.n	80013aa <isotp_send_with_id+0x46>
        isotp_user_debug("Message size too large. Increase ISO_TP_MAX_MESSAGE_SIZE to set a larger buffer\n");
 800138e:	482f      	ldr	r0, [pc, #188]	@ (800144c <isotp_send_with_id+0xe8>)
 8001390:	f000 fa88 	bl	80018a4 <isotp_user_debug>
        char message[128];
        sprintf(&message[0], "Attempted to send %d bytes; max size is %d!\n", size, link->send_buf_size);
 8001394:	887a      	ldrh	r2, [r7, #2]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	891b      	ldrh	r3, [r3, #8]
 800139a:	f107 0014 	add.w	r0, r7, #20
 800139e:	492c      	ldr	r1, [pc, #176]	@ (8001450 <isotp_send_with_id+0xec>)
 80013a0:	f009 fb46 	bl	800aa30 <siprintf>
        return ISOTP_RET_OVERFLOW;
 80013a4:	f06f 0302 	mvn.w	r3, #2
 80013a8:	e04a      	b.n	8001440 <isotp_send_with_id+0xdc>
    }

    if (ISOTP_SEND_STATUS_INPROGRESS == link->send_status) {
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d105      	bne.n	80013c0 <isotp_send_with_id+0x5c>
        isotp_user_debug("Abort previous message, transmission in progress.\n");
 80013b4:	4827      	ldr	r0, [pc, #156]	@ (8001454 <isotp_send_with_id+0xf0>)
 80013b6:	f000 fa75 	bl	80018a4 <isotp_user_debug>
        return ISOTP_RET_INPROGRESS;
 80013ba:	f06f 0301 	mvn.w	r3, #1
 80013be:	e03f      	b.n	8001440 <isotp_send_with_id+0xdc>
    }

    /* copy into local buffer */
    link->send_size = size;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	887a      	ldrh	r2, [r7, #2]
 80013c4:	815a      	strh	r2, [r3, #10]
    link->send_offset = 0;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2200      	movs	r2, #0
 80013ca:	819a      	strh	r2, [r3, #12]
    (void) memcpy(link->send_buffer, payload, size);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	887a      	ldrh	r2, [r7, #2]
 80013d2:	6879      	ldr	r1, [r7, #4]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f009 fcdc 	bl	800ad92 <memcpy>

    if (link->send_size < 8) {
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	895b      	ldrh	r3, [r3, #10]
 80013de:	2b07      	cmp	r3, #7
 80013e0:	d806      	bhi.n	80013f0 <isotp_send_with_id+0x8c>
        /* send single frame */
        ret = isotp_send_single_frame(link, id);
 80013e2:	68b9      	ldr	r1, [r7, #8]
 80013e4:	68f8      	ldr	r0, [r7, #12]
 80013e6:	f7ff fdb9 	bl	8000f5c <isotp_send_single_frame>
 80013ea:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 80013ee:	e025      	b.n	800143c <isotp_send_with_id+0xd8>
    } else {
        /* send multi-frame */
        ret = isotp_send_first_frame(link, id);
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	68f8      	ldr	r0, [r7, #12]
 80013f4:	f7ff fdfc 	bl	8000ff0 <isotp_send_first_frame>
 80013f8:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94

        /* init multi-frame control flags */
        if (ISOTP_RET_OK == ret) {
 80013fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001400:	2b00      	cmp	r3, #0
 8001402:	d11b      	bne.n	800143c <isotp_send_with_id+0xd8>
            link->send_bs_remain = 0;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2200      	movs	r2, #0
 8001408:	821a      	strh	r2, [r3, #16]
            link->send_st_min = 0;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2200      	movs	r2, #0
 800140e:	749a      	strb	r2, [r3, #18]
            link->send_wtf_count = 0;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2200      	movs	r2, #0
 8001414:	74da      	strb	r2, [r3, #19]
            link->send_timer_st = isotp_user_get_ms();
 8001416:	f000 fa97 	bl	8001948 <isotp_user_get_ms>
 800141a:	4602      	mov	r2, r0
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	615a      	str	r2, [r3, #20]
            link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 8001420:	f000 fa92 	bl	8001948 <isotp_user_get_ms>
 8001424:	4603      	mov	r3, r0
 8001426:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	619a      	str	r2, [r3, #24]
            link->send_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2200      	movs	r2, #0
 8001432:	61da      	str	r2, [r3, #28]
            link->send_status = ISOTP_SEND_STATUS_INPROGRESS;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }

    return ret;
 800143c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
}
 8001440:	4618      	mov	r0, r3
 8001442:	3798      	adds	r7, #152	@ 0x98
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	0800be94 	.word	0x0800be94
 800144c:	0800bea4 	.word	0x0800bea4
 8001450:	0800bef8 	.word	0x0800bef8
 8001454:	0800bf28 	.word	0x0800bf28

08001458 <isotp_on_can_message>:

void isotp_on_can_message(IsoTpLink *link, uint8_t *data, uint8_t len) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b088      	sub	sp, #32
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	4613      	mov	r3, r2
 8001464:	71fb      	strb	r3, [r7, #7]
    IsoTpCanMessage message;
    int ret;

    if (len < 2 || len > 8) {
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	2b01      	cmp	r3, #1
 800146a:	f240 8143 	bls.w	80016f4 <isotp_on_can_message+0x29c>
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	2b08      	cmp	r3, #8
 8001472:	f200 813f 	bhi.w	80016f4 <isotp_on_can_message+0x29c>
        return;
    }

    memcpy(message.as.data_array.ptr, data, len);
 8001476:	79fa      	ldrb	r2, [r7, #7]
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	68b9      	ldr	r1, [r7, #8]
 800147e:	4618      	mov	r0, r3
 8001480:	f009 fc87 	bl	800ad92 <memcpy>
    memset(message.as.data_array.ptr + len, 0, sizeof(message.as.data_array.ptr) - len);
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	f107 0214 	add.w	r2, r7, #20
 800148a:	18d0      	adds	r0, r2, r3
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	f1c3 0308 	rsb	r3, r3, #8
 8001492:	461a      	mov	r2, r3
 8001494:	2100      	movs	r1, #0
 8001496:	f009 fc01 	bl	800ac9c <memset>

    switch (message.as.common.type) {
 800149a:	7d3b      	ldrb	r3, [r7, #20]
 800149c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b03      	cmp	r3, #3
 80014a4:	f200 811a 	bhi.w	80016dc <isotp_on_can_message+0x284>
 80014a8:	a201      	add	r2, pc, #4	@ (adr r2, 80014b0 <isotp_on_can_message+0x58>)
 80014aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ae:	bf00      	nop
 80014b0:	080014c1 	.word	0x080014c1
 80014b4:	080014fd 	.word	0x080014fd
 80014b8:	08001585 	.word	0x08001585
 80014bc:	08001623 	.word	0x08001623
        case ISOTP_PCI_TYPE_SINGLE: {
            /* update protocol result */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d104      	bne.n	80014d4 <isotp_on_can_message+0x7c>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f06f 0205 	mvn.w	r2, #5
 80014d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80014d2:	e002      	b.n	80014da <isotp_on_can_message+0x82>
            } else {
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2200      	movs	r2, #0
 80014d8:	639a      	str	r2, [r3, #56]	@ 0x38
            }

            /* handle message */
            ret = isotp_receive_single_frame(link, &message, len);
 80014da:	79fa      	ldrb	r2, [r7, #7]
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4619      	mov	r1, r3
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f7ff fe38 	bl	8001158 <isotp_receive_single_frame>
 80014e8:	61f8      	str	r0, [r7, #28]

            if (ISOTP_RET_OK == ret) {
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f040 80f7 	bne.w	80016e0 <isotp_on_can_message+0x288>
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_FULL;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2202      	movs	r2, #2
 80014f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            }
            break;
 80014fa:	e0f1      	b.n	80016e0 <isotp_on_can_message+0x288>
        }
        case ISOTP_PCI_TYPE_FIRST_FRAME: {
            /* update protocol result */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001502:	2b01      	cmp	r3, #1
 8001504:	d104      	bne.n	8001510 <isotp_on_can_message+0xb8>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f06f 0205 	mvn.w	r2, #5
 800150c:	639a      	str	r2, [r3, #56]	@ 0x38
 800150e:	e002      	b.n	8001516 <isotp_on_can_message+0xbe>
            } else {
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2200      	movs	r2, #0
 8001514:	639a      	str	r2, [r3, #56]	@ 0x38
            }

            /* handle message */
            ret = isotp_receive_first_frame(link, &message, len);
 8001516:	79fa      	ldrb	r2, [r7, #7]
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	4619      	mov	r1, r3
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f7ff fe52 	bl	80011c8 <isotp_receive_first_frame>
 8001524:	61f8      	str	r0, [r7, #28]

            /* if overflow happened */
            if (ISOTP_RET_OVERFLOW == ret) {
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	f113 0f03 	cmn.w	r3, #3
 800152c:	d10e      	bne.n	800154c <isotp_on_can_message+0xf4>
                /* update protocol result */
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_BUFFER_OVFLW;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f06f 0207 	mvn.w	r2, #7
 8001534:	639a      	str	r2, [r3, #56]	@ 0x38
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                /* send error message */
                isotp_send_flow_control(link, PCI_FLOW_STATUS_OVERFLOW, 0, 0);
 800153e:	2300      	movs	r3, #0
 8001540:	2200      	movs	r2, #0
 8001542:	2102      	movs	r1, #2
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	f7ff fcd1 	bl	8000eec <isotp_send_flow_control>
                break;
 800154a:	e0d2      	b.n	80016f2 <isotp_on_can_message+0x29a>
            }

            /* if receive successful */
            if (ISOTP_RET_OK == ret) {
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	2b00      	cmp	r3, #0
 8001550:	f040 80c8 	bne.w	80016e4 <isotp_on_can_message+0x28c>
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_INPROGRESS;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2201      	movs	r2, #1
 8001558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                /* send fc frame */
                link->receive_bs_count = ISO_TP_DEFAULT_BLOCK_SIZE;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2208      	movs	r2, #8
 8001560:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 800156a:	2300      	movs	r3, #0
 800156c:	2100      	movs	r1, #0
 800156e:	68f8      	ldr	r0, [r7, #12]
 8001570:	f7ff fcbc 	bl	8000eec <isotp_send_flow_control>
                /* refresh timer cs */
                link->receive_timer_cr = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 8001574:	f000 f9e8 	bl	8001948 <isotp_user_get_ms>
 8001578:	4603      	mov	r3, r0
 800157a:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	635a      	str	r2, [r3, #52]	@ 0x34
            }

            break;
 8001582:	e0af      	b.n	80016e4 <isotp_on_can_message+0x28c>
        }
        case TSOTP_PCI_TYPE_CONSECUTIVE_FRAME: {
            /* check if in receiving status */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS != link->receive_status) {
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800158a:	2b01      	cmp	r3, #1
 800158c:	d004      	beq.n	8001598 <isotp_on_can_message+0x140>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f06f 0205 	mvn.w	r2, #5
 8001594:	639a      	str	r2, [r3, #56]	@ 0x38
                break;
 8001596:	e0ac      	b.n	80016f2 <isotp_on_can_message+0x29a>
            }

            /* handle message */
            ret = isotp_receive_consecutive_frame(link, &message, len);
 8001598:	79fa      	ldrb	r2, [r7, #7]
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	4619      	mov	r1, r3
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f7ff fe5f 	bl	8001264 <isotp_receive_consecutive_frame>
 80015a6:	61f8      	str	r0, [r7, #28]

            /* if wrong sn */
            if (ISOTP_RET_WRONG_SN == ret) {
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f113 0f04 	cmn.w	r3, #4
 80015ae:	d108      	bne.n	80015c2 <isotp_on_can_message+0x16a>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_WRONG_SN;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f06f 0203 	mvn.w	r2, #3
 80015b6:	639a      	str	r2, [r3, #56]	@ 0x38
                link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                break;
 80015c0:	e097      	b.n	80016f2 <isotp_on_can_message+0x29a>
            }

            /* if success */
            if (ISOTP_RET_OK == ret) {
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f040 808f 	bne.w	80016e8 <isotp_on_can_message+0x290>
                /* refresh timer cs */
                link->receive_timer_cr = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 80015ca:	f000 f9bd 	bl	8001948 <isotp_user_get_ms>
 80015ce:	4603      	mov	r3, r0
 80015d0:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	635a      	str	r2, [r3, #52]	@ 0x34

                /* receive finished */
                if (link->receive_offset >= link->receive_size) {
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d304      	bcc.n	80015ee <isotp_on_can_message+0x196>
                    link->receive_status = ISOTP_RECEIVE_STATUS_FULL;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2202      	movs	r2, #2
 80015e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                        isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
                    }
                }
            }

            break;
 80015ec:	e07c      	b.n	80016e8 <isotp_on_can_message+0x290>
                    if (0 == --link->receive_bs_count) {
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80015f4:	3b01      	subs	r3, #1
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8001604:	2b00      	cmp	r3, #0
 8001606:	d16f      	bne.n	80016e8 <isotp_on_can_message+0x290>
                        link->receive_bs_count = ISO_TP_DEFAULT_BLOCK_SIZE;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2208      	movs	r2, #8
 800160c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                        isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 8001616:	2300      	movs	r3, #0
 8001618:	2100      	movs	r1, #0
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f7ff fc66 	bl	8000eec <isotp_send_flow_control>
            break;
 8001620:	e062      	b.n	80016e8 <isotp_on_can_message+0x290>
        }
        case ISOTP_PCI_TYPE_FLOW_CONTROL_FRAME:
            /* handle fc frame only when sending in progress  */
            if (ISOTP_SEND_STATUS_INPROGRESS != link->send_status) {
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d15f      	bne.n	80016ec <isotp_on_can_message+0x294>
                break;
            }

            /* handle message */
            ret = isotp_receive_flow_control_frame(link, &message, len);
 800162c:	79fa      	ldrb	r2, [r7, #7]
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	4619      	mov	r1, r3
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	f7ff fe69 	bl	800130c <isotp_receive_flow_control_frame>
 800163a:	61f8      	str	r0, [r7, #28]

            if (ISOTP_RET_OK == ret) {
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d156      	bne.n	80016f0 <isotp_on_can_message+0x298>
                /* refresh bs timer */
                link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 8001642:	f000 f981 	bl	8001948 <isotp_user_get_ms>
 8001646:	4603      	mov	r3, r0
 8001648:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	619a      	str	r2, [r3, #24]

                /* overflow */
                if (PCI_FLOW_STATUS_OVERFLOW == message.as.flow_control.FS) {
 8001650:	7d3b      	ldrb	r3, [r7, #20]
 8001652:	f003 030f 	and.w	r3, r3, #15
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d108      	bne.n	800166e <isotp_on_can_message+0x216>
                    link->send_protocol_result = ISOTP_PROTOCOL_RESULT_BUFFER_OVFLW;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f06f 0207 	mvn.w	r2, #7
 8001662:	61da      	str	r2, [r3, #28]
                    link->send_status = ISOTP_SEND_STATUS_ERROR;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2202      	movs	r2, #2
 8001668:	f883 2020 	strb.w	r2, [r3, #32]
                    }
                    link->send_st_min = isotp_st_min_to_ms(message.as.flow_control.STmin);
                    link->send_wtf_count = 0;
                }
            }
            break;
 800166c:	e040      	b.n	80016f0 <isotp_on_can_message+0x298>
                else if (PCI_FLOW_STATUS_WAIT == message.as.flow_control.FS) {
 800166e:	7d3b      	ldrb	r3, [r7, #20]
 8001670:	f003 030f 	and.w	r3, r3, #15
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b01      	cmp	r3, #1
 8001678:	d112      	bne.n	80016a0 <isotp_on_can_message+0x248>
                    link->send_wtf_count += 1;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	7cdb      	ldrb	r3, [r3, #19]
 800167e:	3301      	adds	r3, #1
 8001680:	b2da      	uxtb	r2, r3
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	74da      	strb	r2, [r3, #19]
                    if (link->send_wtf_count > ISO_TP_MAX_WFT_NUMBER) {
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	7cdb      	ldrb	r3, [r3, #19]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d930      	bls.n	80016f0 <isotp_on_can_message+0x298>
                        link->send_protocol_result = ISOTP_PROTOCOL_RESULT_WFT_OVRN;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f06f 0206 	mvn.w	r2, #6
 8001694:	61da      	str	r2, [r3, #28]
                        link->send_status = ISOTP_SEND_STATUS_ERROR;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2202      	movs	r2, #2
 800169a:	f883 2020 	strb.w	r2, [r3, #32]
            break;
 800169e:	e027      	b.n	80016f0 <isotp_on_can_message+0x298>
                else if (PCI_FLOW_STATUS_CONTINUE == message.as.flow_control.FS) {
 80016a0:	7d3b      	ldrb	r3, [r7, #20]
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d121      	bne.n	80016f0 <isotp_on_can_message+0x298>
                    if (0 == message.as.flow_control.BS) {
 80016ac:	7d7b      	ldrb	r3, [r7, #21]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d104      	bne.n	80016bc <isotp_on_can_message+0x264>
                        link->send_bs_remain = ISOTP_INVALID_BS;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016b8:	821a      	strh	r2, [r3, #16]
 80016ba:	e003      	b.n	80016c4 <isotp_on_can_message+0x26c>
                        link->send_bs_remain = message.as.flow_control.BS;
 80016bc:	7d7b      	ldrb	r3, [r7, #21]
 80016be:	461a      	mov	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	821a      	strh	r2, [r3, #16]
                    link->send_st_min = isotp_st_min_to_ms(message.as.flow_control.STmin);
 80016c4:	7dbb      	ldrb	r3, [r7, #22]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fbf2 	bl	8000eb0 <isotp_st_min_to_ms>
 80016cc:	4603      	mov	r3, r0
 80016ce:	461a      	mov	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	749a      	strb	r2, [r3, #18]
                    link->send_wtf_count = 0;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2200      	movs	r2, #0
 80016d8:	74da      	strb	r2, [r3, #19]
            break;
 80016da:	e009      	b.n	80016f0 <isotp_on_can_message+0x298>
        default:
            break;
 80016dc:	bf00      	nop
 80016de:	e00a      	b.n	80016f6 <isotp_on_can_message+0x29e>
            break;
 80016e0:	bf00      	nop
 80016e2:	e008      	b.n	80016f6 <isotp_on_can_message+0x29e>
            break;
 80016e4:	bf00      	nop
 80016e6:	e006      	b.n	80016f6 <isotp_on_can_message+0x29e>
            break;
 80016e8:	bf00      	nop
 80016ea:	e004      	b.n	80016f6 <isotp_on_can_message+0x29e>
                break;
 80016ec:	bf00      	nop
 80016ee:	e002      	b.n	80016f6 <isotp_on_can_message+0x29e>
            break;
 80016f0:	bf00      	nop
    };

    return;
 80016f2:	e000      	b.n	80016f6 <isotp_on_can_message+0x29e>
        return;
 80016f4:	bf00      	nop
}
 80016f6:	3720      	adds	r7, #32
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <isotp_receive>:

int isotp_receive(IsoTpLink *link, uint8_t *payload, const uint16_t payload_size, uint16_t *out_size) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	603b      	str	r3, [r7, #0]
 8001708:	4613      	mov	r3, r2
 800170a:	80fb      	strh	r3, [r7, #6]
    uint16_t copylen;

    if (ISOTP_RECEIVE_STATUS_FULL != link->receive_status) {
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001712:	2b02      	cmp	r3, #2
 8001714:	d002      	beq.n	800171c <isotp_receive+0x20>
        return ISOTP_RET_NO_DATA;
 8001716:	f06f 0304 	mvn.w	r3, #4
 800171a:	e017      	b.n	800174c <isotp_receive+0x50>
    }

    copylen = link->receive_size;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001720:	82fb      	strh	r3, [r7, #22]
    if (copylen > payload_size) {
 8001722:	8afa      	ldrh	r2, [r7, #22]
 8001724:	88fb      	ldrh	r3, [r7, #6]
 8001726:	429a      	cmp	r2, r3
 8001728:	d901      	bls.n	800172e <isotp_receive+0x32>
        copylen = payload_size;
 800172a:	88fb      	ldrh	r3, [r7, #6]
 800172c:	82fb      	strh	r3, [r7, #22]
    }

    memcpy(payload, link->receive_buffer, copylen);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001732:	8afa      	ldrh	r2, [r7, #22]
 8001734:	4619      	mov	r1, r3
 8001736:	68b8      	ldr	r0, [r7, #8]
 8001738:	f009 fb2b 	bl	800ad92 <memcpy>
    *out_size = copylen;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	8afa      	ldrh	r2, [r7, #22]
 8001740:	801a      	strh	r2, [r3, #0]

    link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return ISOTP_RET_OK;
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	3718      	adds	r7, #24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <isotp_init_link>:

void isotp_init_link(IsoTpLink *link, uint32_t sendid, uint8_t *sendbuf, uint16_t sendbufsize, uint8_t *recvbuf, uint16_t recvbufsize) {
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
 8001760:	807b      	strh	r3, [r7, #2]
    memset(link, 0, sizeof(*link));
 8001762:	2240      	movs	r2, #64	@ 0x40
 8001764:	2100      	movs	r1, #0
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	f009 fa98 	bl	800ac9c <memset>
    link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    link->send_status = ISOTP_SEND_STATUS_IDLE;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2020 	strb.w	r2, [r3, #32]
    link->send_arbitration_id = sendid;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	601a      	str	r2, [r3, #0]
    link->send_buffer = sendbuf;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	605a      	str	r2, [r3, #4]
    link->send_buf_size = sendbufsize;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	887a      	ldrh	r2, [r7, #2]
 800178c:	811a      	strh	r2, [r3, #8]
    link->receive_buffer = recvbuf;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	629a      	str	r2, [r3, #40]	@ 0x28
    link->receive_buf_size = recvbufsize;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	8bba      	ldrh	r2, [r7, #28]
 8001798:	859a      	strh	r2, [r3, #44]	@ 0x2c

    return;
 800179a:	bf00      	nop
}
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <isotp_poll>:

void isotp_poll(IsoTpLink *link) {
 80017a2:	b590      	push	{r4, r7, lr}
 80017a4:	b085      	sub	sp, #20
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
    int ret;

    /* only polling when operation in progress */
    if (ISOTP_SEND_STATUS_INPROGRESS == link->send_status) {
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d15c      	bne.n	800186e <isotp_poll+0xcc>

        /* continue send data */
        if (/* send data if bs_remain is invalid or bs_remain large than zero */
        (ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0) &&
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	8a1b      	ldrh	r3, [r3, #16]
        if (/* send data if bs_remain is invalid or bs_remain large than zero */
 80017b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017bc:	4293      	cmp	r3, r2
 80017be:	d003      	beq.n	80017c8 <isotp_poll+0x26>
        (ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0) &&
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	8a1b      	ldrh	r3, [r3, #16]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d041      	beq.n	800184c <isotp_poll+0xaa>
        /* and if st_min is zero or go beyond interval time */
        (0 == link->send_st_min || (0 != link->send_st_min && IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_st)))) {
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	7c9b      	ldrb	r3, [r3, #18]
        (ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0) &&
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d00c      	beq.n	80017ea <isotp_poll+0x48>
        (0 == link->send_st_min || (0 != link->send_st_min && IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_st)))) {
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	7c9b      	ldrb	r3, [r3, #18]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d039      	beq.n	800184c <isotp_poll+0xaa>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	461c      	mov	r4, r3
 80017de:	f000 f8b3 	bl	8001948 <isotp_user_get_ms>
 80017e2:	4603      	mov	r3, r0
 80017e4:	1ae3      	subs	r3, r4, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	da30      	bge.n	800184c <isotp_poll+0xaa>

            ret = isotp_send_consecutive_frame(link);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff fc4a 	bl	8001084 <isotp_send_consecutive_frame>
 80017f0:	60f8      	str	r0, [r7, #12]
            if (ISOTP_RET_OK == ret) {
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d125      	bne.n	8001844 <isotp_poll+0xa2>
                if (ISOTP_INVALID_BS != link->send_bs_remain) {
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	8a1b      	ldrh	r3, [r3, #16]
 80017fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001800:	4293      	cmp	r3, r2
 8001802:	d005      	beq.n	8001810 <isotp_poll+0x6e>
                    link->send_bs_remain -= 1;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	8a1b      	ldrh	r3, [r3, #16]
 8001808:	3b01      	subs	r3, #1
 800180a:	b29a      	uxth	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	821a      	strh	r2, [r3, #16]
                }
                link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 8001810:	f000 f89a 	bl	8001948 <isotp_user_get_ms>
 8001814:	4603      	mov	r3, r0
 8001816:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	619a      	str	r2, [r3, #24]
                link->send_timer_st = isotp_user_get_ms() + link->send_st_min;
 800181e:	f000 f893 	bl	8001948 <isotp_user_get_ms>
 8001822:	4602      	mov	r2, r0
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	7c9b      	ldrb	r3, [r3, #18]
 8001828:	441a      	add	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	615a      	str	r2, [r3, #20]

                /* check if send finish */
                if (link->send_offset >= link->send_size) {
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	899a      	ldrh	r2, [r3, #12]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	895b      	ldrh	r3, [r3, #10]
 8001836:	429a      	cmp	r2, r3
 8001838:	d308      	bcc.n	800184c <isotp_poll+0xaa>
                    link->send_status = ISOTP_SEND_STATUS_IDLE;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 2020 	strb.w	r2, [r3, #32]
 8001842:	e003      	b.n	800184c <isotp_poll+0xaa>
                }
            } else {
                link->send_status = ISOTP_SEND_STATUS_ERROR;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2202      	movs	r2, #2
 8001848:	f883 2020 	strb.w	r2, [r3, #32]
            }
        }

        /* check timeout */
        if (IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_bs)) {
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	461c      	mov	r4, r3
 8001852:	f000 f879 	bl	8001948 <isotp_user_get_ms>
 8001856:	4603      	mov	r3, r0
 8001858:	1ae3      	subs	r3, r4, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	da07      	bge.n	800186e <isotp_poll+0xcc>
            link->send_protocol_result = ISOTP_PROTOCOL_RESULT_TIMEOUT_BS;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f06f 0201 	mvn.w	r2, #1
 8001864:	61da      	str	r2, [r3, #28]
            link->send_status = ISOTP_SEND_STATUS_ERROR;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2202      	movs	r2, #2
 800186a:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }

    /* only polling when operation in progress */
    if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001874:	2b01      	cmp	r3, #1
 8001876:	d111      	bne.n	800189c <isotp_poll+0xfa>

        /* check timeout */
        if (IsoTpTimeAfter(isotp_user_get_ms(), link->receive_timer_cr)) {
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800187c:	461c      	mov	r4, r3
 800187e:	f000 f863 	bl	8001948 <isotp_user_get_ms>
 8001882:	4603      	mov	r3, r0
 8001884:	1ae3      	subs	r3, r4, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	da08      	bge.n	800189c <isotp_poll+0xfa>
            link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_TIMEOUT_CR;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f06f 0202 	mvn.w	r2, #2
 8001890:	639a      	str	r2, [r3, #56]	@ 0x38
            link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        }
    }

    return;
 800189a:	bf00      	nop
 800189c:	bf00      	nop
}
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd90      	pop	{r4, r7, pc}

080018a4 <isotp_user_debug>:
#include "usart.h"

#define DEBUG_MSG_MAX 1024

void isotp_user_debug(const char* message, ...)
{
 80018a4:	b40f      	push	{r0, r1, r2, r3}
 80018a6:	b580      	push	{r7, lr}
 80018a8:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 80018ac:	af00      	add	r7, sp, #0
	char debug_msg[DEBUG_MSG_MAX] = {0, };
 80018ae:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80018b2:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80018b6:	4618      	mov	r0, r3
 80018b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018bc:	461a      	mov	r2, r3
 80018be:	2100      	movs	r1, #0
 80018c0:	f009 f9ec 	bl	800ac9c <memset>
	va_list va = {0, };
 80018c4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80018c8:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
	va_start(va, message);
 80018d0:	f207 4214 	addw	r2, r7, #1044	@ 0x414
 80018d4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80018d8:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 80018dc:	601a      	str	r2, [r3, #0]
	vsnprintf(debug_msg, sizeof(debug_msg), message, va);
 80018de:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80018e2:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 80018e6:	f107 0008 	add.w	r0, r7, #8
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f8d7 2410 	ldr.w	r2, [r7, #1040]	@ 0x410
 80018f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018f4:	f009 f930 	bl	800ab58 <vsniprintf>
	va_end(va);
	printr("%s", debug_msg);
 80018f8:	f107 0308 	add.w	r3, r7, #8
 80018fc:	4619      	mov	r1, r3
 80018fe:	4805      	ldr	r0, [pc, #20]	@ (8001914 <isotp_user_debug+0x70>)
 8001900:	f009 f826 	bl	800a950 <iprintf>
}
 8001904:	bf00      	nop
 8001906:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 800190a:	46bd      	mov	sp, r7
 800190c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001910:	b004      	add	sp, #16
 8001912:	4770      	bx	lr
 8001914:	0800bf5c 	.word	0x0800bf5c

08001918 <isotp_user_send_can>:

/* user implemented, send can message. should return ISOTP_RET_OK when success.
*/
int isotp_user_send_can(uint32_t arbitration_id, uint8_t* data, uint8_t size)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	4613      	mov	r3, r2
 8001924:	71fb      	strb	r3, [r7, #7]
	if(can1_send(data, size, arbitration_id) < 0)
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	4619      	mov	r1, r3
 800192c:	68b8      	ldr	r0, [r7, #8]
 800192e:	f7ff f92f 	bl	8000b90 <can1_send>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	da02      	bge.n	800193e <isotp_user_send_can+0x26>
	{
		return ISOTP_RET_ERROR;
 8001938:	f04f 33ff 	mov.w	r3, #4294967295
 800193c:	e000      	b.n	8001940 <isotp_user_send_can+0x28>
	}

	return ISOTP_RET_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <isotp_user_get_ms>:

/* user implemented, get millisecond */
uint32_t isotp_user_get_ms(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 800194c:	f000 fcf0 	bl	8002330 <HAL_GetTick>
 8001950:	4603      	mov	r3, r0
}
 8001952:	4618      	mov	r0, r3
 8001954:	bd80      	pop	{r7, pc}

08001956 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800195a:	f000 f893 	bl	8001a84 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800195e:	f000 fc61 	bl	8002224 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001962:	f000 f813 	bl	800198c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001966:	f7ff fa75 	bl	8000e54 <MX_GPIO_Init>
  MX_DMA_Init();
 800196a:	f7fe fea7 	bl	80006bc <MX_DMA_Init>
  MX_FDCAN1_Init();
 800196e:	f7fe fec5 	bl	80006fc <MX_FDCAN1_Init>
  MX_USART1_UART_Init();
 8001972:	f000 fa95 	bl	8001ea0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  	terminal_init();
 8001976:	f000 fb7b 	bl	8002070 <terminal_init>
  	can1_init();
 800197a:	f7ff f82f 	bl	80009dc <can1_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uart1_work();
 800197e:	f000 fbf1 	bl	8002164 <uart1_work>
	  can1_work();
 8001982:	f7ff f95f 	bl	8000c44 <can1_work>
	  uart1_work();
 8001986:	bf00      	nop
 8001988:	e7f9      	b.n	800197e <main+0x28>
	...

0800198c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b09c      	sub	sp, #112	@ 0x70
 8001990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001992:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001996:	224c      	movs	r2, #76	@ 0x4c
 8001998:	2100      	movs	r1, #0
 800199a:	4618      	mov	r0, r3
 800199c:	f009 f97e 	bl	800ac9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a0:	1d3b      	adds	r3, r7, #4
 80019a2:	2220      	movs	r2, #32
 80019a4:	2100      	movs	r1, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f009 f978 	bl	800ac9c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80019ac:	2002      	movs	r0, #2
 80019ae:	f004 fcd7 	bl	8006360 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80019b2:	2300      	movs	r3, #0
 80019b4:	603b      	str	r3, [r7, #0]
 80019b6:	4b31      	ldr	r3, [pc, #196]	@ (8001a7c <SystemClock_Config+0xf0>)
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	4a30      	ldr	r2, [pc, #192]	@ (8001a7c <SystemClock_Config+0xf0>)
 80019bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019c0:	6193      	str	r3, [r2, #24]
 80019c2:	4b2e      	ldr	r3, [pc, #184]	@ (8001a7c <SystemClock_Config+0xf0>)
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019ca:	603b      	str	r3, [r7, #0]
 80019cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001a80 <SystemClock_Config+0xf4>)
 80019ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d0:	4a2b      	ldr	r2, [pc, #172]	@ (8001a80 <SystemClock_Config+0xf4>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80019d8:	4b29      	ldr	r3, [pc, #164]	@ (8001a80 <SystemClock_Config+0xf4>)
 80019da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	603b      	str	r3, [r7, #0]
 80019e2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80019e4:	bf00      	nop
 80019e6:	4b25      	ldr	r3, [pc, #148]	@ (8001a7c <SystemClock_Config+0xf0>)
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019f2:	d1f8      	bne.n	80019e6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019f4:	2302      	movs	r3, #2
 80019f6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80019f8:	2301      	movs	r3, #1
 80019fa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019fc:	2340      	movs	r3, #64	@ 0x40
 80019fe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a00:	2302      	movs	r3, #2
 8001a02:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a04:	2300      	movs	r3, #0
 8001a06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a08:	2304      	movs	r3, #4
 8001a0a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001a0c:	233c      	movs	r3, #60	@ 0x3c
 8001a0e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001a10:	2302      	movs	r3, #2
 8001a12:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001a14:	2308      	movs	r3, #8
 8001a16:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001a1c:	230c      	movs	r3, #12
 8001a1e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f004 fcd1 	bl	80063d4 <HAL_RCC_OscConfig>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001a38:	f000 f850 	bl	8001adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a3c:	233f      	movs	r3, #63	@ 0x3f
 8001a3e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a40:	2303      	movs	r3, #3
 8001a42:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001a48:	2308      	movs	r3, #8
 8001a4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001a4c:	2340      	movs	r3, #64	@ 0x40
 8001a4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001a50:	2340      	movs	r3, #64	@ 0x40
 8001a52:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001a54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a58:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001a5a:	2340      	movs	r3, #64	@ 0x40
 8001a5c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a5e:	1d3b      	adds	r3, r7, #4
 8001a60:	2104      	movs	r1, #4
 8001a62:	4618      	mov	r0, r3
 8001a64:	f005 f910 	bl	8006c88 <HAL_RCC_ClockConfig>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001a6e:	f000 f835 	bl	8001adc <Error_Handler>
  }
}
 8001a72:	bf00      	nop
 8001a74:	3770      	adds	r7, #112	@ 0x70
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	58024800 	.word	0x58024800
 8001a80:	58000400 	.word	0x58000400

08001a84 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001a8a:	463b      	mov	r3, r7
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001a96:	f000 fda5 	bl	80025e4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001aa6:	231f      	movs	r3, #31
 8001aa8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001aaa:	2387      	movs	r3, #135	@ 0x87
 8001aac:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001aba:	2301      	movs	r3, #1
 8001abc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001ac6:	463b      	mov	r3, r7
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f000 fdc3 	bl	8002654 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001ace:	2004      	movs	r0, #4
 8001ad0:	f000 fda0 	bl	8002614 <HAL_MPU_Enable>

}
 8001ad4:	bf00      	nop
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae0:	b672      	cpsid	i
}
 8001ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ae4:	bf00      	nop
 8001ae6:	e7fd      	b.n	8001ae4 <Error_Handler+0x8>

08001ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aee:	4b0a      	ldr	r3, [pc, #40]	@ (8001b18 <HAL_MspInit+0x30>)
 8001af0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001af4:	4a08      	ldr	r2, [pc, #32]	@ (8001b18 <HAL_MspInit+0x30>)
 8001af6:	f043 0302 	orr.w	r3, r3, #2
 8001afa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001afe:	4b06      	ldr	r3, [pc, #24]	@ (8001b18 <HAL_MspInit+0x30>)
 8001b00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	58024400 	.word	0x58024400

08001b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b20:	bf00      	nop
 8001b22:	e7fd      	b.n	8001b20 <NMI_Handler+0x4>

08001b24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b28:	bf00      	nop
 8001b2a:	e7fd      	b.n	8001b28 <HardFault_Handler+0x4>

08001b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b30:	bf00      	nop
 8001b32:	e7fd      	b.n	8001b30 <MemManage_Handler+0x4>

08001b34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b38:	bf00      	nop
 8001b3a:	e7fd      	b.n	8001b38 <BusFault_Handler+0x4>

08001b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b40:	bf00      	nop
 8001b42:	e7fd      	b.n	8001b40 <UsageFault_Handler+0x4>

08001b44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b72:	f000 fbc9 	bl	8002308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001b80:	4802      	ldr	r0, [pc, #8]	@ (8001b8c <DMA1_Stream0_IRQHandler+0x10>)
 8001b82:	f001 fb6d 	bl	8003260 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	2400221c 	.word	0x2400221c

08001b90 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001b94:	4802      	ldr	r0, [pc, #8]	@ (8001ba0 <FDCAN1_IT0_IRQHandler+0x10>)
 8001b96:	f003 fc1b 	bl	80053d0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	240000a0 	.word	0x240000a0

08001ba4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return 1;
 8001ba8:	2301      	movs	r3, #1
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <_kill>:

int _kill(int pid, int sig)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bbe:	f009 f8bb 	bl	800ad38 <__errno>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2216      	movs	r2, #22
 8001bc6:	601a      	str	r2, [r3, #0]
  return -1;
 8001bc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <_exit>:

void _exit (int status)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff ffe7 	bl	8001bb4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001be6:	bf00      	nop
 8001be8:	e7fd      	b.n	8001be6 <_exit+0x12>

08001bea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b086      	sub	sp, #24
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	60f8      	str	r0, [r7, #12]
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	e00a      	b.n	8001c12 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bfc:	f3af 8000 	nop.w
 8001c00:	4601      	mov	r1, r0
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	60ba      	str	r2, [r7, #8]
 8001c08:	b2ca      	uxtb	r2, r1
 8001c0a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	dbf0      	blt.n	8001bfc <_read+0x12>
  }

  return len;
 8001c1a:	687b      	ldr	r3, [r7, #4]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	e009      	b.n	8001c4a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	1c5a      	adds	r2, r3, #1
 8001c3a:	60ba      	str	r2, [r7, #8]
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 fa2e 	bl	80020a0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	3301      	adds	r3, #1
 8001c48:	617b      	str	r3, [r7, #20]
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	dbf1      	blt.n	8001c36 <_write+0x12>
  }
  return len;
 8001c52:	687b      	ldr	r3, [r7, #4]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <_close>:

int _close(int file)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c84:	605a      	str	r2, [r3, #4]
  return 0;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <_isatty>:

int _isatty(int file)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c9c:	2301      	movs	r3, #1
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b085      	sub	sp, #20
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	60f8      	str	r0, [r7, #12]
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ccc:	4a14      	ldr	r2, [pc, #80]	@ (8001d20 <_sbrk+0x5c>)
 8001cce:	4b15      	ldr	r3, [pc, #84]	@ (8001d24 <_sbrk+0x60>)
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cd8:	4b13      	ldr	r3, [pc, #76]	@ (8001d28 <_sbrk+0x64>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d102      	bne.n	8001ce6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ce0:	4b11      	ldr	r3, [pc, #68]	@ (8001d28 <_sbrk+0x64>)
 8001ce2:	4a12      	ldr	r2, [pc, #72]	@ (8001d2c <_sbrk+0x68>)
 8001ce4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ce6:	4b10      	ldr	r3, [pc, #64]	@ (8001d28 <_sbrk+0x64>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d207      	bcs.n	8001d04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cf4:	f009 f820 	bl	800ad38 <__errno>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	220c      	movs	r2, #12
 8001cfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001d02:	e009      	b.n	8001d18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d04:	4b08      	ldr	r3, [pc, #32]	@ (8001d28 <_sbrk+0x64>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d0a:	4b07      	ldr	r3, [pc, #28]	@ (8001d28 <_sbrk+0x64>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	4a05      	ldr	r2, [pc, #20]	@ (8001d28 <_sbrk+0x64>)
 8001d14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d16:	68fb      	ldr	r3, [r7, #12]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	24080000 	.word	0x24080000
 8001d24:	00000400 	.word	0x00000400
 8001d28:	24002184 	.word	0x24002184
 8001d2c:	240024e8 	.word	0x240024e8

08001d30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d34:	4b43      	ldr	r3, [pc, #268]	@ (8001e44 <SystemInit+0x114>)
 8001d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d3a:	4a42      	ldr	r2, [pc, #264]	@ (8001e44 <SystemInit+0x114>)
 8001d3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d44:	4b40      	ldr	r3, [pc, #256]	@ (8001e48 <SystemInit+0x118>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 030f 	and.w	r3, r3, #15
 8001d4c:	2b06      	cmp	r3, #6
 8001d4e:	d807      	bhi.n	8001d60 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d50:	4b3d      	ldr	r3, [pc, #244]	@ (8001e48 <SystemInit+0x118>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f023 030f 	bic.w	r3, r3, #15
 8001d58:	4a3b      	ldr	r2, [pc, #236]	@ (8001e48 <SystemInit+0x118>)
 8001d5a:	f043 0307 	orr.w	r3, r3, #7
 8001d5e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001d60:	4b3a      	ldr	r3, [pc, #232]	@ (8001e4c <SystemInit+0x11c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a39      	ldr	r2, [pc, #228]	@ (8001e4c <SystemInit+0x11c>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d6c:	4b37      	ldr	r3, [pc, #220]	@ (8001e4c <SystemInit+0x11c>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001d72:	4b36      	ldr	r3, [pc, #216]	@ (8001e4c <SystemInit+0x11c>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	4935      	ldr	r1, [pc, #212]	@ (8001e4c <SystemInit+0x11c>)
 8001d78:	4b35      	ldr	r3, [pc, #212]	@ (8001e50 <SystemInit+0x120>)
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d7e:	4b32      	ldr	r3, [pc, #200]	@ (8001e48 <SystemInit+0x118>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0308 	and.w	r3, r3, #8
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d007      	beq.n	8001d9a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d8a:	4b2f      	ldr	r3, [pc, #188]	@ (8001e48 <SystemInit+0x118>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f023 030f 	bic.w	r3, r3, #15
 8001d92:	4a2d      	ldr	r2, [pc, #180]	@ (8001e48 <SystemInit+0x118>)
 8001d94:	f043 0307 	orr.w	r3, r3, #7
 8001d98:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001d9a:	4b2c      	ldr	r3, [pc, #176]	@ (8001e4c <SystemInit+0x11c>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001da0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e4c <SystemInit+0x11c>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001da6:	4b29      	ldr	r3, [pc, #164]	@ (8001e4c <SystemInit+0x11c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001dac:	4b27      	ldr	r3, [pc, #156]	@ (8001e4c <SystemInit+0x11c>)
 8001dae:	4a29      	ldr	r2, [pc, #164]	@ (8001e54 <SystemInit+0x124>)
 8001db0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001db2:	4b26      	ldr	r3, [pc, #152]	@ (8001e4c <SystemInit+0x11c>)
 8001db4:	4a28      	ldr	r2, [pc, #160]	@ (8001e58 <SystemInit+0x128>)
 8001db6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001db8:	4b24      	ldr	r3, [pc, #144]	@ (8001e4c <SystemInit+0x11c>)
 8001dba:	4a28      	ldr	r2, [pc, #160]	@ (8001e5c <SystemInit+0x12c>)
 8001dbc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001dbe:	4b23      	ldr	r3, [pc, #140]	@ (8001e4c <SystemInit+0x11c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001dc4:	4b21      	ldr	r3, [pc, #132]	@ (8001e4c <SystemInit+0x11c>)
 8001dc6:	4a25      	ldr	r2, [pc, #148]	@ (8001e5c <SystemInit+0x12c>)
 8001dc8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001dca:	4b20      	ldr	r3, [pc, #128]	@ (8001e4c <SystemInit+0x11c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001dd0:	4b1e      	ldr	r3, [pc, #120]	@ (8001e4c <SystemInit+0x11c>)
 8001dd2:	4a22      	ldr	r2, [pc, #136]	@ (8001e5c <SystemInit+0x12c>)
 8001dd4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e4c <SystemInit+0x11c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e4c <SystemInit+0x11c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a1a      	ldr	r2, [pc, #104]	@ (8001e4c <SystemInit+0x11c>)
 8001de2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001de6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001de8:	4b18      	ldr	r3, [pc, #96]	@ (8001e4c <SystemInit+0x11c>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001dee:	4b1c      	ldr	r3, [pc, #112]	@ (8001e60 <SystemInit+0x130>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e64 <SystemInit+0x134>)
 8001df4:	4013      	ands	r3, r2
 8001df6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001dfa:	d202      	bcs.n	8001e02 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8001e68 <SystemInit+0x138>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001e02:	4b12      	ldr	r3, [pc, #72]	@ (8001e4c <SystemInit+0x11c>)
 8001e04:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001e08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d113      	bne.n	8001e38 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001e10:	4b0e      	ldr	r3, [pc, #56]	@ (8001e4c <SystemInit+0x11c>)
 8001e12:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001e16:	4a0d      	ldr	r2, [pc, #52]	@ (8001e4c <SystemInit+0x11c>)
 8001e18:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e1c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001e20:	4b12      	ldr	r3, [pc, #72]	@ (8001e6c <SystemInit+0x13c>)
 8001e22:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001e26:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001e28:	4b08      	ldr	r3, [pc, #32]	@ (8001e4c <SystemInit+0x11c>)
 8001e2a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001e2e:	4a07      	ldr	r2, [pc, #28]	@ (8001e4c <SystemInit+0x11c>)
 8001e30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001e34:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	e000ed00 	.word	0xe000ed00
 8001e48:	52002000 	.word	0x52002000
 8001e4c:	58024400 	.word	0x58024400
 8001e50:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e54:	02020200 	.word	0x02020200
 8001e58:	01ff0000 	.word	0x01ff0000
 8001e5c:	01010280 	.word	0x01010280
 8001e60:	5c001000 	.word	0x5c001000
 8001e64:	ffff0000 	.word	0xffff0000
 8001e68:	51008108 	.word	0x51008108
 8001e6c:	52004000 	.word	0x52004000

08001e70 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001e74:	4b09      	ldr	r3, [pc, #36]	@ (8001e9c <ExitRun0Mode+0x2c>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	4a08      	ldr	r2, [pc, #32]	@ (8001e9c <ExitRun0Mode+0x2c>)
 8001e7a:	f043 0302 	orr.w	r3, r3, #2
 8001e7e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001e80:	bf00      	nop
 8001e82:	4b06      	ldr	r3, [pc, #24]	@ (8001e9c <ExitRun0Mode+0x2c>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d0f9      	beq.n	8001e82 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001e8e:	bf00      	nop
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	58024800 	.word	0x58024800

08001ea0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ea4:	4b22      	ldr	r3, [pc, #136]	@ (8001f30 <MX_USART1_UART_Init+0x90>)
 8001ea6:	4a23      	ldr	r2, [pc, #140]	@ (8001f34 <MX_USART1_UART_Init+0x94>)
 8001ea8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001eaa:	4b21      	ldr	r3, [pc, #132]	@ (8001f30 <MX_USART1_UART_Init+0x90>)
 8001eac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001eb0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001eb2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f30 <MX_USART1_UART_Init+0x90>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f30 <MX_USART1_UART_Init+0x90>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8001f30 <MX_USART1_UART_Init+0x90>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f30 <MX_USART1_UART_Init+0x90>)
 8001ec6:	220c      	movs	r2, #12
 8001ec8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eca:	4b19      	ldr	r3, [pc, #100]	@ (8001f30 <MX_USART1_UART_Init+0x90>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed0:	4b17      	ldr	r3, [pc, #92]	@ (8001f30 <MX_USART1_UART_Init+0x90>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ed6:	4b16      	ldr	r3, [pc, #88]	@ (8001f30 <MX_USART1_UART_Init+0x90>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001edc:	4b14      	ldr	r3, [pc, #80]	@ (8001f30 <MX_USART1_UART_Init+0x90>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ee2:	4b13      	ldr	r3, [pc, #76]	@ (8001f30 <MX_USART1_UART_Init+0x90>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ee8:	4811      	ldr	r0, [pc, #68]	@ (8001f30 <MX_USART1_UART_Init+0x90>)
 8001eea:	f007 f885 	bl	8008ff8 <HAL_UART_Init>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001ef4:	f7ff fdf2 	bl	8001adc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ef8:	2100      	movs	r1, #0
 8001efa:	480d      	ldr	r0, [pc, #52]	@ (8001f30 <MX_USART1_UART_Init+0x90>)
 8001efc:	f008 fb6c 	bl	800a5d8 <HAL_UARTEx_SetTxFifoThreshold>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001f06:	f7ff fde9 	bl	8001adc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4808      	ldr	r0, [pc, #32]	@ (8001f30 <MX_USART1_UART_Init+0x90>)
 8001f0e:	f008 fba1 	bl	800a654 <HAL_UARTEx_SetRxFifoThreshold>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001f18:	f7ff fde0 	bl	8001adc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001f1c:	4804      	ldr	r0, [pc, #16]	@ (8001f30 <MX_USART1_UART_Init+0x90>)
 8001f1e:	f008 fb22 	bl	800a566 <HAL_UARTEx_DisableFifoMode>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001f28:	f7ff fdd8 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f2c:	bf00      	nop
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	24002188 	.word	0x24002188
 8001f34:	40011000 	.word	0x40011000

08001f38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b0ba      	sub	sp, #232	@ 0xe8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f50:	f107 0310 	add.w	r3, r7, #16
 8001f54:	22c0      	movs	r2, #192	@ 0xc0
 8001f56:	2100      	movs	r1, #0
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f008 fe9f 	bl	800ac9c <memset>
  if(uartHandle->Instance==USART1)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a3e      	ldr	r2, [pc, #248]	@ (800205c <HAL_UART_MspInit+0x124>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d175      	bne.n	8002054 <HAL_UART_MspInit+0x11c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f68:	f04f 0201 	mov.w	r2, #1
 8001f6c:	f04f 0300 	mov.w	r3, #0
 8001f70:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f7a:	f107 0310 	add.w	r3, r7, #16
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f005 fa0e 	bl	80073a0 <HAL_RCCEx_PeriphCLKConfig>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001f8a:	f7ff fda7 	bl	8001adc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f8e:	4b34      	ldr	r3, [pc, #208]	@ (8002060 <HAL_UART_MspInit+0x128>)
 8001f90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f94:	4a32      	ldr	r2, [pc, #200]	@ (8002060 <HAL_UART_MspInit+0x128>)
 8001f96:	f043 0310 	orr.w	r3, r3, #16
 8001f9a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f9e:	4b30      	ldr	r3, [pc, #192]	@ (8002060 <HAL_UART_MspInit+0x128>)
 8001fa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fa4:	f003 0310 	and.w	r3, r3, #16
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fac:	4b2c      	ldr	r3, [pc, #176]	@ (8002060 <HAL_UART_MspInit+0x128>)
 8001fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fb2:	4a2b      	ldr	r2, [pc, #172]	@ (8002060 <HAL_UART_MspInit+0x128>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fbc:	4b28      	ldr	r3, [pc, #160]	@ (8002060 <HAL_UART_MspInit+0x128>)
 8001fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	60bb      	str	r3, [r7, #8]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001fca:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001fce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fe4:	2307      	movs	r3, #7
 8001fe6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fea:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001fee:	4619      	mov	r1, r3
 8001ff0:	481c      	ldr	r0, [pc, #112]	@ (8002064 <HAL_UART_MspInit+0x12c>)
 8001ff2:	f003 fefb 	bl	8005dec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8001ff6:	4b1c      	ldr	r3, [pc, #112]	@ (8002068 <HAL_UART_MspInit+0x130>)
 8001ff8:	4a1c      	ldr	r2, [pc, #112]	@ (800206c <HAL_UART_MspInit+0x134>)
 8001ffa:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001ffc:	4b1a      	ldr	r3, [pc, #104]	@ (8002068 <HAL_UART_MspInit+0x130>)
 8001ffe:	2229      	movs	r2, #41	@ 0x29
 8002000:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002002:	4b19      	ldr	r3, [pc, #100]	@ (8002068 <HAL_UART_MspInit+0x130>)
 8002004:	2200      	movs	r2, #0
 8002006:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002008:	4b17      	ldr	r3, [pc, #92]	@ (8002068 <HAL_UART_MspInit+0x130>)
 800200a:	2200      	movs	r2, #0
 800200c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800200e:	4b16      	ldr	r3, [pc, #88]	@ (8002068 <HAL_UART_MspInit+0x130>)
 8002010:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002014:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002016:	4b14      	ldr	r3, [pc, #80]	@ (8002068 <HAL_UART_MspInit+0x130>)
 8002018:	2200      	movs	r2, #0
 800201a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800201c:	4b12      	ldr	r3, [pc, #72]	@ (8002068 <HAL_UART_MspInit+0x130>)
 800201e:	2200      	movs	r2, #0
 8002020:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002022:	4b11      	ldr	r3, [pc, #68]	@ (8002068 <HAL_UART_MspInit+0x130>)
 8002024:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002028:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800202a:	4b0f      	ldr	r3, [pc, #60]	@ (8002068 <HAL_UART_MspInit+0x130>)
 800202c:	2200      	movs	r2, #0
 800202e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002030:	4b0d      	ldr	r3, [pc, #52]	@ (8002068 <HAL_UART_MspInit+0x130>)
 8002032:	2200      	movs	r2, #0
 8002034:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002036:	480c      	ldr	r0, [pc, #48]	@ (8002068 <HAL_UART_MspInit+0x130>)
 8002038:	f000 fb4c 	bl	80026d4 <HAL_DMA_Init>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8002042:	f7ff fd4b 	bl	8001adc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a07      	ldr	r2, [pc, #28]	@ (8002068 <HAL_UART_MspInit+0x130>)
 800204a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800204e:	4a06      	ldr	r2, [pc, #24]	@ (8002068 <HAL_UART_MspInit+0x130>)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002054:	bf00      	nop
 8002056:	37e8      	adds	r7, #232	@ 0xe8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40011000 	.word	0x40011000
 8002060:	58024400 	.word	0x58024400
 8002064:	58020000 	.word	0x58020000
 8002068:	2400221c 	.word	0x2400221c
 800206c:	40020010 	.word	0x40020010

08002070 <terminal_init>:

/* USER CODE BEGIN 1 */
uart_recv_t uart1_recv = {0, };

void terminal_init()
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
	if(HAL_UART_Receive_DMA(&huart1, uart1_recv.buf, sizeof(uart1_recv.buf)) != HAL_OK)
 8002074:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002078:	4906      	ldr	r1, [pc, #24]	@ (8002094 <terminal_init+0x24>)
 800207a:	4807      	ldr	r0, [pc, #28]	@ (8002098 <terminal_init+0x28>)
 800207c:	f007 f89a 	bl	80091b4 <HAL_UART_Receive_DMA>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d004      	beq.n	8002090 <terminal_init+0x20>
	{
		printr("fail to recv uart");
 8002086:	4805      	ldr	r0, [pc, #20]	@ (800209c <terminal_init+0x2c>)
 8002088:	f008 fcca 	bl	800aa20 <puts>
		Error_Handler();
 800208c:	f7ff fd26 	bl	8001adc <Error_Handler>
	}
}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}
 8002094:	24002294 	.word	0x24002294
 8002098:	24002188 	.word	0x24002188
 800209c:	0800bf70 	.word	0x0800bf70

080020a0 <__io_putchar>:

int __io_putchar(int ch)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
	uint8_t putchar = ch;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	73fb      	strb	r3, [r7, #15]
	if(HAL_UART_Transmit(&huart1, &putchar, sizeof(putchar), 10) != HAL_OK)
 80020ae:	f107 010f 	add.w	r1, r7, #15
 80020b2:	230a      	movs	r3, #10
 80020b4:	2201      	movs	r2, #1
 80020b6:	4806      	ldr	r0, [pc, #24]	@ (80020d0 <__io_putchar+0x30>)
 80020b8:	f006 ffee 	bl	8009098 <HAL_UART_Transmit>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <__io_putchar+0x26>
	{
		Error_Handler();
 80020c2:	f7ff fd0b 	bl	8001adc <Error_Handler>
	}

	return ch;
 80020c6:	687b      	ldr	r3, [r7, #4]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	24002188 	.word	0x24002188

080020d4 <terminal_recv>:

static int terminal_recv(uint8_t *buf, size_t buf_size)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
	uint32_t recv_index = sizeof(uart1_recv.buf) - ((DMA_Stream_TypeDef *)huart1.hdmarx->Instance)->NDTR;
 80020de:	4b1f      	ldr	r3, [pc, #124]	@ (800215c <terminal_recv+0x88>)
 80020e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80020ec:	60bb      	str	r3, [r7, #8]
	int i = 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]

	if(uart1_recv.read_index == recv_index)
 80020f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002160 <terminal_recv+0x8c>)
 80020f4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80020f8:	68ba      	ldr	r2, [r7, #8]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d102      	bne.n	8002104 <terminal_recv+0x30>
	{
		return -1;
 80020fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002102:	e024      	b.n	800214e <terminal_recv+0x7a>
	}

	for(i = 0; i < buf_size; i++)
 8002104:	2300      	movs	r3, #0
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	e019      	b.n	800213e <terminal_recv+0x6a>
	{
		buf[i] = uart1_recv.buf[uart1_recv.read_index];
 800210a:	4b15      	ldr	r3, [pc, #84]	@ (8002160 <terminal_recv+0x8c>)
 800210c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	440b      	add	r3, r1
 8002116:	4912      	ldr	r1, [pc, #72]	@ (8002160 <terminal_recv+0x8c>)
 8002118:	5c8a      	ldrb	r2, [r1, r2]
 800211a:	701a      	strb	r2, [r3, #0]
		uart1_recv.read_index = (uart1_recv.read_index + 1) % sizeof(uart1_recv.buf);
 800211c:	4b10      	ldr	r3, [pc, #64]	@ (8002160 <terminal_recv+0x8c>)
 800211e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002122:	3301      	adds	r3, #1
 8002124:	b2db      	uxtb	r3, r3
 8002126:	4a0e      	ldr	r2, [pc, #56]	@ (8002160 <terminal_recv+0x8c>)
 8002128:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
		if(uart1_recv.read_index == recv_index)
 800212c:	4b0c      	ldr	r3, [pc, #48]	@ (8002160 <terminal_recv+0x8c>)
 800212e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	429a      	cmp	r2, r3
 8002136:	d007      	beq.n	8002148 <terminal_recv+0x74>
	for(i = 0; i < buf_size; i++)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	3301      	adds	r3, #1
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	d8e1      	bhi.n	800210a <terminal_recv+0x36>
 8002146:	e000      	b.n	800214a <terminal_recv+0x76>
		{
			break;
 8002148:	bf00      	nop
		}
	}

	return i + 1;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	3301      	adds	r3, #1
}
 800214e:	4618      	mov	r0, r3
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	24002188 	.word	0x24002188
 8002160:	24002294 	.word	0x24002294

08002164 <uart1_work>:

void uart1_work()
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b0c0      	sub	sp, #256	@ 0x100
 8002168:	af00      	add	r7, sp, #0
	static user_timer_t user_timer =
	{
		.timer = 0,
		.condition = 10
	};
	uint8_t recv_buf[UART_RECV_MAX] = {0, };
 800216a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800216e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002172:	4618      	mov	r0, r3
 8002174:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002178:	461a      	mov	r2, r3
 800217a:	2100      	movs	r1, #0
 800217c:	f008 fd8e 	bl	800ac9c <memset>

	check_timer(&user_timer)
 8002180:	f000 f8d6 	bl	8002330 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	4b0f      	ldr	r3, [pc, #60]	@ (80021c4 <uart1_work+0x60>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	1ad2      	subs	r2, r2, r3
 800218c:	4b0d      	ldr	r3, [pc, #52]	@ (80021c4 <uart1_work+0x60>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	429a      	cmp	r2, r3
 8002192:	d912      	bls.n	80021ba <uart1_work+0x56>
	{
		user_timer.timer = HAL_GetTick();
 8002194:	f000 f8cc 	bl	8002330 <HAL_GetTick>
 8002198:	4603      	mov	r3, r0
 800219a:	4a0a      	ldr	r2, [pc, #40]	@ (80021c4 <uart1_work+0x60>)
 800219c:	6013      	str	r3, [r2, #0]
		if(terminal_recv(recv_buf, sizeof(recv_buf)) > 0)
 800219e:	463b      	mov	r3, r7
 80021a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff ff95 	bl	80020d4 <terminal_recv>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	dd04      	ble.n	80021ba <uart1_work+0x56>
		{
			printb("recv : %s", recv_buf);
 80021b0:	463b      	mov	r3, r7
 80021b2:	4619      	mov	r1, r3
 80021b4:	4804      	ldr	r0, [pc, #16]	@ (80021c8 <uart1_work+0x64>)
 80021b6:	f008 fbcb 	bl	800a950 <iprintf>
		}
	}
}
 80021ba:	bf00      	nop
 80021bc:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	24000018 	.word	0x24000018
 80021c8:	0800bf94 	.word	0x0800bf94

080021cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80021cc:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002208 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80021d0:	f7ff fe4e 	bl	8001e70 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80021d4:	f7ff fdac 	bl	8001d30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021d8:	480c      	ldr	r0, [pc, #48]	@ (800220c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021da:	490d      	ldr	r1, [pc, #52]	@ (8002210 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002214 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021e0:	e002      	b.n	80021e8 <LoopCopyDataInit>

080021e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021e6:	3304      	adds	r3, #4

080021e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021ec:	d3f9      	bcc.n	80021e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002218 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021f0:	4c0a      	ldr	r4, [pc, #40]	@ (800221c <LoopFillZerobss+0x22>)
  movs r3, #0
 80021f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021f4:	e001      	b.n	80021fa <LoopFillZerobss>

080021f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021f8:	3204      	adds	r2, #4

080021fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021fc:	d3fb      	bcc.n	80021f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021fe:	f008 fda1 	bl	800ad44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002202:	f7ff fba8 	bl	8001956 <main>
  bx  lr
 8002206:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002208:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800220c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002210:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 8002214:	0800c11c 	.word	0x0800c11c
  ldr r2, =_sbss
 8002218:	24000084 	.word	0x24000084
  ldr r4, =_ebss
 800221c:	240024e8 	.word	0x240024e8

08002220 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002220:	e7fe      	b.n	8002220 <ADC3_IRQHandler>
	...

08002224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800222a:	2003      	movs	r0, #3
 800222c:	f000 f98c 	bl	8002548 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002230:	f004 fee0 	bl	8006ff4 <HAL_RCC_GetSysClockFreq>
 8002234:	4602      	mov	r2, r0
 8002236:	4b15      	ldr	r3, [pc, #84]	@ (800228c <HAL_Init+0x68>)
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	0a1b      	lsrs	r3, r3, #8
 800223c:	f003 030f 	and.w	r3, r3, #15
 8002240:	4913      	ldr	r1, [pc, #76]	@ (8002290 <HAL_Init+0x6c>)
 8002242:	5ccb      	ldrb	r3, [r1, r3]
 8002244:	f003 031f 	and.w	r3, r3, #31
 8002248:	fa22 f303 	lsr.w	r3, r2, r3
 800224c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800224e:	4b0f      	ldr	r3, [pc, #60]	@ (800228c <HAL_Init+0x68>)
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	4a0e      	ldr	r2, [pc, #56]	@ (8002290 <HAL_Init+0x6c>)
 8002258:	5cd3      	ldrb	r3, [r2, r3]
 800225a:	f003 031f 	and.w	r3, r3, #31
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	fa22 f303 	lsr.w	r3, r2, r3
 8002264:	4a0b      	ldr	r2, [pc, #44]	@ (8002294 <HAL_Init+0x70>)
 8002266:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002268:	4a0b      	ldr	r2, [pc, #44]	@ (8002298 <HAL_Init+0x74>)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800226e:	200f      	movs	r0, #15
 8002270:	f000 f814 	bl	800229c <HAL_InitTick>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e002      	b.n	8002284 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800227e:	f7ff fc33 	bl	8001ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	58024400 	.word	0x58024400
 8002290:	0800c04c 	.word	0x0800c04c
 8002294:	24000014 	.word	0x24000014
 8002298:	24000010 	.word	0x24000010

0800229c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80022a4:	4b15      	ldr	r3, [pc, #84]	@ (80022fc <HAL_InitTick+0x60>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e021      	b.n	80022f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80022b0:	4b13      	ldr	r3, [pc, #76]	@ (8002300 <HAL_InitTick+0x64>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4b11      	ldr	r3, [pc, #68]	@ (80022fc <HAL_InitTick+0x60>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	4619      	mov	r1, r3
 80022ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022be:	fbb3 f3f1 	udiv	r3, r3, r1
 80022c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 f97f 	bl	80025ca <HAL_SYSTICK_Config>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e00e      	b.n	80022f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b0f      	cmp	r3, #15
 80022da:	d80a      	bhi.n	80022f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022dc:	2200      	movs	r2, #0
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	f04f 30ff 	mov.w	r0, #4294967295
 80022e4:	f000 f93b 	bl	800255e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022e8:	4a06      	ldr	r2, [pc, #24]	@ (8002304 <HAL_InitTick+0x68>)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	e000      	b.n	80022f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	24000024 	.word	0x24000024
 8002300:	24000010 	.word	0x24000010
 8002304:	24000020 	.word	0x24000020

08002308 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800230c:	4b06      	ldr	r3, [pc, #24]	@ (8002328 <HAL_IncTick+0x20>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	461a      	mov	r2, r3
 8002312:	4b06      	ldr	r3, [pc, #24]	@ (800232c <HAL_IncTick+0x24>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4413      	add	r3, r2
 8002318:	4a04      	ldr	r2, [pc, #16]	@ (800232c <HAL_IncTick+0x24>)
 800231a:	6013      	str	r3, [r2, #0]
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	24000024 	.word	0x24000024
 800232c:	24002398 	.word	0x24002398

08002330 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return uwTick;
 8002334:	4b03      	ldr	r3, [pc, #12]	@ (8002344 <HAL_GetTick+0x14>)
 8002336:	681b      	ldr	r3, [r3, #0]
}
 8002338:	4618      	mov	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	24002398 	.word	0x24002398

08002348 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800234c:	4b03      	ldr	r3, [pc, #12]	@ (800235c <HAL_GetREVID+0x14>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	0c1b      	lsrs	r3, r3, #16
}
 8002352:	4618      	mov	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	5c001000 	.word	0x5c001000

08002360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002370:	4b0b      	ldr	r3, [pc, #44]	@ (80023a0 <__NVIC_SetPriorityGrouping+0x40>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800237c:	4013      	ands	r3, r2
 800237e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002388:	4b06      	ldr	r3, [pc, #24]	@ (80023a4 <__NVIC_SetPriorityGrouping+0x44>)
 800238a:	4313      	orrs	r3, r2
 800238c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800238e:	4a04      	ldr	r2, [pc, #16]	@ (80023a0 <__NVIC_SetPriorityGrouping+0x40>)
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	60d3      	str	r3, [r2, #12]
}
 8002394:	bf00      	nop
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	e000ed00 	.word	0xe000ed00
 80023a4:	05fa0000 	.word	0x05fa0000

080023a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023ac:	4b04      	ldr	r3, [pc, #16]	@ (80023c0 <__NVIC_GetPriorityGrouping+0x18>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	0a1b      	lsrs	r3, r3, #8
 80023b2:	f003 0307 	and.w	r3, r3, #7
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	db0b      	blt.n	80023ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023d6:	88fb      	ldrh	r3, [r7, #6]
 80023d8:	f003 021f 	and.w	r2, r3, #31
 80023dc:	4907      	ldr	r1, [pc, #28]	@ (80023fc <__NVIC_EnableIRQ+0x38>)
 80023de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023e2:	095b      	lsrs	r3, r3, #5
 80023e4:	2001      	movs	r0, #1
 80023e6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	e000e100 	.word	0xe000e100

08002400 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800240a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800240e:	2b00      	cmp	r3, #0
 8002410:	db12      	blt.n	8002438 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002412:	88fb      	ldrh	r3, [r7, #6]
 8002414:	f003 021f 	and.w	r2, r3, #31
 8002418:	490a      	ldr	r1, [pc, #40]	@ (8002444 <__NVIC_DisableIRQ+0x44>)
 800241a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800241e:	095b      	lsrs	r3, r3, #5
 8002420:	2001      	movs	r0, #1
 8002422:	fa00 f202 	lsl.w	r2, r0, r2
 8002426:	3320      	adds	r3, #32
 8002428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800242c:	f3bf 8f4f 	dsb	sy
}
 8002430:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002432:	f3bf 8f6f 	isb	sy
}
 8002436:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	e000e100 	.word	0xe000e100

08002448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	6039      	str	r1, [r7, #0]
 8002452:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002454:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002458:	2b00      	cmp	r3, #0
 800245a:	db0a      	blt.n	8002472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	b2da      	uxtb	r2, r3
 8002460:	490c      	ldr	r1, [pc, #48]	@ (8002494 <__NVIC_SetPriority+0x4c>)
 8002462:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002466:	0112      	lsls	r2, r2, #4
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	440b      	add	r3, r1
 800246c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002470:	e00a      	b.n	8002488 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	b2da      	uxtb	r2, r3
 8002476:	4908      	ldr	r1, [pc, #32]	@ (8002498 <__NVIC_SetPriority+0x50>)
 8002478:	88fb      	ldrh	r3, [r7, #6]
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	3b04      	subs	r3, #4
 8002480:	0112      	lsls	r2, r2, #4
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	440b      	add	r3, r1
 8002486:	761a      	strb	r2, [r3, #24]
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	e000e100 	.word	0xe000e100
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800249c:	b480      	push	{r7}
 800249e:	b089      	sub	sp, #36	@ 0x24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	f1c3 0307 	rsb	r3, r3, #7
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	bf28      	it	cs
 80024ba:	2304      	movcs	r3, #4
 80024bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3304      	adds	r3, #4
 80024c2:	2b06      	cmp	r3, #6
 80024c4:	d902      	bls.n	80024cc <NVIC_EncodePriority+0x30>
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	3b03      	subs	r3, #3
 80024ca:	e000      	b.n	80024ce <NVIC_EncodePriority+0x32>
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d0:	f04f 32ff 	mov.w	r2, #4294967295
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43da      	mvns	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	401a      	ands	r2, r3
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024e4:	f04f 31ff 	mov.w	r1, #4294967295
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	fa01 f303 	lsl.w	r3, r1, r3
 80024ee:	43d9      	mvns	r1, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f4:	4313      	orrs	r3, r2
         );
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3724      	adds	r7, #36	@ 0x24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
	...

08002504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3b01      	subs	r3, #1
 8002510:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002514:	d301      	bcc.n	800251a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002516:	2301      	movs	r3, #1
 8002518:	e00f      	b.n	800253a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800251a:	4a0a      	ldr	r2, [pc, #40]	@ (8002544 <SysTick_Config+0x40>)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3b01      	subs	r3, #1
 8002520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002522:	210f      	movs	r1, #15
 8002524:	f04f 30ff 	mov.w	r0, #4294967295
 8002528:	f7ff ff8e 	bl	8002448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800252c:	4b05      	ldr	r3, [pc, #20]	@ (8002544 <SysTick_Config+0x40>)
 800252e:	2200      	movs	r2, #0
 8002530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002532:	4b04      	ldr	r3, [pc, #16]	@ (8002544 <SysTick_Config+0x40>)
 8002534:	2207      	movs	r2, #7
 8002536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	e000e010 	.word	0xe000e010

08002548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff ff05 	bl	8002360 <__NVIC_SetPriorityGrouping>
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b086      	sub	sp, #24
 8002562:	af00      	add	r7, sp, #0
 8002564:	4603      	mov	r3, r0
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	607a      	str	r2, [r7, #4]
 800256a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800256c:	f7ff ff1c 	bl	80023a8 <__NVIC_GetPriorityGrouping>
 8002570:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	68b9      	ldr	r1, [r7, #8]
 8002576:	6978      	ldr	r0, [r7, #20]
 8002578:	f7ff ff90 	bl	800249c <NVIC_EncodePriority>
 800257c:	4602      	mov	r2, r0
 800257e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002582:	4611      	mov	r1, r2
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff ff5f 	bl	8002448 <__NVIC_SetPriority>
}
 800258a:	bf00      	nop
 800258c:	3718      	adds	r7, #24
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b082      	sub	sp, #8
 8002596:	af00      	add	r7, sp, #0
 8002598:	4603      	mov	r3, r0
 800259a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800259c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff ff0f 	bl	80023c4 <__NVIC_EnableIRQ>
}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b082      	sub	sp, #8
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	4603      	mov	r3, r0
 80025b6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80025b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff ff1f 	bl	8002400 <__NVIC_DisableIRQ>
}
 80025c2:	bf00      	nop
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7ff ff96 	bl	8002504 <SysTick_Config>
 80025d8:	4603      	mov	r3, r0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80025e8:	f3bf 8f5f 	dmb	sy
}
 80025ec:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80025ee:	4b07      	ldr	r3, [pc, #28]	@ (800260c <HAL_MPU_Disable+0x28>)
 80025f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f2:	4a06      	ldr	r2, [pc, #24]	@ (800260c <HAL_MPU_Disable+0x28>)
 80025f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025f8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80025fa:	4b05      	ldr	r3, [pc, #20]	@ (8002610 <HAL_MPU_Disable+0x2c>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	605a      	str	r2, [r3, #4]
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	e000ed00 	.word	0xe000ed00
 8002610:	e000ed90 	.word	0xe000ed90

08002614 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800261c:	4a0b      	ldr	r2, [pc, #44]	@ (800264c <HAL_MPU_Enable+0x38>)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002626:	4b0a      	ldr	r3, [pc, #40]	@ (8002650 <HAL_MPU_Enable+0x3c>)
 8002628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262a:	4a09      	ldr	r2, [pc, #36]	@ (8002650 <HAL_MPU_Enable+0x3c>)
 800262c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002630:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002632:	f3bf 8f4f 	dsb	sy
}
 8002636:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002638:	f3bf 8f6f 	isb	sy
}
 800263c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	e000ed90 	.word	0xe000ed90
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	785a      	ldrb	r2, [r3, #1]
 8002660:	4b1b      	ldr	r3, [pc, #108]	@ (80026d0 <HAL_MPU_ConfigRegion+0x7c>)
 8002662:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002664:	4b1a      	ldr	r3, [pc, #104]	@ (80026d0 <HAL_MPU_ConfigRegion+0x7c>)
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	4a19      	ldr	r2, [pc, #100]	@ (80026d0 <HAL_MPU_ConfigRegion+0x7c>)
 800266a:	f023 0301 	bic.w	r3, r3, #1
 800266e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002670:	4a17      	ldr	r2, [pc, #92]	@ (80026d0 <HAL_MPU_ConfigRegion+0x7c>)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	7b1b      	ldrb	r3, [r3, #12]
 800267c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	7adb      	ldrb	r3, [r3, #11]
 8002682:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002684:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	7a9b      	ldrb	r3, [r3, #10]
 800268a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800268c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	7b5b      	ldrb	r3, [r3, #13]
 8002692:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002694:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	7b9b      	ldrb	r3, [r3, #14]
 800269a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800269c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	7bdb      	ldrb	r3, [r3, #15]
 80026a2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80026a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	7a5b      	ldrb	r3, [r3, #9]
 80026aa:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80026ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	7a1b      	ldrb	r3, [r3, #8]
 80026b2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80026b4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	7812      	ldrb	r2, [r2, #0]
 80026ba:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80026bc:	4a04      	ldr	r2, [pc, #16]	@ (80026d0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80026be:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80026c0:	6113      	str	r3, [r2, #16]
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	e000ed90 	.word	0xe000ed90

080026d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80026dc:	f7ff fe28 	bl	8002330 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e316      	b.n	8002d1a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a66      	ldr	r2, [pc, #408]	@ (800288c <HAL_DMA_Init+0x1b8>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d04a      	beq.n	800278c <HAL_DMA_Init+0xb8>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a65      	ldr	r2, [pc, #404]	@ (8002890 <HAL_DMA_Init+0x1bc>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d045      	beq.n	800278c <HAL_DMA_Init+0xb8>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a63      	ldr	r2, [pc, #396]	@ (8002894 <HAL_DMA_Init+0x1c0>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d040      	beq.n	800278c <HAL_DMA_Init+0xb8>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a62      	ldr	r2, [pc, #392]	@ (8002898 <HAL_DMA_Init+0x1c4>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d03b      	beq.n	800278c <HAL_DMA_Init+0xb8>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a60      	ldr	r2, [pc, #384]	@ (800289c <HAL_DMA_Init+0x1c8>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d036      	beq.n	800278c <HAL_DMA_Init+0xb8>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a5f      	ldr	r2, [pc, #380]	@ (80028a0 <HAL_DMA_Init+0x1cc>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d031      	beq.n	800278c <HAL_DMA_Init+0xb8>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a5d      	ldr	r2, [pc, #372]	@ (80028a4 <HAL_DMA_Init+0x1d0>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d02c      	beq.n	800278c <HAL_DMA_Init+0xb8>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a5c      	ldr	r2, [pc, #368]	@ (80028a8 <HAL_DMA_Init+0x1d4>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d027      	beq.n	800278c <HAL_DMA_Init+0xb8>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a5a      	ldr	r2, [pc, #360]	@ (80028ac <HAL_DMA_Init+0x1d8>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d022      	beq.n	800278c <HAL_DMA_Init+0xb8>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a59      	ldr	r2, [pc, #356]	@ (80028b0 <HAL_DMA_Init+0x1dc>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d01d      	beq.n	800278c <HAL_DMA_Init+0xb8>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a57      	ldr	r2, [pc, #348]	@ (80028b4 <HAL_DMA_Init+0x1e0>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d018      	beq.n	800278c <HAL_DMA_Init+0xb8>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a56      	ldr	r2, [pc, #344]	@ (80028b8 <HAL_DMA_Init+0x1e4>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d013      	beq.n	800278c <HAL_DMA_Init+0xb8>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a54      	ldr	r2, [pc, #336]	@ (80028bc <HAL_DMA_Init+0x1e8>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d00e      	beq.n	800278c <HAL_DMA_Init+0xb8>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a53      	ldr	r2, [pc, #332]	@ (80028c0 <HAL_DMA_Init+0x1ec>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d009      	beq.n	800278c <HAL_DMA_Init+0xb8>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a51      	ldr	r2, [pc, #324]	@ (80028c4 <HAL_DMA_Init+0x1f0>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d004      	beq.n	800278c <HAL_DMA_Init+0xb8>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a50      	ldr	r2, [pc, #320]	@ (80028c8 <HAL_DMA_Init+0x1f4>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d101      	bne.n	8002790 <HAL_DMA_Init+0xbc>
 800278c:	2301      	movs	r3, #1
 800278e:	e000      	b.n	8002792 <HAL_DMA_Init+0xbe>
 8002790:	2300      	movs	r3, #0
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 813b 	beq.w	8002a0e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2202      	movs	r2, #2
 800279c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a37      	ldr	r2, [pc, #220]	@ (800288c <HAL_DMA_Init+0x1b8>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d04a      	beq.n	8002848 <HAL_DMA_Init+0x174>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a36      	ldr	r2, [pc, #216]	@ (8002890 <HAL_DMA_Init+0x1bc>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d045      	beq.n	8002848 <HAL_DMA_Init+0x174>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a34      	ldr	r2, [pc, #208]	@ (8002894 <HAL_DMA_Init+0x1c0>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d040      	beq.n	8002848 <HAL_DMA_Init+0x174>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a33      	ldr	r2, [pc, #204]	@ (8002898 <HAL_DMA_Init+0x1c4>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d03b      	beq.n	8002848 <HAL_DMA_Init+0x174>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a31      	ldr	r2, [pc, #196]	@ (800289c <HAL_DMA_Init+0x1c8>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d036      	beq.n	8002848 <HAL_DMA_Init+0x174>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a30      	ldr	r2, [pc, #192]	@ (80028a0 <HAL_DMA_Init+0x1cc>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d031      	beq.n	8002848 <HAL_DMA_Init+0x174>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a2e      	ldr	r2, [pc, #184]	@ (80028a4 <HAL_DMA_Init+0x1d0>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d02c      	beq.n	8002848 <HAL_DMA_Init+0x174>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a2d      	ldr	r2, [pc, #180]	@ (80028a8 <HAL_DMA_Init+0x1d4>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d027      	beq.n	8002848 <HAL_DMA_Init+0x174>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a2b      	ldr	r2, [pc, #172]	@ (80028ac <HAL_DMA_Init+0x1d8>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d022      	beq.n	8002848 <HAL_DMA_Init+0x174>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a2a      	ldr	r2, [pc, #168]	@ (80028b0 <HAL_DMA_Init+0x1dc>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d01d      	beq.n	8002848 <HAL_DMA_Init+0x174>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a28      	ldr	r2, [pc, #160]	@ (80028b4 <HAL_DMA_Init+0x1e0>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d018      	beq.n	8002848 <HAL_DMA_Init+0x174>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a27      	ldr	r2, [pc, #156]	@ (80028b8 <HAL_DMA_Init+0x1e4>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d013      	beq.n	8002848 <HAL_DMA_Init+0x174>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a25      	ldr	r2, [pc, #148]	@ (80028bc <HAL_DMA_Init+0x1e8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d00e      	beq.n	8002848 <HAL_DMA_Init+0x174>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a24      	ldr	r2, [pc, #144]	@ (80028c0 <HAL_DMA_Init+0x1ec>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d009      	beq.n	8002848 <HAL_DMA_Init+0x174>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a22      	ldr	r2, [pc, #136]	@ (80028c4 <HAL_DMA_Init+0x1f0>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d004      	beq.n	8002848 <HAL_DMA_Init+0x174>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a21      	ldr	r2, [pc, #132]	@ (80028c8 <HAL_DMA_Init+0x1f4>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d108      	bne.n	800285a <HAL_DMA_Init+0x186>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0201 	bic.w	r2, r2, #1
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	e007      	b.n	800286a <HAL_DMA_Init+0x196>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 0201 	bic.w	r2, r2, #1
 8002868:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800286a:	e02f      	b.n	80028cc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800286c:	f7ff fd60 	bl	8002330 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b05      	cmp	r3, #5
 8002878:	d928      	bls.n	80028cc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2220      	movs	r2, #32
 800287e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2203      	movs	r2, #3
 8002884:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e246      	b.n	8002d1a <HAL_DMA_Init+0x646>
 800288c:	40020010 	.word	0x40020010
 8002890:	40020028 	.word	0x40020028
 8002894:	40020040 	.word	0x40020040
 8002898:	40020058 	.word	0x40020058
 800289c:	40020070 	.word	0x40020070
 80028a0:	40020088 	.word	0x40020088
 80028a4:	400200a0 	.word	0x400200a0
 80028a8:	400200b8 	.word	0x400200b8
 80028ac:	40020410 	.word	0x40020410
 80028b0:	40020428 	.word	0x40020428
 80028b4:	40020440 	.word	0x40020440
 80028b8:	40020458 	.word	0x40020458
 80028bc:	40020470 	.word	0x40020470
 80028c0:	40020488 	.word	0x40020488
 80028c4:	400204a0 	.word	0x400204a0
 80028c8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1c8      	bne.n	800286c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	4b83      	ldr	r3, [pc, #524]	@ (8002af4 <HAL_DMA_Init+0x420>)
 80028e6:	4013      	ands	r3, r2
 80028e8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80028f2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028fe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800290a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	4313      	orrs	r3, r2
 8002916:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291c:	2b04      	cmp	r3, #4
 800291e:	d107      	bne.n	8002930 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002928:	4313      	orrs	r3, r2
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4313      	orrs	r3, r2
 800292e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002930:	4b71      	ldr	r3, [pc, #452]	@ (8002af8 <HAL_DMA_Init+0x424>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4b71      	ldr	r3, [pc, #452]	@ (8002afc <HAL_DMA_Init+0x428>)
 8002936:	4013      	ands	r3, r2
 8002938:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800293c:	d328      	bcc.n	8002990 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b28      	cmp	r3, #40	@ 0x28
 8002944:	d903      	bls.n	800294e <HAL_DMA_Init+0x27a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	2b2e      	cmp	r3, #46	@ 0x2e
 800294c:	d917      	bls.n	800297e <HAL_DMA_Init+0x2aa>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b3e      	cmp	r3, #62	@ 0x3e
 8002954:	d903      	bls.n	800295e <HAL_DMA_Init+0x28a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b42      	cmp	r3, #66	@ 0x42
 800295c:	d90f      	bls.n	800297e <HAL_DMA_Init+0x2aa>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b46      	cmp	r3, #70	@ 0x46
 8002964:	d903      	bls.n	800296e <HAL_DMA_Init+0x29a>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b48      	cmp	r3, #72	@ 0x48
 800296c:	d907      	bls.n	800297e <HAL_DMA_Init+0x2aa>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b4e      	cmp	r3, #78	@ 0x4e
 8002974:	d905      	bls.n	8002982 <HAL_DMA_Init+0x2ae>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2b52      	cmp	r3, #82	@ 0x52
 800297c:	d801      	bhi.n	8002982 <HAL_DMA_Init+0x2ae>
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <HAL_DMA_Init+0x2b0>
 8002982:	2300      	movs	r3, #0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800298e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f023 0307 	bic.w	r3, r3, #7
 80029a6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d117      	bne.n	80029ea <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00e      	beq.n	80029ea <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f001 fdcf 	bl	8004570 <DMA_CheckFifoParam>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d008      	beq.n	80029ea <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2240      	movs	r2, #64	@ 0x40
 80029dc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e197      	b.n	8002d1a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f001 fd0a 	bl	800440c <DMA_CalcBaseAndBitshift>
 80029f8:	4603      	mov	r3, r0
 80029fa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a00:	f003 031f 	and.w	r3, r3, #31
 8002a04:	223f      	movs	r2, #63	@ 0x3f
 8002a06:	409a      	lsls	r2, r3
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	609a      	str	r2, [r3, #8]
 8002a0c:	e0cd      	b.n	8002baa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a3b      	ldr	r2, [pc, #236]	@ (8002b00 <HAL_DMA_Init+0x42c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d022      	beq.n	8002a5e <HAL_DMA_Init+0x38a>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a39      	ldr	r2, [pc, #228]	@ (8002b04 <HAL_DMA_Init+0x430>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d01d      	beq.n	8002a5e <HAL_DMA_Init+0x38a>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a38      	ldr	r2, [pc, #224]	@ (8002b08 <HAL_DMA_Init+0x434>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d018      	beq.n	8002a5e <HAL_DMA_Init+0x38a>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a36      	ldr	r2, [pc, #216]	@ (8002b0c <HAL_DMA_Init+0x438>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d013      	beq.n	8002a5e <HAL_DMA_Init+0x38a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a35      	ldr	r2, [pc, #212]	@ (8002b10 <HAL_DMA_Init+0x43c>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d00e      	beq.n	8002a5e <HAL_DMA_Init+0x38a>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a33      	ldr	r2, [pc, #204]	@ (8002b14 <HAL_DMA_Init+0x440>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d009      	beq.n	8002a5e <HAL_DMA_Init+0x38a>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a32      	ldr	r2, [pc, #200]	@ (8002b18 <HAL_DMA_Init+0x444>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d004      	beq.n	8002a5e <HAL_DMA_Init+0x38a>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a30      	ldr	r2, [pc, #192]	@ (8002b1c <HAL_DMA_Init+0x448>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d101      	bne.n	8002a62 <HAL_DMA_Init+0x38e>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <HAL_DMA_Init+0x390>
 8002a62:	2300      	movs	r3, #0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 8097 	beq.w	8002b98 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a24      	ldr	r2, [pc, #144]	@ (8002b00 <HAL_DMA_Init+0x42c>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d021      	beq.n	8002ab8 <HAL_DMA_Init+0x3e4>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a22      	ldr	r2, [pc, #136]	@ (8002b04 <HAL_DMA_Init+0x430>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d01c      	beq.n	8002ab8 <HAL_DMA_Init+0x3e4>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a21      	ldr	r2, [pc, #132]	@ (8002b08 <HAL_DMA_Init+0x434>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d017      	beq.n	8002ab8 <HAL_DMA_Init+0x3e4>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a1f      	ldr	r2, [pc, #124]	@ (8002b0c <HAL_DMA_Init+0x438>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d012      	beq.n	8002ab8 <HAL_DMA_Init+0x3e4>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a1e      	ldr	r2, [pc, #120]	@ (8002b10 <HAL_DMA_Init+0x43c>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d00d      	beq.n	8002ab8 <HAL_DMA_Init+0x3e4>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a1c      	ldr	r2, [pc, #112]	@ (8002b14 <HAL_DMA_Init+0x440>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d008      	beq.n	8002ab8 <HAL_DMA_Init+0x3e4>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a1b      	ldr	r2, [pc, #108]	@ (8002b18 <HAL_DMA_Init+0x444>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d003      	beq.n	8002ab8 <HAL_DMA_Init+0x3e4>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a19      	ldr	r2, [pc, #100]	@ (8002b1c <HAL_DMA_Init+0x448>)
 8002ab6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2202      	movs	r2, #2
 8002abc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	4b13      	ldr	r3, [pc, #76]	@ (8002b20 <HAL_DMA_Init+0x44c>)
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2b40      	cmp	r3, #64	@ 0x40
 8002ade:	d021      	beq.n	8002b24 <HAL_DMA_Init+0x450>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	2b80      	cmp	r3, #128	@ 0x80
 8002ae6:	d102      	bne.n	8002aee <HAL_DMA_Init+0x41a>
 8002ae8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002aec:	e01b      	b.n	8002b26 <HAL_DMA_Init+0x452>
 8002aee:	2300      	movs	r3, #0
 8002af0:	e019      	b.n	8002b26 <HAL_DMA_Init+0x452>
 8002af2:	bf00      	nop
 8002af4:	fe10803f 	.word	0xfe10803f
 8002af8:	5c001000 	.word	0x5c001000
 8002afc:	ffff0000 	.word	0xffff0000
 8002b00:	58025408 	.word	0x58025408
 8002b04:	5802541c 	.word	0x5802541c
 8002b08:	58025430 	.word	0x58025430
 8002b0c:	58025444 	.word	0x58025444
 8002b10:	58025458 	.word	0x58025458
 8002b14:	5802546c 	.word	0x5802546c
 8002b18:	58025480 	.word	0x58025480
 8002b1c:	58025494 	.word	0x58025494
 8002b20:	fffe000f 	.word	0xfffe000f
 8002b24:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	68d2      	ldr	r2, [r2, #12]
 8002b2a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002b3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002b44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002b4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002b54:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4b6e      	ldr	r3, [pc, #440]	@ (8002d24 <HAL_DMA_Init+0x650>)
 8002b6c:	4413      	add	r3, r2
 8002b6e:	4a6e      	ldr	r2, [pc, #440]	@ (8002d28 <HAL_DMA_Init+0x654>)
 8002b70:	fba2 2303 	umull	r2, r3, r2, r3
 8002b74:	091b      	lsrs	r3, r3, #4
 8002b76:	009a      	lsls	r2, r3, #2
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f001 fc45 	bl	800440c <DMA_CalcBaseAndBitshift>
 8002b82:	4603      	mov	r3, r0
 8002b84:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b8a:	f003 031f 	and.w	r3, r3, #31
 8002b8e:	2201      	movs	r2, #1
 8002b90:	409a      	lsls	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	e008      	b.n	8002baa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2240      	movs	r2, #64	@ 0x40
 8002b9c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2203      	movs	r2, #3
 8002ba2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e0b7      	b.n	8002d1a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a5f      	ldr	r2, [pc, #380]	@ (8002d2c <HAL_DMA_Init+0x658>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d072      	beq.n	8002c9a <HAL_DMA_Init+0x5c6>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a5d      	ldr	r2, [pc, #372]	@ (8002d30 <HAL_DMA_Init+0x65c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d06d      	beq.n	8002c9a <HAL_DMA_Init+0x5c6>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a5c      	ldr	r2, [pc, #368]	@ (8002d34 <HAL_DMA_Init+0x660>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d068      	beq.n	8002c9a <HAL_DMA_Init+0x5c6>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a5a      	ldr	r2, [pc, #360]	@ (8002d38 <HAL_DMA_Init+0x664>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d063      	beq.n	8002c9a <HAL_DMA_Init+0x5c6>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a59      	ldr	r2, [pc, #356]	@ (8002d3c <HAL_DMA_Init+0x668>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d05e      	beq.n	8002c9a <HAL_DMA_Init+0x5c6>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a57      	ldr	r2, [pc, #348]	@ (8002d40 <HAL_DMA_Init+0x66c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d059      	beq.n	8002c9a <HAL_DMA_Init+0x5c6>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a56      	ldr	r2, [pc, #344]	@ (8002d44 <HAL_DMA_Init+0x670>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d054      	beq.n	8002c9a <HAL_DMA_Init+0x5c6>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a54      	ldr	r2, [pc, #336]	@ (8002d48 <HAL_DMA_Init+0x674>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d04f      	beq.n	8002c9a <HAL_DMA_Init+0x5c6>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a53      	ldr	r2, [pc, #332]	@ (8002d4c <HAL_DMA_Init+0x678>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d04a      	beq.n	8002c9a <HAL_DMA_Init+0x5c6>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a51      	ldr	r2, [pc, #324]	@ (8002d50 <HAL_DMA_Init+0x67c>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d045      	beq.n	8002c9a <HAL_DMA_Init+0x5c6>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a50      	ldr	r2, [pc, #320]	@ (8002d54 <HAL_DMA_Init+0x680>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d040      	beq.n	8002c9a <HAL_DMA_Init+0x5c6>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a4e      	ldr	r2, [pc, #312]	@ (8002d58 <HAL_DMA_Init+0x684>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d03b      	beq.n	8002c9a <HAL_DMA_Init+0x5c6>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a4d      	ldr	r2, [pc, #308]	@ (8002d5c <HAL_DMA_Init+0x688>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d036      	beq.n	8002c9a <HAL_DMA_Init+0x5c6>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a4b      	ldr	r2, [pc, #300]	@ (8002d60 <HAL_DMA_Init+0x68c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d031      	beq.n	8002c9a <HAL_DMA_Init+0x5c6>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a4a      	ldr	r2, [pc, #296]	@ (8002d64 <HAL_DMA_Init+0x690>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d02c      	beq.n	8002c9a <HAL_DMA_Init+0x5c6>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a48      	ldr	r2, [pc, #288]	@ (8002d68 <HAL_DMA_Init+0x694>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d027      	beq.n	8002c9a <HAL_DMA_Init+0x5c6>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a47      	ldr	r2, [pc, #284]	@ (8002d6c <HAL_DMA_Init+0x698>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d022      	beq.n	8002c9a <HAL_DMA_Init+0x5c6>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a45      	ldr	r2, [pc, #276]	@ (8002d70 <HAL_DMA_Init+0x69c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d01d      	beq.n	8002c9a <HAL_DMA_Init+0x5c6>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a44      	ldr	r2, [pc, #272]	@ (8002d74 <HAL_DMA_Init+0x6a0>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d018      	beq.n	8002c9a <HAL_DMA_Init+0x5c6>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a42      	ldr	r2, [pc, #264]	@ (8002d78 <HAL_DMA_Init+0x6a4>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d013      	beq.n	8002c9a <HAL_DMA_Init+0x5c6>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a41      	ldr	r2, [pc, #260]	@ (8002d7c <HAL_DMA_Init+0x6a8>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d00e      	beq.n	8002c9a <HAL_DMA_Init+0x5c6>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a3f      	ldr	r2, [pc, #252]	@ (8002d80 <HAL_DMA_Init+0x6ac>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d009      	beq.n	8002c9a <HAL_DMA_Init+0x5c6>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a3e      	ldr	r2, [pc, #248]	@ (8002d84 <HAL_DMA_Init+0x6b0>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d004      	beq.n	8002c9a <HAL_DMA_Init+0x5c6>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a3c      	ldr	r2, [pc, #240]	@ (8002d88 <HAL_DMA_Init+0x6b4>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d101      	bne.n	8002c9e <HAL_DMA_Init+0x5ca>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <HAL_DMA_Init+0x5cc>
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d032      	beq.n	8002d0a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f001 fcdf 	bl	8004668 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	2b80      	cmp	r3, #128	@ 0x80
 8002cb0:	d102      	bne.n	8002cb8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002ccc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d010      	beq.n	8002cf8 <HAL_DMA_Init+0x624>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d80c      	bhi.n	8002cf8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f001 fd5c 	bl	800479c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002cf4:	605a      	str	r2, [r3, #4]
 8002cf6:	e008      	b.n	8002d0a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3718      	adds	r7, #24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	a7fdabf8 	.word	0xa7fdabf8
 8002d28:	cccccccd 	.word	0xcccccccd
 8002d2c:	40020010 	.word	0x40020010
 8002d30:	40020028 	.word	0x40020028
 8002d34:	40020040 	.word	0x40020040
 8002d38:	40020058 	.word	0x40020058
 8002d3c:	40020070 	.word	0x40020070
 8002d40:	40020088 	.word	0x40020088
 8002d44:	400200a0 	.word	0x400200a0
 8002d48:	400200b8 	.word	0x400200b8
 8002d4c:	40020410 	.word	0x40020410
 8002d50:	40020428 	.word	0x40020428
 8002d54:	40020440 	.word	0x40020440
 8002d58:	40020458 	.word	0x40020458
 8002d5c:	40020470 	.word	0x40020470
 8002d60:	40020488 	.word	0x40020488
 8002d64:	400204a0 	.word	0x400204a0
 8002d68:	400204b8 	.word	0x400204b8
 8002d6c:	58025408 	.word	0x58025408
 8002d70:	5802541c 	.word	0x5802541c
 8002d74:	58025430 	.word	0x58025430
 8002d78:	58025444 	.word	0x58025444
 8002d7c:	58025458 	.word	0x58025458
 8002d80:	5802546c 	.word	0x5802546c
 8002d84:	58025480 	.word	0x58025480
 8002d88:	58025494 	.word	0x58025494

08002d8c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
 8002d98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e226      	b.n	80031f6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d101      	bne.n	8002db6 <HAL_DMA_Start_IT+0x2a>
 8002db2:	2302      	movs	r3, #2
 8002db4:	e21f      	b.n	80031f6 <HAL_DMA_Start_IT+0x46a>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	f040 820a 	bne.w	80031e0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a68      	ldr	r2, [pc, #416]	@ (8002f80 <HAL_DMA_Start_IT+0x1f4>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d04a      	beq.n	8002e7a <HAL_DMA_Start_IT+0xee>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a66      	ldr	r2, [pc, #408]	@ (8002f84 <HAL_DMA_Start_IT+0x1f8>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d045      	beq.n	8002e7a <HAL_DMA_Start_IT+0xee>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a65      	ldr	r2, [pc, #404]	@ (8002f88 <HAL_DMA_Start_IT+0x1fc>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d040      	beq.n	8002e7a <HAL_DMA_Start_IT+0xee>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a63      	ldr	r2, [pc, #396]	@ (8002f8c <HAL_DMA_Start_IT+0x200>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d03b      	beq.n	8002e7a <HAL_DMA_Start_IT+0xee>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a62      	ldr	r2, [pc, #392]	@ (8002f90 <HAL_DMA_Start_IT+0x204>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d036      	beq.n	8002e7a <HAL_DMA_Start_IT+0xee>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a60      	ldr	r2, [pc, #384]	@ (8002f94 <HAL_DMA_Start_IT+0x208>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d031      	beq.n	8002e7a <HAL_DMA_Start_IT+0xee>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a5f      	ldr	r2, [pc, #380]	@ (8002f98 <HAL_DMA_Start_IT+0x20c>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d02c      	beq.n	8002e7a <HAL_DMA_Start_IT+0xee>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a5d      	ldr	r2, [pc, #372]	@ (8002f9c <HAL_DMA_Start_IT+0x210>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d027      	beq.n	8002e7a <HAL_DMA_Start_IT+0xee>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a5c      	ldr	r2, [pc, #368]	@ (8002fa0 <HAL_DMA_Start_IT+0x214>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d022      	beq.n	8002e7a <HAL_DMA_Start_IT+0xee>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a5a      	ldr	r2, [pc, #360]	@ (8002fa4 <HAL_DMA_Start_IT+0x218>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d01d      	beq.n	8002e7a <HAL_DMA_Start_IT+0xee>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a59      	ldr	r2, [pc, #356]	@ (8002fa8 <HAL_DMA_Start_IT+0x21c>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d018      	beq.n	8002e7a <HAL_DMA_Start_IT+0xee>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a57      	ldr	r2, [pc, #348]	@ (8002fac <HAL_DMA_Start_IT+0x220>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d013      	beq.n	8002e7a <HAL_DMA_Start_IT+0xee>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a56      	ldr	r2, [pc, #344]	@ (8002fb0 <HAL_DMA_Start_IT+0x224>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d00e      	beq.n	8002e7a <HAL_DMA_Start_IT+0xee>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a54      	ldr	r2, [pc, #336]	@ (8002fb4 <HAL_DMA_Start_IT+0x228>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d009      	beq.n	8002e7a <HAL_DMA_Start_IT+0xee>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a53      	ldr	r2, [pc, #332]	@ (8002fb8 <HAL_DMA_Start_IT+0x22c>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d004      	beq.n	8002e7a <HAL_DMA_Start_IT+0xee>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a51      	ldr	r2, [pc, #324]	@ (8002fbc <HAL_DMA_Start_IT+0x230>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d108      	bne.n	8002e8c <HAL_DMA_Start_IT+0x100>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0201 	bic.w	r2, r2, #1
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	e007      	b.n	8002e9c <HAL_DMA_Start_IT+0x110>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0201 	bic.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	68b9      	ldr	r1, [r7, #8]
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f001 f906 	bl	80040b4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a34      	ldr	r2, [pc, #208]	@ (8002f80 <HAL_DMA_Start_IT+0x1f4>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d04a      	beq.n	8002f48 <HAL_DMA_Start_IT+0x1bc>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a33      	ldr	r2, [pc, #204]	@ (8002f84 <HAL_DMA_Start_IT+0x1f8>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d045      	beq.n	8002f48 <HAL_DMA_Start_IT+0x1bc>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a31      	ldr	r2, [pc, #196]	@ (8002f88 <HAL_DMA_Start_IT+0x1fc>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d040      	beq.n	8002f48 <HAL_DMA_Start_IT+0x1bc>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a30      	ldr	r2, [pc, #192]	@ (8002f8c <HAL_DMA_Start_IT+0x200>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d03b      	beq.n	8002f48 <HAL_DMA_Start_IT+0x1bc>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a2e      	ldr	r2, [pc, #184]	@ (8002f90 <HAL_DMA_Start_IT+0x204>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d036      	beq.n	8002f48 <HAL_DMA_Start_IT+0x1bc>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a2d      	ldr	r2, [pc, #180]	@ (8002f94 <HAL_DMA_Start_IT+0x208>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d031      	beq.n	8002f48 <HAL_DMA_Start_IT+0x1bc>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a2b      	ldr	r2, [pc, #172]	@ (8002f98 <HAL_DMA_Start_IT+0x20c>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d02c      	beq.n	8002f48 <HAL_DMA_Start_IT+0x1bc>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a2a      	ldr	r2, [pc, #168]	@ (8002f9c <HAL_DMA_Start_IT+0x210>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d027      	beq.n	8002f48 <HAL_DMA_Start_IT+0x1bc>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a28      	ldr	r2, [pc, #160]	@ (8002fa0 <HAL_DMA_Start_IT+0x214>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d022      	beq.n	8002f48 <HAL_DMA_Start_IT+0x1bc>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a27      	ldr	r2, [pc, #156]	@ (8002fa4 <HAL_DMA_Start_IT+0x218>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d01d      	beq.n	8002f48 <HAL_DMA_Start_IT+0x1bc>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a25      	ldr	r2, [pc, #148]	@ (8002fa8 <HAL_DMA_Start_IT+0x21c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d018      	beq.n	8002f48 <HAL_DMA_Start_IT+0x1bc>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a24      	ldr	r2, [pc, #144]	@ (8002fac <HAL_DMA_Start_IT+0x220>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d013      	beq.n	8002f48 <HAL_DMA_Start_IT+0x1bc>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a22      	ldr	r2, [pc, #136]	@ (8002fb0 <HAL_DMA_Start_IT+0x224>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d00e      	beq.n	8002f48 <HAL_DMA_Start_IT+0x1bc>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a21      	ldr	r2, [pc, #132]	@ (8002fb4 <HAL_DMA_Start_IT+0x228>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d009      	beq.n	8002f48 <HAL_DMA_Start_IT+0x1bc>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a1f      	ldr	r2, [pc, #124]	@ (8002fb8 <HAL_DMA_Start_IT+0x22c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d004      	beq.n	8002f48 <HAL_DMA_Start_IT+0x1bc>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a1e      	ldr	r2, [pc, #120]	@ (8002fbc <HAL_DMA_Start_IT+0x230>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d101      	bne.n	8002f4c <HAL_DMA_Start_IT+0x1c0>
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e000      	b.n	8002f4e <HAL_DMA_Start_IT+0x1c2>
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d036      	beq.n	8002fc0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f023 021e 	bic.w	r2, r3, #30
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f042 0216 	orr.w	r2, r2, #22
 8002f64:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d03e      	beq.n	8002fec <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f042 0208 	orr.w	r2, r2, #8
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	e035      	b.n	8002fec <HAL_DMA_Start_IT+0x260>
 8002f80:	40020010 	.word	0x40020010
 8002f84:	40020028 	.word	0x40020028
 8002f88:	40020040 	.word	0x40020040
 8002f8c:	40020058 	.word	0x40020058
 8002f90:	40020070 	.word	0x40020070
 8002f94:	40020088 	.word	0x40020088
 8002f98:	400200a0 	.word	0x400200a0
 8002f9c:	400200b8 	.word	0x400200b8
 8002fa0:	40020410 	.word	0x40020410
 8002fa4:	40020428 	.word	0x40020428
 8002fa8:	40020440 	.word	0x40020440
 8002fac:	40020458 	.word	0x40020458
 8002fb0:	40020470 	.word	0x40020470
 8002fb4:	40020488 	.word	0x40020488
 8002fb8:	400204a0 	.word	0x400204a0
 8002fbc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f023 020e 	bic.w	r2, r3, #14
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 020a 	orr.w	r2, r2, #10
 8002fd2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d007      	beq.n	8002fec <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0204 	orr.w	r2, r2, #4
 8002fea:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a83      	ldr	r2, [pc, #524]	@ (8003200 <HAL_DMA_Start_IT+0x474>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d072      	beq.n	80030dc <HAL_DMA_Start_IT+0x350>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a82      	ldr	r2, [pc, #520]	@ (8003204 <HAL_DMA_Start_IT+0x478>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d06d      	beq.n	80030dc <HAL_DMA_Start_IT+0x350>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a80      	ldr	r2, [pc, #512]	@ (8003208 <HAL_DMA_Start_IT+0x47c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d068      	beq.n	80030dc <HAL_DMA_Start_IT+0x350>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a7f      	ldr	r2, [pc, #508]	@ (800320c <HAL_DMA_Start_IT+0x480>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d063      	beq.n	80030dc <HAL_DMA_Start_IT+0x350>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a7d      	ldr	r2, [pc, #500]	@ (8003210 <HAL_DMA_Start_IT+0x484>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d05e      	beq.n	80030dc <HAL_DMA_Start_IT+0x350>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a7c      	ldr	r2, [pc, #496]	@ (8003214 <HAL_DMA_Start_IT+0x488>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d059      	beq.n	80030dc <HAL_DMA_Start_IT+0x350>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a7a      	ldr	r2, [pc, #488]	@ (8003218 <HAL_DMA_Start_IT+0x48c>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d054      	beq.n	80030dc <HAL_DMA_Start_IT+0x350>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a79      	ldr	r2, [pc, #484]	@ (800321c <HAL_DMA_Start_IT+0x490>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d04f      	beq.n	80030dc <HAL_DMA_Start_IT+0x350>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a77      	ldr	r2, [pc, #476]	@ (8003220 <HAL_DMA_Start_IT+0x494>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d04a      	beq.n	80030dc <HAL_DMA_Start_IT+0x350>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a76      	ldr	r2, [pc, #472]	@ (8003224 <HAL_DMA_Start_IT+0x498>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d045      	beq.n	80030dc <HAL_DMA_Start_IT+0x350>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a74      	ldr	r2, [pc, #464]	@ (8003228 <HAL_DMA_Start_IT+0x49c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d040      	beq.n	80030dc <HAL_DMA_Start_IT+0x350>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a73      	ldr	r2, [pc, #460]	@ (800322c <HAL_DMA_Start_IT+0x4a0>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d03b      	beq.n	80030dc <HAL_DMA_Start_IT+0x350>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a71      	ldr	r2, [pc, #452]	@ (8003230 <HAL_DMA_Start_IT+0x4a4>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d036      	beq.n	80030dc <HAL_DMA_Start_IT+0x350>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a70      	ldr	r2, [pc, #448]	@ (8003234 <HAL_DMA_Start_IT+0x4a8>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d031      	beq.n	80030dc <HAL_DMA_Start_IT+0x350>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a6e      	ldr	r2, [pc, #440]	@ (8003238 <HAL_DMA_Start_IT+0x4ac>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d02c      	beq.n	80030dc <HAL_DMA_Start_IT+0x350>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a6d      	ldr	r2, [pc, #436]	@ (800323c <HAL_DMA_Start_IT+0x4b0>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d027      	beq.n	80030dc <HAL_DMA_Start_IT+0x350>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a6b      	ldr	r2, [pc, #428]	@ (8003240 <HAL_DMA_Start_IT+0x4b4>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d022      	beq.n	80030dc <HAL_DMA_Start_IT+0x350>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a6a      	ldr	r2, [pc, #424]	@ (8003244 <HAL_DMA_Start_IT+0x4b8>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d01d      	beq.n	80030dc <HAL_DMA_Start_IT+0x350>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a68      	ldr	r2, [pc, #416]	@ (8003248 <HAL_DMA_Start_IT+0x4bc>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d018      	beq.n	80030dc <HAL_DMA_Start_IT+0x350>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a67      	ldr	r2, [pc, #412]	@ (800324c <HAL_DMA_Start_IT+0x4c0>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d013      	beq.n	80030dc <HAL_DMA_Start_IT+0x350>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a65      	ldr	r2, [pc, #404]	@ (8003250 <HAL_DMA_Start_IT+0x4c4>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d00e      	beq.n	80030dc <HAL_DMA_Start_IT+0x350>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a64      	ldr	r2, [pc, #400]	@ (8003254 <HAL_DMA_Start_IT+0x4c8>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d009      	beq.n	80030dc <HAL_DMA_Start_IT+0x350>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a62      	ldr	r2, [pc, #392]	@ (8003258 <HAL_DMA_Start_IT+0x4cc>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d004      	beq.n	80030dc <HAL_DMA_Start_IT+0x350>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a61      	ldr	r2, [pc, #388]	@ (800325c <HAL_DMA_Start_IT+0x4d0>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d101      	bne.n	80030e0 <HAL_DMA_Start_IT+0x354>
 80030dc:	2301      	movs	r3, #1
 80030de:	e000      	b.n	80030e2 <HAL_DMA_Start_IT+0x356>
 80030e0:	2300      	movs	r3, #0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d01a      	beq.n	800311c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d007      	beq.n	8003104 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003102:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003108:	2b00      	cmp	r3, #0
 800310a:	d007      	beq.n	800311c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003116:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800311a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a37      	ldr	r2, [pc, #220]	@ (8003200 <HAL_DMA_Start_IT+0x474>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d04a      	beq.n	80031bc <HAL_DMA_Start_IT+0x430>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a36      	ldr	r2, [pc, #216]	@ (8003204 <HAL_DMA_Start_IT+0x478>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d045      	beq.n	80031bc <HAL_DMA_Start_IT+0x430>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a34      	ldr	r2, [pc, #208]	@ (8003208 <HAL_DMA_Start_IT+0x47c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d040      	beq.n	80031bc <HAL_DMA_Start_IT+0x430>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a33      	ldr	r2, [pc, #204]	@ (800320c <HAL_DMA_Start_IT+0x480>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d03b      	beq.n	80031bc <HAL_DMA_Start_IT+0x430>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a31      	ldr	r2, [pc, #196]	@ (8003210 <HAL_DMA_Start_IT+0x484>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d036      	beq.n	80031bc <HAL_DMA_Start_IT+0x430>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a30      	ldr	r2, [pc, #192]	@ (8003214 <HAL_DMA_Start_IT+0x488>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d031      	beq.n	80031bc <HAL_DMA_Start_IT+0x430>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a2e      	ldr	r2, [pc, #184]	@ (8003218 <HAL_DMA_Start_IT+0x48c>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d02c      	beq.n	80031bc <HAL_DMA_Start_IT+0x430>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a2d      	ldr	r2, [pc, #180]	@ (800321c <HAL_DMA_Start_IT+0x490>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d027      	beq.n	80031bc <HAL_DMA_Start_IT+0x430>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a2b      	ldr	r2, [pc, #172]	@ (8003220 <HAL_DMA_Start_IT+0x494>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d022      	beq.n	80031bc <HAL_DMA_Start_IT+0x430>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a2a      	ldr	r2, [pc, #168]	@ (8003224 <HAL_DMA_Start_IT+0x498>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d01d      	beq.n	80031bc <HAL_DMA_Start_IT+0x430>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a28      	ldr	r2, [pc, #160]	@ (8003228 <HAL_DMA_Start_IT+0x49c>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d018      	beq.n	80031bc <HAL_DMA_Start_IT+0x430>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a27      	ldr	r2, [pc, #156]	@ (800322c <HAL_DMA_Start_IT+0x4a0>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d013      	beq.n	80031bc <HAL_DMA_Start_IT+0x430>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a25      	ldr	r2, [pc, #148]	@ (8003230 <HAL_DMA_Start_IT+0x4a4>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d00e      	beq.n	80031bc <HAL_DMA_Start_IT+0x430>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a24      	ldr	r2, [pc, #144]	@ (8003234 <HAL_DMA_Start_IT+0x4a8>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d009      	beq.n	80031bc <HAL_DMA_Start_IT+0x430>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a22      	ldr	r2, [pc, #136]	@ (8003238 <HAL_DMA_Start_IT+0x4ac>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d004      	beq.n	80031bc <HAL_DMA_Start_IT+0x430>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a21      	ldr	r2, [pc, #132]	@ (800323c <HAL_DMA_Start_IT+0x4b0>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d108      	bne.n	80031ce <HAL_DMA_Start_IT+0x442>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f042 0201 	orr.w	r2, r2, #1
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	e012      	b.n	80031f4 <HAL_DMA_Start_IT+0x468>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f042 0201 	orr.w	r2, r2, #1
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	e009      	b.n	80031f4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80031e6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80031f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3718      	adds	r7, #24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40020010 	.word	0x40020010
 8003204:	40020028 	.word	0x40020028
 8003208:	40020040 	.word	0x40020040
 800320c:	40020058 	.word	0x40020058
 8003210:	40020070 	.word	0x40020070
 8003214:	40020088 	.word	0x40020088
 8003218:	400200a0 	.word	0x400200a0
 800321c:	400200b8 	.word	0x400200b8
 8003220:	40020410 	.word	0x40020410
 8003224:	40020428 	.word	0x40020428
 8003228:	40020440 	.word	0x40020440
 800322c:	40020458 	.word	0x40020458
 8003230:	40020470 	.word	0x40020470
 8003234:	40020488 	.word	0x40020488
 8003238:	400204a0 	.word	0x400204a0
 800323c:	400204b8 	.word	0x400204b8
 8003240:	58025408 	.word	0x58025408
 8003244:	5802541c 	.word	0x5802541c
 8003248:	58025430 	.word	0x58025430
 800324c:	58025444 	.word	0x58025444
 8003250:	58025458 	.word	0x58025458
 8003254:	5802546c 	.word	0x5802546c
 8003258:	58025480 	.word	0x58025480
 800325c:	58025494 	.word	0x58025494

08003260 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b08a      	sub	sp, #40	@ 0x28
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800326c:	4b67      	ldr	r3, [pc, #412]	@ (800340c <HAL_DMA_IRQHandler+0x1ac>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a67      	ldr	r2, [pc, #412]	@ (8003410 <HAL_DMA_IRQHandler+0x1b0>)
 8003272:	fba2 2303 	umull	r2, r3, r2, r3
 8003276:	0a9b      	lsrs	r3, r3, #10
 8003278:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800327e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003284:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a5f      	ldr	r2, [pc, #380]	@ (8003414 <HAL_DMA_IRQHandler+0x1b4>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d04a      	beq.n	8003332 <HAL_DMA_IRQHandler+0xd2>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a5d      	ldr	r2, [pc, #372]	@ (8003418 <HAL_DMA_IRQHandler+0x1b8>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d045      	beq.n	8003332 <HAL_DMA_IRQHandler+0xd2>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a5c      	ldr	r2, [pc, #368]	@ (800341c <HAL_DMA_IRQHandler+0x1bc>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d040      	beq.n	8003332 <HAL_DMA_IRQHandler+0xd2>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a5a      	ldr	r2, [pc, #360]	@ (8003420 <HAL_DMA_IRQHandler+0x1c0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d03b      	beq.n	8003332 <HAL_DMA_IRQHandler+0xd2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a59      	ldr	r2, [pc, #356]	@ (8003424 <HAL_DMA_IRQHandler+0x1c4>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d036      	beq.n	8003332 <HAL_DMA_IRQHandler+0xd2>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a57      	ldr	r2, [pc, #348]	@ (8003428 <HAL_DMA_IRQHandler+0x1c8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d031      	beq.n	8003332 <HAL_DMA_IRQHandler+0xd2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a56      	ldr	r2, [pc, #344]	@ (800342c <HAL_DMA_IRQHandler+0x1cc>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d02c      	beq.n	8003332 <HAL_DMA_IRQHandler+0xd2>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a54      	ldr	r2, [pc, #336]	@ (8003430 <HAL_DMA_IRQHandler+0x1d0>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d027      	beq.n	8003332 <HAL_DMA_IRQHandler+0xd2>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a53      	ldr	r2, [pc, #332]	@ (8003434 <HAL_DMA_IRQHandler+0x1d4>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d022      	beq.n	8003332 <HAL_DMA_IRQHandler+0xd2>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a51      	ldr	r2, [pc, #324]	@ (8003438 <HAL_DMA_IRQHandler+0x1d8>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d01d      	beq.n	8003332 <HAL_DMA_IRQHandler+0xd2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a50      	ldr	r2, [pc, #320]	@ (800343c <HAL_DMA_IRQHandler+0x1dc>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d018      	beq.n	8003332 <HAL_DMA_IRQHandler+0xd2>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a4e      	ldr	r2, [pc, #312]	@ (8003440 <HAL_DMA_IRQHandler+0x1e0>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d013      	beq.n	8003332 <HAL_DMA_IRQHandler+0xd2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a4d      	ldr	r2, [pc, #308]	@ (8003444 <HAL_DMA_IRQHandler+0x1e4>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d00e      	beq.n	8003332 <HAL_DMA_IRQHandler+0xd2>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a4b      	ldr	r2, [pc, #300]	@ (8003448 <HAL_DMA_IRQHandler+0x1e8>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d009      	beq.n	8003332 <HAL_DMA_IRQHandler+0xd2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a4a      	ldr	r2, [pc, #296]	@ (800344c <HAL_DMA_IRQHandler+0x1ec>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d004      	beq.n	8003332 <HAL_DMA_IRQHandler+0xd2>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a48      	ldr	r2, [pc, #288]	@ (8003450 <HAL_DMA_IRQHandler+0x1f0>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d101      	bne.n	8003336 <HAL_DMA_IRQHandler+0xd6>
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <HAL_DMA_IRQHandler+0xd8>
 8003336:	2300      	movs	r3, #0
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 842b 	beq.w	8003b94 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003342:	f003 031f 	and.w	r3, r3, #31
 8003346:	2208      	movs	r2, #8
 8003348:	409a      	lsls	r2, r3
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	4013      	ands	r3, r2
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 80a2 	beq.w	8003498 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a2e      	ldr	r2, [pc, #184]	@ (8003414 <HAL_DMA_IRQHandler+0x1b4>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d04a      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x194>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a2d      	ldr	r2, [pc, #180]	@ (8003418 <HAL_DMA_IRQHandler+0x1b8>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d045      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x194>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a2b      	ldr	r2, [pc, #172]	@ (800341c <HAL_DMA_IRQHandler+0x1bc>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d040      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x194>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a2a      	ldr	r2, [pc, #168]	@ (8003420 <HAL_DMA_IRQHandler+0x1c0>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d03b      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x194>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a28      	ldr	r2, [pc, #160]	@ (8003424 <HAL_DMA_IRQHandler+0x1c4>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d036      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x194>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a27      	ldr	r2, [pc, #156]	@ (8003428 <HAL_DMA_IRQHandler+0x1c8>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d031      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x194>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a25      	ldr	r2, [pc, #148]	@ (800342c <HAL_DMA_IRQHandler+0x1cc>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d02c      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x194>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a24      	ldr	r2, [pc, #144]	@ (8003430 <HAL_DMA_IRQHandler+0x1d0>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d027      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x194>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a22      	ldr	r2, [pc, #136]	@ (8003434 <HAL_DMA_IRQHandler+0x1d4>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d022      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x194>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a21      	ldr	r2, [pc, #132]	@ (8003438 <HAL_DMA_IRQHandler+0x1d8>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d01d      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x194>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a1f      	ldr	r2, [pc, #124]	@ (800343c <HAL_DMA_IRQHandler+0x1dc>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d018      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x194>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a1e      	ldr	r2, [pc, #120]	@ (8003440 <HAL_DMA_IRQHandler+0x1e0>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d013      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x194>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a1c      	ldr	r2, [pc, #112]	@ (8003444 <HAL_DMA_IRQHandler+0x1e4>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d00e      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x194>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a1b      	ldr	r2, [pc, #108]	@ (8003448 <HAL_DMA_IRQHandler+0x1e8>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d009      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x194>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a19      	ldr	r2, [pc, #100]	@ (800344c <HAL_DMA_IRQHandler+0x1ec>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d004      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x194>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a18      	ldr	r2, [pc, #96]	@ (8003450 <HAL_DMA_IRQHandler+0x1f0>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d12f      	bne.n	8003454 <HAL_DMA_IRQHandler+0x1f4>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0304 	and.w	r3, r3, #4
 80033fe:	2b00      	cmp	r3, #0
 8003400:	bf14      	ite	ne
 8003402:	2301      	movne	r3, #1
 8003404:	2300      	moveq	r3, #0
 8003406:	b2db      	uxtb	r3, r3
 8003408:	e02e      	b.n	8003468 <HAL_DMA_IRQHandler+0x208>
 800340a:	bf00      	nop
 800340c:	24000010 	.word	0x24000010
 8003410:	1b4e81b5 	.word	0x1b4e81b5
 8003414:	40020010 	.word	0x40020010
 8003418:	40020028 	.word	0x40020028
 800341c:	40020040 	.word	0x40020040
 8003420:	40020058 	.word	0x40020058
 8003424:	40020070 	.word	0x40020070
 8003428:	40020088 	.word	0x40020088
 800342c:	400200a0 	.word	0x400200a0
 8003430:	400200b8 	.word	0x400200b8
 8003434:	40020410 	.word	0x40020410
 8003438:	40020428 	.word	0x40020428
 800343c:	40020440 	.word	0x40020440
 8003440:	40020458 	.word	0x40020458
 8003444:	40020470 	.word	0x40020470
 8003448:	40020488 	.word	0x40020488
 800344c:	400204a0 	.word	0x400204a0
 8003450:	400204b8 	.word	0x400204b8
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0308 	and.w	r3, r3, #8
 800345e:	2b00      	cmp	r3, #0
 8003460:	bf14      	ite	ne
 8003462:	2301      	movne	r3, #1
 8003464:	2300      	moveq	r3, #0
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	d015      	beq.n	8003498 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0204 	bic.w	r2, r2, #4
 800347a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003480:	f003 031f 	and.w	r3, r3, #31
 8003484:	2208      	movs	r2, #8
 8003486:	409a      	lsls	r2, r3
 8003488:	6a3b      	ldr	r3, [r7, #32]
 800348a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003490:	f043 0201 	orr.w	r2, r3, #1
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800349c:	f003 031f 	and.w	r3, r3, #31
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	fa22 f303 	lsr.w	r3, r2, r3
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d06e      	beq.n	800358c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a69      	ldr	r2, [pc, #420]	@ (8003658 <HAL_DMA_IRQHandler+0x3f8>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d04a      	beq.n	800354e <HAL_DMA_IRQHandler+0x2ee>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a67      	ldr	r2, [pc, #412]	@ (800365c <HAL_DMA_IRQHandler+0x3fc>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d045      	beq.n	800354e <HAL_DMA_IRQHandler+0x2ee>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a66      	ldr	r2, [pc, #408]	@ (8003660 <HAL_DMA_IRQHandler+0x400>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d040      	beq.n	800354e <HAL_DMA_IRQHandler+0x2ee>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a64      	ldr	r2, [pc, #400]	@ (8003664 <HAL_DMA_IRQHandler+0x404>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d03b      	beq.n	800354e <HAL_DMA_IRQHandler+0x2ee>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a63      	ldr	r2, [pc, #396]	@ (8003668 <HAL_DMA_IRQHandler+0x408>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d036      	beq.n	800354e <HAL_DMA_IRQHandler+0x2ee>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a61      	ldr	r2, [pc, #388]	@ (800366c <HAL_DMA_IRQHandler+0x40c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d031      	beq.n	800354e <HAL_DMA_IRQHandler+0x2ee>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a60      	ldr	r2, [pc, #384]	@ (8003670 <HAL_DMA_IRQHandler+0x410>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d02c      	beq.n	800354e <HAL_DMA_IRQHandler+0x2ee>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a5e      	ldr	r2, [pc, #376]	@ (8003674 <HAL_DMA_IRQHandler+0x414>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d027      	beq.n	800354e <HAL_DMA_IRQHandler+0x2ee>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a5d      	ldr	r2, [pc, #372]	@ (8003678 <HAL_DMA_IRQHandler+0x418>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d022      	beq.n	800354e <HAL_DMA_IRQHandler+0x2ee>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a5b      	ldr	r2, [pc, #364]	@ (800367c <HAL_DMA_IRQHandler+0x41c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d01d      	beq.n	800354e <HAL_DMA_IRQHandler+0x2ee>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a5a      	ldr	r2, [pc, #360]	@ (8003680 <HAL_DMA_IRQHandler+0x420>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d018      	beq.n	800354e <HAL_DMA_IRQHandler+0x2ee>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a58      	ldr	r2, [pc, #352]	@ (8003684 <HAL_DMA_IRQHandler+0x424>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d013      	beq.n	800354e <HAL_DMA_IRQHandler+0x2ee>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a57      	ldr	r2, [pc, #348]	@ (8003688 <HAL_DMA_IRQHandler+0x428>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d00e      	beq.n	800354e <HAL_DMA_IRQHandler+0x2ee>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a55      	ldr	r2, [pc, #340]	@ (800368c <HAL_DMA_IRQHandler+0x42c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d009      	beq.n	800354e <HAL_DMA_IRQHandler+0x2ee>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a54      	ldr	r2, [pc, #336]	@ (8003690 <HAL_DMA_IRQHandler+0x430>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d004      	beq.n	800354e <HAL_DMA_IRQHandler+0x2ee>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a52      	ldr	r2, [pc, #328]	@ (8003694 <HAL_DMA_IRQHandler+0x434>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d10a      	bne.n	8003564 <HAL_DMA_IRQHandler+0x304>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003558:	2b00      	cmp	r3, #0
 800355a:	bf14      	ite	ne
 800355c:	2301      	movne	r3, #1
 800355e:	2300      	moveq	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	e003      	b.n	800356c <HAL_DMA_IRQHandler+0x30c>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2300      	movs	r3, #0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00d      	beq.n	800358c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003574:	f003 031f 	and.w	r3, r3, #31
 8003578:	2201      	movs	r2, #1
 800357a:	409a      	lsls	r2, r3
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003584:	f043 0202 	orr.w	r2, r3, #2
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003590:	f003 031f 	and.w	r3, r3, #31
 8003594:	2204      	movs	r2, #4
 8003596:	409a      	lsls	r2, r3
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	4013      	ands	r3, r2
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 808f 	beq.w	80036c0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a2c      	ldr	r2, [pc, #176]	@ (8003658 <HAL_DMA_IRQHandler+0x3f8>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d04a      	beq.n	8003642 <HAL_DMA_IRQHandler+0x3e2>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a2a      	ldr	r2, [pc, #168]	@ (800365c <HAL_DMA_IRQHandler+0x3fc>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d045      	beq.n	8003642 <HAL_DMA_IRQHandler+0x3e2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a29      	ldr	r2, [pc, #164]	@ (8003660 <HAL_DMA_IRQHandler+0x400>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d040      	beq.n	8003642 <HAL_DMA_IRQHandler+0x3e2>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a27      	ldr	r2, [pc, #156]	@ (8003664 <HAL_DMA_IRQHandler+0x404>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d03b      	beq.n	8003642 <HAL_DMA_IRQHandler+0x3e2>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a26      	ldr	r2, [pc, #152]	@ (8003668 <HAL_DMA_IRQHandler+0x408>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d036      	beq.n	8003642 <HAL_DMA_IRQHandler+0x3e2>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a24      	ldr	r2, [pc, #144]	@ (800366c <HAL_DMA_IRQHandler+0x40c>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d031      	beq.n	8003642 <HAL_DMA_IRQHandler+0x3e2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a23      	ldr	r2, [pc, #140]	@ (8003670 <HAL_DMA_IRQHandler+0x410>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d02c      	beq.n	8003642 <HAL_DMA_IRQHandler+0x3e2>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a21      	ldr	r2, [pc, #132]	@ (8003674 <HAL_DMA_IRQHandler+0x414>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d027      	beq.n	8003642 <HAL_DMA_IRQHandler+0x3e2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a20      	ldr	r2, [pc, #128]	@ (8003678 <HAL_DMA_IRQHandler+0x418>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d022      	beq.n	8003642 <HAL_DMA_IRQHandler+0x3e2>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a1e      	ldr	r2, [pc, #120]	@ (800367c <HAL_DMA_IRQHandler+0x41c>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d01d      	beq.n	8003642 <HAL_DMA_IRQHandler+0x3e2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a1d      	ldr	r2, [pc, #116]	@ (8003680 <HAL_DMA_IRQHandler+0x420>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d018      	beq.n	8003642 <HAL_DMA_IRQHandler+0x3e2>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a1b      	ldr	r2, [pc, #108]	@ (8003684 <HAL_DMA_IRQHandler+0x424>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d013      	beq.n	8003642 <HAL_DMA_IRQHandler+0x3e2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a1a      	ldr	r2, [pc, #104]	@ (8003688 <HAL_DMA_IRQHandler+0x428>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d00e      	beq.n	8003642 <HAL_DMA_IRQHandler+0x3e2>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a18      	ldr	r2, [pc, #96]	@ (800368c <HAL_DMA_IRQHandler+0x42c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d009      	beq.n	8003642 <HAL_DMA_IRQHandler+0x3e2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a17      	ldr	r2, [pc, #92]	@ (8003690 <HAL_DMA_IRQHandler+0x430>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d004      	beq.n	8003642 <HAL_DMA_IRQHandler+0x3e2>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a15      	ldr	r2, [pc, #84]	@ (8003694 <HAL_DMA_IRQHandler+0x434>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d12a      	bne.n	8003698 <HAL_DMA_IRQHandler+0x438>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	bf14      	ite	ne
 8003650:	2301      	movne	r3, #1
 8003652:	2300      	moveq	r3, #0
 8003654:	b2db      	uxtb	r3, r3
 8003656:	e023      	b.n	80036a0 <HAL_DMA_IRQHandler+0x440>
 8003658:	40020010 	.word	0x40020010
 800365c:	40020028 	.word	0x40020028
 8003660:	40020040 	.word	0x40020040
 8003664:	40020058 	.word	0x40020058
 8003668:	40020070 	.word	0x40020070
 800366c:	40020088 	.word	0x40020088
 8003670:	400200a0 	.word	0x400200a0
 8003674:	400200b8 	.word	0x400200b8
 8003678:	40020410 	.word	0x40020410
 800367c:	40020428 	.word	0x40020428
 8003680:	40020440 	.word	0x40020440
 8003684:	40020458 	.word	0x40020458
 8003688:	40020470 	.word	0x40020470
 800368c:	40020488 	.word	0x40020488
 8003690:	400204a0 	.word	0x400204a0
 8003694:	400204b8 	.word	0x400204b8
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2300      	movs	r3, #0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00d      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a8:	f003 031f 	and.w	r3, r3, #31
 80036ac:	2204      	movs	r2, #4
 80036ae:	409a      	lsls	r2, r3
 80036b0:	6a3b      	ldr	r3, [r7, #32]
 80036b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b8:	f043 0204 	orr.w	r2, r3, #4
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c4:	f003 031f 	and.w	r3, r3, #31
 80036c8:	2210      	movs	r2, #16
 80036ca:	409a      	lsls	r2, r3
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	4013      	ands	r3, r2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 80a6 	beq.w	8003822 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a85      	ldr	r2, [pc, #532]	@ (80038f0 <HAL_DMA_IRQHandler+0x690>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d04a      	beq.n	8003776 <HAL_DMA_IRQHandler+0x516>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a83      	ldr	r2, [pc, #524]	@ (80038f4 <HAL_DMA_IRQHandler+0x694>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d045      	beq.n	8003776 <HAL_DMA_IRQHandler+0x516>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a82      	ldr	r2, [pc, #520]	@ (80038f8 <HAL_DMA_IRQHandler+0x698>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d040      	beq.n	8003776 <HAL_DMA_IRQHandler+0x516>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a80      	ldr	r2, [pc, #512]	@ (80038fc <HAL_DMA_IRQHandler+0x69c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d03b      	beq.n	8003776 <HAL_DMA_IRQHandler+0x516>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a7f      	ldr	r2, [pc, #508]	@ (8003900 <HAL_DMA_IRQHandler+0x6a0>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d036      	beq.n	8003776 <HAL_DMA_IRQHandler+0x516>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a7d      	ldr	r2, [pc, #500]	@ (8003904 <HAL_DMA_IRQHandler+0x6a4>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d031      	beq.n	8003776 <HAL_DMA_IRQHandler+0x516>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a7c      	ldr	r2, [pc, #496]	@ (8003908 <HAL_DMA_IRQHandler+0x6a8>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d02c      	beq.n	8003776 <HAL_DMA_IRQHandler+0x516>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a7a      	ldr	r2, [pc, #488]	@ (800390c <HAL_DMA_IRQHandler+0x6ac>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d027      	beq.n	8003776 <HAL_DMA_IRQHandler+0x516>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a79      	ldr	r2, [pc, #484]	@ (8003910 <HAL_DMA_IRQHandler+0x6b0>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d022      	beq.n	8003776 <HAL_DMA_IRQHandler+0x516>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a77      	ldr	r2, [pc, #476]	@ (8003914 <HAL_DMA_IRQHandler+0x6b4>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d01d      	beq.n	8003776 <HAL_DMA_IRQHandler+0x516>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a76      	ldr	r2, [pc, #472]	@ (8003918 <HAL_DMA_IRQHandler+0x6b8>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d018      	beq.n	8003776 <HAL_DMA_IRQHandler+0x516>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a74      	ldr	r2, [pc, #464]	@ (800391c <HAL_DMA_IRQHandler+0x6bc>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d013      	beq.n	8003776 <HAL_DMA_IRQHandler+0x516>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a73      	ldr	r2, [pc, #460]	@ (8003920 <HAL_DMA_IRQHandler+0x6c0>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d00e      	beq.n	8003776 <HAL_DMA_IRQHandler+0x516>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a71      	ldr	r2, [pc, #452]	@ (8003924 <HAL_DMA_IRQHandler+0x6c4>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d009      	beq.n	8003776 <HAL_DMA_IRQHandler+0x516>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a70      	ldr	r2, [pc, #448]	@ (8003928 <HAL_DMA_IRQHandler+0x6c8>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d004      	beq.n	8003776 <HAL_DMA_IRQHandler+0x516>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a6e      	ldr	r2, [pc, #440]	@ (800392c <HAL_DMA_IRQHandler+0x6cc>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d10a      	bne.n	800378c <HAL_DMA_IRQHandler+0x52c>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0308 	and.w	r3, r3, #8
 8003780:	2b00      	cmp	r3, #0
 8003782:	bf14      	ite	ne
 8003784:	2301      	movne	r3, #1
 8003786:	2300      	moveq	r3, #0
 8003788:	b2db      	uxtb	r3, r3
 800378a:	e009      	b.n	80037a0 <HAL_DMA_IRQHandler+0x540>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0304 	and.w	r3, r3, #4
 8003796:	2b00      	cmp	r3, #0
 8003798:	bf14      	ite	ne
 800379a:	2301      	movne	r3, #1
 800379c:	2300      	moveq	r3, #0
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d03e      	beq.n	8003822 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a8:	f003 031f 	and.w	r3, r3, #31
 80037ac:	2210      	movs	r2, #16
 80037ae:	409a      	lsls	r2, r3
 80037b0:	6a3b      	ldr	r3, [r7, #32]
 80037b2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d018      	beq.n	80037f4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d108      	bne.n	80037e2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d024      	beq.n	8003822 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	4798      	blx	r3
 80037e0:	e01f      	b.n	8003822 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d01b      	beq.n	8003822 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	4798      	blx	r3
 80037f2:	e016      	b.n	8003822 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d107      	bne.n	8003812 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0208 	bic.w	r2, r2, #8
 8003810:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003826:	f003 031f 	and.w	r3, r3, #31
 800382a:	2220      	movs	r2, #32
 800382c:	409a      	lsls	r2, r3
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	4013      	ands	r3, r2
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 8110 	beq.w	8003a58 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a2c      	ldr	r2, [pc, #176]	@ (80038f0 <HAL_DMA_IRQHandler+0x690>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d04a      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x678>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a2b      	ldr	r2, [pc, #172]	@ (80038f4 <HAL_DMA_IRQHandler+0x694>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d045      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x678>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a29      	ldr	r2, [pc, #164]	@ (80038f8 <HAL_DMA_IRQHandler+0x698>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d040      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x678>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a28      	ldr	r2, [pc, #160]	@ (80038fc <HAL_DMA_IRQHandler+0x69c>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d03b      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x678>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a26      	ldr	r2, [pc, #152]	@ (8003900 <HAL_DMA_IRQHandler+0x6a0>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d036      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x678>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a25      	ldr	r2, [pc, #148]	@ (8003904 <HAL_DMA_IRQHandler+0x6a4>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d031      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x678>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a23      	ldr	r2, [pc, #140]	@ (8003908 <HAL_DMA_IRQHandler+0x6a8>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d02c      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x678>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a22      	ldr	r2, [pc, #136]	@ (800390c <HAL_DMA_IRQHandler+0x6ac>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d027      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x678>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a20      	ldr	r2, [pc, #128]	@ (8003910 <HAL_DMA_IRQHandler+0x6b0>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d022      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x678>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a1f      	ldr	r2, [pc, #124]	@ (8003914 <HAL_DMA_IRQHandler+0x6b4>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d01d      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x678>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a1d      	ldr	r2, [pc, #116]	@ (8003918 <HAL_DMA_IRQHandler+0x6b8>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d018      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x678>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a1c      	ldr	r2, [pc, #112]	@ (800391c <HAL_DMA_IRQHandler+0x6bc>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d013      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x678>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a1a      	ldr	r2, [pc, #104]	@ (8003920 <HAL_DMA_IRQHandler+0x6c0>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d00e      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x678>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a19      	ldr	r2, [pc, #100]	@ (8003924 <HAL_DMA_IRQHandler+0x6c4>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d009      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x678>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a17      	ldr	r2, [pc, #92]	@ (8003928 <HAL_DMA_IRQHandler+0x6c8>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d004      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x678>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a16      	ldr	r2, [pc, #88]	@ (800392c <HAL_DMA_IRQHandler+0x6cc>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d12b      	bne.n	8003930 <HAL_DMA_IRQHandler+0x6d0>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0310 	and.w	r3, r3, #16
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	bf14      	ite	ne
 80038e6:	2301      	movne	r3, #1
 80038e8:	2300      	moveq	r3, #0
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	e02a      	b.n	8003944 <HAL_DMA_IRQHandler+0x6e4>
 80038ee:	bf00      	nop
 80038f0:	40020010 	.word	0x40020010
 80038f4:	40020028 	.word	0x40020028
 80038f8:	40020040 	.word	0x40020040
 80038fc:	40020058 	.word	0x40020058
 8003900:	40020070 	.word	0x40020070
 8003904:	40020088 	.word	0x40020088
 8003908:	400200a0 	.word	0x400200a0
 800390c:	400200b8 	.word	0x400200b8
 8003910:	40020410 	.word	0x40020410
 8003914:	40020428 	.word	0x40020428
 8003918:	40020440 	.word	0x40020440
 800391c:	40020458 	.word	0x40020458
 8003920:	40020470 	.word	0x40020470
 8003924:	40020488 	.word	0x40020488
 8003928:	400204a0 	.word	0x400204a0
 800392c:	400204b8 	.word	0x400204b8
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	bf14      	ite	ne
 800393e:	2301      	movne	r3, #1
 8003940:	2300      	moveq	r3, #0
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 8087 	beq.w	8003a58 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800394e:	f003 031f 	and.w	r3, r3, #31
 8003952:	2220      	movs	r2, #32
 8003954:	409a      	lsls	r2, r3
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b04      	cmp	r3, #4
 8003964:	d139      	bne.n	80039da <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 0216 	bic.w	r2, r2, #22
 8003974:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	695a      	ldr	r2, [r3, #20]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003984:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398a:	2b00      	cmp	r3, #0
 800398c:	d103      	bne.n	8003996 <HAL_DMA_IRQHandler+0x736>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003992:	2b00      	cmp	r3, #0
 8003994:	d007      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0208 	bic.w	r2, r2, #8
 80039a4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039aa:	f003 031f 	and.w	r3, r3, #31
 80039ae:	223f      	movs	r2, #63	@ 0x3f
 80039b0:	409a      	lsls	r2, r3
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 834a 	beq.w	8004064 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	4798      	blx	r3
          }
          return;
 80039d8:	e344      	b.n	8004064 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d018      	beq.n	8003a1a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d108      	bne.n	8003a08 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d02c      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	4798      	blx	r3
 8003a06:	e027      	b.n	8003a58 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d023      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	4798      	blx	r3
 8003a18:	e01e      	b.n	8003a58 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10f      	bne.n	8003a48 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0210 	bic.w	r2, r2, #16
 8003a36:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 8306 	beq.w	800406e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 8088 	beq.w	8003b80 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2204      	movs	r2, #4
 8003a74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a7a      	ldr	r2, [pc, #488]	@ (8003c68 <HAL_DMA_IRQHandler+0xa08>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d04a      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x8b8>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a79      	ldr	r2, [pc, #484]	@ (8003c6c <HAL_DMA_IRQHandler+0xa0c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d045      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x8b8>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a77      	ldr	r2, [pc, #476]	@ (8003c70 <HAL_DMA_IRQHandler+0xa10>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d040      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x8b8>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a76      	ldr	r2, [pc, #472]	@ (8003c74 <HAL_DMA_IRQHandler+0xa14>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d03b      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x8b8>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a74      	ldr	r2, [pc, #464]	@ (8003c78 <HAL_DMA_IRQHandler+0xa18>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d036      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x8b8>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a73      	ldr	r2, [pc, #460]	@ (8003c7c <HAL_DMA_IRQHandler+0xa1c>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d031      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x8b8>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a71      	ldr	r2, [pc, #452]	@ (8003c80 <HAL_DMA_IRQHandler+0xa20>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d02c      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x8b8>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a70      	ldr	r2, [pc, #448]	@ (8003c84 <HAL_DMA_IRQHandler+0xa24>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d027      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x8b8>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a6e      	ldr	r2, [pc, #440]	@ (8003c88 <HAL_DMA_IRQHandler+0xa28>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d022      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x8b8>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a6d      	ldr	r2, [pc, #436]	@ (8003c8c <HAL_DMA_IRQHandler+0xa2c>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d01d      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x8b8>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a6b      	ldr	r2, [pc, #428]	@ (8003c90 <HAL_DMA_IRQHandler+0xa30>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d018      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x8b8>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a6a      	ldr	r2, [pc, #424]	@ (8003c94 <HAL_DMA_IRQHandler+0xa34>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d013      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x8b8>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a68      	ldr	r2, [pc, #416]	@ (8003c98 <HAL_DMA_IRQHandler+0xa38>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d00e      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x8b8>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a67      	ldr	r2, [pc, #412]	@ (8003c9c <HAL_DMA_IRQHandler+0xa3c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d009      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x8b8>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a65      	ldr	r2, [pc, #404]	@ (8003ca0 <HAL_DMA_IRQHandler+0xa40>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d004      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x8b8>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a64      	ldr	r2, [pc, #400]	@ (8003ca4 <HAL_DMA_IRQHandler+0xa44>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d108      	bne.n	8003b2a <HAL_DMA_IRQHandler+0x8ca>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 0201 	bic.w	r2, r2, #1
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	e007      	b.n	8003b3a <HAL_DMA_IRQHandler+0x8da>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 0201 	bic.w	r2, r2, #1
 8003b38:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	60fb      	str	r3, [r7, #12]
 8003b40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d307      	bcc.n	8003b56 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1f2      	bne.n	8003b3a <HAL_DMA_IRQHandler+0x8da>
 8003b54:	e000      	b.n	8003b58 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003b56:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d004      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2203      	movs	r2, #3
 8003b6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003b6e:	e003      	b.n	8003b78 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 8272 	beq.w	800406e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	4798      	blx	r3
 8003b92:	e26c      	b.n	800406e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a43      	ldr	r2, [pc, #268]	@ (8003ca8 <HAL_DMA_IRQHandler+0xa48>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d022      	beq.n	8003be4 <HAL_DMA_IRQHandler+0x984>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a42      	ldr	r2, [pc, #264]	@ (8003cac <HAL_DMA_IRQHandler+0xa4c>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d01d      	beq.n	8003be4 <HAL_DMA_IRQHandler+0x984>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a40      	ldr	r2, [pc, #256]	@ (8003cb0 <HAL_DMA_IRQHandler+0xa50>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d018      	beq.n	8003be4 <HAL_DMA_IRQHandler+0x984>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a3f      	ldr	r2, [pc, #252]	@ (8003cb4 <HAL_DMA_IRQHandler+0xa54>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d013      	beq.n	8003be4 <HAL_DMA_IRQHandler+0x984>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a3d      	ldr	r2, [pc, #244]	@ (8003cb8 <HAL_DMA_IRQHandler+0xa58>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d00e      	beq.n	8003be4 <HAL_DMA_IRQHandler+0x984>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a3c      	ldr	r2, [pc, #240]	@ (8003cbc <HAL_DMA_IRQHandler+0xa5c>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d009      	beq.n	8003be4 <HAL_DMA_IRQHandler+0x984>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a3a      	ldr	r2, [pc, #232]	@ (8003cc0 <HAL_DMA_IRQHandler+0xa60>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d004      	beq.n	8003be4 <HAL_DMA_IRQHandler+0x984>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a39      	ldr	r2, [pc, #228]	@ (8003cc4 <HAL_DMA_IRQHandler+0xa64>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d101      	bne.n	8003be8 <HAL_DMA_IRQHandler+0x988>
 8003be4:	2301      	movs	r3, #1
 8003be6:	e000      	b.n	8003bea <HAL_DMA_IRQHandler+0x98a>
 8003be8:	2300      	movs	r3, #0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 823f 	beq.w	800406e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bfc:	f003 031f 	and.w	r3, r3, #31
 8003c00:	2204      	movs	r2, #4
 8003c02:	409a      	lsls	r2, r3
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	4013      	ands	r3, r2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 80cd 	beq.w	8003da8 <HAL_DMA_IRQHandler+0xb48>
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 80c7 	beq.w	8003da8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c1e:	f003 031f 	and.w	r3, r3, #31
 8003c22:	2204      	movs	r2, #4
 8003c24:	409a      	lsls	r2, r3
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d049      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d109      	bne.n	8003c52 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 8210 	beq.w	8004068 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c50:	e20a      	b.n	8004068 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 8206 	beq.w	8004068 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c64:	e200      	b.n	8004068 <HAL_DMA_IRQHandler+0xe08>
 8003c66:	bf00      	nop
 8003c68:	40020010 	.word	0x40020010
 8003c6c:	40020028 	.word	0x40020028
 8003c70:	40020040 	.word	0x40020040
 8003c74:	40020058 	.word	0x40020058
 8003c78:	40020070 	.word	0x40020070
 8003c7c:	40020088 	.word	0x40020088
 8003c80:	400200a0 	.word	0x400200a0
 8003c84:	400200b8 	.word	0x400200b8
 8003c88:	40020410 	.word	0x40020410
 8003c8c:	40020428 	.word	0x40020428
 8003c90:	40020440 	.word	0x40020440
 8003c94:	40020458 	.word	0x40020458
 8003c98:	40020470 	.word	0x40020470
 8003c9c:	40020488 	.word	0x40020488
 8003ca0:	400204a0 	.word	0x400204a0
 8003ca4:	400204b8 	.word	0x400204b8
 8003ca8:	58025408 	.word	0x58025408
 8003cac:	5802541c 	.word	0x5802541c
 8003cb0:	58025430 	.word	0x58025430
 8003cb4:	58025444 	.word	0x58025444
 8003cb8:	58025458 	.word	0x58025458
 8003cbc:	5802546c 	.word	0x5802546c
 8003cc0:	58025480 	.word	0x58025480
 8003cc4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	f003 0320 	and.w	r3, r3, #32
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d160      	bne.n	8003d94 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a7f      	ldr	r2, [pc, #508]	@ (8003ed4 <HAL_DMA_IRQHandler+0xc74>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d04a      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xb12>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a7d      	ldr	r2, [pc, #500]	@ (8003ed8 <HAL_DMA_IRQHandler+0xc78>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d045      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xb12>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a7c      	ldr	r2, [pc, #496]	@ (8003edc <HAL_DMA_IRQHandler+0xc7c>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d040      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xb12>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a7a      	ldr	r2, [pc, #488]	@ (8003ee0 <HAL_DMA_IRQHandler+0xc80>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d03b      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xb12>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a79      	ldr	r2, [pc, #484]	@ (8003ee4 <HAL_DMA_IRQHandler+0xc84>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d036      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xb12>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a77      	ldr	r2, [pc, #476]	@ (8003ee8 <HAL_DMA_IRQHandler+0xc88>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d031      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xb12>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a76      	ldr	r2, [pc, #472]	@ (8003eec <HAL_DMA_IRQHandler+0xc8c>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d02c      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xb12>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a74      	ldr	r2, [pc, #464]	@ (8003ef0 <HAL_DMA_IRQHandler+0xc90>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d027      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xb12>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a73      	ldr	r2, [pc, #460]	@ (8003ef4 <HAL_DMA_IRQHandler+0xc94>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d022      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xb12>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a71      	ldr	r2, [pc, #452]	@ (8003ef8 <HAL_DMA_IRQHandler+0xc98>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d01d      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xb12>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a70      	ldr	r2, [pc, #448]	@ (8003efc <HAL_DMA_IRQHandler+0xc9c>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d018      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xb12>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a6e      	ldr	r2, [pc, #440]	@ (8003f00 <HAL_DMA_IRQHandler+0xca0>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d013      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xb12>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a6d      	ldr	r2, [pc, #436]	@ (8003f04 <HAL_DMA_IRQHandler+0xca4>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d00e      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xb12>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a6b      	ldr	r2, [pc, #428]	@ (8003f08 <HAL_DMA_IRQHandler+0xca8>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d009      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xb12>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a6a      	ldr	r2, [pc, #424]	@ (8003f0c <HAL_DMA_IRQHandler+0xcac>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d004      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xb12>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a68      	ldr	r2, [pc, #416]	@ (8003f10 <HAL_DMA_IRQHandler+0xcb0>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d108      	bne.n	8003d84 <HAL_DMA_IRQHandler+0xb24>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 0208 	bic.w	r2, r2, #8
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	e007      	b.n	8003d94 <HAL_DMA_IRQHandler+0xb34>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0204 	bic.w	r2, r2, #4
 8003d92:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 8165 	beq.w	8004068 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003da6:	e15f      	b.n	8004068 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dac:	f003 031f 	and.w	r3, r3, #31
 8003db0:	2202      	movs	r2, #2
 8003db2:	409a      	lsls	r2, r3
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	4013      	ands	r3, r2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 80c5 	beq.w	8003f48 <HAL_DMA_IRQHandler+0xce8>
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 80bf 	beq.w	8003f48 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dce:	f003 031f 	and.w	r3, r3, #31
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	409a      	lsls	r2, r3
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d018      	beq.n	8003e16 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d109      	bne.n	8003e02 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 813a 	beq.w	800406c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e00:	e134      	b.n	800406c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 8130 	beq.w	800406c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e14:	e12a      	b.n	800406c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f003 0320 	and.w	r3, r3, #32
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f040 8089 	bne.w	8003f34 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a2b      	ldr	r2, [pc, #172]	@ (8003ed4 <HAL_DMA_IRQHandler+0xc74>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d04a      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xc62>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a29      	ldr	r2, [pc, #164]	@ (8003ed8 <HAL_DMA_IRQHandler+0xc78>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d045      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xc62>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a28      	ldr	r2, [pc, #160]	@ (8003edc <HAL_DMA_IRQHandler+0xc7c>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d040      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xc62>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a26      	ldr	r2, [pc, #152]	@ (8003ee0 <HAL_DMA_IRQHandler+0xc80>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d03b      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xc62>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a25      	ldr	r2, [pc, #148]	@ (8003ee4 <HAL_DMA_IRQHandler+0xc84>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d036      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xc62>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a23      	ldr	r2, [pc, #140]	@ (8003ee8 <HAL_DMA_IRQHandler+0xc88>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d031      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xc62>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a22      	ldr	r2, [pc, #136]	@ (8003eec <HAL_DMA_IRQHandler+0xc8c>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d02c      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xc62>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a20      	ldr	r2, [pc, #128]	@ (8003ef0 <HAL_DMA_IRQHandler+0xc90>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d027      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xc62>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a1f      	ldr	r2, [pc, #124]	@ (8003ef4 <HAL_DMA_IRQHandler+0xc94>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d022      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xc62>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a1d      	ldr	r2, [pc, #116]	@ (8003ef8 <HAL_DMA_IRQHandler+0xc98>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d01d      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xc62>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a1c      	ldr	r2, [pc, #112]	@ (8003efc <HAL_DMA_IRQHandler+0xc9c>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d018      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xc62>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a1a      	ldr	r2, [pc, #104]	@ (8003f00 <HAL_DMA_IRQHandler+0xca0>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d013      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xc62>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a19      	ldr	r2, [pc, #100]	@ (8003f04 <HAL_DMA_IRQHandler+0xca4>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d00e      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xc62>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a17      	ldr	r2, [pc, #92]	@ (8003f08 <HAL_DMA_IRQHandler+0xca8>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d009      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xc62>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a16      	ldr	r2, [pc, #88]	@ (8003f0c <HAL_DMA_IRQHandler+0xcac>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d004      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xc62>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a14      	ldr	r2, [pc, #80]	@ (8003f10 <HAL_DMA_IRQHandler+0xcb0>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d128      	bne.n	8003f14 <HAL_DMA_IRQHandler+0xcb4>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 0214 	bic.w	r2, r2, #20
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	e027      	b.n	8003f24 <HAL_DMA_IRQHandler+0xcc4>
 8003ed4:	40020010 	.word	0x40020010
 8003ed8:	40020028 	.word	0x40020028
 8003edc:	40020040 	.word	0x40020040
 8003ee0:	40020058 	.word	0x40020058
 8003ee4:	40020070 	.word	0x40020070
 8003ee8:	40020088 	.word	0x40020088
 8003eec:	400200a0 	.word	0x400200a0
 8003ef0:	400200b8 	.word	0x400200b8
 8003ef4:	40020410 	.word	0x40020410
 8003ef8:	40020428 	.word	0x40020428
 8003efc:	40020440 	.word	0x40020440
 8003f00:	40020458 	.word	0x40020458
 8003f04:	40020470 	.word	0x40020470
 8003f08:	40020488 	.word	0x40020488
 8003f0c:	400204a0 	.word	0x400204a0
 8003f10:	400204b8 	.word	0x400204b8
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 020a 	bic.w	r2, r2, #10
 8003f22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 8097 	beq.w	800406c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f46:	e091      	b.n	800406c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f4c:	f003 031f 	and.w	r3, r3, #31
 8003f50:	2208      	movs	r2, #8
 8003f52:	409a      	lsls	r2, r3
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	4013      	ands	r3, r2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 8088 	beq.w	800406e <HAL_DMA_IRQHandler+0xe0e>
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	f003 0308 	and.w	r3, r3, #8
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 8082 	beq.w	800406e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a41      	ldr	r2, [pc, #260]	@ (8004074 <HAL_DMA_IRQHandler+0xe14>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d04a      	beq.n	800400a <HAL_DMA_IRQHandler+0xdaa>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a3f      	ldr	r2, [pc, #252]	@ (8004078 <HAL_DMA_IRQHandler+0xe18>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d045      	beq.n	800400a <HAL_DMA_IRQHandler+0xdaa>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a3e      	ldr	r2, [pc, #248]	@ (800407c <HAL_DMA_IRQHandler+0xe1c>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d040      	beq.n	800400a <HAL_DMA_IRQHandler+0xdaa>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a3c      	ldr	r2, [pc, #240]	@ (8004080 <HAL_DMA_IRQHandler+0xe20>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d03b      	beq.n	800400a <HAL_DMA_IRQHandler+0xdaa>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a3b      	ldr	r2, [pc, #236]	@ (8004084 <HAL_DMA_IRQHandler+0xe24>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d036      	beq.n	800400a <HAL_DMA_IRQHandler+0xdaa>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a39      	ldr	r2, [pc, #228]	@ (8004088 <HAL_DMA_IRQHandler+0xe28>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d031      	beq.n	800400a <HAL_DMA_IRQHandler+0xdaa>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a38      	ldr	r2, [pc, #224]	@ (800408c <HAL_DMA_IRQHandler+0xe2c>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d02c      	beq.n	800400a <HAL_DMA_IRQHandler+0xdaa>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a36      	ldr	r2, [pc, #216]	@ (8004090 <HAL_DMA_IRQHandler+0xe30>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d027      	beq.n	800400a <HAL_DMA_IRQHandler+0xdaa>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a35      	ldr	r2, [pc, #212]	@ (8004094 <HAL_DMA_IRQHandler+0xe34>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d022      	beq.n	800400a <HAL_DMA_IRQHandler+0xdaa>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a33      	ldr	r2, [pc, #204]	@ (8004098 <HAL_DMA_IRQHandler+0xe38>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d01d      	beq.n	800400a <HAL_DMA_IRQHandler+0xdaa>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a32      	ldr	r2, [pc, #200]	@ (800409c <HAL_DMA_IRQHandler+0xe3c>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d018      	beq.n	800400a <HAL_DMA_IRQHandler+0xdaa>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a30      	ldr	r2, [pc, #192]	@ (80040a0 <HAL_DMA_IRQHandler+0xe40>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d013      	beq.n	800400a <HAL_DMA_IRQHandler+0xdaa>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a2f      	ldr	r2, [pc, #188]	@ (80040a4 <HAL_DMA_IRQHandler+0xe44>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d00e      	beq.n	800400a <HAL_DMA_IRQHandler+0xdaa>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a2d      	ldr	r2, [pc, #180]	@ (80040a8 <HAL_DMA_IRQHandler+0xe48>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d009      	beq.n	800400a <HAL_DMA_IRQHandler+0xdaa>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a2c      	ldr	r2, [pc, #176]	@ (80040ac <HAL_DMA_IRQHandler+0xe4c>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d004      	beq.n	800400a <HAL_DMA_IRQHandler+0xdaa>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a2a      	ldr	r2, [pc, #168]	@ (80040b0 <HAL_DMA_IRQHandler+0xe50>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d108      	bne.n	800401c <HAL_DMA_IRQHandler+0xdbc>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 021c 	bic.w	r2, r2, #28
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	e007      	b.n	800402c <HAL_DMA_IRQHandler+0xdcc>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 020e 	bic.w	r2, r2, #14
 800402a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004030:	f003 031f 	and.w	r3, r3, #31
 8004034:	2201      	movs	r2, #1
 8004036:	409a      	lsls	r2, r3
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004056:	2b00      	cmp	r3, #0
 8004058:	d009      	beq.n	800406e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	4798      	blx	r3
 8004062:	e004      	b.n	800406e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004064:	bf00      	nop
 8004066:	e002      	b.n	800406e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004068:	bf00      	nop
 800406a:	e000      	b.n	800406e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800406c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800406e:	3728      	adds	r7, #40	@ 0x28
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40020010 	.word	0x40020010
 8004078:	40020028 	.word	0x40020028
 800407c:	40020040 	.word	0x40020040
 8004080:	40020058 	.word	0x40020058
 8004084:	40020070 	.word	0x40020070
 8004088:	40020088 	.word	0x40020088
 800408c:	400200a0 	.word	0x400200a0
 8004090:	400200b8 	.word	0x400200b8
 8004094:	40020410 	.word	0x40020410
 8004098:	40020428 	.word	0x40020428
 800409c:	40020440 	.word	0x40020440
 80040a0:	40020458 	.word	0x40020458
 80040a4:	40020470 	.word	0x40020470
 80040a8:	40020488 	.word	0x40020488
 80040ac:	400204a0 	.word	0x400204a0
 80040b0:	400204b8 	.word	0x400204b8

080040b4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
 80040c0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040cc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a7f      	ldr	r2, [pc, #508]	@ (80042d0 <DMA_SetConfig+0x21c>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d072      	beq.n	80041be <DMA_SetConfig+0x10a>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a7d      	ldr	r2, [pc, #500]	@ (80042d4 <DMA_SetConfig+0x220>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d06d      	beq.n	80041be <DMA_SetConfig+0x10a>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a7c      	ldr	r2, [pc, #496]	@ (80042d8 <DMA_SetConfig+0x224>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d068      	beq.n	80041be <DMA_SetConfig+0x10a>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a7a      	ldr	r2, [pc, #488]	@ (80042dc <DMA_SetConfig+0x228>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d063      	beq.n	80041be <DMA_SetConfig+0x10a>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a79      	ldr	r2, [pc, #484]	@ (80042e0 <DMA_SetConfig+0x22c>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d05e      	beq.n	80041be <DMA_SetConfig+0x10a>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a77      	ldr	r2, [pc, #476]	@ (80042e4 <DMA_SetConfig+0x230>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d059      	beq.n	80041be <DMA_SetConfig+0x10a>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a76      	ldr	r2, [pc, #472]	@ (80042e8 <DMA_SetConfig+0x234>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d054      	beq.n	80041be <DMA_SetConfig+0x10a>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a74      	ldr	r2, [pc, #464]	@ (80042ec <DMA_SetConfig+0x238>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d04f      	beq.n	80041be <DMA_SetConfig+0x10a>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a73      	ldr	r2, [pc, #460]	@ (80042f0 <DMA_SetConfig+0x23c>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d04a      	beq.n	80041be <DMA_SetConfig+0x10a>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a71      	ldr	r2, [pc, #452]	@ (80042f4 <DMA_SetConfig+0x240>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d045      	beq.n	80041be <DMA_SetConfig+0x10a>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a70      	ldr	r2, [pc, #448]	@ (80042f8 <DMA_SetConfig+0x244>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d040      	beq.n	80041be <DMA_SetConfig+0x10a>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a6e      	ldr	r2, [pc, #440]	@ (80042fc <DMA_SetConfig+0x248>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d03b      	beq.n	80041be <DMA_SetConfig+0x10a>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a6d      	ldr	r2, [pc, #436]	@ (8004300 <DMA_SetConfig+0x24c>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d036      	beq.n	80041be <DMA_SetConfig+0x10a>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a6b      	ldr	r2, [pc, #428]	@ (8004304 <DMA_SetConfig+0x250>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d031      	beq.n	80041be <DMA_SetConfig+0x10a>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a6a      	ldr	r2, [pc, #424]	@ (8004308 <DMA_SetConfig+0x254>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d02c      	beq.n	80041be <DMA_SetConfig+0x10a>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a68      	ldr	r2, [pc, #416]	@ (800430c <DMA_SetConfig+0x258>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d027      	beq.n	80041be <DMA_SetConfig+0x10a>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a67      	ldr	r2, [pc, #412]	@ (8004310 <DMA_SetConfig+0x25c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d022      	beq.n	80041be <DMA_SetConfig+0x10a>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a65      	ldr	r2, [pc, #404]	@ (8004314 <DMA_SetConfig+0x260>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d01d      	beq.n	80041be <DMA_SetConfig+0x10a>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a64      	ldr	r2, [pc, #400]	@ (8004318 <DMA_SetConfig+0x264>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d018      	beq.n	80041be <DMA_SetConfig+0x10a>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a62      	ldr	r2, [pc, #392]	@ (800431c <DMA_SetConfig+0x268>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d013      	beq.n	80041be <DMA_SetConfig+0x10a>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a61      	ldr	r2, [pc, #388]	@ (8004320 <DMA_SetConfig+0x26c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d00e      	beq.n	80041be <DMA_SetConfig+0x10a>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a5f      	ldr	r2, [pc, #380]	@ (8004324 <DMA_SetConfig+0x270>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d009      	beq.n	80041be <DMA_SetConfig+0x10a>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a5e      	ldr	r2, [pc, #376]	@ (8004328 <DMA_SetConfig+0x274>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d004      	beq.n	80041be <DMA_SetConfig+0x10a>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a5c      	ldr	r2, [pc, #368]	@ (800432c <DMA_SetConfig+0x278>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d101      	bne.n	80041c2 <DMA_SetConfig+0x10e>
 80041be:	2301      	movs	r3, #1
 80041c0:	e000      	b.n	80041c4 <DMA_SetConfig+0x110>
 80041c2:	2300      	movs	r3, #0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00d      	beq.n	80041e4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80041d0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d004      	beq.n	80041e4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80041e2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a39      	ldr	r2, [pc, #228]	@ (80042d0 <DMA_SetConfig+0x21c>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d04a      	beq.n	8004284 <DMA_SetConfig+0x1d0>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a38      	ldr	r2, [pc, #224]	@ (80042d4 <DMA_SetConfig+0x220>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d045      	beq.n	8004284 <DMA_SetConfig+0x1d0>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a36      	ldr	r2, [pc, #216]	@ (80042d8 <DMA_SetConfig+0x224>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d040      	beq.n	8004284 <DMA_SetConfig+0x1d0>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a35      	ldr	r2, [pc, #212]	@ (80042dc <DMA_SetConfig+0x228>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d03b      	beq.n	8004284 <DMA_SetConfig+0x1d0>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a33      	ldr	r2, [pc, #204]	@ (80042e0 <DMA_SetConfig+0x22c>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d036      	beq.n	8004284 <DMA_SetConfig+0x1d0>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a32      	ldr	r2, [pc, #200]	@ (80042e4 <DMA_SetConfig+0x230>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d031      	beq.n	8004284 <DMA_SetConfig+0x1d0>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a30      	ldr	r2, [pc, #192]	@ (80042e8 <DMA_SetConfig+0x234>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d02c      	beq.n	8004284 <DMA_SetConfig+0x1d0>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a2f      	ldr	r2, [pc, #188]	@ (80042ec <DMA_SetConfig+0x238>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d027      	beq.n	8004284 <DMA_SetConfig+0x1d0>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a2d      	ldr	r2, [pc, #180]	@ (80042f0 <DMA_SetConfig+0x23c>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d022      	beq.n	8004284 <DMA_SetConfig+0x1d0>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a2c      	ldr	r2, [pc, #176]	@ (80042f4 <DMA_SetConfig+0x240>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d01d      	beq.n	8004284 <DMA_SetConfig+0x1d0>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a2a      	ldr	r2, [pc, #168]	@ (80042f8 <DMA_SetConfig+0x244>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d018      	beq.n	8004284 <DMA_SetConfig+0x1d0>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a29      	ldr	r2, [pc, #164]	@ (80042fc <DMA_SetConfig+0x248>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d013      	beq.n	8004284 <DMA_SetConfig+0x1d0>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a27      	ldr	r2, [pc, #156]	@ (8004300 <DMA_SetConfig+0x24c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d00e      	beq.n	8004284 <DMA_SetConfig+0x1d0>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a26      	ldr	r2, [pc, #152]	@ (8004304 <DMA_SetConfig+0x250>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d009      	beq.n	8004284 <DMA_SetConfig+0x1d0>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a24      	ldr	r2, [pc, #144]	@ (8004308 <DMA_SetConfig+0x254>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d004      	beq.n	8004284 <DMA_SetConfig+0x1d0>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a23      	ldr	r2, [pc, #140]	@ (800430c <DMA_SetConfig+0x258>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d101      	bne.n	8004288 <DMA_SetConfig+0x1d4>
 8004284:	2301      	movs	r3, #1
 8004286:	e000      	b.n	800428a <DMA_SetConfig+0x1d6>
 8004288:	2300      	movs	r3, #0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d059      	beq.n	8004342 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004292:	f003 031f 	and.w	r3, r3, #31
 8004296:	223f      	movs	r2, #63	@ 0x3f
 8004298:	409a      	lsls	r2, r3
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80042ac:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	2b40      	cmp	r3, #64	@ 0x40
 80042bc:	d138      	bne.n	8004330 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80042ce:	e086      	b.n	80043de <DMA_SetConfig+0x32a>
 80042d0:	40020010 	.word	0x40020010
 80042d4:	40020028 	.word	0x40020028
 80042d8:	40020040 	.word	0x40020040
 80042dc:	40020058 	.word	0x40020058
 80042e0:	40020070 	.word	0x40020070
 80042e4:	40020088 	.word	0x40020088
 80042e8:	400200a0 	.word	0x400200a0
 80042ec:	400200b8 	.word	0x400200b8
 80042f0:	40020410 	.word	0x40020410
 80042f4:	40020428 	.word	0x40020428
 80042f8:	40020440 	.word	0x40020440
 80042fc:	40020458 	.word	0x40020458
 8004300:	40020470 	.word	0x40020470
 8004304:	40020488 	.word	0x40020488
 8004308:	400204a0 	.word	0x400204a0
 800430c:	400204b8 	.word	0x400204b8
 8004310:	58025408 	.word	0x58025408
 8004314:	5802541c 	.word	0x5802541c
 8004318:	58025430 	.word	0x58025430
 800431c:	58025444 	.word	0x58025444
 8004320:	58025458 	.word	0x58025458
 8004324:	5802546c 	.word	0x5802546c
 8004328:	58025480 	.word	0x58025480
 800432c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	60da      	str	r2, [r3, #12]
}
 8004340:	e04d      	b.n	80043de <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a29      	ldr	r2, [pc, #164]	@ (80043ec <DMA_SetConfig+0x338>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d022      	beq.n	8004392 <DMA_SetConfig+0x2de>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a27      	ldr	r2, [pc, #156]	@ (80043f0 <DMA_SetConfig+0x33c>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d01d      	beq.n	8004392 <DMA_SetConfig+0x2de>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a26      	ldr	r2, [pc, #152]	@ (80043f4 <DMA_SetConfig+0x340>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d018      	beq.n	8004392 <DMA_SetConfig+0x2de>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a24      	ldr	r2, [pc, #144]	@ (80043f8 <DMA_SetConfig+0x344>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d013      	beq.n	8004392 <DMA_SetConfig+0x2de>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a23      	ldr	r2, [pc, #140]	@ (80043fc <DMA_SetConfig+0x348>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d00e      	beq.n	8004392 <DMA_SetConfig+0x2de>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a21      	ldr	r2, [pc, #132]	@ (8004400 <DMA_SetConfig+0x34c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d009      	beq.n	8004392 <DMA_SetConfig+0x2de>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a20      	ldr	r2, [pc, #128]	@ (8004404 <DMA_SetConfig+0x350>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d004      	beq.n	8004392 <DMA_SetConfig+0x2de>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a1e      	ldr	r2, [pc, #120]	@ (8004408 <DMA_SetConfig+0x354>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d101      	bne.n	8004396 <DMA_SetConfig+0x2e2>
 8004392:	2301      	movs	r3, #1
 8004394:	e000      	b.n	8004398 <DMA_SetConfig+0x2e4>
 8004396:	2300      	movs	r3, #0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d020      	beq.n	80043de <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a0:	f003 031f 	and.w	r3, r3, #31
 80043a4:	2201      	movs	r2, #1
 80043a6:	409a      	lsls	r2, r3
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	2b40      	cmp	r3, #64	@ 0x40
 80043ba:	d108      	bne.n	80043ce <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	60da      	str	r2, [r3, #12]
}
 80043cc:	e007      	b.n	80043de <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	60da      	str	r2, [r3, #12]
}
 80043de:	bf00      	nop
 80043e0:	371c      	adds	r7, #28
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	58025408 	.word	0x58025408
 80043f0:	5802541c 	.word	0x5802541c
 80043f4:	58025430 	.word	0x58025430
 80043f8:	58025444 	.word	0x58025444
 80043fc:	58025458 	.word	0x58025458
 8004400:	5802546c 	.word	0x5802546c
 8004404:	58025480 	.word	0x58025480
 8004408:	58025494 	.word	0x58025494

0800440c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a42      	ldr	r2, [pc, #264]	@ (8004524 <DMA_CalcBaseAndBitshift+0x118>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d04a      	beq.n	80044b4 <DMA_CalcBaseAndBitshift+0xa8>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a41      	ldr	r2, [pc, #260]	@ (8004528 <DMA_CalcBaseAndBitshift+0x11c>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d045      	beq.n	80044b4 <DMA_CalcBaseAndBitshift+0xa8>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a3f      	ldr	r2, [pc, #252]	@ (800452c <DMA_CalcBaseAndBitshift+0x120>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d040      	beq.n	80044b4 <DMA_CalcBaseAndBitshift+0xa8>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a3e      	ldr	r2, [pc, #248]	@ (8004530 <DMA_CalcBaseAndBitshift+0x124>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d03b      	beq.n	80044b4 <DMA_CalcBaseAndBitshift+0xa8>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a3c      	ldr	r2, [pc, #240]	@ (8004534 <DMA_CalcBaseAndBitshift+0x128>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d036      	beq.n	80044b4 <DMA_CalcBaseAndBitshift+0xa8>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a3b      	ldr	r2, [pc, #236]	@ (8004538 <DMA_CalcBaseAndBitshift+0x12c>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d031      	beq.n	80044b4 <DMA_CalcBaseAndBitshift+0xa8>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a39      	ldr	r2, [pc, #228]	@ (800453c <DMA_CalcBaseAndBitshift+0x130>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d02c      	beq.n	80044b4 <DMA_CalcBaseAndBitshift+0xa8>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a38      	ldr	r2, [pc, #224]	@ (8004540 <DMA_CalcBaseAndBitshift+0x134>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d027      	beq.n	80044b4 <DMA_CalcBaseAndBitshift+0xa8>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a36      	ldr	r2, [pc, #216]	@ (8004544 <DMA_CalcBaseAndBitshift+0x138>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d022      	beq.n	80044b4 <DMA_CalcBaseAndBitshift+0xa8>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a35      	ldr	r2, [pc, #212]	@ (8004548 <DMA_CalcBaseAndBitshift+0x13c>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d01d      	beq.n	80044b4 <DMA_CalcBaseAndBitshift+0xa8>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a33      	ldr	r2, [pc, #204]	@ (800454c <DMA_CalcBaseAndBitshift+0x140>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d018      	beq.n	80044b4 <DMA_CalcBaseAndBitshift+0xa8>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a32      	ldr	r2, [pc, #200]	@ (8004550 <DMA_CalcBaseAndBitshift+0x144>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d013      	beq.n	80044b4 <DMA_CalcBaseAndBitshift+0xa8>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a30      	ldr	r2, [pc, #192]	@ (8004554 <DMA_CalcBaseAndBitshift+0x148>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d00e      	beq.n	80044b4 <DMA_CalcBaseAndBitshift+0xa8>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a2f      	ldr	r2, [pc, #188]	@ (8004558 <DMA_CalcBaseAndBitshift+0x14c>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d009      	beq.n	80044b4 <DMA_CalcBaseAndBitshift+0xa8>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a2d      	ldr	r2, [pc, #180]	@ (800455c <DMA_CalcBaseAndBitshift+0x150>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d004      	beq.n	80044b4 <DMA_CalcBaseAndBitshift+0xa8>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a2c      	ldr	r2, [pc, #176]	@ (8004560 <DMA_CalcBaseAndBitshift+0x154>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d101      	bne.n	80044b8 <DMA_CalcBaseAndBitshift+0xac>
 80044b4:	2301      	movs	r3, #1
 80044b6:	e000      	b.n	80044ba <DMA_CalcBaseAndBitshift+0xae>
 80044b8:	2300      	movs	r3, #0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d024      	beq.n	8004508 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	3b10      	subs	r3, #16
 80044c6:	4a27      	ldr	r2, [pc, #156]	@ (8004564 <DMA_CalcBaseAndBitshift+0x158>)
 80044c8:	fba2 2303 	umull	r2, r3, r2, r3
 80044cc:	091b      	lsrs	r3, r3, #4
 80044ce:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f003 0307 	and.w	r3, r3, #7
 80044d6:	4a24      	ldr	r2, [pc, #144]	@ (8004568 <DMA_CalcBaseAndBitshift+0x15c>)
 80044d8:	5cd3      	ldrb	r3, [r2, r3]
 80044da:	461a      	mov	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2b03      	cmp	r3, #3
 80044e4:	d908      	bls.n	80044f8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	461a      	mov	r2, r3
 80044ec:	4b1f      	ldr	r3, [pc, #124]	@ (800456c <DMA_CalcBaseAndBitshift+0x160>)
 80044ee:	4013      	ands	r3, r2
 80044f0:	1d1a      	adds	r2, r3, #4
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	659a      	str	r2, [r3, #88]	@ 0x58
 80044f6:	e00d      	b.n	8004514 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	461a      	mov	r2, r3
 80044fe:	4b1b      	ldr	r3, [pc, #108]	@ (800456c <DMA_CalcBaseAndBitshift+0x160>)
 8004500:	4013      	ands	r3, r2
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	6593      	str	r3, [r2, #88]	@ 0x58
 8004506:	e005      	b.n	8004514 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004518:	4618      	mov	r0, r3
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	40020010 	.word	0x40020010
 8004528:	40020028 	.word	0x40020028
 800452c:	40020040 	.word	0x40020040
 8004530:	40020058 	.word	0x40020058
 8004534:	40020070 	.word	0x40020070
 8004538:	40020088 	.word	0x40020088
 800453c:	400200a0 	.word	0x400200a0
 8004540:	400200b8 	.word	0x400200b8
 8004544:	40020410 	.word	0x40020410
 8004548:	40020428 	.word	0x40020428
 800454c:	40020440 	.word	0x40020440
 8004550:	40020458 	.word	0x40020458
 8004554:	40020470 	.word	0x40020470
 8004558:	40020488 	.word	0x40020488
 800455c:	400204a0 	.word	0x400204a0
 8004560:	400204b8 	.word	0x400204b8
 8004564:	aaaaaaab 	.word	0xaaaaaaab
 8004568:	0800c05c 	.word	0x0800c05c
 800456c:	fffffc00 	.word	0xfffffc00

08004570 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004578:	2300      	movs	r3, #0
 800457a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d120      	bne.n	80045c6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004588:	2b03      	cmp	r3, #3
 800458a:	d858      	bhi.n	800463e <DMA_CheckFifoParam+0xce>
 800458c:	a201      	add	r2, pc, #4	@ (adr r2, 8004594 <DMA_CheckFifoParam+0x24>)
 800458e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004592:	bf00      	nop
 8004594:	080045a5 	.word	0x080045a5
 8004598:	080045b7 	.word	0x080045b7
 800459c:	080045a5 	.word	0x080045a5
 80045a0:	0800463f 	.word	0x0800463f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d048      	beq.n	8004642 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045b4:	e045      	b.n	8004642 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80045be:	d142      	bne.n	8004646 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045c4:	e03f      	b.n	8004646 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045ce:	d123      	bne.n	8004618 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d4:	2b03      	cmp	r3, #3
 80045d6:	d838      	bhi.n	800464a <DMA_CheckFifoParam+0xda>
 80045d8:	a201      	add	r2, pc, #4	@ (adr r2, 80045e0 <DMA_CheckFifoParam+0x70>)
 80045da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045de:	bf00      	nop
 80045e0:	080045f1 	.word	0x080045f1
 80045e4:	080045f7 	.word	0x080045f7
 80045e8:	080045f1 	.word	0x080045f1
 80045ec:	08004609 	.word	0x08004609
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	73fb      	strb	r3, [r7, #15]
        break;
 80045f4:	e030      	b.n	8004658 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d025      	beq.n	800464e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004606:	e022      	b.n	800464e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004610:	d11f      	bne.n	8004652 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004616:	e01c      	b.n	8004652 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800461c:	2b02      	cmp	r3, #2
 800461e:	d902      	bls.n	8004626 <DMA_CheckFifoParam+0xb6>
 8004620:	2b03      	cmp	r3, #3
 8004622:	d003      	beq.n	800462c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004624:	e018      	b.n	8004658 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	73fb      	strb	r3, [r7, #15]
        break;
 800462a:	e015      	b.n	8004658 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004630:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00e      	beq.n	8004656 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	73fb      	strb	r3, [r7, #15]
    break;
 800463c:	e00b      	b.n	8004656 <DMA_CheckFifoParam+0xe6>
        break;
 800463e:	bf00      	nop
 8004640:	e00a      	b.n	8004658 <DMA_CheckFifoParam+0xe8>
        break;
 8004642:	bf00      	nop
 8004644:	e008      	b.n	8004658 <DMA_CheckFifoParam+0xe8>
        break;
 8004646:	bf00      	nop
 8004648:	e006      	b.n	8004658 <DMA_CheckFifoParam+0xe8>
        break;
 800464a:	bf00      	nop
 800464c:	e004      	b.n	8004658 <DMA_CheckFifoParam+0xe8>
        break;
 800464e:	bf00      	nop
 8004650:	e002      	b.n	8004658 <DMA_CheckFifoParam+0xe8>
        break;
 8004652:	bf00      	nop
 8004654:	e000      	b.n	8004658 <DMA_CheckFifoParam+0xe8>
    break;
 8004656:	bf00      	nop
    }
  }

  return status;
 8004658:	7bfb      	ldrb	r3, [r7, #15]
}
 800465a:	4618      	mov	r0, r3
 800465c:	3714      	adds	r7, #20
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop

08004668 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a38      	ldr	r2, [pc, #224]	@ (800475c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d022      	beq.n	80046c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a36      	ldr	r2, [pc, #216]	@ (8004760 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d01d      	beq.n	80046c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a35      	ldr	r2, [pc, #212]	@ (8004764 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d018      	beq.n	80046c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a33      	ldr	r2, [pc, #204]	@ (8004768 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d013      	beq.n	80046c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a32      	ldr	r2, [pc, #200]	@ (800476c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d00e      	beq.n	80046c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a30      	ldr	r2, [pc, #192]	@ (8004770 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d009      	beq.n	80046c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a2f      	ldr	r2, [pc, #188]	@ (8004774 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d004      	beq.n	80046c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a2d      	ldr	r2, [pc, #180]	@ (8004778 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d101      	bne.n	80046ca <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80046c6:	2301      	movs	r3, #1
 80046c8:	e000      	b.n	80046cc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80046ca:	2300      	movs	r3, #0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d01a      	beq.n	8004706 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	3b08      	subs	r3, #8
 80046d8:	4a28      	ldr	r2, [pc, #160]	@ (800477c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80046da:	fba2 2303 	umull	r2, r3, r2, r3
 80046de:	091b      	lsrs	r3, r3, #4
 80046e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	4b26      	ldr	r3, [pc, #152]	@ (8004780 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80046e6:	4413      	add	r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	461a      	mov	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a24      	ldr	r2, [pc, #144]	@ (8004784 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80046f4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f003 031f 	and.w	r3, r3, #31
 80046fc:	2201      	movs	r2, #1
 80046fe:	409a      	lsls	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004704:	e024      	b.n	8004750 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	b2db      	uxtb	r3, r3
 800470c:	3b10      	subs	r3, #16
 800470e:	4a1e      	ldr	r2, [pc, #120]	@ (8004788 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004710:	fba2 2303 	umull	r2, r3, r2, r3
 8004714:	091b      	lsrs	r3, r3, #4
 8004716:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	4a1c      	ldr	r2, [pc, #112]	@ (800478c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d806      	bhi.n	800472e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	4a1b      	ldr	r2, [pc, #108]	@ (8004790 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d902      	bls.n	800472e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	3308      	adds	r3, #8
 800472c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	4b18      	ldr	r3, [pc, #96]	@ (8004794 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004732:	4413      	add	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	461a      	mov	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a16      	ldr	r2, [pc, #88]	@ (8004798 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004740:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f003 031f 	and.w	r3, r3, #31
 8004748:	2201      	movs	r2, #1
 800474a:	409a      	lsls	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004750:	bf00      	nop
 8004752:	3714      	adds	r7, #20
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	58025408 	.word	0x58025408
 8004760:	5802541c 	.word	0x5802541c
 8004764:	58025430 	.word	0x58025430
 8004768:	58025444 	.word	0x58025444
 800476c:	58025458 	.word	0x58025458
 8004770:	5802546c 	.word	0x5802546c
 8004774:	58025480 	.word	0x58025480
 8004778:	58025494 	.word	0x58025494
 800477c:	cccccccd 	.word	0xcccccccd
 8004780:	16009600 	.word	0x16009600
 8004784:	58025880 	.word	0x58025880
 8004788:	aaaaaaab 	.word	0xaaaaaaab
 800478c:	400204b8 	.word	0x400204b8
 8004790:	4002040f 	.word	0x4002040f
 8004794:	10008200 	.word	0x10008200
 8004798:	40020880 	.word	0x40020880

0800479c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d04a      	beq.n	8004848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2b08      	cmp	r3, #8
 80047b6:	d847      	bhi.n	8004848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a25      	ldr	r2, [pc, #148]	@ (8004854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d022      	beq.n	8004808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a24      	ldr	r2, [pc, #144]	@ (8004858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d01d      	beq.n	8004808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a22      	ldr	r2, [pc, #136]	@ (800485c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d018      	beq.n	8004808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a21      	ldr	r2, [pc, #132]	@ (8004860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d013      	beq.n	8004808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a1f      	ldr	r2, [pc, #124]	@ (8004864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d00e      	beq.n	8004808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a1e      	ldr	r2, [pc, #120]	@ (8004868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d009      	beq.n	8004808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a1c      	ldr	r2, [pc, #112]	@ (800486c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d004      	beq.n	8004808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a1b      	ldr	r2, [pc, #108]	@ (8004870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d101      	bne.n	800480c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004808:	2301      	movs	r3, #1
 800480a:	e000      	b.n	800480e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800480c:	2300      	movs	r3, #0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00a      	beq.n	8004828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	4b17      	ldr	r3, [pc, #92]	@ (8004874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004816:	4413      	add	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	461a      	mov	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a15      	ldr	r2, [pc, #84]	@ (8004878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004824:	671a      	str	r2, [r3, #112]	@ 0x70
 8004826:	e009      	b.n	800483c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	4b14      	ldr	r3, [pc, #80]	@ (800487c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800482c:	4413      	add	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	461a      	mov	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a11      	ldr	r2, [pc, #68]	@ (8004880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800483a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	3b01      	subs	r3, #1
 8004840:	2201      	movs	r2, #1
 8004842:	409a      	lsls	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004848:	bf00      	nop
 800484a:	3714      	adds	r7, #20
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	58025408 	.word	0x58025408
 8004858:	5802541c 	.word	0x5802541c
 800485c:	58025430 	.word	0x58025430
 8004860:	58025444 	.word	0x58025444
 8004864:	58025458 	.word	0x58025458
 8004868:	5802546c 	.word	0x5802546c
 800486c:	58025480 	.word	0x58025480
 8004870:	58025494 	.word	0x58025494
 8004874:	1600963f 	.word	0x1600963f
 8004878:	58025940 	.word	0x58025940
 800487c:	1000823f 	.word	0x1000823f
 8004880:	40020940 	.word	0x40020940

08004884 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b098      	sub	sp, #96	@ 0x60
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800488c:	4a84      	ldr	r2, [pc, #528]	@ (8004aa0 <HAL_FDCAN_Init+0x21c>)
 800488e:	f107 030c 	add.w	r3, r7, #12
 8004892:	4611      	mov	r1, r2
 8004894:	224c      	movs	r2, #76	@ 0x4c
 8004896:	4618      	mov	r0, r3
 8004898:	f006 fa7b 	bl	800ad92 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e1c6      	b.n	8004c34 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a7e      	ldr	r2, [pc, #504]	@ (8004aa4 <HAL_FDCAN_Init+0x220>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d106      	bne.n	80048be <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80048b8:	461a      	mov	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d106      	bne.n	80048d8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7fb ff76 	bl	80007c4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	699a      	ldr	r2, [r3, #24]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 0210 	bic.w	r2, r2, #16
 80048e6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048e8:	f7fd fd22 	bl	8002330 <HAL_GetTick>
 80048ec:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80048ee:	e014      	b.n	800491a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80048f0:	f7fd fd1e 	bl	8002330 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b0a      	cmp	r3, #10
 80048fc:	d90d      	bls.n	800491a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004904:	f043 0201 	orr.w	r2, r3, #1
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2203      	movs	r2, #3
 8004912:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e18c      	b.n	8004c34 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	f003 0308 	and.w	r3, r3, #8
 8004924:	2b08      	cmp	r3, #8
 8004926:	d0e3      	beq.n	80048f0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	699a      	ldr	r2, [r3, #24]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0201 	orr.w	r2, r2, #1
 8004936:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004938:	f7fd fcfa 	bl	8002330 <HAL_GetTick>
 800493c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800493e:	e014      	b.n	800496a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004940:	f7fd fcf6 	bl	8002330 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b0a      	cmp	r3, #10
 800494c:	d90d      	bls.n	800496a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004954:	f043 0201 	orr.w	r2, r3, #1
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2203      	movs	r2, #3
 8004962:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e164      	b.n	8004c34 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0e3      	beq.n	8004940 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	699a      	ldr	r2, [r3, #24]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f042 0202 	orr.w	r2, r2, #2
 8004986:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	7c1b      	ldrb	r3, [r3, #16]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d108      	bne.n	80049a2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	699a      	ldr	r2, [r3, #24]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800499e:	619a      	str	r2, [r3, #24]
 80049a0:	e007      	b.n	80049b2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	699a      	ldr	r2, [r3, #24]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049b0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	7c5b      	ldrb	r3, [r3, #17]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d108      	bne.n	80049cc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	699a      	ldr	r2, [r3, #24]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049c8:	619a      	str	r2, [r3, #24]
 80049ca:	e007      	b.n	80049dc <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699a      	ldr	r2, [r3, #24]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80049da:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	7c9b      	ldrb	r3, [r3, #18]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d108      	bne.n	80049f6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	699a      	ldr	r2, [r3, #24]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80049f2:	619a      	str	r2, [r3, #24]
 80049f4:	e007      	b.n	8004a06 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	699a      	ldr	r2, [r3, #24]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004a04:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	699a      	ldr	r2, [r3, #24]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004a2a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691a      	ldr	r2, [r3, #16]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 0210 	bic.w	r2, r2, #16
 8004a3a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d108      	bne.n	8004a56 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	699a      	ldr	r2, [r3, #24]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0204 	orr.w	r2, r2, #4
 8004a52:	619a      	str	r2, [r3, #24]
 8004a54:	e030      	b.n	8004ab8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d02c      	beq.n	8004ab8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d020      	beq.n	8004aa8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	699a      	ldr	r2, [r3, #24]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004a74:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	691a      	ldr	r2, [r3, #16]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f042 0210 	orr.w	r2, r2, #16
 8004a84:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	2b03      	cmp	r3, #3
 8004a8c:	d114      	bne.n	8004ab8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	699a      	ldr	r2, [r3, #24]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f042 0220 	orr.w	r2, r2, #32
 8004a9c:	619a      	str	r2, [r3, #24]
 8004a9e:	e00b      	b.n	8004ab8 <HAL_FDCAN_Init+0x234>
 8004aa0:	0800bfb0 	.word	0x0800bfb0
 8004aa4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	699a      	ldr	r2, [r3, #24]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f042 0220 	orr.w	r2, r2, #32
 8004ab6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	3b01      	subs	r3, #1
 8004abe:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ac8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004ad0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004ae0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ae2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004aec:	d115      	bne.n	8004b1a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af8:	3b01      	subs	r3, #1
 8004afa:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004afc:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b02:	3b01      	subs	r3, #1
 8004b04:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004b06:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004b16:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004b18:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00a      	beq.n	8004b38 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b40:	4413      	add	r3, r2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d011      	beq.n	8004b6a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004b4e:	f023 0107 	bic.w	r1, r3, #7
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	3360      	adds	r3, #96	@ 0x60
 8004b5a:	443b      	add	r3, r7
 8004b5c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d011      	beq.n	8004b96 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004b7a:	f023 0107 	bic.w	r1, r3, #7
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	3360      	adds	r3, #96	@ 0x60
 8004b86:	443b      	add	r3, r7
 8004b88:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d012      	beq.n	8004bc4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004ba6:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	3360      	adds	r3, #96	@ 0x60
 8004bb2:	443b      	add	r3, r7
 8004bb4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004bb8:	011a      	lsls	r2, r3, #4
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d012      	beq.n	8004bf2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004bd4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	3360      	adds	r3, #96	@ 0x60
 8004be0:	443b      	add	r3, r7
 8004be2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004be6:	021a      	lsls	r2, r3, #8
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a11      	ldr	r2, [pc, #68]	@ (8004c3c <HAL_FDCAN_Init+0x3b8>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d107      	bne.n	8004c0c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	689a      	ldr	r2, [r3, #8]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f022 0203 	bic.w	r2, r2, #3
 8004c0a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 fedd 	bl	80059e4 <FDCAN_CalcultateRamBlockAddresses>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8004c30:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3760      	adds	r7, #96	@ 0x60
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	4000a000 	.word	0x4000a000

08004c40 <HAL_FDCAN_DeInit>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_DeInit(FDCAN_HandleTypeDef *hfdcan)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d101      	bne.n	8004c52 <HAL_FDCAN_DeInit+0x12>
  {
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e016      	b.n	8004c80 <HAL_FDCAN_DeInit+0x40>

  /* Check function parameters */
  assert_param(IS_FDCAN_ALL_INSTANCE(hfdcan->Instance));

  /* Stop the FDCAN module: return value is voluntary ignored */
  (void)HAL_FDCAN_Stop(hfdcan);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f8e6 	bl	8004e24 <HAL_FDCAN_Stop>

  /* Disable Interrupt lines */
  CLEAR_BIT(hfdcan->Instance->ILE, (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 0203 	bic.w	r2, r2, #3
 8004c66:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* DeInit the low level hardware: CLOCK, NVIC */
  hfdcan->MspDeInitCallback(hfdcan);
#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_FDCAN_MspDeInit(hfdcan);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f7fb fe1d 	bl	80008a8 <HAL_FDCAN_MspDeInit>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Reset the FDCAN ErrorCode */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Change FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_RESET;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Return function status */
  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004c98:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004c9a:	7bfb      	ldrb	r3, [r7, #15]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d002      	beq.n	8004ca6 <HAL_FDCAN_ConfigFilter+0x1e>
 8004ca0:	7bfb      	ldrb	r3, [r7, #15]
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d157      	bne.n	8004d56 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d12b      	bne.n	8004d06 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	2b07      	cmp	r3, #7
 8004cb4:	d10d      	bne.n	8004cd2 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	69db      	ldr	r3, [r3, #28]
 8004cc0:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8004cc2:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004cc8:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8004cca:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8004cce:	617b      	str	r3, [r7, #20]
 8004cd0:	e00e      	b.n	8004cf0 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004cde:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8004ce6:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004cec:	4313      	orrs	r3, r2
 8004cee:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	601a      	str	r2, [r3, #0]
 8004d04:	e025      	b.n	8004d52 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	075a      	lsls	r2, r3, #29
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	2b07      	cmp	r3, #7
 8004d1a:	d103      	bne.n	8004d24 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	613b      	str	r3, [r7, #16]
 8004d22:	e006      	b.n	8004d32 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	079a      	lsls	r2, r3, #30
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	4413      	add	r3, r2
 8004d3e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	3304      	adds	r3, #4
 8004d4a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8004d52:	2300      	movs	r3, #0
 8004d54:	e008      	b.n	8004d68 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d5c:	f043 0202 	orr.w	r2, r3, #2
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
  }
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	371c      	adds	r7, #28
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
 8004d80:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d110      	bne.n	8004db0 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004d96:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8004d9c:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8004da4:	69ba      	ldr	r2, [r7, #24]
 8004da6:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004da8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8004dac:	2300      	movs	r3, #0
 8004dae:	e008      	b.n	8004dc2 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004db6:	f043 0204 	orr.w	r2, r3, #4
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
  }
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d111      	bne.n	8004e06 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2202      	movs	r2, #2
 8004de6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	699a      	ldr	r2, [r3, #24]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0201 	bic.w	r2, r2, #1
 8004df8:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8004e02:	2300      	movs	r3, #0
 8004e04:	e008      	b.n	8004e18 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e0c:	f043 0204 	orr.w	r2, r3, #4
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
  }
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <HAL_FDCAN_Stop>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Stop(FDCAN_HandleTypeDef *hfdcan)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t Counter = 0U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	60fb      	str	r3, [r7, #12]

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d15b      	bne.n	8004ef4 <HAL_FDCAN_Stop+0xd0>
  {
    /* Request initialisation */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	699a      	ldr	r2, [r3, #24]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f042 0201 	orr.w	r2, r2, #1
 8004e4a:	619a      	str	r2, [r3, #24]

    /* Wait until the INIT bit into CCCR register is set */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004e4c:	e013      	b.n	8004e76 <HAL_FDCAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_COUNT)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2b32      	cmp	r3, #50	@ 0x32
 8004e52:	d90d      	bls.n	8004e70 <HAL_FDCAN_Stop+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e5a:	f043 0201 	orr.w	r2, r3, #1
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2203      	movs	r2, #3
 8004e68:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

        return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e04a      	b.n	8004f06 <HAL_FDCAN_Stop+0xe2>
      }

      /* Increment counter */
      Counter++;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	3301      	adds	r3, #1
 8004e74:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d0e4      	beq.n	8004e4e <HAL_FDCAN_Stop+0x2a>
    }

    /* Reset counter */
    Counter = 0U;
 8004e84:	2300      	movs	r3, #0
 8004e86:	60fb      	str	r3, [r7, #12]

    /* Exit from Sleep mode */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	699a      	ldr	r2, [r3, #24]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 0210 	bic.w	r2, r2, #16
 8004e96:	619a      	str	r2, [r3, #24]

    /* Wait until FDCAN exits sleep mode */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004e98:	e013      	b.n	8004ec2 <HAL_FDCAN_Stop+0x9e>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_COUNT)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2b32      	cmp	r3, #50	@ 0x32
 8004e9e:	d90d      	bls.n	8004ebc <HAL_FDCAN_Stop+0x98>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ea6:	f043 0201 	orr.w	r2, r3, #1
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2203      	movs	r2, #3
 8004eb4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

        return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e024      	b.n	8004f06 <HAL_FDCAN_Stop+0xe2>
      }

      /* Increment counter */
      Counter++;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	f003 0308 	and.w	r3, r3, #8
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d0e4      	beq.n	8004e9a <HAL_FDCAN_Stop+0x76>
    }

    /* Enable configuration change */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	699a      	ldr	r2, [r3, #24]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f042 0202 	orr.w	r2, r2, #2
 8004ede:	619a      	str	r2, [r3, #24]

    /* Reset Latest Tx FIFO/Queue Request Buffer Index */
    hfdcan->LatestTxFifoQRequest = 0U;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Return function status */
    return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	e008      	b.n	8004f06 <HAL_FDCAN_Stop+0xe2>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004efa:	f043 0208 	orr.w	r2, r3, #8
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
  }
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b086      	sub	sp, #24
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	60f8      	str	r0, [r7, #12]
 8004f1a:	60b9      	str	r1, [r7, #8]
 8004f1c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d141      	bne.n	8004fae <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004f32:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d109      	bne.n	8004f4e <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f40:	f043 0220 	orr.w	r2, r3, #32
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e038      	b.n	8004fc0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004f56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d009      	beq.n	8004f72 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f64:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e026      	b.n	8004fc0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004f7a:	0c1b      	lsrs	r3, r3, #16
 8004f7c:	f003 031f 	and.w	r3, r3, #31
 8004f80:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	68b9      	ldr	r1, [r7, #8]
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 feb1 	bl	8005cf0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2101      	movs	r1, #1
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	fa01 f202 	lsl.w	r2, r1, r2
 8004f9a:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	409a      	lsls	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8004faa:	2300      	movs	r3, #0
 8004fac:	e008      	b.n	8004fc0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004fb4:	f043 0208 	orr.w	r2, r3, #8
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
  }
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3718      	adds	r7, #24
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b08b      	sub	sp, #44	@ 0x2c
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
 8004fd4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004fe0:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8004fe2:	7efb      	ldrb	r3, [r7, #27]
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	f040 8149 	bne.w	800527c <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	2b40      	cmp	r3, #64	@ 0x40
 8004fee:	d14c      	bne.n	800508a <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004ff8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d109      	bne.n	8005014 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005006:	f043 0220 	orr.w	r2, r3, #32
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e13c      	b.n	800528e <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800501c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005020:	2b00      	cmp	r3, #0
 8005022:	d109      	bne.n	8005038 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800502a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e12a      	b.n	800528e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005040:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005044:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005048:	d10a      	bne.n	8005060 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005052:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005056:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800505a:	d101      	bne.n	8005060 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800505c:	2301      	movs	r3, #1
 800505e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005068:	0a1b      	lsrs	r3, r3, #8
 800506a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800506e:	69fa      	ldr	r2, [r7, #28]
 8005070:	4413      	add	r3, r2
 8005072:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800507c:	69f9      	ldr	r1, [r7, #28]
 800507e:	fb01 f303 	mul.w	r3, r1, r3
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4413      	add	r3, r2
 8005086:	627b      	str	r3, [r7, #36]	@ 0x24
 8005088:	e068      	b.n	800515c <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	2b41      	cmp	r3, #65	@ 0x41
 800508e:	d14c      	bne.n	800512a <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005098:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d109      	bne.n	80050b4 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050a6:	f043 0220 	orr.w	r2, r3, #32
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e0ec      	b.n	800528e <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80050bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d109      	bne.n	80050d8 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e0da      	b.n	800528e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80050e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050e8:	d10a      	bne.n	8005100 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80050f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050fa:	d101      	bne.n	8005100 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80050fc:	2301      	movs	r3, #1
 80050fe:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005108:	0a1b      	lsrs	r3, r3, #8
 800510a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800510e:	69fa      	ldr	r2, [r7, #28]
 8005110:	4413      	add	r3, r2
 8005112:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800511c:	69f9      	ldr	r1, [r7, #28]
 800511e:	fb01 f303 	mul.w	r3, r1, r3
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4413      	add	r3, r2
 8005126:	627b      	str	r3, [r7, #36]	@ 0x24
 8005128:	e018      	b.n	800515c <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	429a      	cmp	r2, r3
 8005132:	d309      	bcc.n	8005148 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800513a:	f043 0220 	orr.w	r2, r3, #32
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e0a2      	b.n	800528e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005150:	68b9      	ldr	r1, [r7, #8]
 8005152:	fb01 f303 	mul.w	r3, r1, r3
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800515c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d107      	bne.n	8005180 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	0c9b      	lsrs	r3, r3, #18
 8005176:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	601a      	str	r2, [r3, #0]
 800517e:	e005      	b.n	800518c <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800518c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80051a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a6:	3304      	adds	r3, #4
 80051a8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80051aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80051b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	0c1b      	lsrs	r3, r3, #16
 80051ba:	f003 020f 	and.w	r2, r3, #15
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80051c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80051ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80051da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	0e1b      	lsrs	r3, r3, #24
 80051e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80051e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	0fda      	lsrs	r2, r3, #31
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80051f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f4:	3304      	adds	r3, #4
 80051f6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80051f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fa:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80051fc:	2300      	movs	r3, #0
 80051fe:	623b      	str	r3, [r7, #32]
 8005200:	e00a      	b.n	8005218 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	441a      	add	r2, r3
 8005208:	6839      	ldr	r1, [r7, #0]
 800520a:	6a3b      	ldr	r3, [r7, #32]
 800520c:	440b      	add	r3, r1
 800520e:	7812      	ldrb	r2, [r2, #0]
 8005210:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005212:	6a3b      	ldr	r3, [r7, #32]
 8005214:	3301      	adds	r3, #1
 8005216:	623b      	str	r3, [r7, #32]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	4a1f      	ldr	r2, [pc, #124]	@ (800529c <HAL_FDCAN_GetRxMessage+0x2d4>)
 800521e:	5cd3      	ldrb	r3, [r2, r3]
 8005220:	461a      	mov	r2, r3
 8005222:	6a3b      	ldr	r3, [r7, #32]
 8005224:	4293      	cmp	r3, r2
 8005226:	d3ec      	bcc.n	8005202 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	2b40      	cmp	r3, #64	@ 0x40
 800522c:	d105      	bne.n	800523a <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	69fa      	ldr	r2, [r7, #28]
 8005234:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8005238:	e01e      	b.n	8005278 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	2b41      	cmp	r3, #65	@ 0x41
 800523e:	d105      	bne.n	800524c <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	69fa      	ldr	r2, [r7, #28]
 8005246:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 800524a:	e015      	b.n	8005278 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	2b1f      	cmp	r3, #31
 8005250:	d808      	bhi.n	8005264 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2101      	movs	r1, #1
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	fa01 f202 	lsl.w	r2, r1, r2
 800525e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8005262:	e009      	b.n	8005278 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	f003 021f 	and.w	r2, r3, #31
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2101      	movs	r1, #1
 8005270:	fa01 f202 	lsl.w	r2, r1, r2
 8005274:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8005278:	2300      	movs	r3, #0
 800527a:	e008      	b.n	800528e <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005282:	f043 0208 	orr.w	r2, r3, #8
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
  }
}
 800528e:	4618      	mov	r0, r3
 8005290:	372c      	adds	r7, #44	@ 0x2c
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	0800c064 	.word	0x0800c064

080052a0 <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(const FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2b40      	cmp	r3, #64	@ 0x40
 80052ae:	d107      	bne.n	80052c0 <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80052b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052bc:	60fb      	str	r3, [r7, #12]
 80052be:	e006      	b.n	80052ce <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80052c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052cc:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 80052ce:	68fb      	ldr	r3, [r7, #12]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3714      	adds	r7, #20
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80052dc:	b480      	push	{r7}
 80052de:	b087      	sub	sp, #28
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80052ee:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80052f0:	7dfb      	ldrb	r3, [r7, #23]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d002      	beq.n	80052fc <HAL_FDCAN_ActivateNotification+0x20>
 80052f6:	7dfb      	ldrb	r3, [r7, #23]
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d155      	bne.n	80053a8 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	4013      	ands	r3, r2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d108      	bne.n	800531c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f042 0201 	orr.w	r2, r2, #1
 8005318:	65da      	str	r2, [r3, #92]	@ 0x5c
 800531a:	e014      	b.n	8005346 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	4013      	ands	r3, r2
 8005326:	68ba      	ldr	r2, [r7, #8]
 8005328:	429a      	cmp	r2, r3
 800532a:	d108      	bne.n	800533e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f042 0202 	orr.w	r2, r2, #2
 800533a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800533c:	e003      	b.n	8005346 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2203      	movs	r2, #3
 8005344:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800534c:	2b00      	cmp	r3, #0
 800534e:	d009      	beq.n	8005364 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	430a      	orrs	r2, r1
 8005360:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800536a:	2b00      	cmp	r3, #0
 800536c:	d009      	beq.n	8005382 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	430a      	orrs	r2, r1
 800537e:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	4b0f      	ldr	r3, [pc, #60]	@ (80053c8 <HAL_FDCAN_ActivateNotification+0xec>)
 800538c:	4013      	ands	r3, r2
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	6812      	ldr	r2, [r2, #0]
 8005392:	430b      	orrs	r3, r1
 8005394:	6553      	str	r3, [r2, #84]	@ 0x54
 8005396:	4b0d      	ldr	r3, [pc, #52]	@ (80053cc <HAL_FDCAN_ActivateNotification+0xf0>)
 8005398:	695a      	ldr	r2, [r3, #20]
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	0f9b      	lsrs	r3, r3, #30
 800539e:	490b      	ldr	r1, [pc, #44]	@ (80053cc <HAL_FDCAN_ActivateNotification+0xf0>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80053a4:	2300      	movs	r3, #0
 80053a6:	e008      	b.n	80053ba <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80053ae:	f043 0202 	orr.w	r2, r3, #2
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
  }
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	371c      	adds	r7, #28
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	3fcfffff 	.word	0x3fcfffff
 80053cc:	4000a800 	.word	0x4000a800

080053d0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b096      	sub	sp, #88	@ 0x58
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80053d8:	4b9a      	ldr	r3, [pc, #616]	@ (8005644 <HAL_FDCAN_IRQHandler+0x274>)
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	079b      	lsls	r3, r3, #30
 80053de:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80053e0:	4b98      	ldr	r3, [pc, #608]	@ (8005644 <HAL_FDCAN_IRQHandler+0x274>)
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	079b      	lsls	r3, r3, #30
 80053e6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80053e8:	4013      	ands	r3, r2
 80053ea:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053f2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80053f6:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005400:	4013      	ands	r3, r2
 8005402:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800540a:	f003 030f 	and.w	r3, r3, #15
 800540e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005416:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005418:	4013      	ands	r3, r2
 800541a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005422:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005426:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800542e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005430:	4013      	ands	r3, r2
 8005432:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800543a:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 800543e:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005446:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005448:	4013      	ands	r3, r2
 800544a:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005452:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8005456:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800545e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005460:	4013      	ands	r3, r2
 8005462:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800546a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005472:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005476:	0a1b      	lsrs	r3, r3, #8
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	2b00      	cmp	r3, #0
 800547e:	d010      	beq.n	80054a2 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005482:	0a1b      	lsrs	r3, r3, #8
 8005484:	f003 0301 	and.w	r3, r3, #1
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00a      	beq.n	80054a2 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005494:	651a      	str	r2, [r3, #80]	@ 0x50
 8005496:	4b6b      	ldr	r3, [pc, #428]	@ (8005644 <HAL_FDCAN_IRQHandler+0x274>)
 8005498:	2200      	movs	r2, #0
 800549a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 fa5f 	bl	8005960 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80054a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054a4:	0a9b      	lsrs	r3, r3, #10
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d01d      	beq.n	80054ea <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80054ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054b0:	0a9b      	lsrs	r3, r3, #10
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d017      	beq.n	80054ea <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80054c2:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80054cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80054ce:	4013      	ands	r3, r2
 80054d0:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80054da:	651a      	str	r2, [r3, #80]	@ 0x50
 80054dc:	4b59      	ldr	r3, [pc, #356]	@ (8005644 <HAL_FDCAN_IRQHandler+0x274>)
 80054de:	2200      	movs	r2, #0
 80054e0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80054e2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 fa12 	bl	800590e <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80054ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00d      	beq.n	800550c <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80054f6:	4b54      	ldr	r3, [pc, #336]	@ (8005648 <HAL_FDCAN_IRQHandler+0x278>)
 80054f8:	400b      	ands	r3, r1
 80054fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80054fc:	4a51      	ldr	r2, [pc, #324]	@ (8005644 <HAL_FDCAN_IRQHandler+0x274>)
 80054fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005500:	0f9b      	lsrs	r3, r3, #30
 8005502:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8005504:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f9c0 	bl	800588c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800550c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00d      	beq.n	800552e <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005518:	4b4b      	ldr	r3, [pc, #300]	@ (8005648 <HAL_FDCAN_IRQHandler+0x278>)
 800551a:	400b      	ands	r3, r1
 800551c:	6513      	str	r3, [r2, #80]	@ 0x50
 800551e:	4a49      	ldr	r2, [pc, #292]	@ (8005644 <HAL_FDCAN_IRQHandler+0x274>)
 8005520:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005522:	0f9b      	lsrs	r3, r3, #30
 8005524:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005526:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f9ba 	bl	80058a2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800552e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00d      	beq.n	8005550 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800553a:	4b43      	ldr	r3, [pc, #268]	@ (8005648 <HAL_FDCAN_IRQHandler+0x278>)
 800553c:	400b      	ands	r3, r1
 800553e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005540:	4a40      	ldr	r2, [pc, #256]	@ (8005644 <HAL_FDCAN_IRQHandler+0x274>)
 8005542:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005544:	0f9b      	lsrs	r3, r3, #30
 8005546:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005548:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f9b4 	bl	80058b8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005550:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00d      	beq.n	8005572 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800555c:	4b3a      	ldr	r3, [pc, #232]	@ (8005648 <HAL_FDCAN_IRQHandler+0x278>)
 800555e:	400b      	ands	r3, r1
 8005560:	6513      	str	r3, [r2, #80]	@ 0x50
 8005562:	4a38      	ldr	r2, [pc, #224]	@ (8005644 <HAL_FDCAN_IRQHandler+0x274>)
 8005564:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005566:	0f9b      	lsrs	r3, r3, #30
 8005568:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800556a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 f9ae 	bl	80058ce <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005574:	0adb      	lsrs	r3, r3, #11
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d010      	beq.n	80055a0 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800557e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005580:	0adb      	lsrs	r3, r3, #11
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00a      	beq.n	80055a0 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005592:	651a      	str	r2, [r3, #80]	@ 0x50
 8005594:	4b2b      	ldr	r3, [pc, #172]	@ (8005644 <HAL_FDCAN_IRQHandler+0x274>)
 8005596:	2200      	movs	r2, #0
 8005598:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f9a2 	bl	80058e4 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80055a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055a2:	0a5b      	lsrs	r3, r3, #9
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d01d      	beq.n	80055e8 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80055ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ae:	0a5b      	lsrs	r3, r3, #9
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d017      	beq.n	80055e8 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80055c0:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055cc:	4013      	ands	r3, r2
 80055ce:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055d8:	651a      	str	r2, [r3, #80]	@ 0x50
 80055da:	4b1a      	ldr	r3, [pc, #104]	@ (8005644 <HAL_FDCAN_IRQHandler+0x274>)
 80055dc:	2200      	movs	r2, #0
 80055de:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80055e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f988 	bl	80058f8 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 80055e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ea:	0cdb      	lsrs	r3, r3, #19
 80055ec:	f003 0301 	and.w	r3, r3, #1
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d010      	beq.n	8005616 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 80055f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055f6:	0cdb      	lsrs	r3, r3, #19
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00a      	beq.n	8005616 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005608:	651a      	str	r2, [r3, #80]	@ 0x50
 800560a:	4b0e      	ldr	r3, [pc, #56]	@ (8005644 <HAL_FDCAN_IRQHandler+0x274>)
 800560c:	2200      	movs	r2, #0
 800560e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 f987 	bl	8005924 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005618:	0c1b      	lsrs	r3, r3, #16
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b00      	cmp	r3, #0
 8005620:	d016      	beq.n	8005650 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005624:	0c1b      	lsrs	r3, r3, #16
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	2b00      	cmp	r3, #0
 800562c:	d010      	beq.n	8005650 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005636:	651a      	str	r2, [r3, #80]	@ 0x50
 8005638:	4b02      	ldr	r3, [pc, #8]	@ (8005644 <HAL_FDCAN_IRQHandler+0x274>)
 800563a:	2200      	movs	r2, #0
 800563c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	e004      	b.n	800564c <HAL_FDCAN_IRQHandler+0x27c>
 8005642:	bf00      	nop
 8005644:	4000a800 	.word	0x4000a800
 8005648:	3fcfffff 	.word	0x3fcfffff
 800564c:	f000 f974 	bl	8005938 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005650:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005652:	0c9b      	lsrs	r3, r3, #18
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	2b00      	cmp	r3, #0
 800565a:	d010      	beq.n	800567e <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800565c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800565e:	0c9b      	lsrs	r3, r3, #18
 8005660:	f003 0301 	and.w	r3, r3, #1
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00a      	beq.n	800567e <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005670:	651a      	str	r2, [r3, #80]	@ 0x50
 8005672:	4b83      	ldr	r3, [pc, #524]	@ (8005880 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005674:	2200      	movs	r2, #0
 8005676:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 f967 	bl	800594c <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800567e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005680:	0c5b      	lsrs	r3, r3, #17
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	2b00      	cmp	r3, #0
 8005688:	d015      	beq.n	80056b6 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800568a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800568c:	0c5b      	lsrs	r3, r3, #17
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00f      	beq.n	80056b6 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800569e:	651a      	str	r2, [r3, #80]	@ 0x50
 80056a0:	4b77      	ldr	r3, [pc, #476]	@ (8005880 <HAL_FDCAN_IRQHandler+0x4b0>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056ac:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80056b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00d      	beq.n	80056d8 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80056c2:	4b70      	ldr	r3, [pc, #448]	@ (8005884 <HAL_FDCAN_IRQHandler+0x4b4>)
 80056c4:	400b      	ands	r3, r1
 80056c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80056c8:	4a6d      	ldr	r2, [pc, #436]	@ (8005880 <HAL_FDCAN_IRQHandler+0x4b0>)
 80056ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056cc:	0f9b      	lsrs	r3, r3, #30
 80056ce:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80056d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7fb f9f2 	bl	8000abc <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80056d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d011      	beq.n	8005702 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80056e4:	4b67      	ldr	r3, [pc, #412]	@ (8005884 <HAL_FDCAN_IRQHandler+0x4b4>)
 80056e6:	400b      	ands	r3, r1
 80056e8:	6513      	str	r3, [r2, #80]	@ 0x50
 80056ea:	4a65      	ldr	r2, [pc, #404]	@ (8005880 <HAL_FDCAN_IRQHandler+0x4b0>)
 80056ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056ee:	0f9b      	lsrs	r3, r3, #30
 80056f0:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80056f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056fa:	431a      	orrs	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a60      	ldr	r2, [pc, #384]	@ (8005888 <HAL_FDCAN_IRQHandler+0x4b8>)
 8005708:	4293      	cmp	r3, r2
 800570a:	f040 80ac 	bne.w	8005866 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f003 0303 	and.w	r3, r3, #3
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 80a4 	beq.w	8005866 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	6a1b      	ldr	r3, [r3, #32]
 8005724:	f003 030f 	and.w	r3, r3, #15
 8005728:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005730:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005732:	4013      	ands	r3, r2
 8005734:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	6a1b      	ldr	r3, [r3, #32]
 800573c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005740:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005748:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800574a:	4013      	ands	r3, r2
 800574c:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005758:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005760:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005762:	4013      	ands	r3, r2
 8005764:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8005770:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005778:	6a3a      	ldr	r2, [r7, #32]
 800577a:	4013      	ands	r3, r2
 800577c:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8005788:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005790:	69fa      	ldr	r2, [r7, #28]
 8005792:	4013      	ands	r3, r2
 8005794:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800579c:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	6a1b      	ldr	r3, [r3, #32]
 80057a4:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80057a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d007      	beq.n	80057bc <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057b2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80057b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f8e6 	bl	8005988 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80057bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d007      	beq.n	80057d2 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057c8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80057ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 f8e6 	bl	800599e <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	099b      	lsrs	r3, r3, #6
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d01a      	beq.n	8005814 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	099b      	lsrs	r3, r3, #6
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d014      	beq.n	8005814 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057f0:	0c1b      	lsrs	r3, r3, #16
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005800:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	2240      	movs	r2, #64	@ 0x40
 8005808:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	6939      	ldr	r1, [r7, #16]
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 f8d0 	bl	80059b4 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8005814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005816:	2b00      	cmp	r3, #0
 8005818:	d007      	beq.n	800582a <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005820:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005822:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 f8d1 	bl	80059cc <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00b      	beq.n	8005848 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	6a3a      	ldr	r2, [r7, #32]
 8005836:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800583e:	6a3b      	ldr	r3, [r7, #32]
 8005840:	431a      	orrs	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00b      	beq.n	8005866 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	69fa      	ldr	r2, [r7, #28]
 8005854:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	431a      	orrs	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800586c:	2b00      	cmp	r3, #0
 800586e:	d002      	beq.n	8005876 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 f87f 	bl	8005974 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005876:	bf00      	nop
 8005878:	3758      	adds	r7, #88	@ 0x58
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	4000a800 	.word	0x4000a800
 8005884:	3fcfffff 	.word	0x3fcfffff
 8005888:	4000a000 	.word	0x4000a000

0800588c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8005896:	bf00      	nop
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b083      	sub	sp, #12
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
 80058aa:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80058c2:	bf00      	nop
 80058c4:	370c      	adds	r7, #12
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80058ce:	b480      	push	{r7}
 80058d0:	b083      	sub	sp, #12
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
 80058d6:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005902:	bf00      	nop
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800590e:	b480      	push	{r7}
 8005910:	b083      	sub	sp, #12
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
 8005916:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8005992:	bf00      	nop
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800599e:	b480      	push	{r7}
 80059a0:	b083      	sub	sp, #12
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
 80059a6:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80059c0:	bf00      	nop
 80059c2:	3714      	adds	r7, #20
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80059d6:	bf00      	nop
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
	...

080059e4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059f0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80059fa:	4ba7      	ldr	r3, [pc, #668]	@ (8005c98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80059fc:	4013      	ands	r3, r2
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	0091      	lsls	r1, r2, #2
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	6812      	ldr	r2, [r2, #0]
 8005a06:	430b      	orrs	r3, r1
 8005a08:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a14:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a1c:	041a      	lsls	r2, r3, #16
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	4413      	add	r3, r2
 8005a30:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005a3a:	4b97      	ldr	r3, [pc, #604]	@ (8005c98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	68ba      	ldr	r2, [r7, #8]
 8005a40:	0091      	lsls	r1, r2, #2
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	6812      	ldr	r2, [r2, #0]
 8005a46:	430b      	orrs	r3, r1
 8005a48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a54:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a5c:	041a      	lsls	r2, r3, #16
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	4413      	add	r3, r2
 8005a72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8005a7c:	4b86      	ldr	r3, [pc, #536]	@ (8005c98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005a7e:	4013      	ands	r3, r2
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	0091      	lsls	r1, r2, #2
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	6812      	ldr	r2, [r2, #0]
 8005a88:	430b      	orrs	r3, r1
 8005a8a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005a96:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9e:	041a      	lsls	r2, r3, #16
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005ab2:	fb02 f303 	mul.w	r3, r2, r3
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	4413      	add	r3, r2
 8005aba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005ac4:	4b74      	ldr	r3, [pc, #464]	@ (8005c98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	0091      	lsls	r1, r2, #2
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	6812      	ldr	r2, [r2, #0]
 8005ad0:	430b      	orrs	r3, r1
 8005ad2:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005ade:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ae6:	041a      	lsls	r2, r3, #16
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005afa:	fb02 f303 	mul.w	r3, r2, r3
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	4413      	add	r3, r2
 8005b02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8005b0c:	4b62      	ldr	r3, [pc, #392]	@ (8005c98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005b0e:	4013      	ands	r3, r2
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	0091      	lsls	r1, r2, #2
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	6812      	ldr	r2, [r2, #0]
 8005b18:	430b      	orrs	r3, r1
 8005b1a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005b26:	fb02 f303 	mul.w	r3, r2, r3
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8005b38:	4b57      	ldr	r3, [pc, #348]	@ (8005c98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	0091      	lsls	r1, r2, #2
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	6812      	ldr	r2, [r2, #0]
 8005b44:	430b      	orrs	r3, r1
 8005b46:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b52:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b5a:	041a      	lsls	r2, r3, #16
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	430a      	orrs	r2, r1
 8005b62:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b6a:	005b      	lsls	r3, r3, #1
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	4413      	add	r3, r2
 8005b70:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005b7a:	4b47      	ldr	r3, [pc, #284]	@ (8005c98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	0091      	lsls	r1, r2, #2
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	6812      	ldr	r2, [r2, #0]
 8005b86:	430b      	orrs	r3, r1
 8005b88:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005b94:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b9c:	041a      	lsls	r2, r3, #16
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005bb0:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bb8:	061a      	lsls	r2, r3, #24
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bc8:	4b34      	ldr	r3, [pc, #208]	@ (8005c9c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005bca:	4413      	add	r3, r2
 8005bcc:	009a      	lsls	r2, r3, #2
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	441a      	add	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bea:	00db      	lsls	r3, r3, #3
 8005bec:	441a      	add	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bfa:	6879      	ldr	r1, [r7, #4]
 8005bfc:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8005bfe:	fb01 f303 	mul.w	r3, r1, r3
 8005c02:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005c04:	441a      	add	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c12:	6879      	ldr	r1, [r7, #4]
 8005c14:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8005c16:	fb01 f303 	mul.w	r3, r1, r3
 8005c1a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005c1c:	441a      	add	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c2a:	6879      	ldr	r1, [r7, #4]
 8005c2c:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8005c2e:	fb01 f303 	mul.w	r3, r1, r3
 8005c32:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005c34:	441a      	add	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c46:	00db      	lsls	r3, r3, #3
 8005c48:	441a      	add	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c5a:	6879      	ldr	r1, [r7, #4]
 8005c5c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005c5e:	fb01 f303 	mul.w	r3, r1, r3
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	441a      	add	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c76:	6879      	ldr	r1, [r7, #4]
 8005c78:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005c7a:	fb01 f303 	mul.w	r3, r1, r3
 8005c7e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005c80:	441a      	add	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c8e:	4a04      	ldr	r2, [pc, #16]	@ (8005ca0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d915      	bls.n	8005cc0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005c94:	e006      	b.n	8005ca4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005c96:	bf00      	nop
 8005c98:	ffff0003 	.word	0xffff0003
 8005c9c:	10002b00 	.word	0x10002b00
 8005ca0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005caa:	f043 0220 	orr.w	r2, r3, #32
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2203      	movs	r2, #3
 8005cb8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e010      	b.n	8005ce2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cc4:	60fb      	str	r3, [r7, #12]
 8005cc6:	e005      	b.n	8005cd4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	3304      	adds	r3, #4
 8005cd2:	60fb      	str	r3, [r7, #12]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d3f3      	bcc.n	8005cc8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop

08005cf0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b089      	sub	sp, #36	@ 0x24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
 8005cfc:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10a      	bne.n	8005d1c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8005d0e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005d16:	4313      	orrs	r3, r2
 8005d18:	61fb      	str	r3, [r7, #28]
 8005d1a:	e00a      	b.n	8005d32 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005d24:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8005d2a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005d2c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d30:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005d3c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8005d42:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8005d48:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005d50:	4313      	orrs	r3, r2
 8005d52:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d5e:	6839      	ldr	r1, [r7, #0]
 8005d60:	fb01 f303 	mul.w	r3, r1, r3
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4413      	add	r3, r2
 8005d68:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	69fa      	ldr	r2, [r7, #28]
 8005d6e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	3304      	adds	r3, #4
 8005d74:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	3304      	adds	r3, #4
 8005d80:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005d82:	2300      	movs	r3, #0
 8005d84:	617b      	str	r3, [r7, #20]
 8005d86:	e020      	b.n	8005dca <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	3303      	adds	r3, #3
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	4413      	add	r3, r2
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	3302      	adds	r3, #2
 8005d98:	6879      	ldr	r1, [r7, #4]
 8005d9a:	440b      	add	r3, r1
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005da0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	3301      	adds	r3, #1
 8005da6:	6879      	ldr	r1, [r7, #4]
 8005da8:	440b      	add	r3, r1
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005dae:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8005db0:	6879      	ldr	r1, [r7, #4]
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	440a      	add	r2, r1
 8005db6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005db8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	3304      	adds	r3, #4
 8005dc2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	3304      	adds	r3, #4
 8005dc8:	617b      	str	r3, [r7, #20]
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	4a06      	ldr	r2, [pc, #24]	@ (8005de8 <FDCAN_CopyMessageToRAM+0xf8>)
 8005dd0:	5cd3      	ldrb	r3, [r2, r3]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d3d6      	bcc.n	8005d88 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8005dda:	bf00      	nop
 8005ddc:	bf00      	nop
 8005dde:	3724      	adds	r7, #36	@ 0x24
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr
 8005de8:	0800c064 	.word	0x0800c064

08005dec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b089      	sub	sp, #36	@ 0x24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005df6:	2300      	movs	r3, #0
 8005df8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005dfa:	4b89      	ldr	r3, [pc, #548]	@ (8006020 <HAL_GPIO_Init+0x234>)
 8005dfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005dfe:	e194      	b.n	800612a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	2101      	movs	r1, #1
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	fa01 f303 	lsl.w	r3, r1, r3
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f000 8186 	beq.w	8006124 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f003 0303 	and.w	r3, r3, #3
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d005      	beq.n	8005e30 <HAL_GPIO_Init+0x44>
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	f003 0303 	and.w	r3, r3, #3
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d130      	bne.n	8005e92 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	005b      	lsls	r3, r3, #1
 8005e3a:	2203      	movs	r2, #3
 8005e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e40:	43db      	mvns	r3, r3
 8005e42:	69ba      	ldr	r2, [r7, #24]
 8005e44:	4013      	ands	r3, r2
 8005e46:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	68da      	ldr	r2, [r3, #12]
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	005b      	lsls	r3, r3, #1
 8005e50:	fa02 f303 	lsl.w	r3, r2, r3
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e66:	2201      	movs	r2, #1
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6e:	43db      	mvns	r3, r3
 8005e70:	69ba      	ldr	r2, [r7, #24]
 8005e72:	4013      	ands	r3, r2
 8005e74:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	091b      	lsrs	r3, r3, #4
 8005e7c:	f003 0201 	and.w	r2, r3, #1
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	fa02 f303 	lsl.w	r3, r2, r3
 8005e86:	69ba      	ldr	r2, [r7, #24]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	69ba      	ldr	r2, [r7, #24]
 8005e90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f003 0303 	and.w	r3, r3, #3
 8005e9a:	2b03      	cmp	r3, #3
 8005e9c:	d017      	beq.n	8005ece <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	005b      	lsls	r3, r3, #1
 8005ea8:	2203      	movs	r2, #3
 8005eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8005eae:	43db      	mvns	r3, r3
 8005eb0:	69ba      	ldr	r2, [r7, #24]
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	689a      	ldr	r2, [r3, #8]
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	005b      	lsls	r3, r3, #1
 8005ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	69ba      	ldr	r2, [r7, #24]
 8005ecc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	f003 0303 	and.w	r3, r3, #3
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d123      	bne.n	8005f22 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	08da      	lsrs	r2, r3, #3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	3208      	adds	r2, #8
 8005ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	f003 0307 	and.w	r3, r3, #7
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	220f      	movs	r2, #15
 8005ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef6:	43db      	mvns	r3, r3
 8005ef8:	69ba      	ldr	r2, [r7, #24]
 8005efa:	4013      	ands	r3, r2
 8005efc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	691a      	ldr	r2, [r3, #16]
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	f003 0307 	and.w	r3, r3, #7
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	08da      	lsrs	r2, r3, #3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	3208      	adds	r2, #8
 8005f1c:	69b9      	ldr	r1, [r7, #24]
 8005f1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	005b      	lsls	r3, r3, #1
 8005f2c:	2203      	movs	r2, #3
 8005f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f32:	43db      	mvns	r3, r3
 8005f34:	69ba      	ldr	r2, [r7, #24]
 8005f36:	4013      	ands	r3, r2
 8005f38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f003 0203 	and.w	r2, r3, #3
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	005b      	lsls	r3, r3, #1
 8005f46:	fa02 f303 	lsl.w	r3, r2, r3
 8005f4a:	69ba      	ldr	r2, [r7, #24]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	69ba      	ldr	r2, [r7, #24]
 8005f54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f000 80e0 	beq.w	8006124 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f64:	4b2f      	ldr	r3, [pc, #188]	@ (8006024 <HAL_GPIO_Init+0x238>)
 8005f66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005f6a:	4a2e      	ldr	r2, [pc, #184]	@ (8006024 <HAL_GPIO_Init+0x238>)
 8005f6c:	f043 0302 	orr.w	r3, r3, #2
 8005f70:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005f74:	4b2b      	ldr	r3, [pc, #172]	@ (8006024 <HAL_GPIO_Init+0x238>)
 8005f76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005f7a:	f003 0302 	and.w	r3, r3, #2
 8005f7e:	60fb      	str	r3, [r7, #12]
 8005f80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f82:	4a29      	ldr	r2, [pc, #164]	@ (8006028 <HAL_GPIO_Init+0x23c>)
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	089b      	lsrs	r3, r3, #2
 8005f88:	3302      	adds	r3, #2
 8005f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	f003 0303 	and.w	r3, r3, #3
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	220f      	movs	r2, #15
 8005f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f9e:	43db      	mvns	r3, r3
 8005fa0:	69ba      	ldr	r2, [r7, #24]
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a20      	ldr	r2, [pc, #128]	@ (800602c <HAL_GPIO_Init+0x240>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d052      	beq.n	8006054 <HAL_GPIO_Init+0x268>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a1f      	ldr	r2, [pc, #124]	@ (8006030 <HAL_GPIO_Init+0x244>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d031      	beq.n	800601a <HAL_GPIO_Init+0x22e>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a1e      	ldr	r2, [pc, #120]	@ (8006034 <HAL_GPIO_Init+0x248>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d02b      	beq.n	8006016 <HAL_GPIO_Init+0x22a>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a1d      	ldr	r2, [pc, #116]	@ (8006038 <HAL_GPIO_Init+0x24c>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d025      	beq.n	8006012 <HAL_GPIO_Init+0x226>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a1c      	ldr	r2, [pc, #112]	@ (800603c <HAL_GPIO_Init+0x250>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d01f      	beq.n	800600e <HAL_GPIO_Init+0x222>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a1b      	ldr	r2, [pc, #108]	@ (8006040 <HAL_GPIO_Init+0x254>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d019      	beq.n	800600a <HAL_GPIO_Init+0x21e>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a1a      	ldr	r2, [pc, #104]	@ (8006044 <HAL_GPIO_Init+0x258>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d013      	beq.n	8006006 <HAL_GPIO_Init+0x21a>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a19      	ldr	r2, [pc, #100]	@ (8006048 <HAL_GPIO_Init+0x25c>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d00d      	beq.n	8006002 <HAL_GPIO_Init+0x216>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a18      	ldr	r2, [pc, #96]	@ (800604c <HAL_GPIO_Init+0x260>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d007      	beq.n	8005ffe <HAL_GPIO_Init+0x212>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a17      	ldr	r2, [pc, #92]	@ (8006050 <HAL_GPIO_Init+0x264>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d101      	bne.n	8005ffa <HAL_GPIO_Init+0x20e>
 8005ff6:	2309      	movs	r3, #9
 8005ff8:	e02d      	b.n	8006056 <HAL_GPIO_Init+0x26a>
 8005ffa:	230a      	movs	r3, #10
 8005ffc:	e02b      	b.n	8006056 <HAL_GPIO_Init+0x26a>
 8005ffe:	2308      	movs	r3, #8
 8006000:	e029      	b.n	8006056 <HAL_GPIO_Init+0x26a>
 8006002:	2307      	movs	r3, #7
 8006004:	e027      	b.n	8006056 <HAL_GPIO_Init+0x26a>
 8006006:	2306      	movs	r3, #6
 8006008:	e025      	b.n	8006056 <HAL_GPIO_Init+0x26a>
 800600a:	2305      	movs	r3, #5
 800600c:	e023      	b.n	8006056 <HAL_GPIO_Init+0x26a>
 800600e:	2304      	movs	r3, #4
 8006010:	e021      	b.n	8006056 <HAL_GPIO_Init+0x26a>
 8006012:	2303      	movs	r3, #3
 8006014:	e01f      	b.n	8006056 <HAL_GPIO_Init+0x26a>
 8006016:	2302      	movs	r3, #2
 8006018:	e01d      	b.n	8006056 <HAL_GPIO_Init+0x26a>
 800601a:	2301      	movs	r3, #1
 800601c:	e01b      	b.n	8006056 <HAL_GPIO_Init+0x26a>
 800601e:	bf00      	nop
 8006020:	58000080 	.word	0x58000080
 8006024:	58024400 	.word	0x58024400
 8006028:	58000400 	.word	0x58000400
 800602c:	58020000 	.word	0x58020000
 8006030:	58020400 	.word	0x58020400
 8006034:	58020800 	.word	0x58020800
 8006038:	58020c00 	.word	0x58020c00
 800603c:	58021000 	.word	0x58021000
 8006040:	58021400 	.word	0x58021400
 8006044:	58021800 	.word	0x58021800
 8006048:	58021c00 	.word	0x58021c00
 800604c:	58022000 	.word	0x58022000
 8006050:	58022400 	.word	0x58022400
 8006054:	2300      	movs	r3, #0
 8006056:	69fa      	ldr	r2, [r7, #28]
 8006058:	f002 0203 	and.w	r2, r2, #3
 800605c:	0092      	lsls	r2, r2, #2
 800605e:	4093      	lsls	r3, r2
 8006060:	69ba      	ldr	r2, [r7, #24]
 8006062:	4313      	orrs	r3, r2
 8006064:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006066:	4938      	ldr	r1, [pc, #224]	@ (8006148 <HAL_GPIO_Init+0x35c>)
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	089b      	lsrs	r3, r3, #2
 800606c:	3302      	adds	r3, #2
 800606e:	69ba      	ldr	r2, [r7, #24]
 8006070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006074:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	43db      	mvns	r3, r3
 8006080:	69ba      	ldr	r2, [r7, #24]
 8006082:	4013      	ands	r3, r2
 8006084:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d003      	beq.n	800609a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006092:	69ba      	ldr	r2, [r7, #24]
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	4313      	orrs	r3, r2
 8006098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800609a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80060a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	43db      	mvns	r3, r3
 80060ae:	69ba      	ldr	r2, [r7, #24]
 80060b0:	4013      	ands	r3, r2
 80060b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d003      	beq.n	80060c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80060c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	43db      	mvns	r3, r3
 80060da:	69ba      	ldr	r2, [r7, #24]
 80060dc:	4013      	ands	r3, r2
 80060de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d003      	beq.n	80060f4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80060ec:	69ba      	ldr	r2, [r7, #24]
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	69ba      	ldr	r2, [r7, #24]
 80060f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	43db      	mvns	r3, r3
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	4013      	ands	r3, r2
 8006108:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d003      	beq.n	800611e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006116:	69ba      	ldr	r2, [r7, #24]
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	4313      	orrs	r3, r2
 800611c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	69ba      	ldr	r2, [r7, #24]
 8006122:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	3301      	adds	r3, #1
 8006128:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	fa22 f303 	lsr.w	r3, r2, r3
 8006134:	2b00      	cmp	r3, #0
 8006136:	f47f ae63 	bne.w	8005e00 <HAL_GPIO_Init+0x14>
  }
}
 800613a:	bf00      	nop
 800613c:	bf00      	nop
 800613e:	3724      	adds	r7, #36	@ 0x24
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr
 8006148:	58000400 	.word	0x58000400

0800614c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800614c:	b480      	push	{r7}
 800614e:	b087      	sub	sp, #28
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006156:	2300      	movs	r3, #0
 8006158:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800615a:	4b75      	ldr	r3, [pc, #468]	@ (8006330 <HAL_GPIO_DeInit+0x1e4>)
 800615c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800615e:	e0d9      	b.n	8006314 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8006160:	2201      	movs	r2, #1
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	fa02 f303 	lsl.w	r3, r2, r3
 8006168:	683a      	ldr	r2, [r7, #0]
 800616a:	4013      	ands	r3, r2
 800616c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 80cc 	beq.w	800630e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006176:	4a6f      	ldr	r2, [pc, #444]	@ (8006334 <HAL_GPIO_DeInit+0x1e8>)
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	089b      	lsrs	r3, r3, #2
 800617c:	3302      	adds	r3, #2
 800617e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006182:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	f003 0303 	and.w	r3, r3, #3
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	220f      	movs	r2, #15
 800618e:	fa02 f303 	lsl.w	r3, r2, r3
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	4013      	ands	r3, r2
 8006196:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a67      	ldr	r2, [pc, #412]	@ (8006338 <HAL_GPIO_DeInit+0x1ec>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d037      	beq.n	8006210 <HAL_GPIO_DeInit+0xc4>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a66      	ldr	r2, [pc, #408]	@ (800633c <HAL_GPIO_DeInit+0x1f0>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d031      	beq.n	800620c <HAL_GPIO_DeInit+0xc0>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a65      	ldr	r2, [pc, #404]	@ (8006340 <HAL_GPIO_DeInit+0x1f4>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d02b      	beq.n	8006208 <HAL_GPIO_DeInit+0xbc>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a64      	ldr	r2, [pc, #400]	@ (8006344 <HAL_GPIO_DeInit+0x1f8>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d025      	beq.n	8006204 <HAL_GPIO_DeInit+0xb8>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a63      	ldr	r2, [pc, #396]	@ (8006348 <HAL_GPIO_DeInit+0x1fc>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d01f      	beq.n	8006200 <HAL_GPIO_DeInit+0xb4>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a62      	ldr	r2, [pc, #392]	@ (800634c <HAL_GPIO_DeInit+0x200>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d019      	beq.n	80061fc <HAL_GPIO_DeInit+0xb0>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a61      	ldr	r2, [pc, #388]	@ (8006350 <HAL_GPIO_DeInit+0x204>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d013      	beq.n	80061f8 <HAL_GPIO_DeInit+0xac>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a60      	ldr	r2, [pc, #384]	@ (8006354 <HAL_GPIO_DeInit+0x208>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d00d      	beq.n	80061f4 <HAL_GPIO_DeInit+0xa8>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a5f      	ldr	r2, [pc, #380]	@ (8006358 <HAL_GPIO_DeInit+0x20c>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d007      	beq.n	80061f0 <HAL_GPIO_DeInit+0xa4>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a5e      	ldr	r2, [pc, #376]	@ (800635c <HAL_GPIO_DeInit+0x210>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d101      	bne.n	80061ec <HAL_GPIO_DeInit+0xa0>
 80061e8:	2309      	movs	r3, #9
 80061ea:	e012      	b.n	8006212 <HAL_GPIO_DeInit+0xc6>
 80061ec:	230a      	movs	r3, #10
 80061ee:	e010      	b.n	8006212 <HAL_GPIO_DeInit+0xc6>
 80061f0:	2308      	movs	r3, #8
 80061f2:	e00e      	b.n	8006212 <HAL_GPIO_DeInit+0xc6>
 80061f4:	2307      	movs	r3, #7
 80061f6:	e00c      	b.n	8006212 <HAL_GPIO_DeInit+0xc6>
 80061f8:	2306      	movs	r3, #6
 80061fa:	e00a      	b.n	8006212 <HAL_GPIO_DeInit+0xc6>
 80061fc:	2305      	movs	r3, #5
 80061fe:	e008      	b.n	8006212 <HAL_GPIO_DeInit+0xc6>
 8006200:	2304      	movs	r3, #4
 8006202:	e006      	b.n	8006212 <HAL_GPIO_DeInit+0xc6>
 8006204:	2303      	movs	r3, #3
 8006206:	e004      	b.n	8006212 <HAL_GPIO_DeInit+0xc6>
 8006208:	2302      	movs	r3, #2
 800620a:	e002      	b.n	8006212 <HAL_GPIO_DeInit+0xc6>
 800620c:	2301      	movs	r3, #1
 800620e:	e000      	b.n	8006212 <HAL_GPIO_DeInit+0xc6>
 8006210:	2300      	movs	r3, #0
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	f002 0203 	and.w	r2, r2, #3
 8006218:	0092      	lsls	r2, r2, #2
 800621a:	4093      	lsls	r3, r2
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	429a      	cmp	r2, r3
 8006220:	d136      	bne.n	8006290 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	43db      	mvns	r3, r3
 800622a:	401a      	ands	r2, r3
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	43db      	mvns	r3, r3
 8006238:	401a      	ands	r2, r3
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800623e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006242:	685a      	ldr	r2, [r3, #4]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	43db      	mvns	r3, r3
 8006248:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800624c:	4013      	ands	r3, r2
 800624e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8006250:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	43db      	mvns	r3, r3
 800625a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800625e:	4013      	ands	r3, r2
 8006260:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	f003 0303 	and.w	r3, r3, #3
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	220f      	movs	r2, #15
 800626c:	fa02 f303 	lsl.w	r3, r2, r3
 8006270:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006272:	4a30      	ldr	r2, [pc, #192]	@ (8006334 <HAL_GPIO_DeInit+0x1e8>)
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	089b      	lsrs	r3, r3, #2
 8006278:	3302      	adds	r3, #2
 800627a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	43da      	mvns	r2, r3
 8006282:	482c      	ldr	r0, [pc, #176]	@ (8006334 <HAL_GPIO_DeInit+0x1e8>)
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	089b      	lsrs	r3, r3, #2
 8006288:	400a      	ands	r2, r1
 800628a:	3302      	adds	r3, #2
 800628c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	005b      	lsls	r3, r3, #1
 8006298:	2103      	movs	r1, #3
 800629a:	fa01 f303 	lsl.w	r3, r1, r3
 800629e:	431a      	orrs	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	08da      	lsrs	r2, r3, #3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	3208      	adds	r2, #8
 80062ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f003 0307 	and.w	r3, r3, #7
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	220f      	movs	r2, #15
 80062ba:	fa02 f303 	lsl.w	r3, r2, r3
 80062be:	43db      	mvns	r3, r3
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	08d2      	lsrs	r2, r2, #3
 80062c4:	4019      	ands	r1, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	3208      	adds	r2, #8
 80062ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	68da      	ldr	r2, [r3, #12]
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	2103      	movs	r1, #3
 80062d8:	fa01 f303 	lsl.w	r3, r1, r3
 80062dc:	43db      	mvns	r3, r3
 80062de:	401a      	ands	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685a      	ldr	r2, [r3, #4]
 80062e8:	2101      	movs	r1, #1
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	fa01 f303 	lsl.w	r3, r1, r3
 80062f0:	43db      	mvns	r3, r3
 80062f2:	401a      	ands	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689a      	ldr	r2, [r3, #8]
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	005b      	lsls	r3, r3, #1
 8006300:	2103      	movs	r1, #3
 8006302:	fa01 f303 	lsl.w	r3, r1, r3
 8006306:	43db      	mvns	r3, r3
 8006308:	401a      	ands	r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	3301      	adds	r3, #1
 8006312:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	fa22 f303 	lsr.w	r3, r2, r3
 800631c:	2b00      	cmp	r3, #0
 800631e:	f47f af1f 	bne.w	8006160 <HAL_GPIO_DeInit+0x14>
  }
}
 8006322:	bf00      	nop
 8006324:	bf00      	nop
 8006326:	371c      	adds	r7, #28
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr
 8006330:	58000080 	.word	0x58000080
 8006334:	58000400 	.word	0x58000400
 8006338:	58020000 	.word	0x58020000
 800633c:	58020400 	.word	0x58020400
 8006340:	58020800 	.word	0x58020800
 8006344:	58020c00 	.word	0x58020c00
 8006348:	58021000 	.word	0x58021000
 800634c:	58021400 	.word	0x58021400
 8006350:	58021800 	.word	0x58021800
 8006354:	58021c00 	.word	0x58021c00
 8006358:	58022000 	.word	0x58022000
 800635c:	58022400 	.word	0x58022400

08006360 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006368:	4b19      	ldr	r3, [pc, #100]	@ (80063d0 <HAL_PWREx_ConfigSupply+0x70>)
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	f003 0304 	and.w	r3, r3, #4
 8006370:	2b04      	cmp	r3, #4
 8006372:	d00a      	beq.n	800638a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006374:	4b16      	ldr	r3, [pc, #88]	@ (80063d0 <HAL_PWREx_ConfigSupply+0x70>)
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	f003 0307 	and.w	r3, r3, #7
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	429a      	cmp	r2, r3
 8006380:	d001      	beq.n	8006386 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e01f      	b.n	80063c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006386:	2300      	movs	r3, #0
 8006388:	e01d      	b.n	80063c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800638a:	4b11      	ldr	r3, [pc, #68]	@ (80063d0 <HAL_PWREx_ConfigSupply+0x70>)
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	f023 0207 	bic.w	r2, r3, #7
 8006392:	490f      	ldr	r1, [pc, #60]	@ (80063d0 <HAL_PWREx_ConfigSupply+0x70>)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4313      	orrs	r3, r2
 8006398:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800639a:	f7fb ffc9 	bl	8002330 <HAL_GetTick>
 800639e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80063a0:	e009      	b.n	80063b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80063a2:	f7fb ffc5 	bl	8002330 <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80063b0:	d901      	bls.n	80063b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e007      	b.n	80063c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80063b6:	4b06      	ldr	r3, [pc, #24]	@ (80063d0 <HAL_PWREx_ConfigSupply+0x70>)
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063c2:	d1ee      	bne.n	80063a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	58024800 	.word	0x58024800

080063d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b08c      	sub	sp, #48	@ 0x30
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d102      	bne.n	80063e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	f000 bc48 	b.w	8006c78 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0301 	and.w	r3, r3, #1
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f000 8088 	beq.w	8006506 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063f6:	4b99      	ldr	r3, [pc, #612]	@ (800665c <HAL_RCC_OscConfig+0x288>)
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006400:	4b96      	ldr	r3, [pc, #600]	@ (800665c <HAL_RCC_OscConfig+0x288>)
 8006402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006404:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006408:	2b10      	cmp	r3, #16
 800640a:	d007      	beq.n	800641c <HAL_RCC_OscConfig+0x48>
 800640c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800640e:	2b18      	cmp	r3, #24
 8006410:	d111      	bne.n	8006436 <HAL_RCC_OscConfig+0x62>
 8006412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006414:	f003 0303 	and.w	r3, r3, #3
 8006418:	2b02      	cmp	r3, #2
 800641a:	d10c      	bne.n	8006436 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800641c:	4b8f      	ldr	r3, [pc, #572]	@ (800665c <HAL_RCC_OscConfig+0x288>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d06d      	beq.n	8006504 <HAL_RCC_OscConfig+0x130>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d169      	bne.n	8006504 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	f000 bc21 	b.w	8006c78 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800643e:	d106      	bne.n	800644e <HAL_RCC_OscConfig+0x7a>
 8006440:	4b86      	ldr	r3, [pc, #536]	@ (800665c <HAL_RCC_OscConfig+0x288>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a85      	ldr	r2, [pc, #532]	@ (800665c <HAL_RCC_OscConfig+0x288>)
 8006446:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800644a:	6013      	str	r3, [r2, #0]
 800644c:	e02e      	b.n	80064ac <HAL_RCC_OscConfig+0xd8>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10c      	bne.n	8006470 <HAL_RCC_OscConfig+0x9c>
 8006456:	4b81      	ldr	r3, [pc, #516]	@ (800665c <HAL_RCC_OscConfig+0x288>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a80      	ldr	r2, [pc, #512]	@ (800665c <HAL_RCC_OscConfig+0x288>)
 800645c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006460:	6013      	str	r3, [r2, #0]
 8006462:	4b7e      	ldr	r3, [pc, #504]	@ (800665c <HAL_RCC_OscConfig+0x288>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a7d      	ldr	r2, [pc, #500]	@ (800665c <HAL_RCC_OscConfig+0x288>)
 8006468:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800646c:	6013      	str	r3, [r2, #0]
 800646e:	e01d      	b.n	80064ac <HAL_RCC_OscConfig+0xd8>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006478:	d10c      	bne.n	8006494 <HAL_RCC_OscConfig+0xc0>
 800647a:	4b78      	ldr	r3, [pc, #480]	@ (800665c <HAL_RCC_OscConfig+0x288>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a77      	ldr	r2, [pc, #476]	@ (800665c <HAL_RCC_OscConfig+0x288>)
 8006480:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006484:	6013      	str	r3, [r2, #0]
 8006486:	4b75      	ldr	r3, [pc, #468]	@ (800665c <HAL_RCC_OscConfig+0x288>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a74      	ldr	r2, [pc, #464]	@ (800665c <HAL_RCC_OscConfig+0x288>)
 800648c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006490:	6013      	str	r3, [r2, #0]
 8006492:	e00b      	b.n	80064ac <HAL_RCC_OscConfig+0xd8>
 8006494:	4b71      	ldr	r3, [pc, #452]	@ (800665c <HAL_RCC_OscConfig+0x288>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a70      	ldr	r2, [pc, #448]	@ (800665c <HAL_RCC_OscConfig+0x288>)
 800649a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800649e:	6013      	str	r3, [r2, #0]
 80064a0:	4b6e      	ldr	r3, [pc, #440]	@ (800665c <HAL_RCC_OscConfig+0x288>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a6d      	ldr	r2, [pc, #436]	@ (800665c <HAL_RCC_OscConfig+0x288>)
 80064a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80064aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d013      	beq.n	80064dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b4:	f7fb ff3c 	bl	8002330 <HAL_GetTick>
 80064b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064ba:	e008      	b.n	80064ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064bc:	f7fb ff38 	bl	8002330 <HAL_GetTick>
 80064c0:	4602      	mov	r2, r0
 80064c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	2b64      	cmp	r3, #100	@ 0x64
 80064c8:	d901      	bls.n	80064ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e3d4      	b.n	8006c78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064ce:	4b63      	ldr	r3, [pc, #396]	@ (800665c <HAL_RCC_OscConfig+0x288>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d0f0      	beq.n	80064bc <HAL_RCC_OscConfig+0xe8>
 80064da:	e014      	b.n	8006506 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064dc:	f7fb ff28 	bl	8002330 <HAL_GetTick>
 80064e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80064e2:	e008      	b.n	80064f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064e4:	f7fb ff24 	bl	8002330 <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	2b64      	cmp	r3, #100	@ 0x64
 80064f0:	d901      	bls.n	80064f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e3c0      	b.n	8006c78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80064f6:	4b59      	ldr	r3, [pc, #356]	@ (800665c <HAL_RCC_OscConfig+0x288>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1f0      	bne.n	80064e4 <HAL_RCC_OscConfig+0x110>
 8006502:	e000      	b.n	8006506 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0302 	and.w	r3, r3, #2
 800650e:	2b00      	cmp	r3, #0
 8006510:	f000 80ca 	beq.w	80066a8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006514:	4b51      	ldr	r3, [pc, #324]	@ (800665c <HAL_RCC_OscConfig+0x288>)
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800651c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800651e:	4b4f      	ldr	r3, [pc, #316]	@ (800665c <HAL_RCC_OscConfig+0x288>)
 8006520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006522:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006524:	6a3b      	ldr	r3, [r7, #32]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d007      	beq.n	800653a <HAL_RCC_OscConfig+0x166>
 800652a:	6a3b      	ldr	r3, [r7, #32]
 800652c:	2b18      	cmp	r3, #24
 800652e:	d156      	bne.n	80065de <HAL_RCC_OscConfig+0x20a>
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	f003 0303 	and.w	r3, r3, #3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d151      	bne.n	80065de <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800653a:	4b48      	ldr	r3, [pc, #288]	@ (800665c <HAL_RCC_OscConfig+0x288>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0304 	and.w	r3, r3, #4
 8006542:	2b00      	cmp	r3, #0
 8006544:	d005      	beq.n	8006552 <HAL_RCC_OscConfig+0x17e>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d101      	bne.n	8006552 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e392      	b.n	8006c78 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006552:	4b42      	ldr	r3, [pc, #264]	@ (800665c <HAL_RCC_OscConfig+0x288>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f023 0219 	bic.w	r2, r3, #25
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	493f      	ldr	r1, [pc, #252]	@ (800665c <HAL_RCC_OscConfig+0x288>)
 8006560:	4313      	orrs	r3, r2
 8006562:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006564:	f7fb fee4 	bl	8002330 <HAL_GetTick>
 8006568:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800656a:	e008      	b.n	800657e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800656c:	f7fb fee0 	bl	8002330 <HAL_GetTick>
 8006570:	4602      	mov	r2, r0
 8006572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	2b02      	cmp	r3, #2
 8006578:	d901      	bls.n	800657e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e37c      	b.n	8006c78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800657e:	4b37      	ldr	r3, [pc, #220]	@ (800665c <HAL_RCC_OscConfig+0x288>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0304 	and.w	r3, r3, #4
 8006586:	2b00      	cmp	r3, #0
 8006588:	d0f0      	beq.n	800656c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800658a:	f7fb fedd 	bl	8002348 <HAL_GetREVID>
 800658e:	4603      	mov	r3, r0
 8006590:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006594:	4293      	cmp	r3, r2
 8006596:	d817      	bhi.n	80065c8 <HAL_RCC_OscConfig+0x1f4>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	2b40      	cmp	r3, #64	@ 0x40
 800659e:	d108      	bne.n	80065b2 <HAL_RCC_OscConfig+0x1de>
 80065a0:	4b2e      	ldr	r3, [pc, #184]	@ (800665c <HAL_RCC_OscConfig+0x288>)
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80065a8:	4a2c      	ldr	r2, [pc, #176]	@ (800665c <HAL_RCC_OscConfig+0x288>)
 80065aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065ae:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065b0:	e07a      	b.n	80066a8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065b2:	4b2a      	ldr	r3, [pc, #168]	@ (800665c <HAL_RCC_OscConfig+0x288>)
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	031b      	lsls	r3, r3, #12
 80065c0:	4926      	ldr	r1, [pc, #152]	@ (800665c <HAL_RCC_OscConfig+0x288>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065c6:	e06f      	b.n	80066a8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065c8:	4b24      	ldr	r3, [pc, #144]	@ (800665c <HAL_RCC_OscConfig+0x288>)
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	061b      	lsls	r3, r3, #24
 80065d6:	4921      	ldr	r1, [pc, #132]	@ (800665c <HAL_RCC_OscConfig+0x288>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065dc:	e064      	b.n	80066a8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d047      	beq.n	8006676 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80065e6:	4b1d      	ldr	r3, [pc, #116]	@ (800665c <HAL_RCC_OscConfig+0x288>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f023 0219 	bic.w	r2, r3, #25
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	491a      	ldr	r1, [pc, #104]	@ (800665c <HAL_RCC_OscConfig+0x288>)
 80065f4:	4313      	orrs	r3, r2
 80065f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f8:	f7fb fe9a 	bl	8002330 <HAL_GetTick>
 80065fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065fe:	e008      	b.n	8006612 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006600:	f7fb fe96 	bl	8002330 <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	2b02      	cmp	r3, #2
 800660c:	d901      	bls.n	8006612 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e332      	b.n	8006c78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006612:	4b12      	ldr	r3, [pc, #72]	@ (800665c <HAL_RCC_OscConfig+0x288>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 0304 	and.w	r3, r3, #4
 800661a:	2b00      	cmp	r3, #0
 800661c:	d0f0      	beq.n	8006600 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800661e:	f7fb fe93 	bl	8002348 <HAL_GetREVID>
 8006622:	4603      	mov	r3, r0
 8006624:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006628:	4293      	cmp	r3, r2
 800662a:	d819      	bhi.n	8006660 <HAL_RCC_OscConfig+0x28c>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	2b40      	cmp	r3, #64	@ 0x40
 8006632:	d108      	bne.n	8006646 <HAL_RCC_OscConfig+0x272>
 8006634:	4b09      	ldr	r3, [pc, #36]	@ (800665c <HAL_RCC_OscConfig+0x288>)
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800663c:	4a07      	ldr	r2, [pc, #28]	@ (800665c <HAL_RCC_OscConfig+0x288>)
 800663e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006642:	6053      	str	r3, [r2, #4]
 8006644:	e030      	b.n	80066a8 <HAL_RCC_OscConfig+0x2d4>
 8006646:	4b05      	ldr	r3, [pc, #20]	@ (800665c <HAL_RCC_OscConfig+0x288>)
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	031b      	lsls	r3, r3, #12
 8006654:	4901      	ldr	r1, [pc, #4]	@ (800665c <HAL_RCC_OscConfig+0x288>)
 8006656:	4313      	orrs	r3, r2
 8006658:	604b      	str	r3, [r1, #4]
 800665a:	e025      	b.n	80066a8 <HAL_RCC_OscConfig+0x2d4>
 800665c:	58024400 	.word	0x58024400
 8006660:	4b9a      	ldr	r3, [pc, #616]	@ (80068cc <HAL_RCC_OscConfig+0x4f8>)
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	061b      	lsls	r3, r3, #24
 800666e:	4997      	ldr	r1, [pc, #604]	@ (80068cc <HAL_RCC_OscConfig+0x4f8>)
 8006670:	4313      	orrs	r3, r2
 8006672:	604b      	str	r3, [r1, #4]
 8006674:	e018      	b.n	80066a8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006676:	4b95      	ldr	r3, [pc, #596]	@ (80068cc <HAL_RCC_OscConfig+0x4f8>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a94      	ldr	r2, [pc, #592]	@ (80068cc <HAL_RCC_OscConfig+0x4f8>)
 800667c:	f023 0301 	bic.w	r3, r3, #1
 8006680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006682:	f7fb fe55 	bl	8002330 <HAL_GetTick>
 8006686:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006688:	e008      	b.n	800669c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800668a:	f7fb fe51 	bl	8002330 <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	2b02      	cmp	r3, #2
 8006696:	d901      	bls.n	800669c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e2ed      	b.n	8006c78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800669c:	4b8b      	ldr	r3, [pc, #556]	@ (80068cc <HAL_RCC_OscConfig+0x4f8>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0304 	and.w	r3, r3, #4
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1f0      	bne.n	800668a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0310 	and.w	r3, r3, #16
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f000 80a9 	beq.w	8006808 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066b6:	4b85      	ldr	r3, [pc, #532]	@ (80068cc <HAL_RCC_OscConfig+0x4f8>)
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066be:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80066c0:	4b82      	ldr	r3, [pc, #520]	@ (80068cc <HAL_RCC_OscConfig+0x4f8>)
 80066c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	2b08      	cmp	r3, #8
 80066ca:	d007      	beq.n	80066dc <HAL_RCC_OscConfig+0x308>
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	2b18      	cmp	r3, #24
 80066d0:	d13a      	bne.n	8006748 <HAL_RCC_OscConfig+0x374>
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	f003 0303 	and.w	r3, r3, #3
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d135      	bne.n	8006748 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066dc:	4b7b      	ldr	r3, [pc, #492]	@ (80068cc <HAL_RCC_OscConfig+0x4f8>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d005      	beq.n	80066f4 <HAL_RCC_OscConfig+0x320>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	69db      	ldr	r3, [r3, #28]
 80066ec:	2b80      	cmp	r3, #128	@ 0x80
 80066ee:	d001      	beq.n	80066f4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e2c1      	b.n	8006c78 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066f4:	f7fb fe28 	bl	8002348 <HAL_GetREVID>
 80066f8:	4603      	mov	r3, r0
 80066fa:	f241 0203 	movw	r2, #4099	@ 0x1003
 80066fe:	4293      	cmp	r3, r2
 8006700:	d817      	bhi.n	8006732 <HAL_RCC_OscConfig+0x35e>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	2b20      	cmp	r3, #32
 8006708:	d108      	bne.n	800671c <HAL_RCC_OscConfig+0x348>
 800670a:	4b70      	ldr	r3, [pc, #448]	@ (80068cc <HAL_RCC_OscConfig+0x4f8>)
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006712:	4a6e      	ldr	r2, [pc, #440]	@ (80068cc <HAL_RCC_OscConfig+0x4f8>)
 8006714:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006718:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800671a:	e075      	b.n	8006808 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800671c:	4b6b      	ldr	r3, [pc, #428]	@ (80068cc <HAL_RCC_OscConfig+0x4f8>)
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a1b      	ldr	r3, [r3, #32]
 8006728:	069b      	lsls	r3, r3, #26
 800672a:	4968      	ldr	r1, [pc, #416]	@ (80068cc <HAL_RCC_OscConfig+0x4f8>)
 800672c:	4313      	orrs	r3, r2
 800672e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006730:	e06a      	b.n	8006808 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006732:	4b66      	ldr	r3, [pc, #408]	@ (80068cc <HAL_RCC_OscConfig+0x4f8>)
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	061b      	lsls	r3, r3, #24
 8006740:	4962      	ldr	r1, [pc, #392]	@ (80068cc <HAL_RCC_OscConfig+0x4f8>)
 8006742:	4313      	orrs	r3, r2
 8006744:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006746:	e05f      	b.n	8006808 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	69db      	ldr	r3, [r3, #28]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d042      	beq.n	80067d6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006750:	4b5e      	ldr	r3, [pc, #376]	@ (80068cc <HAL_RCC_OscConfig+0x4f8>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a5d      	ldr	r2, [pc, #372]	@ (80068cc <HAL_RCC_OscConfig+0x4f8>)
 8006756:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800675a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800675c:	f7fb fde8 	bl	8002330 <HAL_GetTick>
 8006760:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006762:	e008      	b.n	8006776 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006764:	f7fb fde4 	bl	8002330 <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	2b02      	cmp	r3, #2
 8006770:	d901      	bls.n	8006776 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006772:	2303      	movs	r3, #3
 8006774:	e280      	b.n	8006c78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006776:	4b55      	ldr	r3, [pc, #340]	@ (80068cc <HAL_RCC_OscConfig+0x4f8>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800677e:	2b00      	cmp	r3, #0
 8006780:	d0f0      	beq.n	8006764 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006782:	f7fb fde1 	bl	8002348 <HAL_GetREVID>
 8006786:	4603      	mov	r3, r0
 8006788:	f241 0203 	movw	r2, #4099	@ 0x1003
 800678c:	4293      	cmp	r3, r2
 800678e:	d817      	bhi.n	80067c0 <HAL_RCC_OscConfig+0x3ec>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a1b      	ldr	r3, [r3, #32]
 8006794:	2b20      	cmp	r3, #32
 8006796:	d108      	bne.n	80067aa <HAL_RCC_OscConfig+0x3d6>
 8006798:	4b4c      	ldr	r3, [pc, #304]	@ (80068cc <HAL_RCC_OscConfig+0x4f8>)
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80067a0:	4a4a      	ldr	r2, [pc, #296]	@ (80068cc <HAL_RCC_OscConfig+0x4f8>)
 80067a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067a6:	6053      	str	r3, [r2, #4]
 80067a8:	e02e      	b.n	8006808 <HAL_RCC_OscConfig+0x434>
 80067aa:	4b48      	ldr	r3, [pc, #288]	@ (80068cc <HAL_RCC_OscConfig+0x4f8>)
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	069b      	lsls	r3, r3, #26
 80067b8:	4944      	ldr	r1, [pc, #272]	@ (80068cc <HAL_RCC_OscConfig+0x4f8>)
 80067ba:	4313      	orrs	r3, r2
 80067bc:	604b      	str	r3, [r1, #4]
 80067be:	e023      	b.n	8006808 <HAL_RCC_OscConfig+0x434>
 80067c0:	4b42      	ldr	r3, [pc, #264]	@ (80068cc <HAL_RCC_OscConfig+0x4f8>)
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a1b      	ldr	r3, [r3, #32]
 80067cc:	061b      	lsls	r3, r3, #24
 80067ce:	493f      	ldr	r1, [pc, #252]	@ (80068cc <HAL_RCC_OscConfig+0x4f8>)
 80067d0:	4313      	orrs	r3, r2
 80067d2:	60cb      	str	r3, [r1, #12]
 80067d4:	e018      	b.n	8006808 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80067d6:	4b3d      	ldr	r3, [pc, #244]	@ (80068cc <HAL_RCC_OscConfig+0x4f8>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a3c      	ldr	r2, [pc, #240]	@ (80068cc <HAL_RCC_OscConfig+0x4f8>)
 80067dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067e2:	f7fb fda5 	bl	8002330 <HAL_GetTick>
 80067e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80067e8:	e008      	b.n	80067fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80067ea:	f7fb fda1 	bl	8002330 <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d901      	bls.n	80067fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e23d      	b.n	8006c78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80067fc:	4b33      	ldr	r3, [pc, #204]	@ (80068cc <HAL_RCC_OscConfig+0x4f8>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1f0      	bne.n	80067ea <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0308 	and.w	r3, r3, #8
 8006810:	2b00      	cmp	r3, #0
 8006812:	d036      	beq.n	8006882 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	695b      	ldr	r3, [r3, #20]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d019      	beq.n	8006850 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800681c:	4b2b      	ldr	r3, [pc, #172]	@ (80068cc <HAL_RCC_OscConfig+0x4f8>)
 800681e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006820:	4a2a      	ldr	r2, [pc, #168]	@ (80068cc <HAL_RCC_OscConfig+0x4f8>)
 8006822:	f043 0301 	orr.w	r3, r3, #1
 8006826:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006828:	f7fb fd82 	bl	8002330 <HAL_GetTick>
 800682c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800682e:	e008      	b.n	8006842 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006830:	f7fb fd7e 	bl	8002330 <HAL_GetTick>
 8006834:	4602      	mov	r2, r0
 8006836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	2b02      	cmp	r3, #2
 800683c:	d901      	bls.n	8006842 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e21a      	b.n	8006c78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006842:	4b22      	ldr	r3, [pc, #136]	@ (80068cc <HAL_RCC_OscConfig+0x4f8>)
 8006844:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006846:	f003 0302 	and.w	r3, r3, #2
 800684a:	2b00      	cmp	r3, #0
 800684c:	d0f0      	beq.n	8006830 <HAL_RCC_OscConfig+0x45c>
 800684e:	e018      	b.n	8006882 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006850:	4b1e      	ldr	r3, [pc, #120]	@ (80068cc <HAL_RCC_OscConfig+0x4f8>)
 8006852:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006854:	4a1d      	ldr	r2, [pc, #116]	@ (80068cc <HAL_RCC_OscConfig+0x4f8>)
 8006856:	f023 0301 	bic.w	r3, r3, #1
 800685a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800685c:	f7fb fd68 	bl	8002330 <HAL_GetTick>
 8006860:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006862:	e008      	b.n	8006876 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006864:	f7fb fd64 	bl	8002330 <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	2b02      	cmp	r3, #2
 8006870:	d901      	bls.n	8006876 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e200      	b.n	8006c78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006876:	4b15      	ldr	r3, [pc, #84]	@ (80068cc <HAL_RCC_OscConfig+0x4f8>)
 8006878:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800687a:	f003 0302 	and.w	r3, r3, #2
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1f0      	bne.n	8006864 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0320 	and.w	r3, r3, #32
 800688a:	2b00      	cmp	r3, #0
 800688c:	d039      	beq.n	8006902 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d01c      	beq.n	80068d0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006896:	4b0d      	ldr	r3, [pc, #52]	@ (80068cc <HAL_RCC_OscConfig+0x4f8>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a0c      	ldr	r2, [pc, #48]	@ (80068cc <HAL_RCC_OscConfig+0x4f8>)
 800689c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80068a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80068a2:	f7fb fd45 	bl	8002330 <HAL_GetTick>
 80068a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80068a8:	e008      	b.n	80068bc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068aa:	f7fb fd41 	bl	8002330 <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d901      	bls.n	80068bc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e1dd      	b.n	8006c78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80068bc:	4b03      	ldr	r3, [pc, #12]	@ (80068cc <HAL_RCC_OscConfig+0x4f8>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d0f0      	beq.n	80068aa <HAL_RCC_OscConfig+0x4d6>
 80068c8:	e01b      	b.n	8006902 <HAL_RCC_OscConfig+0x52e>
 80068ca:	bf00      	nop
 80068cc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80068d0:	4b9b      	ldr	r3, [pc, #620]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a9a      	ldr	r2, [pc, #616]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 80068d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80068dc:	f7fb fd28 	bl	8002330 <HAL_GetTick>
 80068e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80068e2:	e008      	b.n	80068f6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068e4:	f7fb fd24 	bl	8002330 <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d901      	bls.n	80068f6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	e1c0      	b.n	8006c78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80068f6:	4b92      	ldr	r3, [pc, #584]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1f0      	bne.n	80068e4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0304 	and.w	r3, r3, #4
 800690a:	2b00      	cmp	r3, #0
 800690c:	f000 8081 	beq.w	8006a12 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006910:	4b8c      	ldr	r3, [pc, #560]	@ (8006b44 <HAL_RCC_OscConfig+0x770>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a8b      	ldr	r2, [pc, #556]	@ (8006b44 <HAL_RCC_OscConfig+0x770>)
 8006916:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800691a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800691c:	f7fb fd08 	bl	8002330 <HAL_GetTick>
 8006920:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006922:	e008      	b.n	8006936 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006924:	f7fb fd04 	bl	8002330 <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	2b64      	cmp	r3, #100	@ 0x64
 8006930:	d901      	bls.n	8006936 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e1a0      	b.n	8006c78 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006936:	4b83      	ldr	r3, [pc, #524]	@ (8006b44 <HAL_RCC_OscConfig+0x770>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800693e:	2b00      	cmp	r3, #0
 8006940:	d0f0      	beq.n	8006924 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d106      	bne.n	8006958 <HAL_RCC_OscConfig+0x584>
 800694a:	4b7d      	ldr	r3, [pc, #500]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 800694c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800694e:	4a7c      	ldr	r2, [pc, #496]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 8006950:	f043 0301 	orr.w	r3, r3, #1
 8006954:	6713      	str	r3, [r2, #112]	@ 0x70
 8006956:	e02d      	b.n	80069b4 <HAL_RCC_OscConfig+0x5e0>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d10c      	bne.n	800697a <HAL_RCC_OscConfig+0x5a6>
 8006960:	4b77      	ldr	r3, [pc, #476]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 8006962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006964:	4a76      	ldr	r2, [pc, #472]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 8006966:	f023 0301 	bic.w	r3, r3, #1
 800696a:	6713      	str	r3, [r2, #112]	@ 0x70
 800696c:	4b74      	ldr	r3, [pc, #464]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 800696e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006970:	4a73      	ldr	r2, [pc, #460]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 8006972:	f023 0304 	bic.w	r3, r3, #4
 8006976:	6713      	str	r3, [r2, #112]	@ 0x70
 8006978:	e01c      	b.n	80069b4 <HAL_RCC_OscConfig+0x5e0>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	2b05      	cmp	r3, #5
 8006980:	d10c      	bne.n	800699c <HAL_RCC_OscConfig+0x5c8>
 8006982:	4b6f      	ldr	r3, [pc, #444]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 8006984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006986:	4a6e      	ldr	r2, [pc, #440]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 8006988:	f043 0304 	orr.w	r3, r3, #4
 800698c:	6713      	str	r3, [r2, #112]	@ 0x70
 800698e:	4b6c      	ldr	r3, [pc, #432]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 8006990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006992:	4a6b      	ldr	r2, [pc, #428]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 8006994:	f043 0301 	orr.w	r3, r3, #1
 8006998:	6713      	str	r3, [r2, #112]	@ 0x70
 800699a:	e00b      	b.n	80069b4 <HAL_RCC_OscConfig+0x5e0>
 800699c:	4b68      	ldr	r3, [pc, #416]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 800699e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069a0:	4a67      	ldr	r2, [pc, #412]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 80069a2:	f023 0301 	bic.w	r3, r3, #1
 80069a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80069a8:	4b65      	ldr	r3, [pc, #404]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 80069aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069ac:	4a64      	ldr	r2, [pc, #400]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 80069ae:	f023 0304 	bic.w	r3, r3, #4
 80069b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d015      	beq.n	80069e8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069bc:	f7fb fcb8 	bl	8002330 <HAL_GetTick>
 80069c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069c2:	e00a      	b.n	80069da <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069c4:	f7fb fcb4 	bl	8002330 <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d901      	bls.n	80069da <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e14e      	b.n	8006c78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069da:	4b59      	ldr	r3, [pc, #356]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 80069dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069de:	f003 0302 	and.w	r3, r3, #2
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d0ee      	beq.n	80069c4 <HAL_RCC_OscConfig+0x5f0>
 80069e6:	e014      	b.n	8006a12 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069e8:	f7fb fca2 	bl	8002330 <HAL_GetTick>
 80069ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80069ee:	e00a      	b.n	8006a06 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069f0:	f7fb fc9e 	bl	8002330 <HAL_GetTick>
 80069f4:	4602      	mov	r2, r0
 80069f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d901      	bls.n	8006a06 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e138      	b.n	8006c78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006a06:	4b4e      	ldr	r3, [pc, #312]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 8006a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a0a:	f003 0302 	and.w	r3, r3, #2
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1ee      	bne.n	80069f0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f000 812d 	beq.w	8006c76 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006a1c:	4b48      	ldr	r3, [pc, #288]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a24:	2b18      	cmp	r3, #24
 8006a26:	f000 80bd 	beq.w	8006ba4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	f040 809e 	bne.w	8006b70 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a34:	4b42      	ldr	r3, [pc, #264]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a41      	ldr	r2, [pc, #260]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 8006a3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a40:	f7fb fc76 	bl	8002330 <HAL_GetTick>
 8006a44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a46:	e008      	b.n	8006a5a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a48:	f7fb fc72 	bl	8002330 <HAL_GetTick>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d901      	bls.n	8006a5a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e10e      	b.n	8006c78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a5a:	4b39      	ldr	r3, [pc, #228]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1f0      	bne.n	8006a48 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a66:	4b36      	ldr	r3, [pc, #216]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 8006a68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a6a:	4b37      	ldr	r3, [pc, #220]	@ (8006b48 <HAL_RCC_OscConfig+0x774>)
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006a76:	0112      	lsls	r2, r2, #4
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	4931      	ldr	r1, [pc, #196]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a84:	3b01      	subs	r3, #1
 8006a86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	025b      	lsls	r3, r3, #9
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	431a      	orrs	r2, r3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	041b      	lsls	r3, r3, #16
 8006a9e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006aa2:	431a      	orrs	r2, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	061b      	lsls	r3, r3, #24
 8006aac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006ab0:	4923      	ldr	r1, [pc, #140]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006ab6:	4b22      	ldr	r3, [pc, #136]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 8006ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aba:	4a21      	ldr	r2, [pc, #132]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 8006abc:	f023 0301 	bic.w	r3, r3, #1
 8006ac0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006ac2:	4b1f      	ldr	r3, [pc, #124]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 8006ac4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ac6:	4b21      	ldr	r3, [pc, #132]	@ (8006b4c <HAL_RCC_OscConfig+0x778>)
 8006ac8:	4013      	ands	r3, r2
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006ace:	00d2      	lsls	r2, r2, #3
 8006ad0:	491b      	ldr	r1, [pc, #108]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 8006ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ada:	f023 020c 	bic.w	r2, r3, #12
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ae2:	4917      	ldr	r1, [pc, #92]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006ae8:	4b15      	ldr	r3, [pc, #84]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 8006aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aec:	f023 0202 	bic.w	r2, r3, #2
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006af4:	4912      	ldr	r1, [pc, #72]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006afa:	4b11      	ldr	r3, [pc, #68]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 8006afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006afe:	4a10      	ldr	r2, [pc, #64]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 8006b00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b06:	4b0e      	ldr	r3, [pc, #56]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 8006b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b0a:	4a0d      	ldr	r2, [pc, #52]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 8006b0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006b12:	4b0b      	ldr	r3, [pc, #44]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 8006b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b16:	4a0a      	ldr	r2, [pc, #40]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 8006b18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006b1e:	4b08      	ldr	r3, [pc, #32]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 8006b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b22:	4a07      	ldr	r2, [pc, #28]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 8006b24:	f043 0301 	orr.w	r3, r3, #1
 8006b28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b2a:	4b05      	ldr	r3, [pc, #20]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a04      	ldr	r2, [pc, #16]	@ (8006b40 <HAL_RCC_OscConfig+0x76c>)
 8006b30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b36:	f7fb fbfb 	bl	8002330 <HAL_GetTick>
 8006b3a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b3c:	e011      	b.n	8006b62 <HAL_RCC_OscConfig+0x78e>
 8006b3e:	bf00      	nop
 8006b40:	58024400 	.word	0x58024400
 8006b44:	58024800 	.word	0x58024800
 8006b48:	fffffc0c 	.word	0xfffffc0c
 8006b4c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b50:	f7fb fbee 	bl	8002330 <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d901      	bls.n	8006b62 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e08a      	b.n	8006c78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b62:	4b47      	ldr	r3, [pc, #284]	@ (8006c80 <HAL_RCC_OscConfig+0x8ac>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d0f0      	beq.n	8006b50 <HAL_RCC_OscConfig+0x77c>
 8006b6e:	e082      	b.n	8006c76 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b70:	4b43      	ldr	r3, [pc, #268]	@ (8006c80 <HAL_RCC_OscConfig+0x8ac>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a42      	ldr	r2, [pc, #264]	@ (8006c80 <HAL_RCC_OscConfig+0x8ac>)
 8006b76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b7c:	f7fb fbd8 	bl	8002330 <HAL_GetTick>
 8006b80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b82:	e008      	b.n	8006b96 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b84:	f7fb fbd4 	bl	8002330 <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d901      	bls.n	8006b96 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e070      	b.n	8006c78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b96:	4b3a      	ldr	r3, [pc, #232]	@ (8006c80 <HAL_RCC_OscConfig+0x8ac>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1f0      	bne.n	8006b84 <HAL_RCC_OscConfig+0x7b0>
 8006ba2:	e068      	b.n	8006c76 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006ba4:	4b36      	ldr	r3, [pc, #216]	@ (8006c80 <HAL_RCC_OscConfig+0x8ac>)
 8006ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ba8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006baa:	4b35      	ldr	r3, [pc, #212]	@ (8006c80 <HAL_RCC_OscConfig+0x8ac>)
 8006bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bae:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d031      	beq.n	8006c1c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	f003 0203 	and.w	r2, r3, #3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d12a      	bne.n	8006c1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	091b      	lsrs	r3, r3, #4
 8006bca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d122      	bne.n	8006c1c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006be0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d11a      	bne.n	8006c1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	0a5b      	lsrs	r3, r3, #9
 8006bea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bf2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d111      	bne.n	8006c1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	0c1b      	lsrs	r3, r3, #16
 8006bfc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c04:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d108      	bne.n	8006c1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	0e1b      	lsrs	r3, r3, #24
 8006c0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c16:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d001      	beq.n	8006c20 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e02b      	b.n	8006c78 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006c20:	4b17      	ldr	r3, [pc, #92]	@ (8006c80 <HAL_RCC_OscConfig+0x8ac>)
 8006c22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c24:	08db      	lsrs	r3, r3, #3
 8006c26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c2a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c30:	693a      	ldr	r2, [r7, #16]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d01f      	beq.n	8006c76 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006c36:	4b12      	ldr	r3, [pc, #72]	@ (8006c80 <HAL_RCC_OscConfig+0x8ac>)
 8006c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c3a:	4a11      	ldr	r2, [pc, #68]	@ (8006c80 <HAL_RCC_OscConfig+0x8ac>)
 8006c3c:	f023 0301 	bic.w	r3, r3, #1
 8006c40:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006c42:	f7fb fb75 	bl	8002330 <HAL_GetTick>
 8006c46:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006c48:	bf00      	nop
 8006c4a:	f7fb fb71 	bl	8002330 <HAL_GetTick>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d0f9      	beq.n	8006c4a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006c56:	4b0a      	ldr	r3, [pc, #40]	@ (8006c80 <HAL_RCC_OscConfig+0x8ac>)
 8006c58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8006c84 <HAL_RCC_OscConfig+0x8b0>)
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006c62:	00d2      	lsls	r2, r2, #3
 8006c64:	4906      	ldr	r1, [pc, #24]	@ (8006c80 <HAL_RCC_OscConfig+0x8ac>)
 8006c66:	4313      	orrs	r3, r2
 8006c68:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006c6a:	4b05      	ldr	r3, [pc, #20]	@ (8006c80 <HAL_RCC_OscConfig+0x8ac>)
 8006c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c6e:	4a04      	ldr	r2, [pc, #16]	@ (8006c80 <HAL_RCC_OscConfig+0x8ac>)
 8006c70:	f043 0301 	orr.w	r3, r3, #1
 8006c74:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3730      	adds	r7, #48	@ 0x30
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	58024400 	.word	0x58024400
 8006c84:	ffff0007 	.word	0xffff0007

08006c88 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b086      	sub	sp, #24
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d101      	bne.n	8006c9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e19c      	b.n	8006fd6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c9c:	4b8a      	ldr	r3, [pc, #552]	@ (8006ec8 <HAL_RCC_ClockConfig+0x240>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 030f 	and.w	r3, r3, #15
 8006ca4:	683a      	ldr	r2, [r7, #0]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d910      	bls.n	8006ccc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006caa:	4b87      	ldr	r3, [pc, #540]	@ (8006ec8 <HAL_RCC_ClockConfig+0x240>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f023 020f 	bic.w	r2, r3, #15
 8006cb2:	4985      	ldr	r1, [pc, #532]	@ (8006ec8 <HAL_RCC_ClockConfig+0x240>)
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cba:	4b83      	ldr	r3, [pc, #524]	@ (8006ec8 <HAL_RCC_ClockConfig+0x240>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 030f 	and.w	r3, r3, #15
 8006cc2:	683a      	ldr	r2, [r7, #0]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d001      	beq.n	8006ccc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e184      	b.n	8006fd6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0304 	and.w	r3, r3, #4
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d010      	beq.n	8006cfa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	691a      	ldr	r2, [r3, #16]
 8006cdc:	4b7b      	ldr	r3, [pc, #492]	@ (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d908      	bls.n	8006cfa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006ce8:	4b78      	ldr	r3, [pc, #480]	@ (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	4975      	ldr	r1, [pc, #468]	@ (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0308 	and.w	r3, r3, #8
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d010      	beq.n	8006d28 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	695a      	ldr	r2, [r3, #20]
 8006d0a:	4b70      	ldr	r3, [pc, #448]	@ (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006d0c:	69db      	ldr	r3, [r3, #28]
 8006d0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d908      	bls.n	8006d28 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006d16:	4b6d      	ldr	r3, [pc, #436]	@ (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006d18:	69db      	ldr	r3, [r3, #28]
 8006d1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	695b      	ldr	r3, [r3, #20]
 8006d22:	496a      	ldr	r1, [pc, #424]	@ (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006d24:	4313      	orrs	r3, r2
 8006d26:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0310 	and.w	r3, r3, #16
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d010      	beq.n	8006d56 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	699a      	ldr	r2, [r3, #24]
 8006d38:	4b64      	ldr	r3, [pc, #400]	@ (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006d3a:	69db      	ldr	r3, [r3, #28]
 8006d3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d908      	bls.n	8006d56 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006d44:	4b61      	ldr	r3, [pc, #388]	@ (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006d46:	69db      	ldr	r3, [r3, #28]
 8006d48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	495e      	ldr	r1, [pc, #376]	@ (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0320 	and.w	r3, r3, #32
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d010      	beq.n	8006d84 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	69da      	ldr	r2, [r3, #28]
 8006d66:	4b59      	ldr	r3, [pc, #356]	@ (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d908      	bls.n	8006d84 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006d72:	4b56      	ldr	r3, [pc, #344]	@ (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006d74:	6a1b      	ldr	r3, [r3, #32]
 8006d76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	69db      	ldr	r3, [r3, #28]
 8006d7e:	4953      	ldr	r1, [pc, #332]	@ (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006d80:	4313      	orrs	r3, r2
 8006d82:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 0302 	and.w	r3, r3, #2
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d010      	beq.n	8006db2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	68da      	ldr	r2, [r3, #12]
 8006d94:	4b4d      	ldr	r3, [pc, #308]	@ (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006d96:	699b      	ldr	r3, [r3, #24]
 8006d98:	f003 030f 	and.w	r3, r3, #15
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d908      	bls.n	8006db2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006da0:	4b4a      	ldr	r3, [pc, #296]	@ (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	f023 020f 	bic.w	r2, r3, #15
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	4947      	ldr	r1, [pc, #284]	@ (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006dae:	4313      	orrs	r3, r2
 8006db0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0301 	and.w	r3, r3, #1
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d055      	beq.n	8006e6a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006dbe:	4b43      	ldr	r3, [pc, #268]	@ (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	4940      	ldr	r1, [pc, #256]	@ (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d107      	bne.n	8006de8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006dd8:	4b3c      	ldr	r3, [pc, #240]	@ (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d121      	bne.n	8006e28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e0f6      	b.n	8006fd6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	2b03      	cmp	r3, #3
 8006dee:	d107      	bne.n	8006e00 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006df0:	4b36      	ldr	r3, [pc, #216]	@ (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d115      	bne.n	8006e28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e0ea      	b.n	8006fd6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d107      	bne.n	8006e18 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e08:	4b30      	ldr	r3, [pc, #192]	@ (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d109      	bne.n	8006e28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e0de      	b.n	8006fd6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e18:	4b2c      	ldr	r3, [pc, #176]	@ (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0304 	and.w	r3, r3, #4
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d101      	bne.n	8006e28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e0d6      	b.n	8006fd6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e28:	4b28      	ldr	r3, [pc, #160]	@ (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	f023 0207 	bic.w	r2, r3, #7
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	4925      	ldr	r1, [pc, #148]	@ (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e3a:	f7fb fa79 	bl	8002330 <HAL_GetTick>
 8006e3e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e40:	e00a      	b.n	8006e58 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e42:	f7fb fa75 	bl	8002330 <HAL_GetTick>
 8006e46:	4602      	mov	r2, r0
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d901      	bls.n	8006e58 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e0be      	b.n	8006fd6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e58:	4b1c      	ldr	r3, [pc, #112]	@ (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	00db      	lsls	r3, r3, #3
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d1eb      	bne.n	8006e42 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0302 	and.w	r3, r3, #2
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d010      	beq.n	8006e98 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	68da      	ldr	r2, [r3, #12]
 8006e7a:	4b14      	ldr	r3, [pc, #80]	@ (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	f003 030f 	and.w	r3, r3, #15
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d208      	bcs.n	8006e98 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e86:	4b11      	ldr	r3, [pc, #68]	@ (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	f023 020f 	bic.w	r2, r3, #15
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	490e      	ldr	r1, [pc, #56]	@ (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006e94:	4313      	orrs	r3, r2
 8006e96:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e98:	4b0b      	ldr	r3, [pc, #44]	@ (8006ec8 <HAL_RCC_ClockConfig+0x240>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 030f 	and.w	r3, r3, #15
 8006ea0:	683a      	ldr	r2, [r7, #0]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d214      	bcs.n	8006ed0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ea6:	4b08      	ldr	r3, [pc, #32]	@ (8006ec8 <HAL_RCC_ClockConfig+0x240>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f023 020f 	bic.w	r2, r3, #15
 8006eae:	4906      	ldr	r1, [pc, #24]	@ (8006ec8 <HAL_RCC_ClockConfig+0x240>)
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eb6:	4b04      	ldr	r3, [pc, #16]	@ (8006ec8 <HAL_RCC_ClockConfig+0x240>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 030f 	and.w	r3, r3, #15
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d005      	beq.n	8006ed0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e086      	b.n	8006fd6 <HAL_RCC_ClockConfig+0x34e>
 8006ec8:	52002000 	.word	0x52002000
 8006ecc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 0304 	and.w	r3, r3, #4
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d010      	beq.n	8006efe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	691a      	ldr	r2, [r3, #16]
 8006ee0:	4b3f      	ldr	r3, [pc, #252]	@ (8006fe0 <HAL_RCC_ClockConfig+0x358>)
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d208      	bcs.n	8006efe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006eec:	4b3c      	ldr	r3, [pc, #240]	@ (8006fe0 <HAL_RCC_ClockConfig+0x358>)
 8006eee:	699b      	ldr	r3, [r3, #24]
 8006ef0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	4939      	ldr	r1, [pc, #228]	@ (8006fe0 <HAL_RCC_ClockConfig+0x358>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0308 	and.w	r3, r3, #8
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d010      	beq.n	8006f2c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	695a      	ldr	r2, [r3, #20]
 8006f0e:	4b34      	ldr	r3, [pc, #208]	@ (8006fe0 <HAL_RCC_ClockConfig+0x358>)
 8006f10:	69db      	ldr	r3, [r3, #28]
 8006f12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d208      	bcs.n	8006f2c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006f1a:	4b31      	ldr	r3, [pc, #196]	@ (8006fe0 <HAL_RCC_ClockConfig+0x358>)
 8006f1c:	69db      	ldr	r3, [r3, #28]
 8006f1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	492e      	ldr	r1, [pc, #184]	@ (8006fe0 <HAL_RCC_ClockConfig+0x358>)
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0310 	and.w	r3, r3, #16
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d010      	beq.n	8006f5a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	699a      	ldr	r2, [r3, #24]
 8006f3c:	4b28      	ldr	r3, [pc, #160]	@ (8006fe0 <HAL_RCC_ClockConfig+0x358>)
 8006f3e:	69db      	ldr	r3, [r3, #28]
 8006f40:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d208      	bcs.n	8006f5a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006f48:	4b25      	ldr	r3, [pc, #148]	@ (8006fe0 <HAL_RCC_ClockConfig+0x358>)
 8006f4a:	69db      	ldr	r3, [r3, #28]
 8006f4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	4922      	ldr	r1, [pc, #136]	@ (8006fe0 <HAL_RCC_ClockConfig+0x358>)
 8006f56:	4313      	orrs	r3, r2
 8006f58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0320 	and.w	r3, r3, #32
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d010      	beq.n	8006f88 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	69da      	ldr	r2, [r3, #28]
 8006f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8006fe0 <HAL_RCC_ClockConfig+0x358>)
 8006f6c:	6a1b      	ldr	r3, [r3, #32]
 8006f6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d208      	bcs.n	8006f88 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006f76:	4b1a      	ldr	r3, [pc, #104]	@ (8006fe0 <HAL_RCC_ClockConfig+0x358>)
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	69db      	ldr	r3, [r3, #28]
 8006f82:	4917      	ldr	r1, [pc, #92]	@ (8006fe0 <HAL_RCC_ClockConfig+0x358>)
 8006f84:	4313      	orrs	r3, r2
 8006f86:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006f88:	f000 f834 	bl	8006ff4 <HAL_RCC_GetSysClockFreq>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	4b14      	ldr	r3, [pc, #80]	@ (8006fe0 <HAL_RCC_ClockConfig+0x358>)
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	0a1b      	lsrs	r3, r3, #8
 8006f94:	f003 030f 	and.w	r3, r3, #15
 8006f98:	4912      	ldr	r1, [pc, #72]	@ (8006fe4 <HAL_RCC_ClockConfig+0x35c>)
 8006f9a:	5ccb      	ldrb	r3, [r1, r3]
 8006f9c:	f003 031f 	and.w	r3, r3, #31
 8006fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8006fa4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8006fe0 <HAL_RCC_ClockConfig+0x358>)
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	f003 030f 	and.w	r3, r3, #15
 8006fae:	4a0d      	ldr	r2, [pc, #52]	@ (8006fe4 <HAL_RCC_ClockConfig+0x35c>)
 8006fb0:	5cd3      	ldrb	r3, [r2, r3]
 8006fb2:	f003 031f 	and.w	r3, r3, #31
 8006fb6:	693a      	ldr	r2, [r7, #16]
 8006fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8006fbc:	4a0a      	ldr	r2, [pc, #40]	@ (8006fe8 <HAL_RCC_ClockConfig+0x360>)
 8006fbe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006fc0:	4a0a      	ldr	r2, [pc, #40]	@ (8006fec <HAL_RCC_ClockConfig+0x364>)
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8006ff0 <HAL_RCC_ClockConfig+0x368>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7fb f966 	bl	800229c <HAL_InitTick>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3718      	adds	r7, #24
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	58024400 	.word	0x58024400
 8006fe4:	0800c04c 	.word	0x0800c04c
 8006fe8:	24000014 	.word	0x24000014
 8006fec:	24000010 	.word	0x24000010
 8006ff0:	24000020 	.word	0x24000020

08006ff4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b089      	sub	sp, #36	@ 0x24
 8006ff8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ffa:	4bb3      	ldr	r3, [pc, #716]	@ (80072c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007002:	2b18      	cmp	r3, #24
 8007004:	f200 8155 	bhi.w	80072b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8007008:	a201      	add	r2, pc, #4	@ (adr r2, 8007010 <HAL_RCC_GetSysClockFreq+0x1c>)
 800700a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800700e:	bf00      	nop
 8007010:	08007075 	.word	0x08007075
 8007014:	080072b3 	.word	0x080072b3
 8007018:	080072b3 	.word	0x080072b3
 800701c:	080072b3 	.word	0x080072b3
 8007020:	080072b3 	.word	0x080072b3
 8007024:	080072b3 	.word	0x080072b3
 8007028:	080072b3 	.word	0x080072b3
 800702c:	080072b3 	.word	0x080072b3
 8007030:	0800709b 	.word	0x0800709b
 8007034:	080072b3 	.word	0x080072b3
 8007038:	080072b3 	.word	0x080072b3
 800703c:	080072b3 	.word	0x080072b3
 8007040:	080072b3 	.word	0x080072b3
 8007044:	080072b3 	.word	0x080072b3
 8007048:	080072b3 	.word	0x080072b3
 800704c:	080072b3 	.word	0x080072b3
 8007050:	080070a1 	.word	0x080070a1
 8007054:	080072b3 	.word	0x080072b3
 8007058:	080072b3 	.word	0x080072b3
 800705c:	080072b3 	.word	0x080072b3
 8007060:	080072b3 	.word	0x080072b3
 8007064:	080072b3 	.word	0x080072b3
 8007068:	080072b3 	.word	0x080072b3
 800706c:	080072b3 	.word	0x080072b3
 8007070:	080070a7 	.word	0x080070a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007074:	4b94      	ldr	r3, [pc, #592]	@ (80072c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0320 	and.w	r3, r3, #32
 800707c:	2b00      	cmp	r3, #0
 800707e:	d009      	beq.n	8007094 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007080:	4b91      	ldr	r3, [pc, #580]	@ (80072c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	08db      	lsrs	r3, r3, #3
 8007086:	f003 0303 	and.w	r3, r3, #3
 800708a:	4a90      	ldr	r2, [pc, #576]	@ (80072cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800708c:	fa22 f303 	lsr.w	r3, r2, r3
 8007090:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007092:	e111      	b.n	80072b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007094:	4b8d      	ldr	r3, [pc, #564]	@ (80072cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007096:	61bb      	str	r3, [r7, #24]
      break;
 8007098:	e10e      	b.n	80072b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800709a:	4b8d      	ldr	r3, [pc, #564]	@ (80072d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800709c:	61bb      	str	r3, [r7, #24]
      break;
 800709e:	e10b      	b.n	80072b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80070a0:	4b8c      	ldr	r3, [pc, #560]	@ (80072d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80070a2:	61bb      	str	r3, [r7, #24]
      break;
 80070a4:	e108      	b.n	80072b8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070a6:	4b88      	ldr	r3, [pc, #544]	@ (80072c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070aa:	f003 0303 	and.w	r3, r3, #3
 80070ae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80070b0:	4b85      	ldr	r3, [pc, #532]	@ (80072c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070b4:	091b      	lsrs	r3, r3, #4
 80070b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070ba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80070bc:	4b82      	ldr	r3, [pc, #520]	@ (80072c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070c0:	f003 0301 	and.w	r3, r3, #1
 80070c4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80070c6:	4b80      	ldr	r3, [pc, #512]	@ (80072c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070ca:	08db      	lsrs	r3, r3, #3
 80070cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	fb02 f303 	mul.w	r3, r2, r3
 80070d6:	ee07 3a90 	vmov	s15, r3
 80070da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070de:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f000 80e1 	beq.w	80072ac <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	f000 8083 	beq.w	80071f8 <HAL_RCC_GetSysClockFreq+0x204>
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	f200 80a1 	bhi.w	800723c <HAL_RCC_GetSysClockFreq+0x248>
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d003      	beq.n	8007108 <HAL_RCC_GetSysClockFreq+0x114>
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	2b01      	cmp	r3, #1
 8007104:	d056      	beq.n	80071b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007106:	e099      	b.n	800723c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007108:	4b6f      	ldr	r3, [pc, #444]	@ (80072c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 0320 	and.w	r3, r3, #32
 8007110:	2b00      	cmp	r3, #0
 8007112:	d02d      	beq.n	8007170 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007114:	4b6c      	ldr	r3, [pc, #432]	@ (80072c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	08db      	lsrs	r3, r3, #3
 800711a:	f003 0303 	and.w	r3, r3, #3
 800711e:	4a6b      	ldr	r2, [pc, #428]	@ (80072cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007120:	fa22 f303 	lsr.w	r3, r2, r3
 8007124:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	ee07 3a90 	vmov	s15, r3
 800712c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	ee07 3a90 	vmov	s15, r3
 8007136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800713a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800713e:	4b62      	ldr	r3, [pc, #392]	@ (80072c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007146:	ee07 3a90 	vmov	s15, r3
 800714a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800714e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007152:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80072d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800715a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800715e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800716a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800716e:	e087      	b.n	8007280 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	ee07 3a90 	vmov	s15, r3
 8007176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800717a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80072dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800717e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007182:	4b51      	ldr	r3, [pc, #324]	@ (80072c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800718a:	ee07 3a90 	vmov	s15, r3
 800718e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007192:	ed97 6a02 	vldr	s12, [r7, #8]
 8007196:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80072d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800719a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800719e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80071b2:	e065      	b.n	8007280 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	ee07 3a90 	vmov	s15, r3
 80071ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071be:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80072e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80071c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071c6:	4b40      	ldr	r3, [pc, #256]	@ (80072c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ce:	ee07 3a90 	vmov	s15, r3
 80071d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80071da:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80072d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80071de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80071f6:	e043      	b.n	8007280 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	ee07 3a90 	vmov	s15, r3
 80071fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007202:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80072e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800720a:	4b2f      	ldr	r3, [pc, #188]	@ (80072c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800720c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800720e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007212:	ee07 3a90 	vmov	s15, r3
 8007216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800721a:	ed97 6a02 	vldr	s12, [r7, #8]
 800721e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80072d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800722a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800722e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007236:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800723a:	e021      	b.n	8007280 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	ee07 3a90 	vmov	s15, r3
 8007242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007246:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80072e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800724a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800724e:	4b1e      	ldr	r3, [pc, #120]	@ (80072c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007256:	ee07 3a90 	vmov	s15, r3
 800725a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800725e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007262:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80072d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800726a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800726e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800727a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800727e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007280:	4b11      	ldr	r3, [pc, #68]	@ (80072c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007284:	0a5b      	lsrs	r3, r3, #9
 8007286:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800728a:	3301      	adds	r3, #1
 800728c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	ee07 3a90 	vmov	s15, r3
 8007294:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007298:	edd7 6a07 	vldr	s13, [r7, #28]
 800729c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072a4:	ee17 3a90 	vmov	r3, s15
 80072a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80072aa:	e005      	b.n	80072b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80072ac:	2300      	movs	r3, #0
 80072ae:	61bb      	str	r3, [r7, #24]
      break;
 80072b0:	e002      	b.n	80072b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80072b2:	4b07      	ldr	r3, [pc, #28]	@ (80072d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80072b4:	61bb      	str	r3, [r7, #24]
      break;
 80072b6:	bf00      	nop
  }

  return sysclockfreq;
 80072b8:	69bb      	ldr	r3, [r7, #24]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3724      	adds	r7, #36	@ 0x24
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	58024400 	.word	0x58024400
 80072cc:	03d09000 	.word	0x03d09000
 80072d0:	003d0900 	.word	0x003d0900
 80072d4:	017d7840 	.word	0x017d7840
 80072d8:	46000000 	.word	0x46000000
 80072dc:	4c742400 	.word	0x4c742400
 80072e0:	4a742400 	.word	0x4a742400
 80072e4:	4bbebc20 	.word	0x4bbebc20

080072e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80072ee:	f7ff fe81 	bl	8006ff4 <HAL_RCC_GetSysClockFreq>
 80072f2:	4602      	mov	r2, r0
 80072f4:	4b10      	ldr	r3, [pc, #64]	@ (8007338 <HAL_RCC_GetHCLKFreq+0x50>)
 80072f6:	699b      	ldr	r3, [r3, #24]
 80072f8:	0a1b      	lsrs	r3, r3, #8
 80072fa:	f003 030f 	and.w	r3, r3, #15
 80072fe:	490f      	ldr	r1, [pc, #60]	@ (800733c <HAL_RCC_GetHCLKFreq+0x54>)
 8007300:	5ccb      	ldrb	r3, [r1, r3]
 8007302:	f003 031f 	and.w	r3, r3, #31
 8007306:	fa22 f303 	lsr.w	r3, r2, r3
 800730a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800730c:	4b0a      	ldr	r3, [pc, #40]	@ (8007338 <HAL_RCC_GetHCLKFreq+0x50>)
 800730e:	699b      	ldr	r3, [r3, #24]
 8007310:	f003 030f 	and.w	r3, r3, #15
 8007314:	4a09      	ldr	r2, [pc, #36]	@ (800733c <HAL_RCC_GetHCLKFreq+0x54>)
 8007316:	5cd3      	ldrb	r3, [r2, r3]
 8007318:	f003 031f 	and.w	r3, r3, #31
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	fa22 f303 	lsr.w	r3, r2, r3
 8007322:	4a07      	ldr	r2, [pc, #28]	@ (8007340 <HAL_RCC_GetHCLKFreq+0x58>)
 8007324:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007326:	4a07      	ldr	r2, [pc, #28]	@ (8007344 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800732c:	4b04      	ldr	r3, [pc, #16]	@ (8007340 <HAL_RCC_GetHCLKFreq+0x58>)
 800732e:	681b      	ldr	r3, [r3, #0]
}
 8007330:	4618      	mov	r0, r3
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	58024400 	.word	0x58024400
 800733c:	0800c04c 	.word	0x0800c04c
 8007340:	24000014 	.word	0x24000014
 8007344:	24000010 	.word	0x24000010

08007348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800734c:	f7ff ffcc 	bl	80072e8 <HAL_RCC_GetHCLKFreq>
 8007350:	4602      	mov	r2, r0
 8007352:	4b06      	ldr	r3, [pc, #24]	@ (800736c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007354:	69db      	ldr	r3, [r3, #28]
 8007356:	091b      	lsrs	r3, r3, #4
 8007358:	f003 0307 	and.w	r3, r3, #7
 800735c:	4904      	ldr	r1, [pc, #16]	@ (8007370 <HAL_RCC_GetPCLK1Freq+0x28>)
 800735e:	5ccb      	ldrb	r3, [r1, r3]
 8007360:	f003 031f 	and.w	r3, r3, #31
 8007364:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007368:	4618      	mov	r0, r3
 800736a:	bd80      	pop	{r7, pc}
 800736c:	58024400 	.word	0x58024400
 8007370:	0800c04c 	.word	0x0800c04c

08007374 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007378:	f7ff ffb6 	bl	80072e8 <HAL_RCC_GetHCLKFreq>
 800737c:	4602      	mov	r2, r0
 800737e:	4b06      	ldr	r3, [pc, #24]	@ (8007398 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007380:	69db      	ldr	r3, [r3, #28]
 8007382:	0a1b      	lsrs	r3, r3, #8
 8007384:	f003 0307 	and.w	r3, r3, #7
 8007388:	4904      	ldr	r1, [pc, #16]	@ (800739c <HAL_RCC_GetPCLK2Freq+0x28>)
 800738a:	5ccb      	ldrb	r3, [r1, r3]
 800738c:	f003 031f 	and.w	r3, r3, #31
 8007390:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007394:	4618      	mov	r0, r3
 8007396:	bd80      	pop	{r7, pc}
 8007398:	58024400 	.word	0x58024400
 800739c:	0800c04c 	.word	0x0800c04c

080073a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073a4:	b0ca      	sub	sp, #296	@ 0x128
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80073ac:	2300      	movs	r3, #0
 80073ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80073b2:	2300      	movs	r3, #0
 80073b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80073b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80073c4:	2500      	movs	r5, #0
 80073c6:	ea54 0305 	orrs.w	r3, r4, r5
 80073ca:	d049      	beq.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80073cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80073d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80073d6:	d02f      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80073d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80073dc:	d828      	bhi.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80073de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80073e2:	d01a      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80073e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80073e8:	d822      	bhi.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d003      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80073ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073f2:	d007      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80073f4:	e01c      	b.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073f6:	4bb8      	ldr	r3, [pc, #736]	@ (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073fa:	4ab7      	ldr	r2, [pc, #732]	@ (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007400:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007402:	e01a      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007408:	3308      	adds	r3, #8
 800740a:	2102      	movs	r1, #2
 800740c:	4618      	mov	r0, r3
 800740e:	f001 fc8f 	bl	8008d30 <RCCEx_PLL2_Config>
 8007412:	4603      	mov	r3, r0
 8007414:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007418:	e00f      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800741a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800741e:	3328      	adds	r3, #40	@ 0x28
 8007420:	2102      	movs	r1, #2
 8007422:	4618      	mov	r0, r3
 8007424:	f001 fd36 	bl	8008e94 <RCCEx_PLL3_Config>
 8007428:	4603      	mov	r3, r0
 800742a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800742e:	e004      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007436:	e000      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007438:	bf00      	nop
    }

    if (ret == HAL_OK)
 800743a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10a      	bne.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007442:	4ba5      	ldr	r3, [pc, #660]	@ (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007444:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007446:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800744a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800744e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007450:	4aa1      	ldr	r2, [pc, #644]	@ (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007452:	430b      	orrs	r3, r1
 8007454:	6513      	str	r3, [r2, #80]	@ 0x50
 8007456:	e003      	b.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007458:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800745c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007468:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800746c:	f04f 0900 	mov.w	r9, #0
 8007470:	ea58 0309 	orrs.w	r3, r8, r9
 8007474:	d047      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800747a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800747c:	2b04      	cmp	r3, #4
 800747e:	d82a      	bhi.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007480:	a201      	add	r2, pc, #4	@ (adr r2, 8007488 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007486:	bf00      	nop
 8007488:	0800749d 	.word	0x0800749d
 800748c:	080074ab 	.word	0x080074ab
 8007490:	080074c1 	.word	0x080074c1
 8007494:	080074df 	.word	0x080074df
 8007498:	080074df 	.word	0x080074df
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800749c:	4b8e      	ldr	r3, [pc, #568]	@ (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800749e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a0:	4a8d      	ldr	r2, [pc, #564]	@ (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80074a8:	e01a      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ae:	3308      	adds	r3, #8
 80074b0:	2100      	movs	r1, #0
 80074b2:	4618      	mov	r0, r3
 80074b4:	f001 fc3c 	bl	8008d30 <RCCEx_PLL2_Config>
 80074b8:	4603      	mov	r3, r0
 80074ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80074be:	e00f      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80074c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074c4:	3328      	adds	r3, #40	@ 0x28
 80074c6:	2100      	movs	r1, #0
 80074c8:	4618      	mov	r0, r3
 80074ca:	f001 fce3 	bl	8008e94 <RCCEx_PLL3_Config>
 80074ce:	4603      	mov	r3, r0
 80074d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80074d4:	e004      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074dc:	e000      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80074de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10a      	bne.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80074e8:	4b7b      	ldr	r3, [pc, #492]	@ (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074ec:	f023 0107 	bic.w	r1, r3, #7
 80074f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074f6:	4a78      	ldr	r2, [pc, #480]	@ (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074f8:	430b      	orrs	r3, r1
 80074fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80074fc:	e003      	b.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007502:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800750a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007512:	f04f 0b00 	mov.w	fp, #0
 8007516:	ea5a 030b 	orrs.w	r3, sl, fp
 800751a:	d04c      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800751c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007522:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007526:	d030      	beq.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007528:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800752c:	d829      	bhi.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800752e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007530:	d02d      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007532:	2bc0      	cmp	r3, #192	@ 0xc0
 8007534:	d825      	bhi.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007536:	2b80      	cmp	r3, #128	@ 0x80
 8007538:	d018      	beq.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800753a:	2b80      	cmp	r3, #128	@ 0x80
 800753c:	d821      	bhi.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800753e:	2b00      	cmp	r3, #0
 8007540:	d002      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007542:	2b40      	cmp	r3, #64	@ 0x40
 8007544:	d007      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007546:	e01c      	b.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007548:	4b63      	ldr	r3, [pc, #396]	@ (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800754a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800754c:	4a62      	ldr	r2, [pc, #392]	@ (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800754e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007552:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007554:	e01c      	b.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800755a:	3308      	adds	r3, #8
 800755c:	2100      	movs	r1, #0
 800755e:	4618      	mov	r0, r3
 8007560:	f001 fbe6 	bl	8008d30 <RCCEx_PLL2_Config>
 8007564:	4603      	mov	r3, r0
 8007566:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800756a:	e011      	b.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800756c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007570:	3328      	adds	r3, #40	@ 0x28
 8007572:	2100      	movs	r1, #0
 8007574:	4618      	mov	r0, r3
 8007576:	f001 fc8d 	bl	8008e94 <RCCEx_PLL3_Config>
 800757a:	4603      	mov	r3, r0
 800757c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007580:	e006      	b.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007588:	e002      	b.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800758a:	bf00      	nop
 800758c:	e000      	b.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800758e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007590:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007594:	2b00      	cmp	r3, #0
 8007596:	d10a      	bne.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007598:	4b4f      	ldr	r3, [pc, #316]	@ (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800759a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800759c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80075a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075a6:	4a4c      	ldr	r2, [pc, #304]	@ (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075a8:	430b      	orrs	r3, r1
 80075aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80075ac:	e003      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80075b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075be:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80075c2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80075c6:	2300      	movs	r3, #0
 80075c8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80075cc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80075d0:	460b      	mov	r3, r1
 80075d2:	4313      	orrs	r3, r2
 80075d4:	d053      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80075d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80075de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80075e2:	d035      	beq.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80075e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80075e8:	d82e      	bhi.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80075ea:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80075ee:	d031      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80075f0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80075f4:	d828      	bhi.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80075f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80075fa:	d01a      	beq.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80075fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007600:	d822      	bhi.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007602:	2b00      	cmp	r3, #0
 8007604:	d003      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007606:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800760a:	d007      	beq.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800760c:	e01c      	b.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800760e:	4b32      	ldr	r3, [pc, #200]	@ (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007612:	4a31      	ldr	r2, [pc, #196]	@ (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007614:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007618:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800761a:	e01c      	b.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800761c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007620:	3308      	adds	r3, #8
 8007622:	2100      	movs	r1, #0
 8007624:	4618      	mov	r0, r3
 8007626:	f001 fb83 	bl	8008d30 <RCCEx_PLL2_Config>
 800762a:	4603      	mov	r3, r0
 800762c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007630:	e011      	b.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007636:	3328      	adds	r3, #40	@ 0x28
 8007638:	2100      	movs	r1, #0
 800763a:	4618      	mov	r0, r3
 800763c:	f001 fc2a 	bl	8008e94 <RCCEx_PLL3_Config>
 8007640:	4603      	mov	r3, r0
 8007642:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007646:	e006      	b.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800764e:	e002      	b.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007650:	bf00      	nop
 8007652:	e000      	b.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007654:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007656:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800765a:	2b00      	cmp	r3, #0
 800765c:	d10b      	bne.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800765e:	4b1e      	ldr	r3, [pc, #120]	@ (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007662:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800766a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800766e:	4a1a      	ldr	r2, [pc, #104]	@ (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007670:	430b      	orrs	r3, r1
 8007672:	6593      	str	r3, [r2, #88]	@ 0x58
 8007674:	e003      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007676:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800767a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800767e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007686:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800768a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800768e:	2300      	movs	r3, #0
 8007690:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007694:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007698:	460b      	mov	r3, r1
 800769a:	4313      	orrs	r3, r2
 800769c:	d056      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800769e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80076a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80076aa:	d038      	beq.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80076ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80076b0:	d831      	bhi.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80076b2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80076b6:	d034      	beq.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80076b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80076bc:	d82b      	bhi.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80076be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80076c2:	d01d      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80076c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80076c8:	d825      	bhi.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d006      	beq.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80076ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80076d2:	d00a      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80076d4:	e01f      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80076d6:	bf00      	nop
 80076d8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076dc:	4ba2      	ldr	r3, [pc, #648]	@ (8007968 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e0:	4aa1      	ldr	r2, [pc, #644]	@ (8007968 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80076e8:	e01c      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ee:	3308      	adds	r3, #8
 80076f0:	2100      	movs	r1, #0
 80076f2:	4618      	mov	r0, r3
 80076f4:	f001 fb1c 	bl	8008d30 <RCCEx_PLL2_Config>
 80076f8:	4603      	mov	r3, r0
 80076fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80076fe:	e011      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007704:	3328      	adds	r3, #40	@ 0x28
 8007706:	2100      	movs	r1, #0
 8007708:	4618      	mov	r0, r3
 800770a:	f001 fbc3 	bl	8008e94 <RCCEx_PLL3_Config>
 800770e:	4603      	mov	r3, r0
 8007710:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007714:	e006      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800771c:	e002      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800771e:	bf00      	nop
 8007720:	e000      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007722:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007724:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007728:	2b00      	cmp	r3, #0
 800772a:	d10b      	bne.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800772c:	4b8e      	ldr	r3, [pc, #568]	@ (8007968 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800772e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007730:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007738:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800773c:	4a8a      	ldr	r2, [pc, #552]	@ (8007968 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800773e:	430b      	orrs	r3, r1
 8007740:	6593      	str	r3, [r2, #88]	@ 0x58
 8007742:	e003      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007744:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007748:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800774c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007754:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007758:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800775c:	2300      	movs	r3, #0
 800775e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007762:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007766:	460b      	mov	r3, r1
 8007768:	4313      	orrs	r3, r2
 800776a:	d03a      	beq.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800776c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007772:	2b30      	cmp	r3, #48	@ 0x30
 8007774:	d01f      	beq.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007776:	2b30      	cmp	r3, #48	@ 0x30
 8007778:	d819      	bhi.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800777a:	2b20      	cmp	r3, #32
 800777c:	d00c      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800777e:	2b20      	cmp	r3, #32
 8007780:	d815      	bhi.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007782:	2b00      	cmp	r3, #0
 8007784:	d019      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007786:	2b10      	cmp	r3, #16
 8007788:	d111      	bne.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800778a:	4b77      	ldr	r3, [pc, #476]	@ (8007968 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800778c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800778e:	4a76      	ldr	r2, [pc, #472]	@ (8007968 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007790:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007794:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007796:	e011      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800779c:	3308      	adds	r3, #8
 800779e:	2102      	movs	r1, #2
 80077a0:	4618      	mov	r0, r3
 80077a2:	f001 fac5 	bl	8008d30 <RCCEx_PLL2_Config>
 80077a6:	4603      	mov	r3, r0
 80077a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80077ac:	e006      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077b4:	e002      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80077b6:	bf00      	nop
 80077b8:	e000      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80077ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d10a      	bne.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80077c4:	4b68      	ldr	r3, [pc, #416]	@ (8007968 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077c8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80077cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077d2:	4a65      	ldr	r2, [pc, #404]	@ (8007968 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077d4:	430b      	orrs	r3, r1
 80077d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80077d8:	e003      	b.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80077e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ea:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80077ee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80077f2:	2300      	movs	r3, #0
 80077f4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80077f8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80077fc:	460b      	mov	r3, r1
 80077fe:	4313      	orrs	r3, r2
 8007800:	d051      	beq.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007806:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007808:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800780c:	d035      	beq.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800780e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007812:	d82e      	bhi.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007814:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007818:	d031      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800781a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800781e:	d828      	bhi.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007820:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007824:	d01a      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007826:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800782a:	d822      	bhi.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800782c:	2b00      	cmp	r3, #0
 800782e:	d003      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007830:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007834:	d007      	beq.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007836:	e01c      	b.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007838:	4b4b      	ldr	r3, [pc, #300]	@ (8007968 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800783a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800783c:	4a4a      	ldr	r2, [pc, #296]	@ (8007968 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800783e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007842:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007844:	e01c      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800784a:	3308      	adds	r3, #8
 800784c:	2100      	movs	r1, #0
 800784e:	4618      	mov	r0, r3
 8007850:	f001 fa6e 	bl	8008d30 <RCCEx_PLL2_Config>
 8007854:	4603      	mov	r3, r0
 8007856:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800785a:	e011      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800785c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007860:	3328      	adds	r3, #40	@ 0x28
 8007862:	2100      	movs	r1, #0
 8007864:	4618      	mov	r0, r3
 8007866:	f001 fb15 	bl	8008e94 <RCCEx_PLL3_Config>
 800786a:	4603      	mov	r3, r0
 800786c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007870:	e006      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007878:	e002      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800787a:	bf00      	nop
 800787c:	e000      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800787e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007880:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007884:	2b00      	cmp	r3, #0
 8007886:	d10a      	bne.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007888:	4b37      	ldr	r3, [pc, #220]	@ (8007968 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800788a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800788c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007896:	4a34      	ldr	r2, [pc, #208]	@ (8007968 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007898:	430b      	orrs	r3, r1
 800789a:	6513      	str	r3, [r2, #80]	@ 0x50
 800789c:	e003      	b.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800789e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80078a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ae:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80078b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80078b6:	2300      	movs	r3, #0
 80078b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80078bc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80078c0:	460b      	mov	r3, r1
 80078c2:	4313      	orrs	r3, r2
 80078c4:	d056      	beq.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80078c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80078d0:	d033      	beq.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80078d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80078d6:	d82c      	bhi.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80078d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80078dc:	d02f      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80078de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80078e2:	d826      	bhi.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80078e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80078e8:	d02b      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80078ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80078ee:	d820      	bhi.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80078f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078f4:	d012      	beq.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80078f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078fa:	d81a      	bhi.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d022      	beq.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007904:	d115      	bne.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800790a:	3308      	adds	r3, #8
 800790c:	2101      	movs	r1, #1
 800790e:	4618      	mov	r0, r3
 8007910:	f001 fa0e 	bl	8008d30 <RCCEx_PLL2_Config>
 8007914:	4603      	mov	r3, r0
 8007916:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800791a:	e015      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800791c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007920:	3328      	adds	r3, #40	@ 0x28
 8007922:	2101      	movs	r1, #1
 8007924:	4618      	mov	r0, r3
 8007926:	f001 fab5 	bl	8008e94 <RCCEx_PLL3_Config>
 800792a:	4603      	mov	r3, r0
 800792c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007930:	e00a      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007938:	e006      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800793a:	bf00      	nop
 800793c:	e004      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800793e:	bf00      	nop
 8007940:	e002      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007942:	bf00      	nop
 8007944:	e000      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007946:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007948:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800794c:	2b00      	cmp	r3, #0
 800794e:	d10d      	bne.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007950:	4b05      	ldr	r3, [pc, #20]	@ (8007968 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007952:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007954:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800795c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800795e:	4a02      	ldr	r2, [pc, #8]	@ (8007968 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007960:	430b      	orrs	r3, r1
 8007962:	6513      	str	r3, [r2, #80]	@ 0x50
 8007964:	e006      	b.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007966:	bf00      	nop
 8007968:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800796c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007970:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007980:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007984:	2300      	movs	r3, #0
 8007986:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800798a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800798e:	460b      	mov	r3, r1
 8007990:	4313      	orrs	r3, r2
 8007992:	d055      	beq.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007998:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800799c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079a0:	d033      	beq.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80079a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079a6:	d82c      	bhi.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80079a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079ac:	d02f      	beq.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80079ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079b2:	d826      	bhi.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80079b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80079b8:	d02b      	beq.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80079ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80079be:	d820      	bhi.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80079c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079c4:	d012      	beq.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80079c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079ca:	d81a      	bhi.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d022      	beq.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80079d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079d4:	d115      	bne.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079da:	3308      	adds	r3, #8
 80079dc:	2101      	movs	r1, #1
 80079de:	4618      	mov	r0, r3
 80079e0:	f001 f9a6 	bl	8008d30 <RCCEx_PLL2_Config>
 80079e4:	4603      	mov	r3, r0
 80079e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80079ea:	e015      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80079ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079f0:	3328      	adds	r3, #40	@ 0x28
 80079f2:	2101      	movs	r1, #1
 80079f4:	4618      	mov	r0, r3
 80079f6:	f001 fa4d 	bl	8008e94 <RCCEx_PLL3_Config>
 80079fa:	4603      	mov	r3, r0
 80079fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007a00:	e00a      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a08:	e006      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007a0a:	bf00      	nop
 8007a0c:	e004      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007a0e:	bf00      	nop
 8007a10:	e002      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007a12:	bf00      	nop
 8007a14:	e000      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007a16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d10b      	bne.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007a20:	4ba3      	ldr	r3, [pc, #652]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a24:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007a30:	4a9f      	ldr	r2, [pc, #636]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a32:	430b      	orrs	r3, r1
 8007a34:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a36:	e003      	b.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a48:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007a4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007a50:	2300      	movs	r3, #0
 8007a52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007a56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	d037      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a6a:	d00e      	beq.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007a6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a70:	d816      	bhi.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d018      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007a76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a7a:	d111      	bne.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a7c:	4b8c      	ldr	r3, [pc, #560]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a80:	4a8b      	ldr	r2, [pc, #556]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007a88:	e00f      	b.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a8e:	3308      	adds	r3, #8
 8007a90:	2101      	movs	r1, #1
 8007a92:	4618      	mov	r0, r3
 8007a94:	f001 f94c 	bl	8008d30 <RCCEx_PLL2_Config>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007a9e:	e004      	b.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007aa6:	e000      	b.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007aa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d10a      	bne.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007ab2:	4b7f      	ldr	r3, [pc, #508]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ab4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ab6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ac0:	4a7b      	ldr	r2, [pc, #492]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ac2:	430b      	orrs	r3, r1
 8007ac4:	6513      	str	r3, [r2, #80]	@ 0x50
 8007ac6:	e003      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ac8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007acc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007adc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007ae6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007aea:	460b      	mov	r3, r1
 8007aec:	4313      	orrs	r3, r2
 8007aee:	d039      	beq.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007af4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007af6:	2b03      	cmp	r3, #3
 8007af8:	d81c      	bhi.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007afa:	a201      	add	r2, pc, #4	@ (adr r2, 8007b00 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b00:	08007b3d 	.word	0x08007b3d
 8007b04:	08007b11 	.word	0x08007b11
 8007b08:	08007b1f 	.word	0x08007b1f
 8007b0c:	08007b3d 	.word	0x08007b3d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b10:	4b67      	ldr	r3, [pc, #412]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b14:	4a66      	ldr	r2, [pc, #408]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007b1c:	e00f      	b.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b22:	3308      	adds	r3, #8
 8007b24:	2102      	movs	r1, #2
 8007b26:	4618      	mov	r0, r3
 8007b28:	f001 f902 	bl	8008d30 <RCCEx_PLL2_Config>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007b32:	e004      	b.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b3a:	e000      	b.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007b3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d10a      	bne.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007b46:	4b5a      	ldr	r3, [pc, #360]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b4a:	f023 0103 	bic.w	r1, r3, #3
 8007b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b54:	4a56      	ldr	r2, [pc, #344]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b56:	430b      	orrs	r3, r1
 8007b58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007b5a:	e003      	b.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007b70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b74:	2300      	movs	r3, #0
 8007b76:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007b7a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007b7e:	460b      	mov	r3, r1
 8007b80:	4313      	orrs	r3, r2
 8007b82:	f000 809f 	beq.w	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b86:	4b4b      	ldr	r3, [pc, #300]	@ (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a4a      	ldr	r2, [pc, #296]	@ (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007b8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b92:	f7fa fbcd 	bl	8002330 <HAL_GetTick>
 8007b96:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b9a:	e00b      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b9c:	f7fa fbc8 	bl	8002330 <HAL_GetTick>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007ba6:	1ad3      	subs	r3, r2, r3
 8007ba8:	2b64      	cmp	r3, #100	@ 0x64
 8007baa:	d903      	bls.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007bac:	2303      	movs	r3, #3
 8007bae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bb2:	e005      	b.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007bb4:	4b3f      	ldr	r3, [pc, #252]	@ (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d0ed      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007bc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d179      	bne.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007bc8:	4b39      	ldr	r3, [pc, #228]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007bd4:	4053      	eors	r3, r2
 8007bd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d015      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007bde:	4b34      	ldr	r3, [pc, #208]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007be2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007be6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007bea:	4b31      	ldr	r3, [pc, #196]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bee:	4a30      	ldr	r2, [pc, #192]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bf4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007bf6:	4b2e      	ldr	r3, [pc, #184]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bfa:	4a2d      	ldr	r2, [pc, #180]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c00:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007c02:	4a2b      	ldr	r2, [pc, #172]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007c08:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007c12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c16:	d118      	bne.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c18:	f7fa fb8a 	bl	8002330 <HAL_GetTick>
 8007c1c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007c20:	e00d      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c22:	f7fa fb85 	bl	8002330 <HAL_GetTick>
 8007c26:	4602      	mov	r2, r0
 8007c28:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007c2c:	1ad2      	subs	r2, r2, r3
 8007c2e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d903      	bls.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007c36:	2303      	movs	r3, #3
 8007c38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007c3c:	e005      	b.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007c3e:	4b1c      	ldr	r3, [pc, #112]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c42:	f003 0302 	and.w	r3, r3, #2
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d0eb      	beq.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007c4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d129      	bne.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007c5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c62:	d10e      	bne.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007c64:	4b12      	ldr	r3, [pc, #72]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c66:	691b      	ldr	r3, [r3, #16]
 8007c68:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007c74:	091a      	lsrs	r2, r3, #4
 8007c76:	4b10      	ldr	r3, [pc, #64]	@ (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007c78:	4013      	ands	r3, r2
 8007c7a:	4a0d      	ldr	r2, [pc, #52]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c7c:	430b      	orrs	r3, r1
 8007c7e:	6113      	str	r3, [r2, #16]
 8007c80:	e005      	b.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007c82:	4b0b      	ldr	r3, [pc, #44]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	4a0a      	ldr	r2, [pc, #40]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c88:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007c8c:	6113      	str	r3, [r2, #16]
 8007c8e:	4b08      	ldr	r3, [pc, #32]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c90:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007c9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c9e:	4a04      	ldr	r2, [pc, #16]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ca0:	430b      	orrs	r3, r1
 8007ca2:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ca4:	e00e      	b.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007caa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007cae:	e009      	b.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007cb0:	58024400 	.word	0x58024400
 8007cb4:	58024800 	.word	0x58024800
 8007cb8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ccc:	f002 0301 	and.w	r3, r2, #1
 8007cd0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007cda:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007cde:	460b      	mov	r3, r1
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	f000 8089 	beq.w	8007df8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007cec:	2b28      	cmp	r3, #40	@ 0x28
 8007cee:	d86b      	bhi.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007cf0:	a201      	add	r2, pc, #4	@ (adr r2, 8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf6:	bf00      	nop
 8007cf8:	08007dd1 	.word	0x08007dd1
 8007cfc:	08007dc9 	.word	0x08007dc9
 8007d00:	08007dc9 	.word	0x08007dc9
 8007d04:	08007dc9 	.word	0x08007dc9
 8007d08:	08007dc9 	.word	0x08007dc9
 8007d0c:	08007dc9 	.word	0x08007dc9
 8007d10:	08007dc9 	.word	0x08007dc9
 8007d14:	08007dc9 	.word	0x08007dc9
 8007d18:	08007d9d 	.word	0x08007d9d
 8007d1c:	08007dc9 	.word	0x08007dc9
 8007d20:	08007dc9 	.word	0x08007dc9
 8007d24:	08007dc9 	.word	0x08007dc9
 8007d28:	08007dc9 	.word	0x08007dc9
 8007d2c:	08007dc9 	.word	0x08007dc9
 8007d30:	08007dc9 	.word	0x08007dc9
 8007d34:	08007dc9 	.word	0x08007dc9
 8007d38:	08007db3 	.word	0x08007db3
 8007d3c:	08007dc9 	.word	0x08007dc9
 8007d40:	08007dc9 	.word	0x08007dc9
 8007d44:	08007dc9 	.word	0x08007dc9
 8007d48:	08007dc9 	.word	0x08007dc9
 8007d4c:	08007dc9 	.word	0x08007dc9
 8007d50:	08007dc9 	.word	0x08007dc9
 8007d54:	08007dc9 	.word	0x08007dc9
 8007d58:	08007dd1 	.word	0x08007dd1
 8007d5c:	08007dc9 	.word	0x08007dc9
 8007d60:	08007dc9 	.word	0x08007dc9
 8007d64:	08007dc9 	.word	0x08007dc9
 8007d68:	08007dc9 	.word	0x08007dc9
 8007d6c:	08007dc9 	.word	0x08007dc9
 8007d70:	08007dc9 	.word	0x08007dc9
 8007d74:	08007dc9 	.word	0x08007dc9
 8007d78:	08007dd1 	.word	0x08007dd1
 8007d7c:	08007dc9 	.word	0x08007dc9
 8007d80:	08007dc9 	.word	0x08007dc9
 8007d84:	08007dc9 	.word	0x08007dc9
 8007d88:	08007dc9 	.word	0x08007dc9
 8007d8c:	08007dc9 	.word	0x08007dc9
 8007d90:	08007dc9 	.word	0x08007dc9
 8007d94:	08007dc9 	.word	0x08007dc9
 8007d98:	08007dd1 	.word	0x08007dd1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007da0:	3308      	adds	r3, #8
 8007da2:	2101      	movs	r1, #1
 8007da4:	4618      	mov	r0, r3
 8007da6:	f000 ffc3 	bl	8008d30 <RCCEx_PLL2_Config>
 8007daa:	4603      	mov	r3, r0
 8007dac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007db0:	e00f      	b.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007db6:	3328      	adds	r3, #40	@ 0x28
 8007db8:	2101      	movs	r1, #1
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f001 f86a 	bl	8008e94 <RCCEx_PLL3_Config>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007dc6:	e004      	b.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007dce:	e000      	b.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007dd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d10a      	bne.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007dda:	4bbf      	ldr	r3, [pc, #764]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dde:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007de6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007de8:	4abb      	ldr	r2, [pc, #748]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007dea:	430b      	orrs	r3, r1
 8007dec:	6553      	str	r3, [r2, #84]	@ 0x54
 8007dee:	e003      	b.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007df0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007df4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e00:	f002 0302 	and.w	r3, r2, #2
 8007e04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007e08:	2300      	movs	r3, #0
 8007e0a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007e0e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007e12:	460b      	mov	r3, r1
 8007e14:	4313      	orrs	r3, r2
 8007e16:	d041      	beq.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e1e:	2b05      	cmp	r3, #5
 8007e20:	d824      	bhi.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007e22:	a201      	add	r2, pc, #4	@ (adr r2, 8007e28 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e28:	08007e75 	.word	0x08007e75
 8007e2c:	08007e41 	.word	0x08007e41
 8007e30:	08007e57 	.word	0x08007e57
 8007e34:	08007e75 	.word	0x08007e75
 8007e38:	08007e75 	.word	0x08007e75
 8007e3c:	08007e75 	.word	0x08007e75
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e44:	3308      	adds	r3, #8
 8007e46:	2101      	movs	r1, #1
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f000 ff71 	bl	8008d30 <RCCEx_PLL2_Config>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007e54:	e00f      	b.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e5a:	3328      	adds	r3, #40	@ 0x28
 8007e5c:	2101      	movs	r1, #1
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f001 f818 	bl	8008e94 <RCCEx_PLL3_Config>
 8007e64:	4603      	mov	r3, r0
 8007e66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007e6a:	e004      	b.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e72:	e000      	b.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007e74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d10a      	bne.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007e7e:	4b96      	ldr	r3, [pc, #600]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e82:	f023 0107 	bic.w	r1, r3, #7
 8007e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e8c:	4a92      	ldr	r2, [pc, #584]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e8e:	430b      	orrs	r3, r1
 8007e90:	6553      	str	r3, [r2, #84]	@ 0x54
 8007e92:	e003      	b.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea4:	f002 0304 	and.w	r3, r2, #4
 8007ea8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007eac:	2300      	movs	r3, #0
 8007eae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007eb2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	d044      	beq.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ec0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ec4:	2b05      	cmp	r3, #5
 8007ec6:	d825      	bhi.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007ec8:	a201      	add	r2, pc, #4	@ (adr r2, 8007ed0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ece:	bf00      	nop
 8007ed0:	08007f1d 	.word	0x08007f1d
 8007ed4:	08007ee9 	.word	0x08007ee9
 8007ed8:	08007eff 	.word	0x08007eff
 8007edc:	08007f1d 	.word	0x08007f1d
 8007ee0:	08007f1d 	.word	0x08007f1d
 8007ee4:	08007f1d 	.word	0x08007f1d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eec:	3308      	adds	r3, #8
 8007eee:	2101      	movs	r1, #1
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f000 ff1d 	bl	8008d30 <RCCEx_PLL2_Config>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007efc:	e00f      	b.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f02:	3328      	adds	r3, #40	@ 0x28
 8007f04:	2101      	movs	r1, #1
 8007f06:	4618      	mov	r0, r3
 8007f08:	f000 ffc4 	bl	8008e94 <RCCEx_PLL3_Config>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007f12:	e004      	b.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f1a:	e000      	b.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007f1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d10b      	bne.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007f26:	4b6c      	ldr	r3, [pc, #432]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f2a:	f023 0107 	bic.w	r1, r3, #7
 8007f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f36:	4a68      	ldr	r2, [pc, #416]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f38:	430b      	orrs	r3, r1
 8007f3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f3c:	e003      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4e:	f002 0320 	and.w	r3, r2, #32
 8007f52:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007f56:	2300      	movs	r3, #0
 8007f58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007f5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007f60:	460b      	mov	r3, r1
 8007f62:	4313      	orrs	r3, r2
 8007f64:	d055      	beq.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f72:	d033      	beq.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007f74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f78:	d82c      	bhi.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f7e:	d02f      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007f80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f84:	d826      	bhi.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007f86:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007f8a:	d02b      	beq.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007f8c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007f90:	d820      	bhi.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007f92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f96:	d012      	beq.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007f98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f9c:	d81a      	bhi.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d022      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007fa2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007fa6:	d115      	bne.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fac:	3308      	adds	r3, #8
 8007fae:	2100      	movs	r1, #0
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f000 febd 	bl	8008d30 <RCCEx_PLL2_Config>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007fbc:	e015      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fc2:	3328      	adds	r3, #40	@ 0x28
 8007fc4:	2102      	movs	r1, #2
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f000 ff64 	bl	8008e94 <RCCEx_PLL3_Config>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007fd2:	e00a      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007fda:	e006      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007fdc:	bf00      	nop
 8007fde:	e004      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007fe0:	bf00      	nop
 8007fe2:	e002      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007fe4:	bf00      	nop
 8007fe6:	e000      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007fe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d10b      	bne.n	800800a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007ff2:	4b39      	ldr	r3, [pc, #228]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ff6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008002:	4a35      	ldr	r2, [pc, #212]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008004:	430b      	orrs	r3, r1
 8008006:	6553      	str	r3, [r2, #84]	@ 0x54
 8008008:	e003      	b.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800800a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800800e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800801e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008022:	2300      	movs	r3, #0
 8008024:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008028:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800802c:	460b      	mov	r3, r1
 800802e:	4313      	orrs	r3, r2
 8008030:	d058      	beq.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008036:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800803a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800803e:	d033      	beq.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008040:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008044:	d82c      	bhi.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008046:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800804a:	d02f      	beq.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800804c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008050:	d826      	bhi.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008052:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008056:	d02b      	beq.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008058:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800805c:	d820      	bhi.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800805e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008062:	d012      	beq.n	800808a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008064:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008068:	d81a      	bhi.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800806a:	2b00      	cmp	r3, #0
 800806c:	d022      	beq.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800806e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008072:	d115      	bne.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008078:	3308      	adds	r3, #8
 800807a:	2100      	movs	r1, #0
 800807c:	4618      	mov	r0, r3
 800807e:	f000 fe57 	bl	8008d30 <RCCEx_PLL2_Config>
 8008082:	4603      	mov	r3, r0
 8008084:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008088:	e015      	b.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800808a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800808e:	3328      	adds	r3, #40	@ 0x28
 8008090:	2102      	movs	r1, #2
 8008092:	4618      	mov	r0, r3
 8008094:	f000 fefe 	bl	8008e94 <RCCEx_PLL3_Config>
 8008098:	4603      	mov	r3, r0
 800809a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800809e:	e00a      	b.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080a0:	2301      	movs	r3, #1
 80080a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080a6:	e006      	b.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80080a8:	bf00      	nop
 80080aa:	e004      	b.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80080ac:	bf00      	nop
 80080ae:	e002      	b.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80080b0:	bf00      	nop
 80080b2:	e000      	b.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80080b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10e      	bne.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80080be:	4b06      	ldr	r3, [pc, #24]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80080c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080c2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80080c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80080ce:	4a02      	ldr	r2, [pc, #8]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80080d0:	430b      	orrs	r3, r1
 80080d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80080d4:	e006      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80080d6:	bf00      	nop
 80080d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80080e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ec:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80080f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80080f4:	2300      	movs	r3, #0
 80080f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80080fa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80080fe:	460b      	mov	r3, r1
 8008100:	4313      	orrs	r3, r2
 8008102:	d055      	beq.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008108:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800810c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008110:	d033      	beq.n	800817a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008112:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008116:	d82c      	bhi.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008118:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800811c:	d02f      	beq.n	800817e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800811e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008122:	d826      	bhi.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008124:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008128:	d02b      	beq.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800812a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800812e:	d820      	bhi.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008130:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008134:	d012      	beq.n	800815c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008136:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800813a:	d81a      	bhi.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800813c:	2b00      	cmp	r3, #0
 800813e:	d022      	beq.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008140:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008144:	d115      	bne.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800814a:	3308      	adds	r3, #8
 800814c:	2100      	movs	r1, #0
 800814e:	4618      	mov	r0, r3
 8008150:	f000 fdee 	bl	8008d30 <RCCEx_PLL2_Config>
 8008154:	4603      	mov	r3, r0
 8008156:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800815a:	e015      	b.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800815c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008160:	3328      	adds	r3, #40	@ 0x28
 8008162:	2102      	movs	r1, #2
 8008164:	4618      	mov	r0, r3
 8008166:	f000 fe95 	bl	8008e94 <RCCEx_PLL3_Config>
 800816a:	4603      	mov	r3, r0
 800816c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008170:	e00a      	b.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008178:	e006      	b.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800817a:	bf00      	nop
 800817c:	e004      	b.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800817e:	bf00      	nop
 8008180:	e002      	b.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008182:	bf00      	nop
 8008184:	e000      	b.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008186:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008188:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800818c:	2b00      	cmp	r3, #0
 800818e:	d10b      	bne.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008190:	4ba1      	ldr	r3, [pc, #644]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008194:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800819c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80081a0:	4a9d      	ldr	r2, [pc, #628]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081a2:	430b      	orrs	r3, r1
 80081a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80081a6:	e003      	b.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80081b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b8:	f002 0308 	and.w	r3, r2, #8
 80081bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80081c0:	2300      	movs	r3, #0
 80081c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80081c6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80081ca:	460b      	mov	r3, r1
 80081cc:	4313      	orrs	r3, r2
 80081ce:	d01e      	beq.n	800820e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80081d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081dc:	d10c      	bne.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80081de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081e2:	3328      	adds	r3, #40	@ 0x28
 80081e4:	2102      	movs	r1, #2
 80081e6:	4618      	mov	r0, r3
 80081e8:	f000 fe54 	bl	8008e94 <RCCEx_PLL3_Config>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d002      	beq.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80081f8:	4b87      	ldr	r3, [pc, #540]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081fc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008204:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008208:	4a83      	ldr	r2, [pc, #524]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800820a:	430b      	orrs	r3, r1
 800820c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800820e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008216:	f002 0310 	and.w	r3, r2, #16
 800821a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800821e:	2300      	movs	r3, #0
 8008220:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008224:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008228:	460b      	mov	r3, r1
 800822a:	4313      	orrs	r3, r2
 800822c:	d01e      	beq.n	800826c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800822e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008232:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008236:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800823a:	d10c      	bne.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800823c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008240:	3328      	adds	r3, #40	@ 0x28
 8008242:	2102      	movs	r1, #2
 8008244:	4618      	mov	r0, r3
 8008246:	f000 fe25 	bl	8008e94 <RCCEx_PLL3_Config>
 800824a:	4603      	mov	r3, r0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d002      	beq.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008256:	4b70      	ldr	r3, [pc, #448]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800825a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800825e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008262:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008266:	4a6c      	ldr	r2, [pc, #432]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008268:	430b      	orrs	r3, r1
 800826a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800826c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008274:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008278:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800827c:	2300      	movs	r3, #0
 800827e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008282:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008286:	460b      	mov	r3, r1
 8008288:	4313      	orrs	r3, r2
 800828a:	d03e      	beq.n	800830a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800828c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008290:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008294:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008298:	d022      	beq.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800829a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800829e:	d81b      	bhi.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d003      	beq.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80082a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082a8:	d00b      	beq.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80082aa:	e015      	b.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082b0:	3308      	adds	r3, #8
 80082b2:	2100      	movs	r1, #0
 80082b4:	4618      	mov	r0, r3
 80082b6:	f000 fd3b 	bl	8008d30 <RCCEx_PLL2_Config>
 80082ba:	4603      	mov	r3, r0
 80082bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80082c0:	e00f      	b.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80082c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082c6:	3328      	adds	r3, #40	@ 0x28
 80082c8:	2102      	movs	r1, #2
 80082ca:	4618      	mov	r0, r3
 80082cc:	f000 fde2 	bl	8008e94 <RCCEx_PLL3_Config>
 80082d0:	4603      	mov	r3, r0
 80082d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80082d6:	e004      	b.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80082de:	e000      	b.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80082e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d10b      	bne.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80082ea:	4b4b      	ldr	r3, [pc, #300]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082ee:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80082f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80082fa:	4a47      	ldr	r2, [pc, #284]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082fc:	430b      	orrs	r3, r1
 80082fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8008300:	e003      	b.n	800830a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008302:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008306:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800830a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800830e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008312:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008316:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008318:	2300      	movs	r3, #0
 800831a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800831c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008320:	460b      	mov	r3, r1
 8008322:	4313      	orrs	r3, r2
 8008324:	d03b      	beq.n	800839e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800832a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800832e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008332:	d01f      	beq.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008334:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008338:	d818      	bhi.n	800836c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800833a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800833e:	d003      	beq.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008340:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008344:	d007      	beq.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008346:	e011      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008348:	4b33      	ldr	r3, [pc, #204]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800834a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800834c:	4a32      	ldr	r2, [pc, #200]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800834e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008352:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008354:	e00f      	b.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800835a:	3328      	adds	r3, #40	@ 0x28
 800835c:	2101      	movs	r1, #1
 800835e:	4618      	mov	r0, r3
 8008360:	f000 fd98 	bl	8008e94 <RCCEx_PLL3_Config>
 8008364:	4603      	mov	r3, r0
 8008366:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800836a:	e004      	b.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008372:	e000      	b.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008374:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008376:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800837a:	2b00      	cmp	r3, #0
 800837c:	d10b      	bne.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800837e:	4b26      	ldr	r3, [pc, #152]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008382:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800838a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800838e:	4a22      	ldr	r2, [pc, #136]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008390:	430b      	orrs	r3, r1
 8008392:	6553      	str	r3, [r2, #84]	@ 0x54
 8008394:	e003      	b.n	800839e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008396:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800839a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800839e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80083aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80083ac:	2300      	movs	r3, #0
 80083ae:	677b      	str	r3, [r7, #116]	@ 0x74
 80083b0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80083b4:	460b      	mov	r3, r1
 80083b6:	4313      	orrs	r3, r2
 80083b8:	d034      	beq.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80083ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d003      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80083c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083c8:	d007      	beq.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80083ca:	e011      	b.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083cc:	4b12      	ldr	r3, [pc, #72]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d0:	4a11      	ldr	r2, [pc, #68]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80083d8:	e00e      	b.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80083da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083de:	3308      	adds	r3, #8
 80083e0:	2102      	movs	r1, #2
 80083e2:	4618      	mov	r0, r3
 80083e4:	f000 fca4 	bl	8008d30 <RCCEx_PLL2_Config>
 80083e8:	4603      	mov	r3, r0
 80083ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80083ee:	e003      	b.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80083f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d10d      	bne.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008400:	4b05      	ldr	r3, [pc, #20]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008404:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800840c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800840e:	4a02      	ldr	r2, [pc, #8]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008410:	430b      	orrs	r3, r1
 8008412:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008414:	e006      	b.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008416:	bf00      	nop
 8008418:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800841c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008420:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008430:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008432:	2300      	movs	r3, #0
 8008434:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008436:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800843a:	460b      	mov	r3, r1
 800843c:	4313      	orrs	r3, r2
 800843e:	d00c      	beq.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008444:	3328      	adds	r3, #40	@ 0x28
 8008446:	2102      	movs	r1, #2
 8008448:	4618      	mov	r0, r3
 800844a:	f000 fd23 	bl	8008e94 <RCCEx_PLL3_Config>
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d002      	beq.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800845a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800845e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008462:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008466:	663b      	str	r3, [r7, #96]	@ 0x60
 8008468:	2300      	movs	r3, #0
 800846a:	667b      	str	r3, [r7, #100]	@ 0x64
 800846c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008470:	460b      	mov	r3, r1
 8008472:	4313      	orrs	r3, r2
 8008474:	d038      	beq.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800847a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800847e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008482:	d018      	beq.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008484:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008488:	d811      	bhi.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800848a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800848e:	d014      	beq.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008490:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008494:	d80b      	bhi.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008496:	2b00      	cmp	r3, #0
 8008498:	d011      	beq.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800849a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800849e:	d106      	bne.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084a0:	4bc3      	ldr	r3, [pc, #780]	@ (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084a4:	4ac2      	ldr	r2, [pc, #776]	@ (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80084ac:	e008      	b.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80084b4:	e004      	b.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80084b6:	bf00      	nop
 80084b8:	e002      	b.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80084ba:	bf00      	nop
 80084bc:	e000      	b.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80084be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d10b      	bne.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80084c8:	4bb9      	ldr	r3, [pc, #740]	@ (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084cc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80084d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084d8:	4ab5      	ldr	r2, [pc, #724]	@ (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084da:	430b      	orrs	r3, r1
 80084dc:	6553      	str	r3, [r2, #84]	@ 0x54
 80084de:	e003      	b.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80084e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80084f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80084f6:	2300      	movs	r3, #0
 80084f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80084fa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80084fe:	460b      	mov	r3, r1
 8008500:	4313      	orrs	r3, r2
 8008502:	d009      	beq.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008504:	4baa      	ldr	r3, [pc, #680]	@ (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008506:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008508:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800850c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008510:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008512:	4aa7      	ldr	r2, [pc, #668]	@ (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008514:	430b      	orrs	r3, r1
 8008516:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800851c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008520:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008524:	653b      	str	r3, [r7, #80]	@ 0x50
 8008526:	2300      	movs	r3, #0
 8008528:	657b      	str	r3, [r7, #84]	@ 0x54
 800852a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800852e:	460b      	mov	r3, r1
 8008530:	4313      	orrs	r3, r2
 8008532:	d00a      	beq.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008534:	4b9e      	ldr	r3, [pc, #632]	@ (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800853c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008540:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008544:	4a9a      	ldr	r2, [pc, #616]	@ (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008546:	430b      	orrs	r3, r1
 8008548:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800854a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800854e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008552:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008556:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008558:	2300      	movs	r3, #0
 800855a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800855c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008560:	460b      	mov	r3, r1
 8008562:	4313      	orrs	r3, r2
 8008564:	d009      	beq.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008566:	4b92      	ldr	r3, [pc, #584]	@ (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008568:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800856a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800856e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008572:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008574:	4a8e      	ldr	r2, [pc, #568]	@ (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008576:	430b      	orrs	r3, r1
 8008578:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800857a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800857e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008582:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008586:	643b      	str	r3, [r7, #64]	@ 0x40
 8008588:	2300      	movs	r3, #0
 800858a:	647b      	str	r3, [r7, #68]	@ 0x44
 800858c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008590:	460b      	mov	r3, r1
 8008592:	4313      	orrs	r3, r2
 8008594:	d00e      	beq.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008596:	4b86      	ldr	r3, [pc, #536]	@ (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	4a85      	ldr	r2, [pc, #532]	@ (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800859c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80085a0:	6113      	str	r3, [r2, #16]
 80085a2:	4b83      	ldr	r3, [pc, #524]	@ (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085a4:	6919      	ldr	r1, [r3, #16]
 80085a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80085ae:	4a80      	ldr	r2, [pc, #512]	@ (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085b0:	430b      	orrs	r3, r1
 80085b2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80085b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085bc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80085c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80085c2:	2300      	movs	r3, #0
 80085c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085c6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80085ca:	460b      	mov	r3, r1
 80085cc:	4313      	orrs	r3, r2
 80085ce:	d009      	beq.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80085d0:	4b77      	ldr	r3, [pc, #476]	@ (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085d4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80085d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085de:	4a74      	ldr	r2, [pc, #464]	@ (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085e0:	430b      	orrs	r3, r1
 80085e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80085e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ec:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80085f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80085f2:	2300      	movs	r3, #0
 80085f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80085f6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80085fa:	460b      	mov	r3, r1
 80085fc:	4313      	orrs	r3, r2
 80085fe:	d00a      	beq.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008600:	4b6b      	ldr	r3, [pc, #428]	@ (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008604:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800860c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008610:	4a67      	ldr	r2, [pc, #412]	@ (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008612:	430b      	orrs	r3, r1
 8008614:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800861a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861e:	2100      	movs	r1, #0
 8008620:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008622:	f003 0301 	and.w	r3, r3, #1
 8008626:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008628:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800862c:	460b      	mov	r3, r1
 800862e:	4313      	orrs	r3, r2
 8008630:	d011      	beq.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008636:	3308      	adds	r3, #8
 8008638:	2100      	movs	r1, #0
 800863a:	4618      	mov	r0, r3
 800863c:	f000 fb78 	bl	8008d30 <RCCEx_PLL2_Config>
 8008640:	4603      	mov	r3, r0
 8008642:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008646:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800864a:	2b00      	cmp	r3, #0
 800864c:	d003      	beq.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800864e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008652:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800865a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865e:	2100      	movs	r1, #0
 8008660:	6239      	str	r1, [r7, #32]
 8008662:	f003 0302 	and.w	r3, r3, #2
 8008666:	627b      	str	r3, [r7, #36]	@ 0x24
 8008668:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800866c:	460b      	mov	r3, r1
 800866e:	4313      	orrs	r3, r2
 8008670:	d011      	beq.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008676:	3308      	adds	r3, #8
 8008678:	2101      	movs	r1, #1
 800867a:	4618      	mov	r0, r3
 800867c:	f000 fb58 	bl	8008d30 <RCCEx_PLL2_Config>
 8008680:	4603      	mov	r3, r0
 8008682:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008686:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800868a:	2b00      	cmp	r3, #0
 800868c:	d003      	beq.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800868e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008692:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800869a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869e:	2100      	movs	r1, #0
 80086a0:	61b9      	str	r1, [r7, #24]
 80086a2:	f003 0304 	and.w	r3, r3, #4
 80086a6:	61fb      	str	r3, [r7, #28]
 80086a8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80086ac:	460b      	mov	r3, r1
 80086ae:	4313      	orrs	r3, r2
 80086b0:	d011      	beq.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80086b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086b6:	3308      	adds	r3, #8
 80086b8:	2102      	movs	r1, #2
 80086ba:	4618      	mov	r0, r3
 80086bc:	f000 fb38 	bl	8008d30 <RCCEx_PLL2_Config>
 80086c0:	4603      	mov	r3, r0
 80086c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80086c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d003      	beq.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80086d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086de:	2100      	movs	r1, #0
 80086e0:	6139      	str	r1, [r7, #16]
 80086e2:	f003 0308 	and.w	r3, r3, #8
 80086e6:	617b      	str	r3, [r7, #20]
 80086e8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80086ec:	460b      	mov	r3, r1
 80086ee:	4313      	orrs	r3, r2
 80086f0:	d011      	beq.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80086f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086f6:	3328      	adds	r3, #40	@ 0x28
 80086f8:	2100      	movs	r1, #0
 80086fa:	4618      	mov	r0, r3
 80086fc:	f000 fbca 	bl	8008e94 <RCCEx_PLL3_Config>
 8008700:	4603      	mov	r3, r0
 8008702:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008706:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800870a:	2b00      	cmp	r3, #0
 800870c:	d003      	beq.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800870e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008712:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800871a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871e:	2100      	movs	r1, #0
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	f003 0310 	and.w	r3, r3, #16
 8008726:	60fb      	str	r3, [r7, #12]
 8008728:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800872c:	460b      	mov	r3, r1
 800872e:	4313      	orrs	r3, r2
 8008730:	d011      	beq.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008736:	3328      	adds	r3, #40	@ 0x28
 8008738:	2101      	movs	r1, #1
 800873a:	4618      	mov	r0, r3
 800873c:	f000 fbaa 	bl	8008e94 <RCCEx_PLL3_Config>
 8008740:	4603      	mov	r3, r0
 8008742:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008746:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800874a:	2b00      	cmp	r3, #0
 800874c:	d003      	beq.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800874e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008752:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800875a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875e:	2100      	movs	r1, #0
 8008760:	6039      	str	r1, [r7, #0]
 8008762:	f003 0320 	and.w	r3, r3, #32
 8008766:	607b      	str	r3, [r7, #4]
 8008768:	e9d7 1200 	ldrd	r1, r2, [r7]
 800876c:	460b      	mov	r3, r1
 800876e:	4313      	orrs	r3, r2
 8008770:	d011      	beq.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008776:	3328      	adds	r3, #40	@ 0x28
 8008778:	2102      	movs	r1, #2
 800877a:	4618      	mov	r0, r3
 800877c:	f000 fb8a 	bl	8008e94 <RCCEx_PLL3_Config>
 8008780:	4603      	mov	r3, r0
 8008782:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008786:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800878a:	2b00      	cmp	r3, #0
 800878c:	d003      	beq.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800878e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008792:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008796:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800879a:	2b00      	cmp	r3, #0
 800879c:	d101      	bne.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800879e:	2300      	movs	r3, #0
 80087a0:	e000      	b.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80087aa:	46bd      	mov	sp, r7
 80087ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087b0:	58024400 	.word	0x58024400

080087b4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80087b8:	f7fe fd96 	bl	80072e8 <HAL_RCC_GetHCLKFreq>
 80087bc:	4602      	mov	r2, r0
 80087be:	4b06      	ldr	r3, [pc, #24]	@ (80087d8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80087c0:	6a1b      	ldr	r3, [r3, #32]
 80087c2:	091b      	lsrs	r3, r3, #4
 80087c4:	f003 0307 	and.w	r3, r3, #7
 80087c8:	4904      	ldr	r1, [pc, #16]	@ (80087dc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80087ca:	5ccb      	ldrb	r3, [r1, r3]
 80087cc:	f003 031f 	and.w	r3, r3, #31
 80087d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	58024400 	.word	0x58024400
 80087dc:	0800c04c 	.word	0x0800c04c

080087e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b089      	sub	sp, #36	@ 0x24
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087e8:	4ba1      	ldr	r3, [pc, #644]	@ (8008a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ec:	f003 0303 	and.w	r3, r3, #3
 80087f0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80087f2:	4b9f      	ldr	r3, [pc, #636]	@ (8008a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087f6:	0b1b      	lsrs	r3, r3, #12
 80087f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80087fc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80087fe:	4b9c      	ldr	r3, [pc, #624]	@ (8008a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008802:	091b      	lsrs	r3, r3, #4
 8008804:	f003 0301 	and.w	r3, r3, #1
 8008808:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800880a:	4b99      	ldr	r3, [pc, #612]	@ (8008a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800880c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800880e:	08db      	lsrs	r3, r3, #3
 8008810:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008814:	693a      	ldr	r2, [r7, #16]
 8008816:	fb02 f303 	mul.w	r3, r2, r3
 800881a:	ee07 3a90 	vmov	s15, r3
 800881e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008822:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	2b00      	cmp	r3, #0
 800882a:	f000 8111 	beq.w	8008a50 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	2b02      	cmp	r3, #2
 8008832:	f000 8083 	beq.w	800893c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	2b02      	cmp	r3, #2
 800883a:	f200 80a1 	bhi.w	8008980 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800883e:	69bb      	ldr	r3, [r7, #24]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d003      	beq.n	800884c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	2b01      	cmp	r3, #1
 8008848:	d056      	beq.n	80088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800884a:	e099      	b.n	8008980 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800884c:	4b88      	ldr	r3, [pc, #544]	@ (8008a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 0320 	and.w	r3, r3, #32
 8008854:	2b00      	cmp	r3, #0
 8008856:	d02d      	beq.n	80088b4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008858:	4b85      	ldr	r3, [pc, #532]	@ (8008a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	08db      	lsrs	r3, r3, #3
 800885e:	f003 0303 	and.w	r3, r3, #3
 8008862:	4a84      	ldr	r2, [pc, #528]	@ (8008a74 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008864:	fa22 f303 	lsr.w	r3, r2, r3
 8008868:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	ee07 3a90 	vmov	s15, r3
 8008870:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	ee07 3a90 	vmov	s15, r3
 800887a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800887e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008882:	4b7b      	ldr	r3, [pc, #492]	@ (8008a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800888a:	ee07 3a90 	vmov	s15, r3
 800888e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008892:	ed97 6a03 	vldr	s12, [r7, #12]
 8008896:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008a78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800889a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800889e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80088b2:	e087      	b.n	80089c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	ee07 3a90 	vmov	s15, r3
 80088ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088be:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008a7c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80088c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088c6:	4b6a      	ldr	r3, [pc, #424]	@ (8008a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ce:	ee07 3a90 	vmov	s15, r3
 80088d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80088da:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008a78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088f6:	e065      	b.n	80089c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	ee07 3a90 	vmov	s15, r3
 80088fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008902:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008a80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800890a:	4b59      	ldr	r3, [pc, #356]	@ (8008a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800890c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800890e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008912:	ee07 3a90 	vmov	s15, r3
 8008916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800891a:	ed97 6a03 	vldr	s12, [r7, #12]
 800891e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008a78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800892a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800892e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008936:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800893a:	e043      	b.n	80089c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	ee07 3a90 	vmov	s15, r3
 8008942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008946:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008a84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800894a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800894e:	4b48      	ldr	r3, [pc, #288]	@ (8008a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008956:	ee07 3a90 	vmov	s15, r3
 800895a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800895e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008962:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008a78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800896a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800896e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800897a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800897e:	e021      	b.n	80089c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	ee07 3a90 	vmov	s15, r3
 8008986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800898a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008a80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800898e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008992:	4b37      	ldr	r3, [pc, #220]	@ (8008a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800899a:	ee07 3a90 	vmov	s15, r3
 800899e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80089a6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008a78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80089aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089c2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80089c4:	4b2a      	ldr	r3, [pc, #168]	@ (8008a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089c8:	0a5b      	lsrs	r3, r3, #9
 80089ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089ce:	ee07 3a90 	vmov	s15, r3
 80089d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80089da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089de:	edd7 6a07 	vldr	s13, [r7, #28]
 80089e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089ea:	ee17 2a90 	vmov	r2, s15
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80089f2:	4b1f      	ldr	r3, [pc, #124]	@ (8008a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089f6:	0c1b      	lsrs	r3, r3, #16
 80089f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089fc:	ee07 3a90 	vmov	s15, r3
 8008a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a18:	ee17 2a90 	vmov	r2, s15
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008a20:	4b13      	ldr	r3, [pc, #76]	@ (8008a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a24:	0e1b      	lsrs	r3, r3, #24
 8008a26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a2a:	ee07 3a90 	vmov	s15, r3
 8008a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a46:	ee17 2a90 	vmov	r2, s15
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008a4e:	e008      	b.n	8008a62 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	609a      	str	r2, [r3, #8]
}
 8008a62:	bf00      	nop
 8008a64:	3724      	adds	r7, #36	@ 0x24
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	58024400 	.word	0x58024400
 8008a74:	03d09000 	.word	0x03d09000
 8008a78:	46000000 	.word	0x46000000
 8008a7c:	4c742400 	.word	0x4c742400
 8008a80:	4a742400 	.word	0x4a742400
 8008a84:	4bbebc20 	.word	0x4bbebc20

08008a88 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b089      	sub	sp, #36	@ 0x24
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a90:	4ba1      	ldr	r3, [pc, #644]	@ (8008d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a94:	f003 0303 	and.w	r3, r3, #3
 8008a98:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008a9a:	4b9f      	ldr	r3, [pc, #636]	@ (8008d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a9e:	0d1b      	lsrs	r3, r3, #20
 8008aa0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008aa4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008aa6:	4b9c      	ldr	r3, [pc, #624]	@ (8008d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aaa:	0a1b      	lsrs	r3, r3, #8
 8008aac:	f003 0301 	and.w	r3, r3, #1
 8008ab0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008ab2:	4b99      	ldr	r3, [pc, #612]	@ (8008d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ab6:	08db      	lsrs	r3, r3, #3
 8008ab8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008abc:	693a      	ldr	r2, [r7, #16]
 8008abe:	fb02 f303 	mul.w	r3, r2, r3
 8008ac2:	ee07 3a90 	vmov	s15, r3
 8008ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	f000 8111 	beq.w	8008cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	f000 8083 	beq.w	8008be4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	2b02      	cmp	r3, #2
 8008ae2:	f200 80a1 	bhi.w	8008c28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d003      	beq.n	8008af4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d056      	beq.n	8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008af2:	e099      	b.n	8008c28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008af4:	4b88      	ldr	r3, [pc, #544]	@ (8008d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 0320 	and.w	r3, r3, #32
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d02d      	beq.n	8008b5c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b00:	4b85      	ldr	r3, [pc, #532]	@ (8008d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	08db      	lsrs	r3, r3, #3
 8008b06:	f003 0303 	and.w	r3, r3, #3
 8008b0a:	4a84      	ldr	r2, [pc, #528]	@ (8008d1c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b10:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	ee07 3a90 	vmov	s15, r3
 8008b18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	ee07 3a90 	vmov	s15, r3
 8008b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b2a:	4b7b      	ldr	r3, [pc, #492]	@ (8008d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b32:	ee07 3a90 	vmov	s15, r3
 8008b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b3e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008d20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008b5a:	e087      	b.n	8008c6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	ee07 3a90 	vmov	s15, r3
 8008b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b66:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008d24 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b6e:	4b6a      	ldr	r3, [pc, #424]	@ (8008d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b76:	ee07 3a90 	vmov	s15, r3
 8008b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b82:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008d20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b9e:	e065      	b.n	8008c6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	ee07 3a90 	vmov	s15, r3
 8008ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008baa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008d28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bb2:	4b59      	ldr	r3, [pc, #356]	@ (8008d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bba:	ee07 3a90 	vmov	s15, r3
 8008bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bc6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008d20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008be2:	e043      	b.n	8008c6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	ee07 3a90 	vmov	s15, r3
 8008bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008d2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bf6:	4b48      	ldr	r3, [pc, #288]	@ (8008d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bfe:	ee07 3a90 	vmov	s15, r3
 8008c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c0a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008d20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c26:	e021      	b.n	8008c6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	ee07 3a90 	vmov	s15, r3
 8008c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c32:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008d28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c3a:	4b37      	ldr	r3, [pc, #220]	@ (8008d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c42:	ee07 3a90 	vmov	s15, r3
 8008c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c4e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008d20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c6a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008c6c:	4b2a      	ldr	r3, [pc, #168]	@ (8008d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c70:	0a5b      	lsrs	r3, r3, #9
 8008c72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c76:	ee07 3a90 	vmov	s15, r3
 8008c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c86:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c92:	ee17 2a90 	vmov	r2, s15
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008c9a:	4b1f      	ldr	r3, [pc, #124]	@ (8008d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c9e:	0c1b      	lsrs	r3, r3, #16
 8008ca0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ca4:	ee07 3a90 	vmov	s15, r3
 8008ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008cb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cc0:	ee17 2a90 	vmov	r2, s15
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008cc8:	4b13      	ldr	r3, [pc, #76]	@ (8008d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ccc:	0e1b      	lsrs	r3, r3, #24
 8008cce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cd2:	ee07 3a90 	vmov	s15, r3
 8008cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008cde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ce2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cee:	ee17 2a90 	vmov	r2, s15
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008cf6:	e008      	b.n	8008d0a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2200      	movs	r2, #0
 8008d08:	609a      	str	r2, [r3, #8]
}
 8008d0a:	bf00      	nop
 8008d0c:	3724      	adds	r7, #36	@ 0x24
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr
 8008d16:	bf00      	nop
 8008d18:	58024400 	.word	0x58024400
 8008d1c:	03d09000 	.word	0x03d09000
 8008d20:	46000000 	.word	0x46000000
 8008d24:	4c742400 	.word	0x4c742400
 8008d28:	4a742400 	.word	0x4a742400
 8008d2c:	4bbebc20 	.word	0x4bbebc20

08008d30 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008d3e:	4b53      	ldr	r3, [pc, #332]	@ (8008e8c <RCCEx_PLL2_Config+0x15c>)
 8008d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d42:	f003 0303 	and.w	r3, r3, #3
 8008d46:	2b03      	cmp	r3, #3
 8008d48:	d101      	bne.n	8008d4e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e099      	b.n	8008e82 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008d4e:	4b4f      	ldr	r3, [pc, #316]	@ (8008e8c <RCCEx_PLL2_Config+0x15c>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a4e      	ldr	r2, [pc, #312]	@ (8008e8c <RCCEx_PLL2_Config+0x15c>)
 8008d54:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008d58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d5a:	f7f9 fae9 	bl	8002330 <HAL_GetTick>
 8008d5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008d60:	e008      	b.n	8008d74 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008d62:	f7f9 fae5 	bl	8002330 <HAL_GetTick>
 8008d66:	4602      	mov	r2, r0
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	1ad3      	subs	r3, r2, r3
 8008d6c:	2b02      	cmp	r3, #2
 8008d6e:	d901      	bls.n	8008d74 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008d70:	2303      	movs	r3, #3
 8008d72:	e086      	b.n	8008e82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008d74:	4b45      	ldr	r3, [pc, #276]	@ (8008e8c <RCCEx_PLL2_Config+0x15c>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1f0      	bne.n	8008d62 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008d80:	4b42      	ldr	r3, [pc, #264]	@ (8008e8c <RCCEx_PLL2_Config+0x15c>)
 8008d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d84:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	031b      	lsls	r3, r3, #12
 8008d8e:	493f      	ldr	r1, [pc, #252]	@ (8008e8c <RCCEx_PLL2_Config+0x15c>)
 8008d90:	4313      	orrs	r3, r2
 8008d92:	628b      	str	r3, [r1, #40]	@ 0x28
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	3b01      	subs	r3, #1
 8008d9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	3b01      	subs	r3, #1
 8008da4:	025b      	lsls	r3, r3, #9
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	431a      	orrs	r2, r3
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	3b01      	subs	r3, #1
 8008db0:	041b      	lsls	r3, r3, #16
 8008db2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008db6:	431a      	orrs	r2, r3
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	691b      	ldr	r3, [r3, #16]
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	061b      	lsls	r3, r3, #24
 8008dc0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008dc4:	4931      	ldr	r1, [pc, #196]	@ (8008e8c <RCCEx_PLL2_Config+0x15c>)
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008dca:	4b30      	ldr	r3, [pc, #192]	@ (8008e8c <RCCEx_PLL2_Config+0x15c>)
 8008dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	695b      	ldr	r3, [r3, #20]
 8008dd6:	492d      	ldr	r1, [pc, #180]	@ (8008e8c <RCCEx_PLL2_Config+0x15c>)
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008ddc:	4b2b      	ldr	r3, [pc, #172]	@ (8008e8c <RCCEx_PLL2_Config+0x15c>)
 8008dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008de0:	f023 0220 	bic.w	r2, r3, #32
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	699b      	ldr	r3, [r3, #24]
 8008de8:	4928      	ldr	r1, [pc, #160]	@ (8008e8c <RCCEx_PLL2_Config+0x15c>)
 8008dea:	4313      	orrs	r3, r2
 8008dec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008dee:	4b27      	ldr	r3, [pc, #156]	@ (8008e8c <RCCEx_PLL2_Config+0x15c>)
 8008df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008df2:	4a26      	ldr	r2, [pc, #152]	@ (8008e8c <RCCEx_PLL2_Config+0x15c>)
 8008df4:	f023 0310 	bic.w	r3, r3, #16
 8008df8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008dfa:	4b24      	ldr	r3, [pc, #144]	@ (8008e8c <RCCEx_PLL2_Config+0x15c>)
 8008dfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008dfe:	4b24      	ldr	r3, [pc, #144]	@ (8008e90 <RCCEx_PLL2_Config+0x160>)
 8008e00:	4013      	ands	r3, r2
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	69d2      	ldr	r2, [r2, #28]
 8008e06:	00d2      	lsls	r2, r2, #3
 8008e08:	4920      	ldr	r1, [pc, #128]	@ (8008e8c <RCCEx_PLL2_Config+0x15c>)
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008e0e:	4b1f      	ldr	r3, [pc, #124]	@ (8008e8c <RCCEx_PLL2_Config+0x15c>)
 8008e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e12:	4a1e      	ldr	r2, [pc, #120]	@ (8008e8c <RCCEx_PLL2_Config+0x15c>)
 8008e14:	f043 0310 	orr.w	r3, r3, #16
 8008e18:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d106      	bne.n	8008e2e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008e20:	4b1a      	ldr	r3, [pc, #104]	@ (8008e8c <RCCEx_PLL2_Config+0x15c>)
 8008e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e24:	4a19      	ldr	r2, [pc, #100]	@ (8008e8c <RCCEx_PLL2_Config+0x15c>)
 8008e26:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008e2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008e2c:	e00f      	b.n	8008e4e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d106      	bne.n	8008e42 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008e34:	4b15      	ldr	r3, [pc, #84]	@ (8008e8c <RCCEx_PLL2_Config+0x15c>)
 8008e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e38:	4a14      	ldr	r2, [pc, #80]	@ (8008e8c <RCCEx_PLL2_Config+0x15c>)
 8008e3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008e3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008e40:	e005      	b.n	8008e4e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008e42:	4b12      	ldr	r3, [pc, #72]	@ (8008e8c <RCCEx_PLL2_Config+0x15c>)
 8008e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e46:	4a11      	ldr	r2, [pc, #68]	@ (8008e8c <RCCEx_PLL2_Config+0x15c>)
 8008e48:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008e4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8008e8c <RCCEx_PLL2_Config+0x15c>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a0e      	ldr	r2, [pc, #56]	@ (8008e8c <RCCEx_PLL2_Config+0x15c>)
 8008e54:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008e58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e5a:	f7f9 fa69 	bl	8002330 <HAL_GetTick>
 8008e5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008e60:	e008      	b.n	8008e74 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008e62:	f7f9 fa65 	bl	8002330 <HAL_GetTick>
 8008e66:	4602      	mov	r2, r0
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	1ad3      	subs	r3, r2, r3
 8008e6c:	2b02      	cmp	r3, #2
 8008e6e:	d901      	bls.n	8008e74 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008e70:	2303      	movs	r3, #3
 8008e72:	e006      	b.n	8008e82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008e74:	4b05      	ldr	r3, [pc, #20]	@ (8008e8c <RCCEx_PLL2_Config+0x15c>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d0f0      	beq.n	8008e62 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3710      	adds	r7, #16
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	58024400 	.word	0x58024400
 8008e90:	ffff0007 	.word	0xffff0007

08008e94 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ea2:	4b53      	ldr	r3, [pc, #332]	@ (8008ff0 <RCCEx_PLL3_Config+0x15c>)
 8008ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ea6:	f003 0303 	and.w	r3, r3, #3
 8008eaa:	2b03      	cmp	r3, #3
 8008eac:	d101      	bne.n	8008eb2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e099      	b.n	8008fe6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008eb2:	4b4f      	ldr	r3, [pc, #316]	@ (8008ff0 <RCCEx_PLL3_Config+0x15c>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a4e      	ldr	r2, [pc, #312]	@ (8008ff0 <RCCEx_PLL3_Config+0x15c>)
 8008eb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ebc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ebe:	f7f9 fa37 	bl	8002330 <HAL_GetTick>
 8008ec2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008ec4:	e008      	b.n	8008ed8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008ec6:	f7f9 fa33 	bl	8002330 <HAL_GetTick>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	1ad3      	subs	r3, r2, r3
 8008ed0:	2b02      	cmp	r3, #2
 8008ed2:	d901      	bls.n	8008ed8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008ed4:	2303      	movs	r3, #3
 8008ed6:	e086      	b.n	8008fe6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008ed8:	4b45      	ldr	r3, [pc, #276]	@ (8008ff0 <RCCEx_PLL3_Config+0x15c>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d1f0      	bne.n	8008ec6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008ee4:	4b42      	ldr	r3, [pc, #264]	@ (8008ff0 <RCCEx_PLL3_Config+0x15c>)
 8008ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ee8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	051b      	lsls	r3, r3, #20
 8008ef2:	493f      	ldr	r1, [pc, #252]	@ (8008ff0 <RCCEx_PLL3_Config+0x15c>)
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	628b      	str	r3, [r1, #40]	@ 0x28
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	3b01      	subs	r3, #1
 8008efe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	689b      	ldr	r3, [r3, #8]
 8008f06:	3b01      	subs	r3, #1
 8008f08:	025b      	lsls	r3, r3, #9
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	431a      	orrs	r2, r3
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	3b01      	subs	r3, #1
 8008f14:	041b      	lsls	r3, r3, #16
 8008f16:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008f1a:	431a      	orrs	r2, r3
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	691b      	ldr	r3, [r3, #16]
 8008f20:	3b01      	subs	r3, #1
 8008f22:	061b      	lsls	r3, r3, #24
 8008f24:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008f28:	4931      	ldr	r1, [pc, #196]	@ (8008ff0 <RCCEx_PLL3_Config+0x15c>)
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008f2e:	4b30      	ldr	r3, [pc, #192]	@ (8008ff0 <RCCEx_PLL3_Config+0x15c>)
 8008f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f32:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	695b      	ldr	r3, [r3, #20]
 8008f3a:	492d      	ldr	r1, [pc, #180]	@ (8008ff0 <RCCEx_PLL3_Config+0x15c>)
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008f40:	4b2b      	ldr	r3, [pc, #172]	@ (8008ff0 <RCCEx_PLL3_Config+0x15c>)
 8008f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f44:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	699b      	ldr	r3, [r3, #24]
 8008f4c:	4928      	ldr	r1, [pc, #160]	@ (8008ff0 <RCCEx_PLL3_Config+0x15c>)
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008f52:	4b27      	ldr	r3, [pc, #156]	@ (8008ff0 <RCCEx_PLL3_Config+0x15c>)
 8008f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f56:	4a26      	ldr	r2, [pc, #152]	@ (8008ff0 <RCCEx_PLL3_Config+0x15c>)
 8008f58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008f5e:	4b24      	ldr	r3, [pc, #144]	@ (8008ff0 <RCCEx_PLL3_Config+0x15c>)
 8008f60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f62:	4b24      	ldr	r3, [pc, #144]	@ (8008ff4 <RCCEx_PLL3_Config+0x160>)
 8008f64:	4013      	ands	r3, r2
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	69d2      	ldr	r2, [r2, #28]
 8008f6a:	00d2      	lsls	r2, r2, #3
 8008f6c:	4920      	ldr	r1, [pc, #128]	@ (8008ff0 <RCCEx_PLL3_Config+0x15c>)
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008f72:	4b1f      	ldr	r3, [pc, #124]	@ (8008ff0 <RCCEx_PLL3_Config+0x15c>)
 8008f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f76:	4a1e      	ldr	r2, [pc, #120]	@ (8008ff0 <RCCEx_PLL3_Config+0x15c>)
 8008f78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d106      	bne.n	8008f92 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008f84:	4b1a      	ldr	r3, [pc, #104]	@ (8008ff0 <RCCEx_PLL3_Config+0x15c>)
 8008f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f88:	4a19      	ldr	r2, [pc, #100]	@ (8008ff0 <RCCEx_PLL3_Config+0x15c>)
 8008f8a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008f8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008f90:	e00f      	b.n	8008fb2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d106      	bne.n	8008fa6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008f98:	4b15      	ldr	r3, [pc, #84]	@ (8008ff0 <RCCEx_PLL3_Config+0x15c>)
 8008f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f9c:	4a14      	ldr	r2, [pc, #80]	@ (8008ff0 <RCCEx_PLL3_Config+0x15c>)
 8008f9e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008fa2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008fa4:	e005      	b.n	8008fb2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008fa6:	4b12      	ldr	r3, [pc, #72]	@ (8008ff0 <RCCEx_PLL3_Config+0x15c>)
 8008fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008faa:	4a11      	ldr	r2, [pc, #68]	@ (8008ff0 <RCCEx_PLL3_Config+0x15c>)
 8008fac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008fb0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8008ff0 <RCCEx_PLL3_Config+0x15c>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a0e      	ldr	r2, [pc, #56]	@ (8008ff0 <RCCEx_PLL3_Config+0x15c>)
 8008fb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008fbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fbe:	f7f9 f9b7 	bl	8002330 <HAL_GetTick>
 8008fc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008fc4:	e008      	b.n	8008fd8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008fc6:	f7f9 f9b3 	bl	8002330 <HAL_GetTick>
 8008fca:	4602      	mov	r2, r0
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	1ad3      	subs	r3, r2, r3
 8008fd0:	2b02      	cmp	r3, #2
 8008fd2:	d901      	bls.n	8008fd8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008fd4:	2303      	movs	r3, #3
 8008fd6:	e006      	b.n	8008fe6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008fd8:	4b05      	ldr	r3, [pc, #20]	@ (8008ff0 <RCCEx_PLL3_Config+0x15c>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d0f0      	beq.n	8008fc6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3710      	adds	r7, #16
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	58024400 	.word	0x58024400
 8008ff4:	ffff0007 	.word	0xffff0007

08008ff8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d101      	bne.n	800900a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009006:	2301      	movs	r3, #1
 8009008:	e042      	b.n	8009090 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009010:	2b00      	cmp	r3, #0
 8009012:	d106      	bne.n	8009022 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f7f8 ff8b 	bl	8001f38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2224      	movs	r2, #36	@ 0x24
 8009026:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f022 0201 	bic.w	r2, r2, #1
 8009038:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800903e:	2b00      	cmp	r3, #0
 8009040:	d002      	beq.n	8009048 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 fe94 	bl	8009d70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 f929 	bl	80092a0 <UART_SetConfig>
 800904e:	4603      	mov	r3, r0
 8009050:	2b01      	cmp	r3, #1
 8009052:	d101      	bne.n	8009058 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	e01b      	b.n	8009090 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	685a      	ldr	r2, [r3, #4]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009066:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	689a      	ldr	r2, [r3, #8]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009076:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f042 0201 	orr.w	r2, r2, #1
 8009086:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 ff13 	bl	8009eb4 <UART_CheckIdleState>
 800908e:	4603      	mov	r3, r0
}
 8009090:	4618      	mov	r0, r3
 8009092:	3708      	adds	r7, #8
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b08a      	sub	sp, #40	@ 0x28
 800909c:	af02      	add	r7, sp, #8
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	603b      	str	r3, [r7, #0]
 80090a4:	4613      	mov	r3, r2
 80090a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090ae:	2b20      	cmp	r3, #32
 80090b0:	d17b      	bne.n	80091aa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d002      	beq.n	80090be <HAL_UART_Transmit+0x26>
 80090b8:	88fb      	ldrh	r3, [r7, #6]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d101      	bne.n	80090c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80090be:	2301      	movs	r3, #1
 80090c0:	e074      	b.n	80091ac <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2200      	movs	r2, #0
 80090c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2221      	movs	r2, #33	@ 0x21
 80090ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80090d2:	f7f9 f92d 	bl	8002330 <HAL_GetTick>
 80090d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	88fa      	ldrh	r2, [r7, #6]
 80090dc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	88fa      	ldrh	r2, [r7, #6]
 80090e4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090f0:	d108      	bne.n	8009104 <HAL_UART_Transmit+0x6c>
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d104      	bne.n	8009104 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80090fa:	2300      	movs	r3, #0
 80090fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	61bb      	str	r3, [r7, #24]
 8009102:	e003      	b.n	800910c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009108:	2300      	movs	r3, #0
 800910a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800910c:	e030      	b.n	8009170 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	9300      	str	r3, [sp, #0]
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	2200      	movs	r2, #0
 8009116:	2180      	movs	r1, #128	@ 0x80
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f000 ff75 	bl	800a008 <UART_WaitOnFlagUntilTimeout>
 800911e:	4603      	mov	r3, r0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d005      	beq.n	8009130 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2220      	movs	r2, #32
 8009128:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800912c:	2303      	movs	r3, #3
 800912e:	e03d      	b.n	80091ac <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009130:	69fb      	ldr	r3, [r7, #28]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d10b      	bne.n	800914e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	881b      	ldrh	r3, [r3, #0]
 800913a:	461a      	mov	r2, r3
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009144:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	3302      	adds	r3, #2
 800914a:	61bb      	str	r3, [r7, #24]
 800914c:	e007      	b.n	800915e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	781a      	ldrb	r2, [r3, #0]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009158:	69fb      	ldr	r3, [r7, #28]
 800915a:	3301      	adds	r3, #1
 800915c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009164:	b29b      	uxth	r3, r3
 8009166:	3b01      	subs	r3, #1
 8009168:	b29a      	uxth	r2, r3
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009176:	b29b      	uxth	r3, r3
 8009178:	2b00      	cmp	r3, #0
 800917a:	d1c8      	bne.n	800910e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	9300      	str	r3, [sp, #0]
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	2200      	movs	r2, #0
 8009184:	2140      	movs	r1, #64	@ 0x40
 8009186:	68f8      	ldr	r0, [r7, #12]
 8009188:	f000 ff3e 	bl	800a008 <UART_WaitOnFlagUntilTimeout>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d005      	beq.n	800919e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2220      	movs	r2, #32
 8009196:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800919a:	2303      	movs	r3, #3
 800919c:	e006      	b.n	80091ac <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2220      	movs	r2, #32
 80091a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80091a6:	2300      	movs	r3, #0
 80091a8:	e000      	b.n	80091ac <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80091aa:	2302      	movs	r3, #2
  }
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3720      	adds	r7, #32
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b08a      	sub	sp, #40	@ 0x28
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	60b9      	str	r1, [r7, #8]
 80091be:	4613      	mov	r3, r2
 80091c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80091c8:	2b20      	cmp	r3, #32
 80091ca:	d137      	bne.n	800923c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d002      	beq.n	80091d8 <HAL_UART_Receive_DMA+0x24>
 80091d2:	88fb      	ldrh	r3, [r7, #6]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d101      	bne.n	80091dc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80091d8:	2301      	movs	r3, #1
 80091da:	e030      	b.n	800923e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2200      	movs	r2, #0
 80091e0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a18      	ldr	r2, [pc, #96]	@ (8009248 <HAL_UART_Receive_DMA+0x94>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d01f      	beq.n	800922c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d018      	beq.n	800922c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	e853 3f00 	ldrex	r3, [r3]
 8009206:	613b      	str	r3, [r7, #16]
   return(result);
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800920e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	461a      	mov	r2, r3
 8009216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009218:	623b      	str	r3, [r7, #32]
 800921a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921c:	69f9      	ldr	r1, [r7, #28]
 800921e:	6a3a      	ldr	r2, [r7, #32]
 8009220:	e841 2300 	strex	r3, r2, [r1]
 8009224:	61bb      	str	r3, [r7, #24]
   return(result);
 8009226:	69bb      	ldr	r3, [r7, #24]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d1e6      	bne.n	80091fa <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800922c:	88fb      	ldrh	r3, [r7, #6]
 800922e:	461a      	mov	r2, r3
 8009230:	68b9      	ldr	r1, [r7, #8]
 8009232:	68f8      	ldr	r0, [r7, #12]
 8009234:	f000 ff56 	bl	800a0e4 <UART_Start_Receive_DMA>
 8009238:	4603      	mov	r3, r0
 800923a:	e000      	b.n	800923e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800923c:	2302      	movs	r3, #2
  }
}
 800923e:	4618      	mov	r0, r3
 8009240:	3728      	adds	r7, #40	@ 0x28
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	58000c00 	.word	0x58000c00

0800924c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009254:	bf00      	nop
 8009256:	370c      	adds	r7, #12
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr

08009260 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009268:	bf00      	nop
 800926a:	370c      	adds	r7, #12
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr

08009274 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800927c:	bf00      	nop
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	460b      	mov	r3, r1
 8009292:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009294:	bf00      	nop
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092a4:	b092      	sub	sp, #72	@ 0x48
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80092aa:	2300      	movs	r3, #0
 80092ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	689a      	ldr	r2, [r3, #8]
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	691b      	ldr	r3, [r3, #16]
 80092b8:	431a      	orrs	r2, r3
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	695b      	ldr	r3, [r3, #20]
 80092be:	431a      	orrs	r2, r3
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	69db      	ldr	r3, [r3, #28]
 80092c4:	4313      	orrs	r3, r2
 80092c6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	4bbe      	ldr	r3, [pc, #760]	@ (80095c8 <UART_SetConfig+0x328>)
 80092d0:	4013      	ands	r3, r2
 80092d2:	697a      	ldr	r2, [r7, #20]
 80092d4:	6812      	ldr	r2, [r2, #0]
 80092d6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80092d8:	430b      	orrs	r3, r1
 80092da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	68da      	ldr	r2, [r3, #12]
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	430a      	orrs	r2, r1
 80092f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	699b      	ldr	r3, [r3, #24]
 80092f6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4ab3      	ldr	r2, [pc, #716]	@ (80095cc <UART_SetConfig+0x32c>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d004      	beq.n	800930c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	6a1b      	ldr	r3, [r3, #32]
 8009306:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009308:	4313      	orrs	r3, r2
 800930a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	689a      	ldr	r2, [r3, #8]
 8009312:	4baf      	ldr	r3, [pc, #700]	@ (80095d0 <UART_SetConfig+0x330>)
 8009314:	4013      	ands	r3, r2
 8009316:	697a      	ldr	r2, [r7, #20]
 8009318:	6812      	ldr	r2, [r2, #0]
 800931a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800931c:	430b      	orrs	r3, r1
 800931e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009326:	f023 010f 	bic.w	r1, r3, #15
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	430a      	orrs	r2, r1
 8009334:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4aa6      	ldr	r2, [pc, #664]	@ (80095d4 <UART_SetConfig+0x334>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d177      	bne.n	8009430 <UART_SetConfig+0x190>
 8009340:	4ba5      	ldr	r3, [pc, #660]	@ (80095d8 <UART_SetConfig+0x338>)
 8009342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009344:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009348:	2b28      	cmp	r3, #40	@ 0x28
 800934a:	d86d      	bhi.n	8009428 <UART_SetConfig+0x188>
 800934c:	a201      	add	r2, pc, #4	@ (adr r2, 8009354 <UART_SetConfig+0xb4>)
 800934e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009352:	bf00      	nop
 8009354:	080093f9 	.word	0x080093f9
 8009358:	08009429 	.word	0x08009429
 800935c:	08009429 	.word	0x08009429
 8009360:	08009429 	.word	0x08009429
 8009364:	08009429 	.word	0x08009429
 8009368:	08009429 	.word	0x08009429
 800936c:	08009429 	.word	0x08009429
 8009370:	08009429 	.word	0x08009429
 8009374:	08009401 	.word	0x08009401
 8009378:	08009429 	.word	0x08009429
 800937c:	08009429 	.word	0x08009429
 8009380:	08009429 	.word	0x08009429
 8009384:	08009429 	.word	0x08009429
 8009388:	08009429 	.word	0x08009429
 800938c:	08009429 	.word	0x08009429
 8009390:	08009429 	.word	0x08009429
 8009394:	08009409 	.word	0x08009409
 8009398:	08009429 	.word	0x08009429
 800939c:	08009429 	.word	0x08009429
 80093a0:	08009429 	.word	0x08009429
 80093a4:	08009429 	.word	0x08009429
 80093a8:	08009429 	.word	0x08009429
 80093ac:	08009429 	.word	0x08009429
 80093b0:	08009429 	.word	0x08009429
 80093b4:	08009411 	.word	0x08009411
 80093b8:	08009429 	.word	0x08009429
 80093bc:	08009429 	.word	0x08009429
 80093c0:	08009429 	.word	0x08009429
 80093c4:	08009429 	.word	0x08009429
 80093c8:	08009429 	.word	0x08009429
 80093cc:	08009429 	.word	0x08009429
 80093d0:	08009429 	.word	0x08009429
 80093d4:	08009419 	.word	0x08009419
 80093d8:	08009429 	.word	0x08009429
 80093dc:	08009429 	.word	0x08009429
 80093e0:	08009429 	.word	0x08009429
 80093e4:	08009429 	.word	0x08009429
 80093e8:	08009429 	.word	0x08009429
 80093ec:	08009429 	.word	0x08009429
 80093f0:	08009429 	.word	0x08009429
 80093f4:	08009421 	.word	0x08009421
 80093f8:	2301      	movs	r3, #1
 80093fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093fe:	e222      	b.n	8009846 <UART_SetConfig+0x5a6>
 8009400:	2304      	movs	r3, #4
 8009402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009406:	e21e      	b.n	8009846 <UART_SetConfig+0x5a6>
 8009408:	2308      	movs	r3, #8
 800940a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800940e:	e21a      	b.n	8009846 <UART_SetConfig+0x5a6>
 8009410:	2310      	movs	r3, #16
 8009412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009416:	e216      	b.n	8009846 <UART_SetConfig+0x5a6>
 8009418:	2320      	movs	r3, #32
 800941a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800941e:	e212      	b.n	8009846 <UART_SetConfig+0x5a6>
 8009420:	2340      	movs	r3, #64	@ 0x40
 8009422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009426:	e20e      	b.n	8009846 <UART_SetConfig+0x5a6>
 8009428:	2380      	movs	r3, #128	@ 0x80
 800942a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800942e:	e20a      	b.n	8009846 <UART_SetConfig+0x5a6>
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a69      	ldr	r2, [pc, #420]	@ (80095dc <UART_SetConfig+0x33c>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d130      	bne.n	800949c <UART_SetConfig+0x1fc>
 800943a:	4b67      	ldr	r3, [pc, #412]	@ (80095d8 <UART_SetConfig+0x338>)
 800943c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800943e:	f003 0307 	and.w	r3, r3, #7
 8009442:	2b05      	cmp	r3, #5
 8009444:	d826      	bhi.n	8009494 <UART_SetConfig+0x1f4>
 8009446:	a201      	add	r2, pc, #4	@ (adr r2, 800944c <UART_SetConfig+0x1ac>)
 8009448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800944c:	08009465 	.word	0x08009465
 8009450:	0800946d 	.word	0x0800946d
 8009454:	08009475 	.word	0x08009475
 8009458:	0800947d 	.word	0x0800947d
 800945c:	08009485 	.word	0x08009485
 8009460:	0800948d 	.word	0x0800948d
 8009464:	2300      	movs	r3, #0
 8009466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800946a:	e1ec      	b.n	8009846 <UART_SetConfig+0x5a6>
 800946c:	2304      	movs	r3, #4
 800946e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009472:	e1e8      	b.n	8009846 <UART_SetConfig+0x5a6>
 8009474:	2308      	movs	r3, #8
 8009476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800947a:	e1e4      	b.n	8009846 <UART_SetConfig+0x5a6>
 800947c:	2310      	movs	r3, #16
 800947e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009482:	e1e0      	b.n	8009846 <UART_SetConfig+0x5a6>
 8009484:	2320      	movs	r3, #32
 8009486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800948a:	e1dc      	b.n	8009846 <UART_SetConfig+0x5a6>
 800948c:	2340      	movs	r3, #64	@ 0x40
 800948e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009492:	e1d8      	b.n	8009846 <UART_SetConfig+0x5a6>
 8009494:	2380      	movs	r3, #128	@ 0x80
 8009496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800949a:	e1d4      	b.n	8009846 <UART_SetConfig+0x5a6>
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a4f      	ldr	r2, [pc, #316]	@ (80095e0 <UART_SetConfig+0x340>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d130      	bne.n	8009508 <UART_SetConfig+0x268>
 80094a6:	4b4c      	ldr	r3, [pc, #304]	@ (80095d8 <UART_SetConfig+0x338>)
 80094a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094aa:	f003 0307 	and.w	r3, r3, #7
 80094ae:	2b05      	cmp	r3, #5
 80094b0:	d826      	bhi.n	8009500 <UART_SetConfig+0x260>
 80094b2:	a201      	add	r2, pc, #4	@ (adr r2, 80094b8 <UART_SetConfig+0x218>)
 80094b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b8:	080094d1 	.word	0x080094d1
 80094bc:	080094d9 	.word	0x080094d9
 80094c0:	080094e1 	.word	0x080094e1
 80094c4:	080094e9 	.word	0x080094e9
 80094c8:	080094f1 	.word	0x080094f1
 80094cc:	080094f9 	.word	0x080094f9
 80094d0:	2300      	movs	r3, #0
 80094d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094d6:	e1b6      	b.n	8009846 <UART_SetConfig+0x5a6>
 80094d8:	2304      	movs	r3, #4
 80094da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094de:	e1b2      	b.n	8009846 <UART_SetConfig+0x5a6>
 80094e0:	2308      	movs	r3, #8
 80094e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094e6:	e1ae      	b.n	8009846 <UART_SetConfig+0x5a6>
 80094e8:	2310      	movs	r3, #16
 80094ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ee:	e1aa      	b.n	8009846 <UART_SetConfig+0x5a6>
 80094f0:	2320      	movs	r3, #32
 80094f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094f6:	e1a6      	b.n	8009846 <UART_SetConfig+0x5a6>
 80094f8:	2340      	movs	r3, #64	@ 0x40
 80094fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094fe:	e1a2      	b.n	8009846 <UART_SetConfig+0x5a6>
 8009500:	2380      	movs	r3, #128	@ 0x80
 8009502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009506:	e19e      	b.n	8009846 <UART_SetConfig+0x5a6>
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a35      	ldr	r2, [pc, #212]	@ (80095e4 <UART_SetConfig+0x344>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d130      	bne.n	8009574 <UART_SetConfig+0x2d4>
 8009512:	4b31      	ldr	r3, [pc, #196]	@ (80095d8 <UART_SetConfig+0x338>)
 8009514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009516:	f003 0307 	and.w	r3, r3, #7
 800951a:	2b05      	cmp	r3, #5
 800951c:	d826      	bhi.n	800956c <UART_SetConfig+0x2cc>
 800951e:	a201      	add	r2, pc, #4	@ (adr r2, 8009524 <UART_SetConfig+0x284>)
 8009520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009524:	0800953d 	.word	0x0800953d
 8009528:	08009545 	.word	0x08009545
 800952c:	0800954d 	.word	0x0800954d
 8009530:	08009555 	.word	0x08009555
 8009534:	0800955d 	.word	0x0800955d
 8009538:	08009565 	.word	0x08009565
 800953c:	2300      	movs	r3, #0
 800953e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009542:	e180      	b.n	8009846 <UART_SetConfig+0x5a6>
 8009544:	2304      	movs	r3, #4
 8009546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800954a:	e17c      	b.n	8009846 <UART_SetConfig+0x5a6>
 800954c:	2308      	movs	r3, #8
 800954e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009552:	e178      	b.n	8009846 <UART_SetConfig+0x5a6>
 8009554:	2310      	movs	r3, #16
 8009556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800955a:	e174      	b.n	8009846 <UART_SetConfig+0x5a6>
 800955c:	2320      	movs	r3, #32
 800955e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009562:	e170      	b.n	8009846 <UART_SetConfig+0x5a6>
 8009564:	2340      	movs	r3, #64	@ 0x40
 8009566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800956a:	e16c      	b.n	8009846 <UART_SetConfig+0x5a6>
 800956c:	2380      	movs	r3, #128	@ 0x80
 800956e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009572:	e168      	b.n	8009846 <UART_SetConfig+0x5a6>
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a1b      	ldr	r2, [pc, #108]	@ (80095e8 <UART_SetConfig+0x348>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d142      	bne.n	8009604 <UART_SetConfig+0x364>
 800957e:	4b16      	ldr	r3, [pc, #88]	@ (80095d8 <UART_SetConfig+0x338>)
 8009580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009582:	f003 0307 	and.w	r3, r3, #7
 8009586:	2b05      	cmp	r3, #5
 8009588:	d838      	bhi.n	80095fc <UART_SetConfig+0x35c>
 800958a:	a201      	add	r2, pc, #4	@ (adr r2, 8009590 <UART_SetConfig+0x2f0>)
 800958c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009590:	080095a9 	.word	0x080095a9
 8009594:	080095b1 	.word	0x080095b1
 8009598:	080095b9 	.word	0x080095b9
 800959c:	080095c1 	.word	0x080095c1
 80095a0:	080095ed 	.word	0x080095ed
 80095a4:	080095f5 	.word	0x080095f5
 80095a8:	2300      	movs	r3, #0
 80095aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ae:	e14a      	b.n	8009846 <UART_SetConfig+0x5a6>
 80095b0:	2304      	movs	r3, #4
 80095b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095b6:	e146      	b.n	8009846 <UART_SetConfig+0x5a6>
 80095b8:	2308      	movs	r3, #8
 80095ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095be:	e142      	b.n	8009846 <UART_SetConfig+0x5a6>
 80095c0:	2310      	movs	r3, #16
 80095c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095c6:	e13e      	b.n	8009846 <UART_SetConfig+0x5a6>
 80095c8:	cfff69f3 	.word	0xcfff69f3
 80095cc:	58000c00 	.word	0x58000c00
 80095d0:	11fff4ff 	.word	0x11fff4ff
 80095d4:	40011000 	.word	0x40011000
 80095d8:	58024400 	.word	0x58024400
 80095dc:	40004400 	.word	0x40004400
 80095e0:	40004800 	.word	0x40004800
 80095e4:	40004c00 	.word	0x40004c00
 80095e8:	40005000 	.word	0x40005000
 80095ec:	2320      	movs	r3, #32
 80095ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095f2:	e128      	b.n	8009846 <UART_SetConfig+0x5a6>
 80095f4:	2340      	movs	r3, #64	@ 0x40
 80095f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095fa:	e124      	b.n	8009846 <UART_SetConfig+0x5a6>
 80095fc:	2380      	movs	r3, #128	@ 0x80
 80095fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009602:	e120      	b.n	8009846 <UART_SetConfig+0x5a6>
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4acb      	ldr	r2, [pc, #812]	@ (8009938 <UART_SetConfig+0x698>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d176      	bne.n	80096fc <UART_SetConfig+0x45c>
 800960e:	4bcb      	ldr	r3, [pc, #812]	@ (800993c <UART_SetConfig+0x69c>)
 8009610:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009612:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009616:	2b28      	cmp	r3, #40	@ 0x28
 8009618:	d86c      	bhi.n	80096f4 <UART_SetConfig+0x454>
 800961a:	a201      	add	r2, pc, #4	@ (adr r2, 8009620 <UART_SetConfig+0x380>)
 800961c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009620:	080096c5 	.word	0x080096c5
 8009624:	080096f5 	.word	0x080096f5
 8009628:	080096f5 	.word	0x080096f5
 800962c:	080096f5 	.word	0x080096f5
 8009630:	080096f5 	.word	0x080096f5
 8009634:	080096f5 	.word	0x080096f5
 8009638:	080096f5 	.word	0x080096f5
 800963c:	080096f5 	.word	0x080096f5
 8009640:	080096cd 	.word	0x080096cd
 8009644:	080096f5 	.word	0x080096f5
 8009648:	080096f5 	.word	0x080096f5
 800964c:	080096f5 	.word	0x080096f5
 8009650:	080096f5 	.word	0x080096f5
 8009654:	080096f5 	.word	0x080096f5
 8009658:	080096f5 	.word	0x080096f5
 800965c:	080096f5 	.word	0x080096f5
 8009660:	080096d5 	.word	0x080096d5
 8009664:	080096f5 	.word	0x080096f5
 8009668:	080096f5 	.word	0x080096f5
 800966c:	080096f5 	.word	0x080096f5
 8009670:	080096f5 	.word	0x080096f5
 8009674:	080096f5 	.word	0x080096f5
 8009678:	080096f5 	.word	0x080096f5
 800967c:	080096f5 	.word	0x080096f5
 8009680:	080096dd 	.word	0x080096dd
 8009684:	080096f5 	.word	0x080096f5
 8009688:	080096f5 	.word	0x080096f5
 800968c:	080096f5 	.word	0x080096f5
 8009690:	080096f5 	.word	0x080096f5
 8009694:	080096f5 	.word	0x080096f5
 8009698:	080096f5 	.word	0x080096f5
 800969c:	080096f5 	.word	0x080096f5
 80096a0:	080096e5 	.word	0x080096e5
 80096a4:	080096f5 	.word	0x080096f5
 80096a8:	080096f5 	.word	0x080096f5
 80096ac:	080096f5 	.word	0x080096f5
 80096b0:	080096f5 	.word	0x080096f5
 80096b4:	080096f5 	.word	0x080096f5
 80096b8:	080096f5 	.word	0x080096f5
 80096bc:	080096f5 	.word	0x080096f5
 80096c0:	080096ed 	.word	0x080096ed
 80096c4:	2301      	movs	r3, #1
 80096c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ca:	e0bc      	b.n	8009846 <UART_SetConfig+0x5a6>
 80096cc:	2304      	movs	r3, #4
 80096ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096d2:	e0b8      	b.n	8009846 <UART_SetConfig+0x5a6>
 80096d4:	2308      	movs	r3, #8
 80096d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096da:	e0b4      	b.n	8009846 <UART_SetConfig+0x5a6>
 80096dc:	2310      	movs	r3, #16
 80096de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096e2:	e0b0      	b.n	8009846 <UART_SetConfig+0x5a6>
 80096e4:	2320      	movs	r3, #32
 80096e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ea:	e0ac      	b.n	8009846 <UART_SetConfig+0x5a6>
 80096ec:	2340      	movs	r3, #64	@ 0x40
 80096ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096f2:	e0a8      	b.n	8009846 <UART_SetConfig+0x5a6>
 80096f4:	2380      	movs	r3, #128	@ 0x80
 80096f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096fa:	e0a4      	b.n	8009846 <UART_SetConfig+0x5a6>
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a8f      	ldr	r2, [pc, #572]	@ (8009940 <UART_SetConfig+0x6a0>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d130      	bne.n	8009768 <UART_SetConfig+0x4c8>
 8009706:	4b8d      	ldr	r3, [pc, #564]	@ (800993c <UART_SetConfig+0x69c>)
 8009708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800970a:	f003 0307 	and.w	r3, r3, #7
 800970e:	2b05      	cmp	r3, #5
 8009710:	d826      	bhi.n	8009760 <UART_SetConfig+0x4c0>
 8009712:	a201      	add	r2, pc, #4	@ (adr r2, 8009718 <UART_SetConfig+0x478>)
 8009714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009718:	08009731 	.word	0x08009731
 800971c:	08009739 	.word	0x08009739
 8009720:	08009741 	.word	0x08009741
 8009724:	08009749 	.word	0x08009749
 8009728:	08009751 	.word	0x08009751
 800972c:	08009759 	.word	0x08009759
 8009730:	2300      	movs	r3, #0
 8009732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009736:	e086      	b.n	8009846 <UART_SetConfig+0x5a6>
 8009738:	2304      	movs	r3, #4
 800973a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800973e:	e082      	b.n	8009846 <UART_SetConfig+0x5a6>
 8009740:	2308      	movs	r3, #8
 8009742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009746:	e07e      	b.n	8009846 <UART_SetConfig+0x5a6>
 8009748:	2310      	movs	r3, #16
 800974a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800974e:	e07a      	b.n	8009846 <UART_SetConfig+0x5a6>
 8009750:	2320      	movs	r3, #32
 8009752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009756:	e076      	b.n	8009846 <UART_SetConfig+0x5a6>
 8009758:	2340      	movs	r3, #64	@ 0x40
 800975a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800975e:	e072      	b.n	8009846 <UART_SetConfig+0x5a6>
 8009760:	2380      	movs	r3, #128	@ 0x80
 8009762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009766:	e06e      	b.n	8009846 <UART_SetConfig+0x5a6>
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a75      	ldr	r2, [pc, #468]	@ (8009944 <UART_SetConfig+0x6a4>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d130      	bne.n	80097d4 <UART_SetConfig+0x534>
 8009772:	4b72      	ldr	r3, [pc, #456]	@ (800993c <UART_SetConfig+0x69c>)
 8009774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009776:	f003 0307 	and.w	r3, r3, #7
 800977a:	2b05      	cmp	r3, #5
 800977c:	d826      	bhi.n	80097cc <UART_SetConfig+0x52c>
 800977e:	a201      	add	r2, pc, #4	@ (adr r2, 8009784 <UART_SetConfig+0x4e4>)
 8009780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009784:	0800979d 	.word	0x0800979d
 8009788:	080097a5 	.word	0x080097a5
 800978c:	080097ad 	.word	0x080097ad
 8009790:	080097b5 	.word	0x080097b5
 8009794:	080097bd 	.word	0x080097bd
 8009798:	080097c5 	.word	0x080097c5
 800979c:	2300      	movs	r3, #0
 800979e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097a2:	e050      	b.n	8009846 <UART_SetConfig+0x5a6>
 80097a4:	2304      	movs	r3, #4
 80097a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097aa:	e04c      	b.n	8009846 <UART_SetConfig+0x5a6>
 80097ac:	2308      	movs	r3, #8
 80097ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097b2:	e048      	b.n	8009846 <UART_SetConfig+0x5a6>
 80097b4:	2310      	movs	r3, #16
 80097b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ba:	e044      	b.n	8009846 <UART_SetConfig+0x5a6>
 80097bc:	2320      	movs	r3, #32
 80097be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097c2:	e040      	b.n	8009846 <UART_SetConfig+0x5a6>
 80097c4:	2340      	movs	r3, #64	@ 0x40
 80097c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ca:	e03c      	b.n	8009846 <UART_SetConfig+0x5a6>
 80097cc:	2380      	movs	r3, #128	@ 0x80
 80097ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097d2:	e038      	b.n	8009846 <UART_SetConfig+0x5a6>
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a5b      	ldr	r2, [pc, #364]	@ (8009948 <UART_SetConfig+0x6a8>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d130      	bne.n	8009840 <UART_SetConfig+0x5a0>
 80097de:	4b57      	ldr	r3, [pc, #348]	@ (800993c <UART_SetConfig+0x69c>)
 80097e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097e2:	f003 0307 	and.w	r3, r3, #7
 80097e6:	2b05      	cmp	r3, #5
 80097e8:	d826      	bhi.n	8009838 <UART_SetConfig+0x598>
 80097ea:	a201      	add	r2, pc, #4	@ (adr r2, 80097f0 <UART_SetConfig+0x550>)
 80097ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f0:	08009809 	.word	0x08009809
 80097f4:	08009811 	.word	0x08009811
 80097f8:	08009819 	.word	0x08009819
 80097fc:	08009821 	.word	0x08009821
 8009800:	08009829 	.word	0x08009829
 8009804:	08009831 	.word	0x08009831
 8009808:	2302      	movs	r3, #2
 800980a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800980e:	e01a      	b.n	8009846 <UART_SetConfig+0x5a6>
 8009810:	2304      	movs	r3, #4
 8009812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009816:	e016      	b.n	8009846 <UART_SetConfig+0x5a6>
 8009818:	2308      	movs	r3, #8
 800981a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800981e:	e012      	b.n	8009846 <UART_SetConfig+0x5a6>
 8009820:	2310      	movs	r3, #16
 8009822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009826:	e00e      	b.n	8009846 <UART_SetConfig+0x5a6>
 8009828:	2320      	movs	r3, #32
 800982a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800982e:	e00a      	b.n	8009846 <UART_SetConfig+0x5a6>
 8009830:	2340      	movs	r3, #64	@ 0x40
 8009832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009836:	e006      	b.n	8009846 <UART_SetConfig+0x5a6>
 8009838:	2380      	movs	r3, #128	@ 0x80
 800983a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800983e:	e002      	b.n	8009846 <UART_SetConfig+0x5a6>
 8009840:	2380      	movs	r3, #128	@ 0x80
 8009842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a3f      	ldr	r2, [pc, #252]	@ (8009948 <UART_SetConfig+0x6a8>)
 800984c:	4293      	cmp	r3, r2
 800984e:	f040 80f8 	bne.w	8009a42 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009852:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009856:	2b20      	cmp	r3, #32
 8009858:	dc46      	bgt.n	80098e8 <UART_SetConfig+0x648>
 800985a:	2b02      	cmp	r3, #2
 800985c:	f2c0 8082 	blt.w	8009964 <UART_SetConfig+0x6c4>
 8009860:	3b02      	subs	r3, #2
 8009862:	2b1e      	cmp	r3, #30
 8009864:	d87e      	bhi.n	8009964 <UART_SetConfig+0x6c4>
 8009866:	a201      	add	r2, pc, #4	@ (adr r2, 800986c <UART_SetConfig+0x5cc>)
 8009868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800986c:	080098ef 	.word	0x080098ef
 8009870:	08009965 	.word	0x08009965
 8009874:	080098f7 	.word	0x080098f7
 8009878:	08009965 	.word	0x08009965
 800987c:	08009965 	.word	0x08009965
 8009880:	08009965 	.word	0x08009965
 8009884:	08009907 	.word	0x08009907
 8009888:	08009965 	.word	0x08009965
 800988c:	08009965 	.word	0x08009965
 8009890:	08009965 	.word	0x08009965
 8009894:	08009965 	.word	0x08009965
 8009898:	08009965 	.word	0x08009965
 800989c:	08009965 	.word	0x08009965
 80098a0:	08009965 	.word	0x08009965
 80098a4:	08009917 	.word	0x08009917
 80098a8:	08009965 	.word	0x08009965
 80098ac:	08009965 	.word	0x08009965
 80098b0:	08009965 	.word	0x08009965
 80098b4:	08009965 	.word	0x08009965
 80098b8:	08009965 	.word	0x08009965
 80098bc:	08009965 	.word	0x08009965
 80098c0:	08009965 	.word	0x08009965
 80098c4:	08009965 	.word	0x08009965
 80098c8:	08009965 	.word	0x08009965
 80098cc:	08009965 	.word	0x08009965
 80098d0:	08009965 	.word	0x08009965
 80098d4:	08009965 	.word	0x08009965
 80098d8:	08009965 	.word	0x08009965
 80098dc:	08009965 	.word	0x08009965
 80098e0:	08009965 	.word	0x08009965
 80098e4:	08009957 	.word	0x08009957
 80098e8:	2b40      	cmp	r3, #64	@ 0x40
 80098ea:	d037      	beq.n	800995c <UART_SetConfig+0x6bc>
 80098ec:	e03a      	b.n	8009964 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80098ee:	f7fe ff61 	bl	80087b4 <HAL_RCCEx_GetD3PCLK1Freq>
 80098f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80098f4:	e03c      	b.n	8009970 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7fe ff70 	bl	80087e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009904:	e034      	b.n	8009970 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009906:	f107 0318 	add.w	r3, r7, #24
 800990a:	4618      	mov	r0, r3
 800990c:	f7ff f8bc 	bl	8008a88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009910:	69fb      	ldr	r3, [r7, #28]
 8009912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009914:	e02c      	b.n	8009970 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009916:	4b09      	ldr	r3, [pc, #36]	@ (800993c <UART_SetConfig+0x69c>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f003 0320 	and.w	r3, r3, #32
 800991e:	2b00      	cmp	r3, #0
 8009920:	d016      	beq.n	8009950 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009922:	4b06      	ldr	r3, [pc, #24]	@ (800993c <UART_SetConfig+0x69c>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	08db      	lsrs	r3, r3, #3
 8009928:	f003 0303 	and.w	r3, r3, #3
 800992c:	4a07      	ldr	r2, [pc, #28]	@ (800994c <UART_SetConfig+0x6ac>)
 800992e:	fa22 f303 	lsr.w	r3, r2, r3
 8009932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009934:	e01c      	b.n	8009970 <UART_SetConfig+0x6d0>
 8009936:	bf00      	nop
 8009938:	40011400 	.word	0x40011400
 800993c:	58024400 	.word	0x58024400
 8009940:	40007800 	.word	0x40007800
 8009944:	40007c00 	.word	0x40007c00
 8009948:	58000c00 	.word	0x58000c00
 800994c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009950:	4b9d      	ldr	r3, [pc, #628]	@ (8009bc8 <UART_SetConfig+0x928>)
 8009952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009954:	e00c      	b.n	8009970 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009956:	4b9d      	ldr	r3, [pc, #628]	@ (8009bcc <UART_SetConfig+0x92c>)
 8009958:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800995a:	e009      	b.n	8009970 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800995c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009962:	e005      	b.n	8009970 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009964:	2300      	movs	r3, #0
 8009966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009968:	2301      	movs	r3, #1
 800996a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800996e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009970:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009972:	2b00      	cmp	r3, #0
 8009974:	f000 81de 	beq.w	8009d34 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800997c:	4a94      	ldr	r2, [pc, #592]	@ (8009bd0 <UART_SetConfig+0x930>)
 800997e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009982:	461a      	mov	r2, r3
 8009984:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009986:	fbb3 f3f2 	udiv	r3, r3, r2
 800998a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	685a      	ldr	r2, [r3, #4]
 8009990:	4613      	mov	r3, r2
 8009992:	005b      	lsls	r3, r3, #1
 8009994:	4413      	add	r3, r2
 8009996:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009998:	429a      	cmp	r2, r3
 800999a:	d305      	bcc.n	80099a8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80099a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d903      	bls.n	80099b0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80099a8:	2301      	movs	r3, #1
 80099aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80099ae:	e1c1      	b.n	8009d34 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099b2:	2200      	movs	r2, #0
 80099b4:	60bb      	str	r3, [r7, #8]
 80099b6:	60fa      	str	r2, [r7, #12]
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099bc:	4a84      	ldr	r2, [pc, #528]	@ (8009bd0 <UART_SetConfig+0x930>)
 80099be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	2200      	movs	r2, #0
 80099c6:	603b      	str	r3, [r7, #0]
 80099c8:	607a      	str	r2, [r7, #4]
 80099ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80099d2:	f7f6 fcdd 	bl	8000390 <__aeabi_uldivmod>
 80099d6:	4602      	mov	r2, r0
 80099d8:	460b      	mov	r3, r1
 80099da:	4610      	mov	r0, r2
 80099dc:	4619      	mov	r1, r3
 80099de:	f04f 0200 	mov.w	r2, #0
 80099e2:	f04f 0300 	mov.w	r3, #0
 80099e6:	020b      	lsls	r3, r1, #8
 80099e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80099ec:	0202      	lsls	r2, r0, #8
 80099ee:	6979      	ldr	r1, [r7, #20]
 80099f0:	6849      	ldr	r1, [r1, #4]
 80099f2:	0849      	lsrs	r1, r1, #1
 80099f4:	2000      	movs	r0, #0
 80099f6:	460c      	mov	r4, r1
 80099f8:	4605      	mov	r5, r0
 80099fa:	eb12 0804 	adds.w	r8, r2, r4
 80099fe:	eb43 0905 	adc.w	r9, r3, r5
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	2200      	movs	r2, #0
 8009a08:	469a      	mov	sl, r3
 8009a0a:	4693      	mov	fp, r2
 8009a0c:	4652      	mov	r2, sl
 8009a0e:	465b      	mov	r3, fp
 8009a10:	4640      	mov	r0, r8
 8009a12:	4649      	mov	r1, r9
 8009a14:	f7f6 fcbc 	bl	8000390 <__aeabi_uldivmod>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	4613      	mov	r3, r2
 8009a1e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a26:	d308      	bcc.n	8009a3a <UART_SetConfig+0x79a>
 8009a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a2e:	d204      	bcs.n	8009a3a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009a36:	60da      	str	r2, [r3, #12]
 8009a38:	e17c      	b.n	8009d34 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009a40:	e178      	b.n	8009d34 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	69db      	ldr	r3, [r3, #28]
 8009a46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a4a:	f040 80c5 	bne.w	8009bd8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009a4e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009a52:	2b20      	cmp	r3, #32
 8009a54:	dc48      	bgt.n	8009ae8 <UART_SetConfig+0x848>
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	db7b      	blt.n	8009b52 <UART_SetConfig+0x8b2>
 8009a5a:	2b20      	cmp	r3, #32
 8009a5c:	d879      	bhi.n	8009b52 <UART_SetConfig+0x8b2>
 8009a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8009a64 <UART_SetConfig+0x7c4>)
 8009a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a64:	08009aef 	.word	0x08009aef
 8009a68:	08009af7 	.word	0x08009af7
 8009a6c:	08009b53 	.word	0x08009b53
 8009a70:	08009b53 	.word	0x08009b53
 8009a74:	08009aff 	.word	0x08009aff
 8009a78:	08009b53 	.word	0x08009b53
 8009a7c:	08009b53 	.word	0x08009b53
 8009a80:	08009b53 	.word	0x08009b53
 8009a84:	08009b0f 	.word	0x08009b0f
 8009a88:	08009b53 	.word	0x08009b53
 8009a8c:	08009b53 	.word	0x08009b53
 8009a90:	08009b53 	.word	0x08009b53
 8009a94:	08009b53 	.word	0x08009b53
 8009a98:	08009b53 	.word	0x08009b53
 8009a9c:	08009b53 	.word	0x08009b53
 8009aa0:	08009b53 	.word	0x08009b53
 8009aa4:	08009b1f 	.word	0x08009b1f
 8009aa8:	08009b53 	.word	0x08009b53
 8009aac:	08009b53 	.word	0x08009b53
 8009ab0:	08009b53 	.word	0x08009b53
 8009ab4:	08009b53 	.word	0x08009b53
 8009ab8:	08009b53 	.word	0x08009b53
 8009abc:	08009b53 	.word	0x08009b53
 8009ac0:	08009b53 	.word	0x08009b53
 8009ac4:	08009b53 	.word	0x08009b53
 8009ac8:	08009b53 	.word	0x08009b53
 8009acc:	08009b53 	.word	0x08009b53
 8009ad0:	08009b53 	.word	0x08009b53
 8009ad4:	08009b53 	.word	0x08009b53
 8009ad8:	08009b53 	.word	0x08009b53
 8009adc:	08009b53 	.word	0x08009b53
 8009ae0:	08009b53 	.word	0x08009b53
 8009ae4:	08009b45 	.word	0x08009b45
 8009ae8:	2b40      	cmp	r3, #64	@ 0x40
 8009aea:	d02e      	beq.n	8009b4a <UART_SetConfig+0x8aa>
 8009aec:	e031      	b.n	8009b52 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009aee:	f7fd fc2b 	bl	8007348 <HAL_RCC_GetPCLK1Freq>
 8009af2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009af4:	e033      	b.n	8009b5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009af6:	f7fd fc3d 	bl	8007374 <HAL_RCC_GetPCLK2Freq>
 8009afa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009afc:	e02f      	b.n	8009b5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009afe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b02:	4618      	mov	r0, r3
 8009b04:	f7fe fe6c 	bl	80087e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b0c:	e027      	b.n	8009b5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b0e:	f107 0318 	add.w	r3, r7, #24
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7fe ffb8 	bl	8008a88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009b18:	69fb      	ldr	r3, [r7, #28]
 8009b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b1c:	e01f      	b.n	8009b5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b1e:	4b2d      	ldr	r3, [pc, #180]	@ (8009bd4 <UART_SetConfig+0x934>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f003 0320 	and.w	r3, r3, #32
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d009      	beq.n	8009b3e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009b2a:	4b2a      	ldr	r3, [pc, #168]	@ (8009bd4 <UART_SetConfig+0x934>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	08db      	lsrs	r3, r3, #3
 8009b30:	f003 0303 	and.w	r3, r3, #3
 8009b34:	4a24      	ldr	r2, [pc, #144]	@ (8009bc8 <UART_SetConfig+0x928>)
 8009b36:	fa22 f303 	lsr.w	r3, r2, r3
 8009b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009b3c:	e00f      	b.n	8009b5e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009b3e:	4b22      	ldr	r3, [pc, #136]	@ (8009bc8 <UART_SetConfig+0x928>)
 8009b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b42:	e00c      	b.n	8009b5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009b44:	4b21      	ldr	r3, [pc, #132]	@ (8009bcc <UART_SetConfig+0x92c>)
 8009b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b48:	e009      	b.n	8009b5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b50:	e005      	b.n	8009b5e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009b52:	2300      	movs	r3, #0
 8009b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009b56:	2301      	movs	r3, #1
 8009b58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009b5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009b5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	f000 80e7 	beq.w	8009d34 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b6a:	4a19      	ldr	r2, [pc, #100]	@ (8009bd0 <UART_SetConfig+0x930>)
 8009b6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b70:	461a      	mov	r2, r3
 8009b72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b74:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b78:	005a      	lsls	r2, r3, #1
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	085b      	lsrs	r3, r3, #1
 8009b80:	441a      	add	r2, r3
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b8e:	2b0f      	cmp	r3, #15
 8009b90:	d916      	bls.n	8009bc0 <UART_SetConfig+0x920>
 8009b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b98:	d212      	bcs.n	8009bc0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	f023 030f 	bic.w	r3, r3, #15
 8009ba2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ba6:	085b      	lsrs	r3, r3, #1
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	f003 0307 	and.w	r3, r3, #7
 8009bae:	b29a      	uxth	r2, r3
 8009bb0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009bbc:	60da      	str	r2, [r3, #12]
 8009bbe:	e0b9      	b.n	8009d34 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009bc6:	e0b5      	b.n	8009d34 <UART_SetConfig+0xa94>
 8009bc8:	03d09000 	.word	0x03d09000
 8009bcc:	003d0900 	.word	0x003d0900
 8009bd0:	0800c074 	.word	0x0800c074
 8009bd4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009bd8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009bdc:	2b20      	cmp	r3, #32
 8009bde:	dc49      	bgt.n	8009c74 <UART_SetConfig+0x9d4>
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	db7c      	blt.n	8009cde <UART_SetConfig+0xa3e>
 8009be4:	2b20      	cmp	r3, #32
 8009be6:	d87a      	bhi.n	8009cde <UART_SetConfig+0xa3e>
 8009be8:	a201      	add	r2, pc, #4	@ (adr r2, 8009bf0 <UART_SetConfig+0x950>)
 8009bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bee:	bf00      	nop
 8009bf0:	08009c7b 	.word	0x08009c7b
 8009bf4:	08009c83 	.word	0x08009c83
 8009bf8:	08009cdf 	.word	0x08009cdf
 8009bfc:	08009cdf 	.word	0x08009cdf
 8009c00:	08009c8b 	.word	0x08009c8b
 8009c04:	08009cdf 	.word	0x08009cdf
 8009c08:	08009cdf 	.word	0x08009cdf
 8009c0c:	08009cdf 	.word	0x08009cdf
 8009c10:	08009c9b 	.word	0x08009c9b
 8009c14:	08009cdf 	.word	0x08009cdf
 8009c18:	08009cdf 	.word	0x08009cdf
 8009c1c:	08009cdf 	.word	0x08009cdf
 8009c20:	08009cdf 	.word	0x08009cdf
 8009c24:	08009cdf 	.word	0x08009cdf
 8009c28:	08009cdf 	.word	0x08009cdf
 8009c2c:	08009cdf 	.word	0x08009cdf
 8009c30:	08009cab 	.word	0x08009cab
 8009c34:	08009cdf 	.word	0x08009cdf
 8009c38:	08009cdf 	.word	0x08009cdf
 8009c3c:	08009cdf 	.word	0x08009cdf
 8009c40:	08009cdf 	.word	0x08009cdf
 8009c44:	08009cdf 	.word	0x08009cdf
 8009c48:	08009cdf 	.word	0x08009cdf
 8009c4c:	08009cdf 	.word	0x08009cdf
 8009c50:	08009cdf 	.word	0x08009cdf
 8009c54:	08009cdf 	.word	0x08009cdf
 8009c58:	08009cdf 	.word	0x08009cdf
 8009c5c:	08009cdf 	.word	0x08009cdf
 8009c60:	08009cdf 	.word	0x08009cdf
 8009c64:	08009cdf 	.word	0x08009cdf
 8009c68:	08009cdf 	.word	0x08009cdf
 8009c6c:	08009cdf 	.word	0x08009cdf
 8009c70:	08009cd1 	.word	0x08009cd1
 8009c74:	2b40      	cmp	r3, #64	@ 0x40
 8009c76:	d02e      	beq.n	8009cd6 <UART_SetConfig+0xa36>
 8009c78:	e031      	b.n	8009cde <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c7a:	f7fd fb65 	bl	8007348 <HAL_RCC_GetPCLK1Freq>
 8009c7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c80:	e033      	b.n	8009cea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c82:	f7fd fb77 	bl	8007374 <HAL_RCC_GetPCLK2Freq>
 8009c86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c88:	e02f      	b.n	8009cea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7fe fda6 	bl	80087e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c98:	e027      	b.n	8009cea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c9a:	f107 0318 	add.w	r3, r7, #24
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f7fe fef2 	bl	8008a88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009ca4:	69fb      	ldr	r3, [r7, #28]
 8009ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ca8:	e01f      	b.n	8009cea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009caa:	4b2d      	ldr	r3, [pc, #180]	@ (8009d60 <UART_SetConfig+0xac0>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f003 0320 	and.w	r3, r3, #32
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d009      	beq.n	8009cca <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009cb6:	4b2a      	ldr	r3, [pc, #168]	@ (8009d60 <UART_SetConfig+0xac0>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	08db      	lsrs	r3, r3, #3
 8009cbc:	f003 0303 	and.w	r3, r3, #3
 8009cc0:	4a28      	ldr	r2, [pc, #160]	@ (8009d64 <UART_SetConfig+0xac4>)
 8009cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8009cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009cc8:	e00f      	b.n	8009cea <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009cca:	4b26      	ldr	r3, [pc, #152]	@ (8009d64 <UART_SetConfig+0xac4>)
 8009ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cce:	e00c      	b.n	8009cea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009cd0:	4b25      	ldr	r3, [pc, #148]	@ (8009d68 <UART_SetConfig+0xac8>)
 8009cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cd4:	e009      	b.n	8009cea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cdc:	e005      	b.n	8009cea <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009ce8:	bf00      	nop
    }

    if (pclk != 0U)
 8009cea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d021      	beq.n	8009d34 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cf4:	4a1d      	ldr	r2, [pc, #116]	@ (8009d6c <UART_SetConfig+0xacc>)
 8009cf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cfe:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	085b      	lsrs	r3, r3, #1
 8009d08:	441a      	add	r2, r3
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d12:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d16:	2b0f      	cmp	r3, #15
 8009d18:	d909      	bls.n	8009d2e <UART_SetConfig+0xa8e>
 8009d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d20:	d205      	bcs.n	8009d2e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d24:	b29a      	uxth	r2, r3
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	60da      	str	r2, [r3, #12]
 8009d2c:	e002      	b.n	8009d34 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009d2e:	2301      	movs	r3, #1
 8009d30:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	2201      	movs	r2, #1
 8009d38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	2200      	movs	r2, #0
 8009d48:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009d50:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3748      	adds	r7, #72	@ 0x48
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d5e:	bf00      	nop
 8009d60:	58024400 	.word	0x58024400
 8009d64:	03d09000 	.word	0x03d09000
 8009d68:	003d0900 	.word	0x003d0900
 8009d6c:	0800c074 	.word	0x0800c074

08009d70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b083      	sub	sp, #12
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d7c:	f003 0308 	and.w	r3, r3, #8
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d00a      	beq.n	8009d9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	430a      	orrs	r2, r1
 8009d98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d9e:	f003 0301 	and.w	r3, r3, #1
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d00a      	beq.n	8009dbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	430a      	orrs	r2, r1
 8009dba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dc0:	f003 0302 	and.w	r3, r3, #2
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d00a      	beq.n	8009dde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	430a      	orrs	r2, r1
 8009ddc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009de2:	f003 0304 	and.w	r3, r3, #4
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d00a      	beq.n	8009e00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	430a      	orrs	r2, r1
 8009dfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e04:	f003 0310 	and.w	r3, r3, #16
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d00a      	beq.n	8009e22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	689b      	ldr	r3, [r3, #8]
 8009e12:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	430a      	orrs	r2, r1
 8009e20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e26:	f003 0320 	and.w	r3, r3, #32
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d00a      	beq.n	8009e44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	430a      	orrs	r2, r1
 8009e42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d01a      	beq.n	8009e86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	430a      	orrs	r2, r1
 8009e64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e6e:	d10a      	bne.n	8009e86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	430a      	orrs	r2, r1
 8009e84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d00a      	beq.n	8009ea8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	430a      	orrs	r2, r1
 8009ea6:	605a      	str	r2, [r3, #4]
  }
}
 8009ea8:	bf00      	nop
 8009eaa:	370c      	adds	r7, #12
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b098      	sub	sp, #96	@ 0x60
 8009eb8:	af02      	add	r7, sp, #8
 8009eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ec4:	f7f8 fa34 	bl	8002330 <HAL_GetTick>
 8009ec8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f003 0308 	and.w	r3, r3, #8
 8009ed4:	2b08      	cmp	r3, #8
 8009ed6:	d12f      	bne.n	8009f38 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ed8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009edc:	9300      	str	r3, [sp, #0]
 8009ede:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 f88e 	bl	800a008 <UART_WaitOnFlagUntilTimeout>
 8009eec:	4603      	mov	r3, r0
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d022      	beq.n	8009f38 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009efa:	e853 3f00 	ldrex	r3, [r3]
 8009efe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f06:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	461a      	mov	r2, r3
 8009f0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f10:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f12:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f18:	e841 2300 	strex	r3, r2, [r1]
 8009f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d1e6      	bne.n	8009ef2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2220      	movs	r2, #32
 8009f28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f34:	2303      	movs	r3, #3
 8009f36:	e063      	b.n	800a000 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f003 0304 	and.w	r3, r3, #4
 8009f42:	2b04      	cmp	r3, #4
 8009f44:	d149      	bne.n	8009fda <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f46:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009f4a:	9300      	str	r3, [sp, #0]
 8009f4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 f857 	bl	800a008 <UART_WaitOnFlagUntilTimeout>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d03c      	beq.n	8009fda <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f68:	e853 3f00 	ldrex	r3, [r3]
 8009f6c:	623b      	str	r3, [r7, #32]
   return(result);
 8009f6e:	6a3b      	ldr	r3, [r7, #32]
 8009f70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f80:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f86:	e841 2300 	strex	r3, r2, [r1]
 8009f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d1e6      	bne.n	8009f60 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	3308      	adds	r3, #8
 8009f98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	e853 3f00 	ldrex	r3, [r3]
 8009fa0:	60fb      	str	r3, [r7, #12]
   return(result);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	f023 0301 	bic.w	r3, r3, #1
 8009fa8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	3308      	adds	r3, #8
 8009fb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009fb2:	61fa      	str	r2, [r7, #28]
 8009fb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb6:	69b9      	ldr	r1, [r7, #24]
 8009fb8:	69fa      	ldr	r2, [r7, #28]
 8009fba:	e841 2300 	strex	r3, r2, [r1]
 8009fbe:	617b      	str	r3, [r7, #20]
   return(result);
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d1e5      	bne.n	8009f92 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2220      	movs	r2, #32
 8009fca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009fd6:	2303      	movs	r3, #3
 8009fd8:	e012      	b.n	800a000 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2220      	movs	r2, #32
 8009fde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2220      	movs	r2, #32
 8009fe6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ffe:	2300      	movs	r3, #0
}
 800a000:	4618      	mov	r0, r3
 800a002:	3758      	adds	r7, #88	@ 0x58
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	60b9      	str	r1, [r7, #8]
 800a012:	603b      	str	r3, [r7, #0]
 800a014:	4613      	mov	r3, r2
 800a016:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a018:	e04f      	b.n	800a0ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a01a:	69bb      	ldr	r3, [r7, #24]
 800a01c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a020:	d04b      	beq.n	800a0ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a022:	f7f8 f985 	bl	8002330 <HAL_GetTick>
 800a026:	4602      	mov	r2, r0
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	1ad3      	subs	r3, r2, r3
 800a02c:	69ba      	ldr	r2, [r7, #24]
 800a02e:	429a      	cmp	r2, r3
 800a030:	d302      	bcc.n	800a038 <UART_WaitOnFlagUntilTimeout+0x30>
 800a032:	69bb      	ldr	r3, [r7, #24]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d101      	bne.n	800a03c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a038:	2303      	movs	r3, #3
 800a03a:	e04e      	b.n	800a0da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f003 0304 	and.w	r3, r3, #4
 800a046:	2b00      	cmp	r3, #0
 800a048:	d037      	beq.n	800a0ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	2b80      	cmp	r3, #128	@ 0x80
 800a04e:	d034      	beq.n	800a0ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	2b40      	cmp	r3, #64	@ 0x40
 800a054:	d031      	beq.n	800a0ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	69db      	ldr	r3, [r3, #28]
 800a05c:	f003 0308 	and.w	r3, r3, #8
 800a060:	2b08      	cmp	r3, #8
 800a062:	d110      	bne.n	800a086 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	2208      	movs	r2, #8
 800a06a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a06c:	68f8      	ldr	r0, [r7, #12]
 800a06e:	f000 f921 	bl	800a2b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2208      	movs	r2, #8
 800a076:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2200      	movs	r2, #0
 800a07e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a082:	2301      	movs	r3, #1
 800a084:	e029      	b.n	800a0da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	69db      	ldr	r3, [r3, #28]
 800a08c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a090:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a094:	d111      	bne.n	800a0ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a09e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a0a0:	68f8      	ldr	r0, [r7, #12]
 800a0a2:	f000 f907 	bl	800a2b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2220      	movs	r2, #32
 800a0aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a0b6:	2303      	movs	r3, #3
 800a0b8:	e00f      	b.n	800a0da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	69da      	ldr	r2, [r3, #28]
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	4013      	ands	r3, r2
 800a0c4:	68ba      	ldr	r2, [r7, #8]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	bf0c      	ite	eq
 800a0ca:	2301      	moveq	r3, #1
 800a0cc:	2300      	movne	r3, #0
 800a0ce:	b2db      	uxtb	r3, r3
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	79fb      	ldrb	r3, [r7, #7]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d0a0      	beq.n	800a01a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a0d8:	2300      	movs	r3, #0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3710      	adds	r7, #16
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
	...

0800a0e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b096      	sub	sp, #88	@ 0x58
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	60b9      	str	r1, [r7, #8]
 800a0ee:	4613      	mov	r3, r2
 800a0f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	68ba      	ldr	r2, [r7, #8]
 800a0f6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	88fa      	ldrh	r2, [r7, #6]
 800a0fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2200      	movs	r2, #0
 800a104:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2222      	movs	r2, #34	@ 0x22
 800a10c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a116:	2b00      	cmp	r3, #0
 800a118:	d02d      	beq.n	800a176 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a120:	4a40      	ldr	r2, [pc, #256]	@ (800a224 <UART_Start_Receive_DMA+0x140>)
 800a122:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a12a:	4a3f      	ldr	r2, [pc, #252]	@ (800a228 <UART_Start_Receive_DMA+0x144>)
 800a12c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a134:	4a3d      	ldr	r2, [pc, #244]	@ (800a22c <UART_Start_Receive_DMA+0x148>)
 800a136:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a13e:	2200      	movs	r2, #0
 800a140:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	3324      	adds	r3, #36	@ 0x24
 800a14e:	4619      	mov	r1, r3
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a154:	461a      	mov	r2, r3
 800a156:	88fb      	ldrh	r3, [r7, #6]
 800a158:	f7f8 fe18 	bl	8002d8c <HAL_DMA_Start_IT>
 800a15c:	4603      	mov	r3, r0
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d009      	beq.n	800a176 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2210      	movs	r2, #16
 800a166:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2220      	movs	r2, #32
 800a16e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a172:	2301      	movs	r3, #1
 800a174:	e051      	b.n	800a21a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	691b      	ldr	r3, [r3, #16]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d018      	beq.n	800a1b0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a184:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a186:	e853 3f00 	ldrex	r3, [r3]
 800a18a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a18c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a18e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a192:	657b      	str	r3, [r7, #84]	@ 0x54
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	461a      	mov	r2, r3
 800a19a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a19c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a19e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a1a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a1a4:	e841 2300 	strex	r3, r2, [r1]
 800a1a8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a1aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d1e6      	bne.n	800a17e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	3308      	adds	r3, #8
 800a1b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ba:	e853 3f00 	ldrex	r3, [r3]
 800a1be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a1c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1c2:	f043 0301 	orr.w	r3, r3, #1
 800a1c6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	3308      	adds	r3, #8
 800a1ce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a1d0:	637a      	str	r2, [r7, #52]	@ 0x34
 800a1d2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a1d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a1d8:	e841 2300 	strex	r3, r2, [r1]
 800a1dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a1de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d1e5      	bne.n	800a1b0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	3308      	adds	r3, #8
 800a1ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	e853 3f00 	ldrex	r3, [r3]
 800a1f2:	613b      	str	r3, [r7, #16]
   return(result);
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	3308      	adds	r3, #8
 800a202:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a204:	623a      	str	r2, [r7, #32]
 800a206:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a208:	69f9      	ldr	r1, [r7, #28]
 800a20a:	6a3a      	ldr	r2, [r7, #32]
 800a20c:	e841 2300 	strex	r3, r2, [r1]
 800a210:	61bb      	str	r3, [r7, #24]
   return(result);
 800a212:	69bb      	ldr	r3, [r7, #24]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d1e5      	bne.n	800a1e4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a218:	2300      	movs	r3, #0
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3758      	adds	r7, #88	@ 0x58
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
 800a222:	bf00      	nop
 800a224:	0800a381 	.word	0x0800a381
 800a228:	0800a4a9 	.word	0x0800a4a9
 800a22c:	0800a4e7 	.word	0x0800a4e7

0800a230 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a230:	b480      	push	{r7}
 800a232:	b08f      	sub	sp, #60	@ 0x3c
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a23e:	6a3b      	ldr	r3, [r7, #32]
 800a240:	e853 3f00 	ldrex	r3, [r3]
 800a244:	61fb      	str	r3, [r7, #28]
   return(result);
 800a246:	69fb      	ldr	r3, [r7, #28]
 800a248:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a24c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	461a      	mov	r2, r3
 800a254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a256:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a258:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a25a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a25c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a25e:	e841 2300 	strex	r3, r2, [r1]
 800a262:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a266:	2b00      	cmp	r3, #0
 800a268:	d1e6      	bne.n	800a238 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	3308      	adds	r3, #8
 800a270:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	e853 3f00 	ldrex	r3, [r3]
 800a278:	60bb      	str	r3, [r7, #8]
   return(result);
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a280:	633b      	str	r3, [r7, #48]	@ 0x30
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	3308      	adds	r3, #8
 800a288:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a28a:	61ba      	str	r2, [r7, #24]
 800a28c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a28e:	6979      	ldr	r1, [r7, #20]
 800a290:	69ba      	ldr	r2, [r7, #24]
 800a292:	e841 2300 	strex	r3, r2, [r1]
 800a296:	613b      	str	r3, [r7, #16]
   return(result);
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d1e5      	bne.n	800a26a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2220      	movs	r2, #32
 800a2a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a2a6:	bf00      	nop
 800a2a8:	373c      	adds	r7, #60	@ 0x3c
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr
	...

0800a2b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b095      	sub	sp, #84	@ 0x54
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2c4:	e853 3f00 	ldrex	r3, [r3]
 800a2c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a2d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2da:	643b      	str	r3, [r7, #64]	@ 0x40
 800a2dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a2e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a2e2:	e841 2300 	strex	r3, r2, [r1]
 800a2e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a2e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d1e6      	bne.n	800a2bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	3308      	adds	r3, #8
 800a2f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f6:	6a3b      	ldr	r3, [r7, #32]
 800a2f8:	e853 3f00 	ldrex	r3, [r3]
 800a2fc:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2fe:	69fa      	ldr	r2, [r7, #28]
 800a300:	4b1e      	ldr	r3, [pc, #120]	@ (800a37c <UART_EndRxTransfer+0xc8>)
 800a302:	4013      	ands	r3, r2
 800a304:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	3308      	adds	r3, #8
 800a30c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a30e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a310:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a312:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a314:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a316:	e841 2300 	strex	r3, r2, [r1]
 800a31a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a31c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d1e5      	bne.n	800a2ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a326:	2b01      	cmp	r3, #1
 800a328:	d118      	bne.n	800a35c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	e853 3f00 	ldrex	r3, [r3]
 800a336:	60bb      	str	r3, [r7, #8]
   return(result);
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	f023 0310 	bic.w	r3, r3, #16
 800a33e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	461a      	mov	r2, r3
 800a346:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a348:	61bb      	str	r3, [r7, #24]
 800a34a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a34c:	6979      	ldr	r1, [r7, #20]
 800a34e:	69ba      	ldr	r2, [r7, #24]
 800a350:	e841 2300 	strex	r3, r2, [r1]
 800a354:	613b      	str	r3, [r7, #16]
   return(result);
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d1e6      	bne.n	800a32a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2220      	movs	r2, #32
 800a360:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2200      	movs	r2, #0
 800a368:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2200      	movs	r2, #0
 800a36e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a370:	bf00      	nop
 800a372:	3754      	adds	r7, #84	@ 0x54
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr
 800a37c:	effffffe 	.word	0xeffffffe

0800a380 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b09c      	sub	sp, #112	@ 0x70
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a38c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	69db      	ldr	r3, [r3, #28]
 800a392:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a396:	d071      	beq.n	800a47c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a398:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a39a:	2200      	movs	r2, #0
 800a39c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3a8:	e853 3f00 	ldrex	r3, [r3]
 800a3ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a3ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a3b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a3b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a3b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a3be:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a3c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a3c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a3c6:	e841 2300 	strex	r3, r2, [r1]
 800a3ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a3cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d1e6      	bne.n	800a3a0 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	3308      	adds	r3, #8
 800a3d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3dc:	e853 3f00 	ldrex	r3, [r3]
 800a3e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a3e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3e4:	f023 0301 	bic.w	r3, r3, #1
 800a3e8:	667b      	str	r3, [r7, #100]	@ 0x64
 800a3ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	3308      	adds	r3, #8
 800a3f0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a3f2:	647a      	str	r2, [r7, #68]	@ 0x44
 800a3f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a3f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a3fa:	e841 2300 	strex	r3, r2, [r1]
 800a3fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a400:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a402:	2b00      	cmp	r3, #0
 800a404:	d1e5      	bne.n	800a3d2 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a406:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	3308      	adds	r3, #8
 800a40c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a40e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a410:	e853 3f00 	ldrex	r3, [r3]
 800a414:	623b      	str	r3, [r7, #32]
   return(result);
 800a416:	6a3b      	ldr	r3, [r7, #32]
 800a418:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a41c:	663b      	str	r3, [r7, #96]	@ 0x60
 800a41e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	3308      	adds	r3, #8
 800a424:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a426:	633a      	str	r2, [r7, #48]	@ 0x30
 800a428:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a42a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a42c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a42e:	e841 2300 	strex	r3, r2, [r1]
 800a432:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a436:	2b00      	cmp	r3, #0
 800a438:	d1e5      	bne.n	800a406 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a43a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a43c:	2220      	movs	r2, #32
 800a43e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a442:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a444:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a446:	2b01      	cmp	r3, #1
 800a448:	d118      	bne.n	800a47c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a44a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	e853 3f00 	ldrex	r3, [r3]
 800a456:	60fb      	str	r3, [r7, #12]
   return(result);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f023 0310 	bic.w	r3, r3, #16
 800a45e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a460:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	461a      	mov	r2, r3
 800a466:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a468:	61fb      	str	r3, [r7, #28]
 800a46a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a46c:	69b9      	ldr	r1, [r7, #24]
 800a46e:	69fa      	ldr	r2, [r7, #28]
 800a470:	e841 2300 	strex	r3, r2, [r1]
 800a474:	617b      	str	r3, [r7, #20]
   return(result);
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d1e6      	bne.n	800a44a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a47c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a47e:	2200      	movs	r2, #0
 800a480:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a482:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a484:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a486:	2b01      	cmp	r3, #1
 800a488:	d107      	bne.n	800a49a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a48a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a48c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a490:	4619      	mov	r1, r3
 800a492:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a494:	f7fe fef8 	bl	8009288 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a498:	e002      	b.n	800a4a0 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a49a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a49c:	f7fe fed6 	bl	800924c <HAL_UART_RxCpltCallback>
}
 800a4a0:	bf00      	nop
 800a4a2:	3770      	adds	r7, #112	@ 0x70
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4b4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4c0:	2b01      	cmp	r3, #1
 800a4c2:	d109      	bne.n	800a4d8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a4ca:	085b      	lsrs	r3, r3, #1
 800a4cc:	b29b      	uxth	r3, r3
 800a4ce:	4619      	mov	r1, r3
 800a4d0:	68f8      	ldr	r0, [r7, #12]
 800a4d2:	f7fe fed9 	bl	8009288 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a4d6:	e002      	b.n	800a4de <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a4d8:	68f8      	ldr	r0, [r7, #12]
 800a4da:	f7fe fec1 	bl	8009260 <HAL_UART_RxHalfCpltCallback>
}
 800a4de:	bf00      	nop
 800a4e0:	3710      	adds	r7, #16
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a4e6:	b580      	push	{r7, lr}
 800a4e8:	b086      	sub	sp, #24
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4f2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4fa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a502:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	689b      	ldr	r3, [r3, #8]
 800a50a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a50e:	2b80      	cmp	r3, #128	@ 0x80
 800a510:	d109      	bne.n	800a526 <UART_DMAError+0x40>
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	2b21      	cmp	r3, #33	@ 0x21
 800a516:	d106      	bne.n	800a526 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	2200      	movs	r2, #0
 800a51c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a520:	6978      	ldr	r0, [r7, #20]
 800a522:	f7ff fe85 	bl	800a230 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	689b      	ldr	r3, [r3, #8]
 800a52c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a530:	2b40      	cmp	r3, #64	@ 0x40
 800a532:	d109      	bne.n	800a548 <UART_DMAError+0x62>
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2b22      	cmp	r3, #34	@ 0x22
 800a538:	d106      	bne.n	800a548 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	2200      	movs	r2, #0
 800a53e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a542:	6978      	ldr	r0, [r7, #20]
 800a544:	f7ff feb6 	bl	800a2b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a54e:	f043 0210 	orr.w	r2, r3, #16
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a558:	6978      	ldr	r0, [r7, #20]
 800a55a:	f7fe fe8b 	bl	8009274 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a55e:	bf00      	nop
 800a560:	3718      	adds	r7, #24
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}

0800a566 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a566:	b480      	push	{r7}
 800a568:	b085      	sub	sp, #20
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a574:	2b01      	cmp	r3, #1
 800a576:	d101      	bne.n	800a57c <HAL_UARTEx_DisableFifoMode+0x16>
 800a578:	2302      	movs	r3, #2
 800a57a:	e027      	b.n	800a5cc <HAL_UARTEx_DisableFifoMode+0x66>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2201      	movs	r2, #1
 800a580:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2224      	movs	r2, #36	@ 0x24
 800a588:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	681a      	ldr	r2, [r3, #0]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f022 0201 	bic.w	r2, r2, #1
 800a5a2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a5aa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	68fa      	ldr	r2, [r7, #12]
 800a5b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2220      	movs	r2, #32
 800a5be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a5ca:	2300      	movs	r3, #0
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3714      	adds	r7, #20
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr

0800a5d8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b084      	sub	sp, #16
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d101      	bne.n	800a5f0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a5ec:	2302      	movs	r3, #2
 800a5ee:	e02d      	b.n	800a64c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2224      	movs	r2, #36	@ 0x24
 800a5fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f022 0201 	bic.w	r2, r2, #1
 800a616:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	689b      	ldr	r3, [r3, #8]
 800a61e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	683a      	ldr	r2, [r7, #0]
 800a628:	430a      	orrs	r2, r1
 800a62a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f000 f84f 	bl	800a6d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	68fa      	ldr	r2, [r7, #12]
 800a638:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2220      	movs	r2, #32
 800a63e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2200      	movs	r2, #0
 800a646:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a64a:	2300      	movs	r3, #0
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3710      	adds	r7, #16
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a664:	2b01      	cmp	r3, #1
 800a666:	d101      	bne.n	800a66c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a668:	2302      	movs	r3, #2
 800a66a:	e02d      	b.n	800a6c8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2201      	movs	r2, #1
 800a670:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2224      	movs	r2, #36	@ 0x24
 800a678:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	681a      	ldr	r2, [r3, #0]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f022 0201 	bic.w	r2, r2, #1
 800a692:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	689b      	ldr	r3, [r3, #8]
 800a69a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	683a      	ldr	r2, [r7, #0]
 800a6a4:	430a      	orrs	r2, r1
 800a6a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f000 f811 	bl	800a6d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	68fa      	ldr	r2, [r7, #12]
 800a6b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2220      	movs	r2, #32
 800a6ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a6c6:	2300      	movs	r3, #0
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3710      	adds	r7, #16
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b085      	sub	sp, #20
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d108      	bne.n	800a6f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a6f0:	e031      	b.n	800a756 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a6f2:	2310      	movs	r3, #16
 800a6f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a6f6:	2310      	movs	r3, #16
 800a6f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	689b      	ldr	r3, [r3, #8]
 800a700:	0e5b      	lsrs	r3, r3, #25
 800a702:	b2db      	uxtb	r3, r3
 800a704:	f003 0307 	and.w	r3, r3, #7
 800a708:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	689b      	ldr	r3, [r3, #8]
 800a710:	0f5b      	lsrs	r3, r3, #29
 800a712:	b2db      	uxtb	r3, r3
 800a714:	f003 0307 	and.w	r3, r3, #7
 800a718:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a71a:	7bbb      	ldrb	r3, [r7, #14]
 800a71c:	7b3a      	ldrb	r2, [r7, #12]
 800a71e:	4911      	ldr	r1, [pc, #68]	@ (800a764 <UARTEx_SetNbDataToProcess+0x94>)
 800a720:	5c8a      	ldrb	r2, [r1, r2]
 800a722:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a726:	7b3a      	ldrb	r2, [r7, #12]
 800a728:	490f      	ldr	r1, [pc, #60]	@ (800a768 <UARTEx_SetNbDataToProcess+0x98>)
 800a72a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a72c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a730:	b29a      	uxth	r2, r3
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a738:	7bfb      	ldrb	r3, [r7, #15]
 800a73a:	7b7a      	ldrb	r2, [r7, #13]
 800a73c:	4909      	ldr	r1, [pc, #36]	@ (800a764 <UARTEx_SetNbDataToProcess+0x94>)
 800a73e:	5c8a      	ldrb	r2, [r1, r2]
 800a740:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a744:	7b7a      	ldrb	r2, [r7, #13]
 800a746:	4908      	ldr	r1, [pc, #32]	@ (800a768 <UARTEx_SetNbDataToProcess+0x98>)
 800a748:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a74a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a74e:	b29a      	uxth	r2, r3
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a756:	bf00      	nop
 800a758:	3714      	adds	r7, #20
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr
 800a762:	bf00      	nop
 800a764:	0800c08c 	.word	0x0800c08c
 800a768:	0800c094 	.word	0x0800c094

0800a76c <__assert_func>:
 800a76c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a76e:	4614      	mov	r4, r2
 800a770:	461a      	mov	r2, r3
 800a772:	4b09      	ldr	r3, [pc, #36]	@ (800a798 <__assert_func+0x2c>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4605      	mov	r5, r0
 800a778:	68d8      	ldr	r0, [r3, #12]
 800a77a:	b14c      	cbz	r4, 800a790 <__assert_func+0x24>
 800a77c:	4b07      	ldr	r3, [pc, #28]	@ (800a79c <__assert_func+0x30>)
 800a77e:	9100      	str	r1, [sp, #0]
 800a780:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a784:	4906      	ldr	r1, [pc, #24]	@ (800a7a0 <__assert_func+0x34>)
 800a786:	462b      	mov	r3, r5
 800a788:	f000 f8b2 	bl	800a8f0 <fiprintf>
 800a78c:	f000 fb0f 	bl	800adae <abort>
 800a790:	4b04      	ldr	r3, [pc, #16]	@ (800a7a4 <__assert_func+0x38>)
 800a792:	461c      	mov	r4, r3
 800a794:	e7f3      	b.n	800a77e <__assert_func+0x12>
 800a796:	bf00      	nop
 800a798:	24000034 	.word	0x24000034
 800a79c:	0800c09c 	.word	0x0800c09c
 800a7a0:	0800c0a9 	.word	0x0800c0a9
 800a7a4:	0800c0d7 	.word	0x0800c0d7

0800a7a8 <std>:
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	b510      	push	{r4, lr}
 800a7ac:	4604      	mov	r4, r0
 800a7ae:	e9c0 3300 	strd	r3, r3, [r0]
 800a7b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a7b6:	6083      	str	r3, [r0, #8]
 800a7b8:	8181      	strh	r1, [r0, #12]
 800a7ba:	6643      	str	r3, [r0, #100]	@ 0x64
 800a7bc:	81c2      	strh	r2, [r0, #14]
 800a7be:	6183      	str	r3, [r0, #24]
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	2208      	movs	r2, #8
 800a7c4:	305c      	adds	r0, #92	@ 0x5c
 800a7c6:	f000 fa69 	bl	800ac9c <memset>
 800a7ca:	4b0d      	ldr	r3, [pc, #52]	@ (800a800 <std+0x58>)
 800a7cc:	6263      	str	r3, [r4, #36]	@ 0x24
 800a7ce:	4b0d      	ldr	r3, [pc, #52]	@ (800a804 <std+0x5c>)
 800a7d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a7d2:	4b0d      	ldr	r3, [pc, #52]	@ (800a808 <std+0x60>)
 800a7d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a7d6:	4b0d      	ldr	r3, [pc, #52]	@ (800a80c <std+0x64>)
 800a7d8:	6323      	str	r3, [r4, #48]	@ 0x30
 800a7da:	4b0d      	ldr	r3, [pc, #52]	@ (800a810 <std+0x68>)
 800a7dc:	6224      	str	r4, [r4, #32]
 800a7de:	429c      	cmp	r4, r3
 800a7e0:	d006      	beq.n	800a7f0 <std+0x48>
 800a7e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a7e6:	4294      	cmp	r4, r2
 800a7e8:	d002      	beq.n	800a7f0 <std+0x48>
 800a7ea:	33d0      	adds	r3, #208	@ 0xd0
 800a7ec:	429c      	cmp	r4, r3
 800a7ee:	d105      	bne.n	800a7fc <std+0x54>
 800a7f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a7f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7f8:	f000 bac8 	b.w	800ad8c <__retarget_lock_init_recursive>
 800a7fc:	bd10      	pop	{r4, pc}
 800a7fe:	bf00      	nop
 800a800:	0800aa75 	.word	0x0800aa75
 800a804:	0800aa97 	.word	0x0800aa97
 800a808:	0800aacf 	.word	0x0800aacf
 800a80c:	0800aaf3 	.word	0x0800aaf3
 800a810:	2400239c 	.word	0x2400239c

0800a814 <stdio_exit_handler>:
 800a814:	4a02      	ldr	r2, [pc, #8]	@ (800a820 <stdio_exit_handler+0xc>)
 800a816:	4903      	ldr	r1, [pc, #12]	@ (800a824 <stdio_exit_handler+0x10>)
 800a818:	4803      	ldr	r0, [pc, #12]	@ (800a828 <stdio_exit_handler+0x14>)
 800a81a:	f000 b87b 	b.w	800a914 <_fwalk_sglue>
 800a81e:	bf00      	nop
 800a820:	24000028 	.word	0x24000028
 800a824:	0800b901 	.word	0x0800b901
 800a828:	24000038 	.word	0x24000038

0800a82c <cleanup_stdio>:
 800a82c:	6841      	ldr	r1, [r0, #4]
 800a82e:	4b0c      	ldr	r3, [pc, #48]	@ (800a860 <cleanup_stdio+0x34>)
 800a830:	4299      	cmp	r1, r3
 800a832:	b510      	push	{r4, lr}
 800a834:	4604      	mov	r4, r0
 800a836:	d001      	beq.n	800a83c <cleanup_stdio+0x10>
 800a838:	f001 f862 	bl	800b900 <_fflush_r>
 800a83c:	68a1      	ldr	r1, [r4, #8]
 800a83e:	4b09      	ldr	r3, [pc, #36]	@ (800a864 <cleanup_stdio+0x38>)
 800a840:	4299      	cmp	r1, r3
 800a842:	d002      	beq.n	800a84a <cleanup_stdio+0x1e>
 800a844:	4620      	mov	r0, r4
 800a846:	f001 f85b 	bl	800b900 <_fflush_r>
 800a84a:	68e1      	ldr	r1, [r4, #12]
 800a84c:	4b06      	ldr	r3, [pc, #24]	@ (800a868 <cleanup_stdio+0x3c>)
 800a84e:	4299      	cmp	r1, r3
 800a850:	d004      	beq.n	800a85c <cleanup_stdio+0x30>
 800a852:	4620      	mov	r0, r4
 800a854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a858:	f001 b852 	b.w	800b900 <_fflush_r>
 800a85c:	bd10      	pop	{r4, pc}
 800a85e:	bf00      	nop
 800a860:	2400239c 	.word	0x2400239c
 800a864:	24002404 	.word	0x24002404
 800a868:	2400246c 	.word	0x2400246c

0800a86c <global_stdio_init.part.0>:
 800a86c:	b510      	push	{r4, lr}
 800a86e:	4b0b      	ldr	r3, [pc, #44]	@ (800a89c <global_stdio_init.part.0+0x30>)
 800a870:	4c0b      	ldr	r4, [pc, #44]	@ (800a8a0 <global_stdio_init.part.0+0x34>)
 800a872:	4a0c      	ldr	r2, [pc, #48]	@ (800a8a4 <global_stdio_init.part.0+0x38>)
 800a874:	601a      	str	r2, [r3, #0]
 800a876:	4620      	mov	r0, r4
 800a878:	2200      	movs	r2, #0
 800a87a:	2104      	movs	r1, #4
 800a87c:	f7ff ff94 	bl	800a7a8 <std>
 800a880:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a884:	2201      	movs	r2, #1
 800a886:	2109      	movs	r1, #9
 800a888:	f7ff ff8e 	bl	800a7a8 <std>
 800a88c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a890:	2202      	movs	r2, #2
 800a892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a896:	2112      	movs	r1, #18
 800a898:	f7ff bf86 	b.w	800a7a8 <std>
 800a89c:	240024d4 	.word	0x240024d4
 800a8a0:	2400239c 	.word	0x2400239c
 800a8a4:	0800a815 	.word	0x0800a815

0800a8a8 <__sfp_lock_acquire>:
 800a8a8:	4801      	ldr	r0, [pc, #4]	@ (800a8b0 <__sfp_lock_acquire+0x8>)
 800a8aa:	f000 ba70 	b.w	800ad8e <__retarget_lock_acquire_recursive>
 800a8ae:	bf00      	nop
 800a8b0:	240024dd 	.word	0x240024dd

0800a8b4 <__sfp_lock_release>:
 800a8b4:	4801      	ldr	r0, [pc, #4]	@ (800a8bc <__sfp_lock_release+0x8>)
 800a8b6:	f000 ba6b 	b.w	800ad90 <__retarget_lock_release_recursive>
 800a8ba:	bf00      	nop
 800a8bc:	240024dd 	.word	0x240024dd

0800a8c0 <__sinit>:
 800a8c0:	b510      	push	{r4, lr}
 800a8c2:	4604      	mov	r4, r0
 800a8c4:	f7ff fff0 	bl	800a8a8 <__sfp_lock_acquire>
 800a8c8:	6a23      	ldr	r3, [r4, #32]
 800a8ca:	b11b      	cbz	r3, 800a8d4 <__sinit+0x14>
 800a8cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8d0:	f7ff bff0 	b.w	800a8b4 <__sfp_lock_release>
 800a8d4:	4b04      	ldr	r3, [pc, #16]	@ (800a8e8 <__sinit+0x28>)
 800a8d6:	6223      	str	r3, [r4, #32]
 800a8d8:	4b04      	ldr	r3, [pc, #16]	@ (800a8ec <__sinit+0x2c>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d1f5      	bne.n	800a8cc <__sinit+0xc>
 800a8e0:	f7ff ffc4 	bl	800a86c <global_stdio_init.part.0>
 800a8e4:	e7f2      	b.n	800a8cc <__sinit+0xc>
 800a8e6:	bf00      	nop
 800a8e8:	0800a82d 	.word	0x0800a82d
 800a8ec:	240024d4 	.word	0x240024d4

0800a8f0 <fiprintf>:
 800a8f0:	b40e      	push	{r1, r2, r3}
 800a8f2:	b503      	push	{r0, r1, lr}
 800a8f4:	4601      	mov	r1, r0
 800a8f6:	ab03      	add	r3, sp, #12
 800a8f8:	4805      	ldr	r0, [pc, #20]	@ (800a910 <fiprintf+0x20>)
 800a8fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8fe:	6800      	ldr	r0, [r0, #0]
 800a900:	9301      	str	r3, [sp, #4]
 800a902:	f000 fcd5 	bl	800b2b0 <_vfiprintf_r>
 800a906:	b002      	add	sp, #8
 800a908:	f85d eb04 	ldr.w	lr, [sp], #4
 800a90c:	b003      	add	sp, #12
 800a90e:	4770      	bx	lr
 800a910:	24000034 	.word	0x24000034

0800a914 <_fwalk_sglue>:
 800a914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a918:	4607      	mov	r7, r0
 800a91a:	4688      	mov	r8, r1
 800a91c:	4614      	mov	r4, r2
 800a91e:	2600      	movs	r6, #0
 800a920:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a924:	f1b9 0901 	subs.w	r9, r9, #1
 800a928:	d505      	bpl.n	800a936 <_fwalk_sglue+0x22>
 800a92a:	6824      	ldr	r4, [r4, #0]
 800a92c:	2c00      	cmp	r4, #0
 800a92e:	d1f7      	bne.n	800a920 <_fwalk_sglue+0xc>
 800a930:	4630      	mov	r0, r6
 800a932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a936:	89ab      	ldrh	r3, [r5, #12]
 800a938:	2b01      	cmp	r3, #1
 800a93a:	d907      	bls.n	800a94c <_fwalk_sglue+0x38>
 800a93c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a940:	3301      	adds	r3, #1
 800a942:	d003      	beq.n	800a94c <_fwalk_sglue+0x38>
 800a944:	4629      	mov	r1, r5
 800a946:	4638      	mov	r0, r7
 800a948:	47c0      	blx	r8
 800a94a:	4306      	orrs	r6, r0
 800a94c:	3568      	adds	r5, #104	@ 0x68
 800a94e:	e7e9      	b.n	800a924 <_fwalk_sglue+0x10>

0800a950 <iprintf>:
 800a950:	b40f      	push	{r0, r1, r2, r3}
 800a952:	b507      	push	{r0, r1, r2, lr}
 800a954:	4906      	ldr	r1, [pc, #24]	@ (800a970 <iprintf+0x20>)
 800a956:	ab04      	add	r3, sp, #16
 800a958:	6808      	ldr	r0, [r1, #0]
 800a95a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a95e:	6881      	ldr	r1, [r0, #8]
 800a960:	9301      	str	r3, [sp, #4]
 800a962:	f000 fca5 	bl	800b2b0 <_vfiprintf_r>
 800a966:	b003      	add	sp, #12
 800a968:	f85d eb04 	ldr.w	lr, [sp], #4
 800a96c:	b004      	add	sp, #16
 800a96e:	4770      	bx	lr
 800a970:	24000034 	.word	0x24000034

0800a974 <_puts_r>:
 800a974:	6a03      	ldr	r3, [r0, #32]
 800a976:	b570      	push	{r4, r5, r6, lr}
 800a978:	6884      	ldr	r4, [r0, #8]
 800a97a:	4605      	mov	r5, r0
 800a97c:	460e      	mov	r6, r1
 800a97e:	b90b      	cbnz	r3, 800a984 <_puts_r+0x10>
 800a980:	f7ff ff9e 	bl	800a8c0 <__sinit>
 800a984:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a986:	07db      	lsls	r3, r3, #31
 800a988:	d405      	bmi.n	800a996 <_puts_r+0x22>
 800a98a:	89a3      	ldrh	r3, [r4, #12]
 800a98c:	0598      	lsls	r0, r3, #22
 800a98e:	d402      	bmi.n	800a996 <_puts_r+0x22>
 800a990:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a992:	f000 f9fc 	bl	800ad8e <__retarget_lock_acquire_recursive>
 800a996:	89a3      	ldrh	r3, [r4, #12]
 800a998:	0719      	lsls	r1, r3, #28
 800a99a:	d502      	bpl.n	800a9a2 <_puts_r+0x2e>
 800a99c:	6923      	ldr	r3, [r4, #16]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d135      	bne.n	800aa0e <_puts_r+0x9a>
 800a9a2:	4621      	mov	r1, r4
 800a9a4:	4628      	mov	r0, r5
 800a9a6:	f000 f923 	bl	800abf0 <__swsetup_r>
 800a9aa:	b380      	cbz	r0, 800aa0e <_puts_r+0x9a>
 800a9ac:	f04f 35ff 	mov.w	r5, #4294967295
 800a9b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a9b2:	07da      	lsls	r2, r3, #31
 800a9b4:	d405      	bmi.n	800a9c2 <_puts_r+0x4e>
 800a9b6:	89a3      	ldrh	r3, [r4, #12]
 800a9b8:	059b      	lsls	r3, r3, #22
 800a9ba:	d402      	bmi.n	800a9c2 <_puts_r+0x4e>
 800a9bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9be:	f000 f9e7 	bl	800ad90 <__retarget_lock_release_recursive>
 800a9c2:	4628      	mov	r0, r5
 800a9c4:	bd70      	pop	{r4, r5, r6, pc}
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	da04      	bge.n	800a9d4 <_puts_r+0x60>
 800a9ca:	69a2      	ldr	r2, [r4, #24]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	dc17      	bgt.n	800aa00 <_puts_r+0x8c>
 800a9d0:	290a      	cmp	r1, #10
 800a9d2:	d015      	beq.n	800aa00 <_puts_r+0x8c>
 800a9d4:	6823      	ldr	r3, [r4, #0]
 800a9d6:	1c5a      	adds	r2, r3, #1
 800a9d8:	6022      	str	r2, [r4, #0]
 800a9da:	7019      	strb	r1, [r3, #0]
 800a9dc:	68a3      	ldr	r3, [r4, #8]
 800a9de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a9e2:	3b01      	subs	r3, #1
 800a9e4:	60a3      	str	r3, [r4, #8]
 800a9e6:	2900      	cmp	r1, #0
 800a9e8:	d1ed      	bne.n	800a9c6 <_puts_r+0x52>
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	da11      	bge.n	800aa12 <_puts_r+0x9e>
 800a9ee:	4622      	mov	r2, r4
 800a9f0:	210a      	movs	r1, #10
 800a9f2:	4628      	mov	r0, r5
 800a9f4:	f000 f8be 	bl	800ab74 <__swbuf_r>
 800a9f8:	3001      	adds	r0, #1
 800a9fa:	d0d7      	beq.n	800a9ac <_puts_r+0x38>
 800a9fc:	250a      	movs	r5, #10
 800a9fe:	e7d7      	b.n	800a9b0 <_puts_r+0x3c>
 800aa00:	4622      	mov	r2, r4
 800aa02:	4628      	mov	r0, r5
 800aa04:	f000 f8b6 	bl	800ab74 <__swbuf_r>
 800aa08:	3001      	adds	r0, #1
 800aa0a:	d1e7      	bne.n	800a9dc <_puts_r+0x68>
 800aa0c:	e7ce      	b.n	800a9ac <_puts_r+0x38>
 800aa0e:	3e01      	subs	r6, #1
 800aa10:	e7e4      	b.n	800a9dc <_puts_r+0x68>
 800aa12:	6823      	ldr	r3, [r4, #0]
 800aa14:	1c5a      	adds	r2, r3, #1
 800aa16:	6022      	str	r2, [r4, #0]
 800aa18:	220a      	movs	r2, #10
 800aa1a:	701a      	strb	r2, [r3, #0]
 800aa1c:	e7ee      	b.n	800a9fc <_puts_r+0x88>
	...

0800aa20 <puts>:
 800aa20:	4b02      	ldr	r3, [pc, #8]	@ (800aa2c <puts+0xc>)
 800aa22:	4601      	mov	r1, r0
 800aa24:	6818      	ldr	r0, [r3, #0]
 800aa26:	f7ff bfa5 	b.w	800a974 <_puts_r>
 800aa2a:	bf00      	nop
 800aa2c:	24000034 	.word	0x24000034

0800aa30 <siprintf>:
 800aa30:	b40e      	push	{r1, r2, r3}
 800aa32:	b510      	push	{r4, lr}
 800aa34:	b09d      	sub	sp, #116	@ 0x74
 800aa36:	ab1f      	add	r3, sp, #124	@ 0x7c
 800aa38:	9002      	str	r0, [sp, #8]
 800aa3a:	9006      	str	r0, [sp, #24]
 800aa3c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800aa40:	480a      	ldr	r0, [pc, #40]	@ (800aa6c <siprintf+0x3c>)
 800aa42:	9107      	str	r1, [sp, #28]
 800aa44:	9104      	str	r1, [sp, #16]
 800aa46:	490a      	ldr	r1, [pc, #40]	@ (800aa70 <siprintf+0x40>)
 800aa48:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa4c:	9105      	str	r1, [sp, #20]
 800aa4e:	2400      	movs	r4, #0
 800aa50:	a902      	add	r1, sp, #8
 800aa52:	6800      	ldr	r0, [r0, #0]
 800aa54:	9301      	str	r3, [sp, #4]
 800aa56:	941b      	str	r4, [sp, #108]	@ 0x6c
 800aa58:	f000 fb04 	bl	800b064 <_svfiprintf_r>
 800aa5c:	9b02      	ldr	r3, [sp, #8]
 800aa5e:	701c      	strb	r4, [r3, #0]
 800aa60:	b01d      	add	sp, #116	@ 0x74
 800aa62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa66:	b003      	add	sp, #12
 800aa68:	4770      	bx	lr
 800aa6a:	bf00      	nop
 800aa6c:	24000034 	.word	0x24000034
 800aa70:	ffff0208 	.word	0xffff0208

0800aa74 <__sread>:
 800aa74:	b510      	push	{r4, lr}
 800aa76:	460c      	mov	r4, r1
 800aa78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa7c:	f000 f938 	bl	800acf0 <_read_r>
 800aa80:	2800      	cmp	r0, #0
 800aa82:	bfab      	itete	ge
 800aa84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800aa86:	89a3      	ldrhlt	r3, [r4, #12]
 800aa88:	181b      	addge	r3, r3, r0
 800aa8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aa8e:	bfac      	ite	ge
 800aa90:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aa92:	81a3      	strhlt	r3, [r4, #12]
 800aa94:	bd10      	pop	{r4, pc}

0800aa96 <__swrite>:
 800aa96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa9a:	461f      	mov	r7, r3
 800aa9c:	898b      	ldrh	r3, [r1, #12]
 800aa9e:	05db      	lsls	r3, r3, #23
 800aaa0:	4605      	mov	r5, r0
 800aaa2:	460c      	mov	r4, r1
 800aaa4:	4616      	mov	r6, r2
 800aaa6:	d505      	bpl.n	800aab4 <__swrite+0x1e>
 800aaa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaac:	2302      	movs	r3, #2
 800aaae:	2200      	movs	r2, #0
 800aab0:	f000 f90c 	bl	800accc <_lseek_r>
 800aab4:	89a3      	ldrh	r3, [r4, #12]
 800aab6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aaba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aabe:	81a3      	strh	r3, [r4, #12]
 800aac0:	4632      	mov	r2, r6
 800aac2:	463b      	mov	r3, r7
 800aac4:	4628      	mov	r0, r5
 800aac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aaca:	f000 b923 	b.w	800ad14 <_write_r>

0800aace <__sseek>:
 800aace:	b510      	push	{r4, lr}
 800aad0:	460c      	mov	r4, r1
 800aad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aad6:	f000 f8f9 	bl	800accc <_lseek_r>
 800aada:	1c43      	adds	r3, r0, #1
 800aadc:	89a3      	ldrh	r3, [r4, #12]
 800aade:	bf15      	itete	ne
 800aae0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aae2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aae6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800aaea:	81a3      	strheq	r3, [r4, #12]
 800aaec:	bf18      	it	ne
 800aaee:	81a3      	strhne	r3, [r4, #12]
 800aaf0:	bd10      	pop	{r4, pc}

0800aaf2 <__sclose>:
 800aaf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaf6:	f000 b8d9 	b.w	800acac <_close_r>

0800aafa <_vsniprintf_r>:
 800aafa:	b530      	push	{r4, r5, lr}
 800aafc:	4614      	mov	r4, r2
 800aafe:	2c00      	cmp	r4, #0
 800ab00:	b09b      	sub	sp, #108	@ 0x6c
 800ab02:	4605      	mov	r5, r0
 800ab04:	461a      	mov	r2, r3
 800ab06:	da05      	bge.n	800ab14 <_vsniprintf_r+0x1a>
 800ab08:	238b      	movs	r3, #139	@ 0x8b
 800ab0a:	6003      	str	r3, [r0, #0]
 800ab0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab10:	b01b      	add	sp, #108	@ 0x6c
 800ab12:	bd30      	pop	{r4, r5, pc}
 800ab14:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ab18:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ab1c:	f04f 0300 	mov.w	r3, #0
 800ab20:	9319      	str	r3, [sp, #100]	@ 0x64
 800ab22:	bf14      	ite	ne
 800ab24:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ab28:	4623      	moveq	r3, r4
 800ab2a:	9302      	str	r3, [sp, #8]
 800ab2c:	9305      	str	r3, [sp, #20]
 800ab2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ab32:	9100      	str	r1, [sp, #0]
 800ab34:	9104      	str	r1, [sp, #16]
 800ab36:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ab3a:	4669      	mov	r1, sp
 800ab3c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800ab3e:	f000 fa91 	bl	800b064 <_svfiprintf_r>
 800ab42:	1c43      	adds	r3, r0, #1
 800ab44:	bfbc      	itt	lt
 800ab46:	238b      	movlt	r3, #139	@ 0x8b
 800ab48:	602b      	strlt	r3, [r5, #0]
 800ab4a:	2c00      	cmp	r4, #0
 800ab4c:	d0e0      	beq.n	800ab10 <_vsniprintf_r+0x16>
 800ab4e:	9b00      	ldr	r3, [sp, #0]
 800ab50:	2200      	movs	r2, #0
 800ab52:	701a      	strb	r2, [r3, #0]
 800ab54:	e7dc      	b.n	800ab10 <_vsniprintf_r+0x16>
	...

0800ab58 <vsniprintf>:
 800ab58:	b507      	push	{r0, r1, r2, lr}
 800ab5a:	9300      	str	r3, [sp, #0]
 800ab5c:	4613      	mov	r3, r2
 800ab5e:	460a      	mov	r2, r1
 800ab60:	4601      	mov	r1, r0
 800ab62:	4803      	ldr	r0, [pc, #12]	@ (800ab70 <vsniprintf+0x18>)
 800ab64:	6800      	ldr	r0, [r0, #0]
 800ab66:	f7ff ffc8 	bl	800aafa <_vsniprintf_r>
 800ab6a:	b003      	add	sp, #12
 800ab6c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ab70:	24000034 	.word	0x24000034

0800ab74 <__swbuf_r>:
 800ab74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab76:	460e      	mov	r6, r1
 800ab78:	4614      	mov	r4, r2
 800ab7a:	4605      	mov	r5, r0
 800ab7c:	b118      	cbz	r0, 800ab86 <__swbuf_r+0x12>
 800ab7e:	6a03      	ldr	r3, [r0, #32]
 800ab80:	b90b      	cbnz	r3, 800ab86 <__swbuf_r+0x12>
 800ab82:	f7ff fe9d 	bl	800a8c0 <__sinit>
 800ab86:	69a3      	ldr	r3, [r4, #24]
 800ab88:	60a3      	str	r3, [r4, #8]
 800ab8a:	89a3      	ldrh	r3, [r4, #12]
 800ab8c:	071a      	lsls	r2, r3, #28
 800ab8e:	d501      	bpl.n	800ab94 <__swbuf_r+0x20>
 800ab90:	6923      	ldr	r3, [r4, #16]
 800ab92:	b943      	cbnz	r3, 800aba6 <__swbuf_r+0x32>
 800ab94:	4621      	mov	r1, r4
 800ab96:	4628      	mov	r0, r5
 800ab98:	f000 f82a 	bl	800abf0 <__swsetup_r>
 800ab9c:	b118      	cbz	r0, 800aba6 <__swbuf_r+0x32>
 800ab9e:	f04f 37ff 	mov.w	r7, #4294967295
 800aba2:	4638      	mov	r0, r7
 800aba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aba6:	6823      	ldr	r3, [r4, #0]
 800aba8:	6922      	ldr	r2, [r4, #16]
 800abaa:	1a98      	subs	r0, r3, r2
 800abac:	6963      	ldr	r3, [r4, #20]
 800abae:	b2f6      	uxtb	r6, r6
 800abb0:	4283      	cmp	r3, r0
 800abb2:	4637      	mov	r7, r6
 800abb4:	dc05      	bgt.n	800abc2 <__swbuf_r+0x4e>
 800abb6:	4621      	mov	r1, r4
 800abb8:	4628      	mov	r0, r5
 800abba:	f000 fea1 	bl	800b900 <_fflush_r>
 800abbe:	2800      	cmp	r0, #0
 800abc0:	d1ed      	bne.n	800ab9e <__swbuf_r+0x2a>
 800abc2:	68a3      	ldr	r3, [r4, #8]
 800abc4:	3b01      	subs	r3, #1
 800abc6:	60a3      	str	r3, [r4, #8]
 800abc8:	6823      	ldr	r3, [r4, #0]
 800abca:	1c5a      	adds	r2, r3, #1
 800abcc:	6022      	str	r2, [r4, #0]
 800abce:	701e      	strb	r6, [r3, #0]
 800abd0:	6962      	ldr	r2, [r4, #20]
 800abd2:	1c43      	adds	r3, r0, #1
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d004      	beq.n	800abe2 <__swbuf_r+0x6e>
 800abd8:	89a3      	ldrh	r3, [r4, #12]
 800abda:	07db      	lsls	r3, r3, #31
 800abdc:	d5e1      	bpl.n	800aba2 <__swbuf_r+0x2e>
 800abde:	2e0a      	cmp	r6, #10
 800abe0:	d1df      	bne.n	800aba2 <__swbuf_r+0x2e>
 800abe2:	4621      	mov	r1, r4
 800abe4:	4628      	mov	r0, r5
 800abe6:	f000 fe8b 	bl	800b900 <_fflush_r>
 800abea:	2800      	cmp	r0, #0
 800abec:	d0d9      	beq.n	800aba2 <__swbuf_r+0x2e>
 800abee:	e7d6      	b.n	800ab9e <__swbuf_r+0x2a>

0800abf0 <__swsetup_r>:
 800abf0:	b538      	push	{r3, r4, r5, lr}
 800abf2:	4b29      	ldr	r3, [pc, #164]	@ (800ac98 <__swsetup_r+0xa8>)
 800abf4:	4605      	mov	r5, r0
 800abf6:	6818      	ldr	r0, [r3, #0]
 800abf8:	460c      	mov	r4, r1
 800abfa:	b118      	cbz	r0, 800ac04 <__swsetup_r+0x14>
 800abfc:	6a03      	ldr	r3, [r0, #32]
 800abfe:	b90b      	cbnz	r3, 800ac04 <__swsetup_r+0x14>
 800ac00:	f7ff fe5e 	bl	800a8c0 <__sinit>
 800ac04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac08:	0719      	lsls	r1, r3, #28
 800ac0a:	d422      	bmi.n	800ac52 <__swsetup_r+0x62>
 800ac0c:	06da      	lsls	r2, r3, #27
 800ac0e:	d407      	bmi.n	800ac20 <__swsetup_r+0x30>
 800ac10:	2209      	movs	r2, #9
 800ac12:	602a      	str	r2, [r5, #0]
 800ac14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac18:	81a3      	strh	r3, [r4, #12]
 800ac1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac1e:	e033      	b.n	800ac88 <__swsetup_r+0x98>
 800ac20:	0758      	lsls	r0, r3, #29
 800ac22:	d512      	bpl.n	800ac4a <__swsetup_r+0x5a>
 800ac24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac26:	b141      	cbz	r1, 800ac3a <__swsetup_r+0x4a>
 800ac28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac2c:	4299      	cmp	r1, r3
 800ac2e:	d002      	beq.n	800ac36 <__swsetup_r+0x46>
 800ac30:	4628      	mov	r0, r5
 800ac32:	f000 f8c3 	bl	800adbc <_free_r>
 800ac36:	2300      	movs	r3, #0
 800ac38:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac3a:	89a3      	ldrh	r3, [r4, #12]
 800ac3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ac40:	81a3      	strh	r3, [r4, #12]
 800ac42:	2300      	movs	r3, #0
 800ac44:	6063      	str	r3, [r4, #4]
 800ac46:	6923      	ldr	r3, [r4, #16]
 800ac48:	6023      	str	r3, [r4, #0]
 800ac4a:	89a3      	ldrh	r3, [r4, #12]
 800ac4c:	f043 0308 	orr.w	r3, r3, #8
 800ac50:	81a3      	strh	r3, [r4, #12]
 800ac52:	6923      	ldr	r3, [r4, #16]
 800ac54:	b94b      	cbnz	r3, 800ac6a <__swsetup_r+0x7a>
 800ac56:	89a3      	ldrh	r3, [r4, #12]
 800ac58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ac5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac60:	d003      	beq.n	800ac6a <__swsetup_r+0x7a>
 800ac62:	4621      	mov	r1, r4
 800ac64:	4628      	mov	r0, r5
 800ac66:	f000 fe99 	bl	800b99c <__smakebuf_r>
 800ac6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac6e:	f013 0201 	ands.w	r2, r3, #1
 800ac72:	d00a      	beq.n	800ac8a <__swsetup_r+0x9a>
 800ac74:	2200      	movs	r2, #0
 800ac76:	60a2      	str	r2, [r4, #8]
 800ac78:	6962      	ldr	r2, [r4, #20]
 800ac7a:	4252      	negs	r2, r2
 800ac7c:	61a2      	str	r2, [r4, #24]
 800ac7e:	6922      	ldr	r2, [r4, #16]
 800ac80:	b942      	cbnz	r2, 800ac94 <__swsetup_r+0xa4>
 800ac82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ac86:	d1c5      	bne.n	800ac14 <__swsetup_r+0x24>
 800ac88:	bd38      	pop	{r3, r4, r5, pc}
 800ac8a:	0799      	lsls	r1, r3, #30
 800ac8c:	bf58      	it	pl
 800ac8e:	6962      	ldrpl	r2, [r4, #20]
 800ac90:	60a2      	str	r2, [r4, #8]
 800ac92:	e7f4      	b.n	800ac7e <__swsetup_r+0x8e>
 800ac94:	2000      	movs	r0, #0
 800ac96:	e7f7      	b.n	800ac88 <__swsetup_r+0x98>
 800ac98:	24000034 	.word	0x24000034

0800ac9c <memset>:
 800ac9c:	4402      	add	r2, r0
 800ac9e:	4603      	mov	r3, r0
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d100      	bne.n	800aca6 <memset+0xa>
 800aca4:	4770      	bx	lr
 800aca6:	f803 1b01 	strb.w	r1, [r3], #1
 800acaa:	e7f9      	b.n	800aca0 <memset+0x4>

0800acac <_close_r>:
 800acac:	b538      	push	{r3, r4, r5, lr}
 800acae:	4d06      	ldr	r5, [pc, #24]	@ (800acc8 <_close_r+0x1c>)
 800acb0:	2300      	movs	r3, #0
 800acb2:	4604      	mov	r4, r0
 800acb4:	4608      	mov	r0, r1
 800acb6:	602b      	str	r3, [r5, #0]
 800acb8:	f7f6 ffd0 	bl	8001c5c <_close>
 800acbc:	1c43      	adds	r3, r0, #1
 800acbe:	d102      	bne.n	800acc6 <_close_r+0x1a>
 800acc0:	682b      	ldr	r3, [r5, #0]
 800acc2:	b103      	cbz	r3, 800acc6 <_close_r+0x1a>
 800acc4:	6023      	str	r3, [r4, #0]
 800acc6:	bd38      	pop	{r3, r4, r5, pc}
 800acc8:	240024d8 	.word	0x240024d8

0800accc <_lseek_r>:
 800accc:	b538      	push	{r3, r4, r5, lr}
 800acce:	4d07      	ldr	r5, [pc, #28]	@ (800acec <_lseek_r+0x20>)
 800acd0:	4604      	mov	r4, r0
 800acd2:	4608      	mov	r0, r1
 800acd4:	4611      	mov	r1, r2
 800acd6:	2200      	movs	r2, #0
 800acd8:	602a      	str	r2, [r5, #0]
 800acda:	461a      	mov	r2, r3
 800acdc:	f7f6 ffe5 	bl	8001caa <_lseek>
 800ace0:	1c43      	adds	r3, r0, #1
 800ace2:	d102      	bne.n	800acea <_lseek_r+0x1e>
 800ace4:	682b      	ldr	r3, [r5, #0]
 800ace6:	b103      	cbz	r3, 800acea <_lseek_r+0x1e>
 800ace8:	6023      	str	r3, [r4, #0]
 800acea:	bd38      	pop	{r3, r4, r5, pc}
 800acec:	240024d8 	.word	0x240024d8

0800acf0 <_read_r>:
 800acf0:	b538      	push	{r3, r4, r5, lr}
 800acf2:	4d07      	ldr	r5, [pc, #28]	@ (800ad10 <_read_r+0x20>)
 800acf4:	4604      	mov	r4, r0
 800acf6:	4608      	mov	r0, r1
 800acf8:	4611      	mov	r1, r2
 800acfa:	2200      	movs	r2, #0
 800acfc:	602a      	str	r2, [r5, #0]
 800acfe:	461a      	mov	r2, r3
 800ad00:	f7f6 ff73 	bl	8001bea <_read>
 800ad04:	1c43      	adds	r3, r0, #1
 800ad06:	d102      	bne.n	800ad0e <_read_r+0x1e>
 800ad08:	682b      	ldr	r3, [r5, #0]
 800ad0a:	b103      	cbz	r3, 800ad0e <_read_r+0x1e>
 800ad0c:	6023      	str	r3, [r4, #0]
 800ad0e:	bd38      	pop	{r3, r4, r5, pc}
 800ad10:	240024d8 	.word	0x240024d8

0800ad14 <_write_r>:
 800ad14:	b538      	push	{r3, r4, r5, lr}
 800ad16:	4d07      	ldr	r5, [pc, #28]	@ (800ad34 <_write_r+0x20>)
 800ad18:	4604      	mov	r4, r0
 800ad1a:	4608      	mov	r0, r1
 800ad1c:	4611      	mov	r1, r2
 800ad1e:	2200      	movs	r2, #0
 800ad20:	602a      	str	r2, [r5, #0]
 800ad22:	461a      	mov	r2, r3
 800ad24:	f7f6 ff7e 	bl	8001c24 <_write>
 800ad28:	1c43      	adds	r3, r0, #1
 800ad2a:	d102      	bne.n	800ad32 <_write_r+0x1e>
 800ad2c:	682b      	ldr	r3, [r5, #0]
 800ad2e:	b103      	cbz	r3, 800ad32 <_write_r+0x1e>
 800ad30:	6023      	str	r3, [r4, #0]
 800ad32:	bd38      	pop	{r3, r4, r5, pc}
 800ad34:	240024d8 	.word	0x240024d8

0800ad38 <__errno>:
 800ad38:	4b01      	ldr	r3, [pc, #4]	@ (800ad40 <__errno+0x8>)
 800ad3a:	6818      	ldr	r0, [r3, #0]
 800ad3c:	4770      	bx	lr
 800ad3e:	bf00      	nop
 800ad40:	24000034 	.word	0x24000034

0800ad44 <__libc_init_array>:
 800ad44:	b570      	push	{r4, r5, r6, lr}
 800ad46:	4d0d      	ldr	r5, [pc, #52]	@ (800ad7c <__libc_init_array+0x38>)
 800ad48:	4c0d      	ldr	r4, [pc, #52]	@ (800ad80 <__libc_init_array+0x3c>)
 800ad4a:	1b64      	subs	r4, r4, r5
 800ad4c:	10a4      	asrs	r4, r4, #2
 800ad4e:	2600      	movs	r6, #0
 800ad50:	42a6      	cmp	r6, r4
 800ad52:	d109      	bne.n	800ad68 <__libc_init_array+0x24>
 800ad54:	4d0b      	ldr	r5, [pc, #44]	@ (800ad84 <__libc_init_array+0x40>)
 800ad56:	4c0c      	ldr	r4, [pc, #48]	@ (800ad88 <__libc_init_array+0x44>)
 800ad58:	f000 ff22 	bl	800bba0 <_init>
 800ad5c:	1b64      	subs	r4, r4, r5
 800ad5e:	10a4      	asrs	r4, r4, #2
 800ad60:	2600      	movs	r6, #0
 800ad62:	42a6      	cmp	r6, r4
 800ad64:	d105      	bne.n	800ad72 <__libc_init_array+0x2e>
 800ad66:	bd70      	pop	{r4, r5, r6, pc}
 800ad68:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad6c:	4798      	blx	r3
 800ad6e:	3601      	adds	r6, #1
 800ad70:	e7ee      	b.n	800ad50 <__libc_init_array+0xc>
 800ad72:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad76:	4798      	blx	r3
 800ad78:	3601      	adds	r6, #1
 800ad7a:	e7f2      	b.n	800ad62 <__libc_init_array+0x1e>
 800ad7c:	0800c114 	.word	0x0800c114
 800ad80:	0800c114 	.word	0x0800c114
 800ad84:	0800c114 	.word	0x0800c114
 800ad88:	0800c118 	.word	0x0800c118

0800ad8c <__retarget_lock_init_recursive>:
 800ad8c:	4770      	bx	lr

0800ad8e <__retarget_lock_acquire_recursive>:
 800ad8e:	4770      	bx	lr

0800ad90 <__retarget_lock_release_recursive>:
 800ad90:	4770      	bx	lr

0800ad92 <memcpy>:
 800ad92:	440a      	add	r2, r1
 800ad94:	4291      	cmp	r1, r2
 800ad96:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad9a:	d100      	bne.n	800ad9e <memcpy+0xc>
 800ad9c:	4770      	bx	lr
 800ad9e:	b510      	push	{r4, lr}
 800ada0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ada4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ada8:	4291      	cmp	r1, r2
 800adaa:	d1f9      	bne.n	800ada0 <memcpy+0xe>
 800adac:	bd10      	pop	{r4, pc}

0800adae <abort>:
 800adae:	b508      	push	{r3, lr}
 800adb0:	2006      	movs	r0, #6
 800adb2:	f000 fe71 	bl	800ba98 <raise>
 800adb6:	2001      	movs	r0, #1
 800adb8:	f7f6 ff0c 	bl	8001bd4 <_exit>

0800adbc <_free_r>:
 800adbc:	b538      	push	{r3, r4, r5, lr}
 800adbe:	4605      	mov	r5, r0
 800adc0:	2900      	cmp	r1, #0
 800adc2:	d041      	beq.n	800ae48 <_free_r+0x8c>
 800adc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adc8:	1f0c      	subs	r4, r1, #4
 800adca:	2b00      	cmp	r3, #0
 800adcc:	bfb8      	it	lt
 800adce:	18e4      	addlt	r4, r4, r3
 800add0:	f000 f8e0 	bl	800af94 <__malloc_lock>
 800add4:	4a1d      	ldr	r2, [pc, #116]	@ (800ae4c <_free_r+0x90>)
 800add6:	6813      	ldr	r3, [r2, #0]
 800add8:	b933      	cbnz	r3, 800ade8 <_free_r+0x2c>
 800adda:	6063      	str	r3, [r4, #4]
 800addc:	6014      	str	r4, [r2, #0]
 800adde:	4628      	mov	r0, r5
 800ade0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ade4:	f000 b8dc 	b.w	800afa0 <__malloc_unlock>
 800ade8:	42a3      	cmp	r3, r4
 800adea:	d908      	bls.n	800adfe <_free_r+0x42>
 800adec:	6820      	ldr	r0, [r4, #0]
 800adee:	1821      	adds	r1, r4, r0
 800adf0:	428b      	cmp	r3, r1
 800adf2:	bf01      	itttt	eq
 800adf4:	6819      	ldreq	r1, [r3, #0]
 800adf6:	685b      	ldreq	r3, [r3, #4]
 800adf8:	1809      	addeq	r1, r1, r0
 800adfa:	6021      	streq	r1, [r4, #0]
 800adfc:	e7ed      	b.n	800adda <_free_r+0x1e>
 800adfe:	461a      	mov	r2, r3
 800ae00:	685b      	ldr	r3, [r3, #4]
 800ae02:	b10b      	cbz	r3, 800ae08 <_free_r+0x4c>
 800ae04:	42a3      	cmp	r3, r4
 800ae06:	d9fa      	bls.n	800adfe <_free_r+0x42>
 800ae08:	6811      	ldr	r1, [r2, #0]
 800ae0a:	1850      	adds	r0, r2, r1
 800ae0c:	42a0      	cmp	r0, r4
 800ae0e:	d10b      	bne.n	800ae28 <_free_r+0x6c>
 800ae10:	6820      	ldr	r0, [r4, #0]
 800ae12:	4401      	add	r1, r0
 800ae14:	1850      	adds	r0, r2, r1
 800ae16:	4283      	cmp	r3, r0
 800ae18:	6011      	str	r1, [r2, #0]
 800ae1a:	d1e0      	bne.n	800adde <_free_r+0x22>
 800ae1c:	6818      	ldr	r0, [r3, #0]
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	6053      	str	r3, [r2, #4]
 800ae22:	4408      	add	r0, r1
 800ae24:	6010      	str	r0, [r2, #0]
 800ae26:	e7da      	b.n	800adde <_free_r+0x22>
 800ae28:	d902      	bls.n	800ae30 <_free_r+0x74>
 800ae2a:	230c      	movs	r3, #12
 800ae2c:	602b      	str	r3, [r5, #0]
 800ae2e:	e7d6      	b.n	800adde <_free_r+0x22>
 800ae30:	6820      	ldr	r0, [r4, #0]
 800ae32:	1821      	adds	r1, r4, r0
 800ae34:	428b      	cmp	r3, r1
 800ae36:	bf04      	itt	eq
 800ae38:	6819      	ldreq	r1, [r3, #0]
 800ae3a:	685b      	ldreq	r3, [r3, #4]
 800ae3c:	6063      	str	r3, [r4, #4]
 800ae3e:	bf04      	itt	eq
 800ae40:	1809      	addeq	r1, r1, r0
 800ae42:	6021      	streq	r1, [r4, #0]
 800ae44:	6054      	str	r4, [r2, #4]
 800ae46:	e7ca      	b.n	800adde <_free_r+0x22>
 800ae48:	bd38      	pop	{r3, r4, r5, pc}
 800ae4a:	bf00      	nop
 800ae4c:	240024e4 	.word	0x240024e4

0800ae50 <sbrk_aligned>:
 800ae50:	b570      	push	{r4, r5, r6, lr}
 800ae52:	4e0f      	ldr	r6, [pc, #60]	@ (800ae90 <sbrk_aligned+0x40>)
 800ae54:	460c      	mov	r4, r1
 800ae56:	6831      	ldr	r1, [r6, #0]
 800ae58:	4605      	mov	r5, r0
 800ae5a:	b911      	cbnz	r1, 800ae62 <sbrk_aligned+0x12>
 800ae5c:	f000 fe5a 	bl	800bb14 <_sbrk_r>
 800ae60:	6030      	str	r0, [r6, #0]
 800ae62:	4621      	mov	r1, r4
 800ae64:	4628      	mov	r0, r5
 800ae66:	f000 fe55 	bl	800bb14 <_sbrk_r>
 800ae6a:	1c43      	adds	r3, r0, #1
 800ae6c:	d103      	bne.n	800ae76 <sbrk_aligned+0x26>
 800ae6e:	f04f 34ff 	mov.w	r4, #4294967295
 800ae72:	4620      	mov	r0, r4
 800ae74:	bd70      	pop	{r4, r5, r6, pc}
 800ae76:	1cc4      	adds	r4, r0, #3
 800ae78:	f024 0403 	bic.w	r4, r4, #3
 800ae7c:	42a0      	cmp	r0, r4
 800ae7e:	d0f8      	beq.n	800ae72 <sbrk_aligned+0x22>
 800ae80:	1a21      	subs	r1, r4, r0
 800ae82:	4628      	mov	r0, r5
 800ae84:	f000 fe46 	bl	800bb14 <_sbrk_r>
 800ae88:	3001      	adds	r0, #1
 800ae8a:	d1f2      	bne.n	800ae72 <sbrk_aligned+0x22>
 800ae8c:	e7ef      	b.n	800ae6e <sbrk_aligned+0x1e>
 800ae8e:	bf00      	nop
 800ae90:	240024e0 	.word	0x240024e0

0800ae94 <_malloc_r>:
 800ae94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae98:	1ccd      	adds	r5, r1, #3
 800ae9a:	f025 0503 	bic.w	r5, r5, #3
 800ae9e:	3508      	adds	r5, #8
 800aea0:	2d0c      	cmp	r5, #12
 800aea2:	bf38      	it	cc
 800aea4:	250c      	movcc	r5, #12
 800aea6:	2d00      	cmp	r5, #0
 800aea8:	4606      	mov	r6, r0
 800aeaa:	db01      	blt.n	800aeb0 <_malloc_r+0x1c>
 800aeac:	42a9      	cmp	r1, r5
 800aeae:	d904      	bls.n	800aeba <_malloc_r+0x26>
 800aeb0:	230c      	movs	r3, #12
 800aeb2:	6033      	str	r3, [r6, #0]
 800aeb4:	2000      	movs	r0, #0
 800aeb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aeba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800af90 <_malloc_r+0xfc>
 800aebe:	f000 f869 	bl	800af94 <__malloc_lock>
 800aec2:	f8d8 3000 	ldr.w	r3, [r8]
 800aec6:	461c      	mov	r4, r3
 800aec8:	bb44      	cbnz	r4, 800af1c <_malloc_r+0x88>
 800aeca:	4629      	mov	r1, r5
 800aecc:	4630      	mov	r0, r6
 800aece:	f7ff ffbf 	bl	800ae50 <sbrk_aligned>
 800aed2:	1c43      	adds	r3, r0, #1
 800aed4:	4604      	mov	r4, r0
 800aed6:	d158      	bne.n	800af8a <_malloc_r+0xf6>
 800aed8:	f8d8 4000 	ldr.w	r4, [r8]
 800aedc:	4627      	mov	r7, r4
 800aede:	2f00      	cmp	r7, #0
 800aee0:	d143      	bne.n	800af6a <_malloc_r+0xd6>
 800aee2:	2c00      	cmp	r4, #0
 800aee4:	d04b      	beq.n	800af7e <_malloc_r+0xea>
 800aee6:	6823      	ldr	r3, [r4, #0]
 800aee8:	4639      	mov	r1, r7
 800aeea:	4630      	mov	r0, r6
 800aeec:	eb04 0903 	add.w	r9, r4, r3
 800aef0:	f000 fe10 	bl	800bb14 <_sbrk_r>
 800aef4:	4581      	cmp	r9, r0
 800aef6:	d142      	bne.n	800af7e <_malloc_r+0xea>
 800aef8:	6821      	ldr	r1, [r4, #0]
 800aefa:	1a6d      	subs	r5, r5, r1
 800aefc:	4629      	mov	r1, r5
 800aefe:	4630      	mov	r0, r6
 800af00:	f7ff ffa6 	bl	800ae50 <sbrk_aligned>
 800af04:	3001      	adds	r0, #1
 800af06:	d03a      	beq.n	800af7e <_malloc_r+0xea>
 800af08:	6823      	ldr	r3, [r4, #0]
 800af0a:	442b      	add	r3, r5
 800af0c:	6023      	str	r3, [r4, #0]
 800af0e:	f8d8 3000 	ldr.w	r3, [r8]
 800af12:	685a      	ldr	r2, [r3, #4]
 800af14:	bb62      	cbnz	r2, 800af70 <_malloc_r+0xdc>
 800af16:	f8c8 7000 	str.w	r7, [r8]
 800af1a:	e00f      	b.n	800af3c <_malloc_r+0xa8>
 800af1c:	6822      	ldr	r2, [r4, #0]
 800af1e:	1b52      	subs	r2, r2, r5
 800af20:	d420      	bmi.n	800af64 <_malloc_r+0xd0>
 800af22:	2a0b      	cmp	r2, #11
 800af24:	d917      	bls.n	800af56 <_malloc_r+0xc2>
 800af26:	1961      	adds	r1, r4, r5
 800af28:	42a3      	cmp	r3, r4
 800af2a:	6025      	str	r5, [r4, #0]
 800af2c:	bf18      	it	ne
 800af2e:	6059      	strne	r1, [r3, #4]
 800af30:	6863      	ldr	r3, [r4, #4]
 800af32:	bf08      	it	eq
 800af34:	f8c8 1000 	streq.w	r1, [r8]
 800af38:	5162      	str	r2, [r4, r5]
 800af3a:	604b      	str	r3, [r1, #4]
 800af3c:	4630      	mov	r0, r6
 800af3e:	f000 f82f 	bl	800afa0 <__malloc_unlock>
 800af42:	f104 000b 	add.w	r0, r4, #11
 800af46:	1d23      	adds	r3, r4, #4
 800af48:	f020 0007 	bic.w	r0, r0, #7
 800af4c:	1ac2      	subs	r2, r0, r3
 800af4e:	bf1c      	itt	ne
 800af50:	1a1b      	subne	r3, r3, r0
 800af52:	50a3      	strne	r3, [r4, r2]
 800af54:	e7af      	b.n	800aeb6 <_malloc_r+0x22>
 800af56:	6862      	ldr	r2, [r4, #4]
 800af58:	42a3      	cmp	r3, r4
 800af5a:	bf0c      	ite	eq
 800af5c:	f8c8 2000 	streq.w	r2, [r8]
 800af60:	605a      	strne	r2, [r3, #4]
 800af62:	e7eb      	b.n	800af3c <_malloc_r+0xa8>
 800af64:	4623      	mov	r3, r4
 800af66:	6864      	ldr	r4, [r4, #4]
 800af68:	e7ae      	b.n	800aec8 <_malloc_r+0x34>
 800af6a:	463c      	mov	r4, r7
 800af6c:	687f      	ldr	r7, [r7, #4]
 800af6e:	e7b6      	b.n	800aede <_malloc_r+0x4a>
 800af70:	461a      	mov	r2, r3
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	42a3      	cmp	r3, r4
 800af76:	d1fb      	bne.n	800af70 <_malloc_r+0xdc>
 800af78:	2300      	movs	r3, #0
 800af7a:	6053      	str	r3, [r2, #4]
 800af7c:	e7de      	b.n	800af3c <_malloc_r+0xa8>
 800af7e:	230c      	movs	r3, #12
 800af80:	6033      	str	r3, [r6, #0]
 800af82:	4630      	mov	r0, r6
 800af84:	f000 f80c 	bl	800afa0 <__malloc_unlock>
 800af88:	e794      	b.n	800aeb4 <_malloc_r+0x20>
 800af8a:	6005      	str	r5, [r0, #0]
 800af8c:	e7d6      	b.n	800af3c <_malloc_r+0xa8>
 800af8e:	bf00      	nop
 800af90:	240024e4 	.word	0x240024e4

0800af94 <__malloc_lock>:
 800af94:	4801      	ldr	r0, [pc, #4]	@ (800af9c <__malloc_lock+0x8>)
 800af96:	f7ff befa 	b.w	800ad8e <__retarget_lock_acquire_recursive>
 800af9a:	bf00      	nop
 800af9c:	240024dc 	.word	0x240024dc

0800afa0 <__malloc_unlock>:
 800afa0:	4801      	ldr	r0, [pc, #4]	@ (800afa8 <__malloc_unlock+0x8>)
 800afa2:	f7ff bef5 	b.w	800ad90 <__retarget_lock_release_recursive>
 800afa6:	bf00      	nop
 800afa8:	240024dc 	.word	0x240024dc

0800afac <__ssputs_r>:
 800afac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afb0:	688e      	ldr	r6, [r1, #8]
 800afb2:	461f      	mov	r7, r3
 800afb4:	42be      	cmp	r6, r7
 800afb6:	680b      	ldr	r3, [r1, #0]
 800afb8:	4682      	mov	sl, r0
 800afba:	460c      	mov	r4, r1
 800afbc:	4690      	mov	r8, r2
 800afbe:	d82d      	bhi.n	800b01c <__ssputs_r+0x70>
 800afc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800afc4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800afc8:	d026      	beq.n	800b018 <__ssputs_r+0x6c>
 800afca:	6965      	ldr	r5, [r4, #20]
 800afcc:	6909      	ldr	r1, [r1, #16]
 800afce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800afd2:	eba3 0901 	sub.w	r9, r3, r1
 800afd6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800afda:	1c7b      	adds	r3, r7, #1
 800afdc:	444b      	add	r3, r9
 800afde:	106d      	asrs	r5, r5, #1
 800afe0:	429d      	cmp	r5, r3
 800afe2:	bf38      	it	cc
 800afe4:	461d      	movcc	r5, r3
 800afe6:	0553      	lsls	r3, r2, #21
 800afe8:	d527      	bpl.n	800b03a <__ssputs_r+0x8e>
 800afea:	4629      	mov	r1, r5
 800afec:	f7ff ff52 	bl	800ae94 <_malloc_r>
 800aff0:	4606      	mov	r6, r0
 800aff2:	b360      	cbz	r0, 800b04e <__ssputs_r+0xa2>
 800aff4:	6921      	ldr	r1, [r4, #16]
 800aff6:	464a      	mov	r2, r9
 800aff8:	f7ff fecb 	bl	800ad92 <memcpy>
 800affc:	89a3      	ldrh	r3, [r4, #12]
 800affe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b002:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b006:	81a3      	strh	r3, [r4, #12]
 800b008:	6126      	str	r6, [r4, #16]
 800b00a:	6165      	str	r5, [r4, #20]
 800b00c:	444e      	add	r6, r9
 800b00e:	eba5 0509 	sub.w	r5, r5, r9
 800b012:	6026      	str	r6, [r4, #0]
 800b014:	60a5      	str	r5, [r4, #8]
 800b016:	463e      	mov	r6, r7
 800b018:	42be      	cmp	r6, r7
 800b01a:	d900      	bls.n	800b01e <__ssputs_r+0x72>
 800b01c:	463e      	mov	r6, r7
 800b01e:	6820      	ldr	r0, [r4, #0]
 800b020:	4632      	mov	r2, r6
 800b022:	4641      	mov	r1, r8
 800b024:	f000 fcf6 	bl	800ba14 <memmove>
 800b028:	68a3      	ldr	r3, [r4, #8]
 800b02a:	1b9b      	subs	r3, r3, r6
 800b02c:	60a3      	str	r3, [r4, #8]
 800b02e:	6823      	ldr	r3, [r4, #0]
 800b030:	4433      	add	r3, r6
 800b032:	6023      	str	r3, [r4, #0]
 800b034:	2000      	movs	r0, #0
 800b036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b03a:	462a      	mov	r2, r5
 800b03c:	f000 fd7a 	bl	800bb34 <_realloc_r>
 800b040:	4606      	mov	r6, r0
 800b042:	2800      	cmp	r0, #0
 800b044:	d1e0      	bne.n	800b008 <__ssputs_r+0x5c>
 800b046:	6921      	ldr	r1, [r4, #16]
 800b048:	4650      	mov	r0, sl
 800b04a:	f7ff feb7 	bl	800adbc <_free_r>
 800b04e:	230c      	movs	r3, #12
 800b050:	f8ca 3000 	str.w	r3, [sl]
 800b054:	89a3      	ldrh	r3, [r4, #12]
 800b056:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b05a:	81a3      	strh	r3, [r4, #12]
 800b05c:	f04f 30ff 	mov.w	r0, #4294967295
 800b060:	e7e9      	b.n	800b036 <__ssputs_r+0x8a>
	...

0800b064 <_svfiprintf_r>:
 800b064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b068:	4698      	mov	r8, r3
 800b06a:	898b      	ldrh	r3, [r1, #12]
 800b06c:	061b      	lsls	r3, r3, #24
 800b06e:	b09d      	sub	sp, #116	@ 0x74
 800b070:	4607      	mov	r7, r0
 800b072:	460d      	mov	r5, r1
 800b074:	4614      	mov	r4, r2
 800b076:	d510      	bpl.n	800b09a <_svfiprintf_r+0x36>
 800b078:	690b      	ldr	r3, [r1, #16]
 800b07a:	b973      	cbnz	r3, 800b09a <_svfiprintf_r+0x36>
 800b07c:	2140      	movs	r1, #64	@ 0x40
 800b07e:	f7ff ff09 	bl	800ae94 <_malloc_r>
 800b082:	6028      	str	r0, [r5, #0]
 800b084:	6128      	str	r0, [r5, #16]
 800b086:	b930      	cbnz	r0, 800b096 <_svfiprintf_r+0x32>
 800b088:	230c      	movs	r3, #12
 800b08a:	603b      	str	r3, [r7, #0]
 800b08c:	f04f 30ff 	mov.w	r0, #4294967295
 800b090:	b01d      	add	sp, #116	@ 0x74
 800b092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b096:	2340      	movs	r3, #64	@ 0x40
 800b098:	616b      	str	r3, [r5, #20]
 800b09a:	2300      	movs	r3, #0
 800b09c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b09e:	2320      	movs	r3, #32
 800b0a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b0a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0a8:	2330      	movs	r3, #48	@ 0x30
 800b0aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b248 <_svfiprintf_r+0x1e4>
 800b0ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b0b2:	f04f 0901 	mov.w	r9, #1
 800b0b6:	4623      	mov	r3, r4
 800b0b8:	469a      	mov	sl, r3
 800b0ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0be:	b10a      	cbz	r2, 800b0c4 <_svfiprintf_r+0x60>
 800b0c0:	2a25      	cmp	r2, #37	@ 0x25
 800b0c2:	d1f9      	bne.n	800b0b8 <_svfiprintf_r+0x54>
 800b0c4:	ebba 0b04 	subs.w	fp, sl, r4
 800b0c8:	d00b      	beq.n	800b0e2 <_svfiprintf_r+0x7e>
 800b0ca:	465b      	mov	r3, fp
 800b0cc:	4622      	mov	r2, r4
 800b0ce:	4629      	mov	r1, r5
 800b0d0:	4638      	mov	r0, r7
 800b0d2:	f7ff ff6b 	bl	800afac <__ssputs_r>
 800b0d6:	3001      	adds	r0, #1
 800b0d8:	f000 80a7 	beq.w	800b22a <_svfiprintf_r+0x1c6>
 800b0dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0de:	445a      	add	r2, fp
 800b0e0:	9209      	str	r2, [sp, #36]	@ 0x24
 800b0e2:	f89a 3000 	ldrb.w	r3, [sl]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	f000 809f 	beq.w	800b22a <_svfiprintf_r+0x1c6>
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	f04f 32ff 	mov.w	r2, #4294967295
 800b0f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0f6:	f10a 0a01 	add.w	sl, sl, #1
 800b0fa:	9304      	str	r3, [sp, #16]
 800b0fc:	9307      	str	r3, [sp, #28]
 800b0fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b102:	931a      	str	r3, [sp, #104]	@ 0x68
 800b104:	4654      	mov	r4, sl
 800b106:	2205      	movs	r2, #5
 800b108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b10c:	484e      	ldr	r0, [pc, #312]	@ (800b248 <_svfiprintf_r+0x1e4>)
 800b10e:	f7f5 f8ef 	bl	80002f0 <memchr>
 800b112:	9a04      	ldr	r2, [sp, #16]
 800b114:	b9d8      	cbnz	r0, 800b14e <_svfiprintf_r+0xea>
 800b116:	06d0      	lsls	r0, r2, #27
 800b118:	bf44      	itt	mi
 800b11a:	2320      	movmi	r3, #32
 800b11c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b120:	0711      	lsls	r1, r2, #28
 800b122:	bf44      	itt	mi
 800b124:	232b      	movmi	r3, #43	@ 0x2b
 800b126:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b12a:	f89a 3000 	ldrb.w	r3, [sl]
 800b12e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b130:	d015      	beq.n	800b15e <_svfiprintf_r+0xfa>
 800b132:	9a07      	ldr	r2, [sp, #28]
 800b134:	4654      	mov	r4, sl
 800b136:	2000      	movs	r0, #0
 800b138:	f04f 0c0a 	mov.w	ip, #10
 800b13c:	4621      	mov	r1, r4
 800b13e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b142:	3b30      	subs	r3, #48	@ 0x30
 800b144:	2b09      	cmp	r3, #9
 800b146:	d94b      	bls.n	800b1e0 <_svfiprintf_r+0x17c>
 800b148:	b1b0      	cbz	r0, 800b178 <_svfiprintf_r+0x114>
 800b14a:	9207      	str	r2, [sp, #28]
 800b14c:	e014      	b.n	800b178 <_svfiprintf_r+0x114>
 800b14e:	eba0 0308 	sub.w	r3, r0, r8
 800b152:	fa09 f303 	lsl.w	r3, r9, r3
 800b156:	4313      	orrs	r3, r2
 800b158:	9304      	str	r3, [sp, #16]
 800b15a:	46a2      	mov	sl, r4
 800b15c:	e7d2      	b.n	800b104 <_svfiprintf_r+0xa0>
 800b15e:	9b03      	ldr	r3, [sp, #12]
 800b160:	1d19      	adds	r1, r3, #4
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	9103      	str	r1, [sp, #12]
 800b166:	2b00      	cmp	r3, #0
 800b168:	bfbb      	ittet	lt
 800b16a:	425b      	neglt	r3, r3
 800b16c:	f042 0202 	orrlt.w	r2, r2, #2
 800b170:	9307      	strge	r3, [sp, #28]
 800b172:	9307      	strlt	r3, [sp, #28]
 800b174:	bfb8      	it	lt
 800b176:	9204      	strlt	r2, [sp, #16]
 800b178:	7823      	ldrb	r3, [r4, #0]
 800b17a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b17c:	d10a      	bne.n	800b194 <_svfiprintf_r+0x130>
 800b17e:	7863      	ldrb	r3, [r4, #1]
 800b180:	2b2a      	cmp	r3, #42	@ 0x2a
 800b182:	d132      	bne.n	800b1ea <_svfiprintf_r+0x186>
 800b184:	9b03      	ldr	r3, [sp, #12]
 800b186:	1d1a      	adds	r2, r3, #4
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	9203      	str	r2, [sp, #12]
 800b18c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b190:	3402      	adds	r4, #2
 800b192:	9305      	str	r3, [sp, #20]
 800b194:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b258 <_svfiprintf_r+0x1f4>
 800b198:	7821      	ldrb	r1, [r4, #0]
 800b19a:	2203      	movs	r2, #3
 800b19c:	4650      	mov	r0, sl
 800b19e:	f7f5 f8a7 	bl	80002f0 <memchr>
 800b1a2:	b138      	cbz	r0, 800b1b4 <_svfiprintf_r+0x150>
 800b1a4:	9b04      	ldr	r3, [sp, #16]
 800b1a6:	eba0 000a 	sub.w	r0, r0, sl
 800b1aa:	2240      	movs	r2, #64	@ 0x40
 800b1ac:	4082      	lsls	r2, r0
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	3401      	adds	r4, #1
 800b1b2:	9304      	str	r3, [sp, #16]
 800b1b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1b8:	4824      	ldr	r0, [pc, #144]	@ (800b24c <_svfiprintf_r+0x1e8>)
 800b1ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b1be:	2206      	movs	r2, #6
 800b1c0:	f7f5 f896 	bl	80002f0 <memchr>
 800b1c4:	2800      	cmp	r0, #0
 800b1c6:	d036      	beq.n	800b236 <_svfiprintf_r+0x1d2>
 800b1c8:	4b21      	ldr	r3, [pc, #132]	@ (800b250 <_svfiprintf_r+0x1ec>)
 800b1ca:	bb1b      	cbnz	r3, 800b214 <_svfiprintf_r+0x1b0>
 800b1cc:	9b03      	ldr	r3, [sp, #12]
 800b1ce:	3307      	adds	r3, #7
 800b1d0:	f023 0307 	bic.w	r3, r3, #7
 800b1d4:	3308      	adds	r3, #8
 800b1d6:	9303      	str	r3, [sp, #12]
 800b1d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1da:	4433      	add	r3, r6
 800b1dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1de:	e76a      	b.n	800b0b6 <_svfiprintf_r+0x52>
 800b1e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1e4:	460c      	mov	r4, r1
 800b1e6:	2001      	movs	r0, #1
 800b1e8:	e7a8      	b.n	800b13c <_svfiprintf_r+0xd8>
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	3401      	adds	r4, #1
 800b1ee:	9305      	str	r3, [sp, #20]
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	f04f 0c0a 	mov.w	ip, #10
 800b1f6:	4620      	mov	r0, r4
 800b1f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1fc:	3a30      	subs	r2, #48	@ 0x30
 800b1fe:	2a09      	cmp	r2, #9
 800b200:	d903      	bls.n	800b20a <_svfiprintf_r+0x1a6>
 800b202:	2b00      	cmp	r3, #0
 800b204:	d0c6      	beq.n	800b194 <_svfiprintf_r+0x130>
 800b206:	9105      	str	r1, [sp, #20]
 800b208:	e7c4      	b.n	800b194 <_svfiprintf_r+0x130>
 800b20a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b20e:	4604      	mov	r4, r0
 800b210:	2301      	movs	r3, #1
 800b212:	e7f0      	b.n	800b1f6 <_svfiprintf_r+0x192>
 800b214:	ab03      	add	r3, sp, #12
 800b216:	9300      	str	r3, [sp, #0]
 800b218:	462a      	mov	r2, r5
 800b21a:	4b0e      	ldr	r3, [pc, #56]	@ (800b254 <_svfiprintf_r+0x1f0>)
 800b21c:	a904      	add	r1, sp, #16
 800b21e:	4638      	mov	r0, r7
 800b220:	f3af 8000 	nop.w
 800b224:	1c42      	adds	r2, r0, #1
 800b226:	4606      	mov	r6, r0
 800b228:	d1d6      	bne.n	800b1d8 <_svfiprintf_r+0x174>
 800b22a:	89ab      	ldrh	r3, [r5, #12]
 800b22c:	065b      	lsls	r3, r3, #25
 800b22e:	f53f af2d 	bmi.w	800b08c <_svfiprintf_r+0x28>
 800b232:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b234:	e72c      	b.n	800b090 <_svfiprintf_r+0x2c>
 800b236:	ab03      	add	r3, sp, #12
 800b238:	9300      	str	r3, [sp, #0]
 800b23a:	462a      	mov	r2, r5
 800b23c:	4b05      	ldr	r3, [pc, #20]	@ (800b254 <_svfiprintf_r+0x1f0>)
 800b23e:	a904      	add	r1, sp, #16
 800b240:	4638      	mov	r0, r7
 800b242:	f000 f9bb 	bl	800b5bc <_printf_i>
 800b246:	e7ed      	b.n	800b224 <_svfiprintf_r+0x1c0>
 800b248:	0800c0d8 	.word	0x0800c0d8
 800b24c:	0800c0e2 	.word	0x0800c0e2
 800b250:	00000000 	.word	0x00000000
 800b254:	0800afad 	.word	0x0800afad
 800b258:	0800c0de 	.word	0x0800c0de

0800b25c <__sfputc_r>:
 800b25c:	6893      	ldr	r3, [r2, #8]
 800b25e:	3b01      	subs	r3, #1
 800b260:	2b00      	cmp	r3, #0
 800b262:	b410      	push	{r4}
 800b264:	6093      	str	r3, [r2, #8]
 800b266:	da08      	bge.n	800b27a <__sfputc_r+0x1e>
 800b268:	6994      	ldr	r4, [r2, #24]
 800b26a:	42a3      	cmp	r3, r4
 800b26c:	db01      	blt.n	800b272 <__sfputc_r+0x16>
 800b26e:	290a      	cmp	r1, #10
 800b270:	d103      	bne.n	800b27a <__sfputc_r+0x1e>
 800b272:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b276:	f7ff bc7d 	b.w	800ab74 <__swbuf_r>
 800b27a:	6813      	ldr	r3, [r2, #0]
 800b27c:	1c58      	adds	r0, r3, #1
 800b27e:	6010      	str	r0, [r2, #0]
 800b280:	7019      	strb	r1, [r3, #0]
 800b282:	4608      	mov	r0, r1
 800b284:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b288:	4770      	bx	lr

0800b28a <__sfputs_r>:
 800b28a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b28c:	4606      	mov	r6, r0
 800b28e:	460f      	mov	r7, r1
 800b290:	4614      	mov	r4, r2
 800b292:	18d5      	adds	r5, r2, r3
 800b294:	42ac      	cmp	r4, r5
 800b296:	d101      	bne.n	800b29c <__sfputs_r+0x12>
 800b298:	2000      	movs	r0, #0
 800b29a:	e007      	b.n	800b2ac <__sfputs_r+0x22>
 800b29c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2a0:	463a      	mov	r2, r7
 800b2a2:	4630      	mov	r0, r6
 800b2a4:	f7ff ffda 	bl	800b25c <__sfputc_r>
 800b2a8:	1c43      	adds	r3, r0, #1
 800b2aa:	d1f3      	bne.n	800b294 <__sfputs_r+0xa>
 800b2ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b2b0 <_vfiprintf_r>:
 800b2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2b4:	460d      	mov	r5, r1
 800b2b6:	b09d      	sub	sp, #116	@ 0x74
 800b2b8:	4614      	mov	r4, r2
 800b2ba:	4698      	mov	r8, r3
 800b2bc:	4606      	mov	r6, r0
 800b2be:	b118      	cbz	r0, 800b2c8 <_vfiprintf_r+0x18>
 800b2c0:	6a03      	ldr	r3, [r0, #32]
 800b2c2:	b90b      	cbnz	r3, 800b2c8 <_vfiprintf_r+0x18>
 800b2c4:	f7ff fafc 	bl	800a8c0 <__sinit>
 800b2c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b2ca:	07d9      	lsls	r1, r3, #31
 800b2cc:	d405      	bmi.n	800b2da <_vfiprintf_r+0x2a>
 800b2ce:	89ab      	ldrh	r3, [r5, #12]
 800b2d0:	059a      	lsls	r2, r3, #22
 800b2d2:	d402      	bmi.n	800b2da <_vfiprintf_r+0x2a>
 800b2d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b2d6:	f7ff fd5a 	bl	800ad8e <__retarget_lock_acquire_recursive>
 800b2da:	89ab      	ldrh	r3, [r5, #12]
 800b2dc:	071b      	lsls	r3, r3, #28
 800b2de:	d501      	bpl.n	800b2e4 <_vfiprintf_r+0x34>
 800b2e0:	692b      	ldr	r3, [r5, #16]
 800b2e2:	b99b      	cbnz	r3, 800b30c <_vfiprintf_r+0x5c>
 800b2e4:	4629      	mov	r1, r5
 800b2e6:	4630      	mov	r0, r6
 800b2e8:	f7ff fc82 	bl	800abf0 <__swsetup_r>
 800b2ec:	b170      	cbz	r0, 800b30c <_vfiprintf_r+0x5c>
 800b2ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b2f0:	07dc      	lsls	r4, r3, #31
 800b2f2:	d504      	bpl.n	800b2fe <_vfiprintf_r+0x4e>
 800b2f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2f8:	b01d      	add	sp, #116	@ 0x74
 800b2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2fe:	89ab      	ldrh	r3, [r5, #12]
 800b300:	0598      	lsls	r0, r3, #22
 800b302:	d4f7      	bmi.n	800b2f4 <_vfiprintf_r+0x44>
 800b304:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b306:	f7ff fd43 	bl	800ad90 <__retarget_lock_release_recursive>
 800b30a:	e7f3      	b.n	800b2f4 <_vfiprintf_r+0x44>
 800b30c:	2300      	movs	r3, #0
 800b30e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b310:	2320      	movs	r3, #32
 800b312:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b316:	f8cd 800c 	str.w	r8, [sp, #12]
 800b31a:	2330      	movs	r3, #48	@ 0x30
 800b31c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b4cc <_vfiprintf_r+0x21c>
 800b320:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b324:	f04f 0901 	mov.w	r9, #1
 800b328:	4623      	mov	r3, r4
 800b32a:	469a      	mov	sl, r3
 800b32c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b330:	b10a      	cbz	r2, 800b336 <_vfiprintf_r+0x86>
 800b332:	2a25      	cmp	r2, #37	@ 0x25
 800b334:	d1f9      	bne.n	800b32a <_vfiprintf_r+0x7a>
 800b336:	ebba 0b04 	subs.w	fp, sl, r4
 800b33a:	d00b      	beq.n	800b354 <_vfiprintf_r+0xa4>
 800b33c:	465b      	mov	r3, fp
 800b33e:	4622      	mov	r2, r4
 800b340:	4629      	mov	r1, r5
 800b342:	4630      	mov	r0, r6
 800b344:	f7ff ffa1 	bl	800b28a <__sfputs_r>
 800b348:	3001      	adds	r0, #1
 800b34a:	f000 80a7 	beq.w	800b49c <_vfiprintf_r+0x1ec>
 800b34e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b350:	445a      	add	r2, fp
 800b352:	9209      	str	r2, [sp, #36]	@ 0x24
 800b354:	f89a 3000 	ldrb.w	r3, [sl]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	f000 809f 	beq.w	800b49c <_vfiprintf_r+0x1ec>
 800b35e:	2300      	movs	r3, #0
 800b360:	f04f 32ff 	mov.w	r2, #4294967295
 800b364:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b368:	f10a 0a01 	add.w	sl, sl, #1
 800b36c:	9304      	str	r3, [sp, #16]
 800b36e:	9307      	str	r3, [sp, #28]
 800b370:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b374:	931a      	str	r3, [sp, #104]	@ 0x68
 800b376:	4654      	mov	r4, sl
 800b378:	2205      	movs	r2, #5
 800b37a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b37e:	4853      	ldr	r0, [pc, #332]	@ (800b4cc <_vfiprintf_r+0x21c>)
 800b380:	f7f4 ffb6 	bl	80002f0 <memchr>
 800b384:	9a04      	ldr	r2, [sp, #16]
 800b386:	b9d8      	cbnz	r0, 800b3c0 <_vfiprintf_r+0x110>
 800b388:	06d1      	lsls	r1, r2, #27
 800b38a:	bf44      	itt	mi
 800b38c:	2320      	movmi	r3, #32
 800b38e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b392:	0713      	lsls	r3, r2, #28
 800b394:	bf44      	itt	mi
 800b396:	232b      	movmi	r3, #43	@ 0x2b
 800b398:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b39c:	f89a 3000 	ldrb.w	r3, [sl]
 800b3a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3a2:	d015      	beq.n	800b3d0 <_vfiprintf_r+0x120>
 800b3a4:	9a07      	ldr	r2, [sp, #28]
 800b3a6:	4654      	mov	r4, sl
 800b3a8:	2000      	movs	r0, #0
 800b3aa:	f04f 0c0a 	mov.w	ip, #10
 800b3ae:	4621      	mov	r1, r4
 800b3b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3b4:	3b30      	subs	r3, #48	@ 0x30
 800b3b6:	2b09      	cmp	r3, #9
 800b3b8:	d94b      	bls.n	800b452 <_vfiprintf_r+0x1a2>
 800b3ba:	b1b0      	cbz	r0, 800b3ea <_vfiprintf_r+0x13a>
 800b3bc:	9207      	str	r2, [sp, #28]
 800b3be:	e014      	b.n	800b3ea <_vfiprintf_r+0x13a>
 800b3c0:	eba0 0308 	sub.w	r3, r0, r8
 800b3c4:	fa09 f303 	lsl.w	r3, r9, r3
 800b3c8:	4313      	orrs	r3, r2
 800b3ca:	9304      	str	r3, [sp, #16]
 800b3cc:	46a2      	mov	sl, r4
 800b3ce:	e7d2      	b.n	800b376 <_vfiprintf_r+0xc6>
 800b3d0:	9b03      	ldr	r3, [sp, #12]
 800b3d2:	1d19      	adds	r1, r3, #4
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	9103      	str	r1, [sp, #12]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	bfbb      	ittet	lt
 800b3dc:	425b      	neglt	r3, r3
 800b3de:	f042 0202 	orrlt.w	r2, r2, #2
 800b3e2:	9307      	strge	r3, [sp, #28]
 800b3e4:	9307      	strlt	r3, [sp, #28]
 800b3e6:	bfb8      	it	lt
 800b3e8:	9204      	strlt	r2, [sp, #16]
 800b3ea:	7823      	ldrb	r3, [r4, #0]
 800b3ec:	2b2e      	cmp	r3, #46	@ 0x2e
 800b3ee:	d10a      	bne.n	800b406 <_vfiprintf_r+0x156>
 800b3f0:	7863      	ldrb	r3, [r4, #1]
 800b3f2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3f4:	d132      	bne.n	800b45c <_vfiprintf_r+0x1ac>
 800b3f6:	9b03      	ldr	r3, [sp, #12]
 800b3f8:	1d1a      	adds	r2, r3, #4
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	9203      	str	r2, [sp, #12]
 800b3fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b402:	3402      	adds	r4, #2
 800b404:	9305      	str	r3, [sp, #20]
 800b406:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b4dc <_vfiprintf_r+0x22c>
 800b40a:	7821      	ldrb	r1, [r4, #0]
 800b40c:	2203      	movs	r2, #3
 800b40e:	4650      	mov	r0, sl
 800b410:	f7f4 ff6e 	bl	80002f0 <memchr>
 800b414:	b138      	cbz	r0, 800b426 <_vfiprintf_r+0x176>
 800b416:	9b04      	ldr	r3, [sp, #16]
 800b418:	eba0 000a 	sub.w	r0, r0, sl
 800b41c:	2240      	movs	r2, #64	@ 0x40
 800b41e:	4082      	lsls	r2, r0
 800b420:	4313      	orrs	r3, r2
 800b422:	3401      	adds	r4, #1
 800b424:	9304      	str	r3, [sp, #16]
 800b426:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b42a:	4829      	ldr	r0, [pc, #164]	@ (800b4d0 <_vfiprintf_r+0x220>)
 800b42c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b430:	2206      	movs	r2, #6
 800b432:	f7f4 ff5d 	bl	80002f0 <memchr>
 800b436:	2800      	cmp	r0, #0
 800b438:	d03f      	beq.n	800b4ba <_vfiprintf_r+0x20a>
 800b43a:	4b26      	ldr	r3, [pc, #152]	@ (800b4d4 <_vfiprintf_r+0x224>)
 800b43c:	bb1b      	cbnz	r3, 800b486 <_vfiprintf_r+0x1d6>
 800b43e:	9b03      	ldr	r3, [sp, #12]
 800b440:	3307      	adds	r3, #7
 800b442:	f023 0307 	bic.w	r3, r3, #7
 800b446:	3308      	adds	r3, #8
 800b448:	9303      	str	r3, [sp, #12]
 800b44a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b44c:	443b      	add	r3, r7
 800b44e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b450:	e76a      	b.n	800b328 <_vfiprintf_r+0x78>
 800b452:	fb0c 3202 	mla	r2, ip, r2, r3
 800b456:	460c      	mov	r4, r1
 800b458:	2001      	movs	r0, #1
 800b45a:	e7a8      	b.n	800b3ae <_vfiprintf_r+0xfe>
 800b45c:	2300      	movs	r3, #0
 800b45e:	3401      	adds	r4, #1
 800b460:	9305      	str	r3, [sp, #20]
 800b462:	4619      	mov	r1, r3
 800b464:	f04f 0c0a 	mov.w	ip, #10
 800b468:	4620      	mov	r0, r4
 800b46a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b46e:	3a30      	subs	r2, #48	@ 0x30
 800b470:	2a09      	cmp	r2, #9
 800b472:	d903      	bls.n	800b47c <_vfiprintf_r+0x1cc>
 800b474:	2b00      	cmp	r3, #0
 800b476:	d0c6      	beq.n	800b406 <_vfiprintf_r+0x156>
 800b478:	9105      	str	r1, [sp, #20]
 800b47a:	e7c4      	b.n	800b406 <_vfiprintf_r+0x156>
 800b47c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b480:	4604      	mov	r4, r0
 800b482:	2301      	movs	r3, #1
 800b484:	e7f0      	b.n	800b468 <_vfiprintf_r+0x1b8>
 800b486:	ab03      	add	r3, sp, #12
 800b488:	9300      	str	r3, [sp, #0]
 800b48a:	462a      	mov	r2, r5
 800b48c:	4b12      	ldr	r3, [pc, #72]	@ (800b4d8 <_vfiprintf_r+0x228>)
 800b48e:	a904      	add	r1, sp, #16
 800b490:	4630      	mov	r0, r6
 800b492:	f3af 8000 	nop.w
 800b496:	4607      	mov	r7, r0
 800b498:	1c78      	adds	r0, r7, #1
 800b49a:	d1d6      	bne.n	800b44a <_vfiprintf_r+0x19a>
 800b49c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b49e:	07d9      	lsls	r1, r3, #31
 800b4a0:	d405      	bmi.n	800b4ae <_vfiprintf_r+0x1fe>
 800b4a2:	89ab      	ldrh	r3, [r5, #12]
 800b4a4:	059a      	lsls	r2, r3, #22
 800b4a6:	d402      	bmi.n	800b4ae <_vfiprintf_r+0x1fe>
 800b4a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b4aa:	f7ff fc71 	bl	800ad90 <__retarget_lock_release_recursive>
 800b4ae:	89ab      	ldrh	r3, [r5, #12]
 800b4b0:	065b      	lsls	r3, r3, #25
 800b4b2:	f53f af1f 	bmi.w	800b2f4 <_vfiprintf_r+0x44>
 800b4b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b4b8:	e71e      	b.n	800b2f8 <_vfiprintf_r+0x48>
 800b4ba:	ab03      	add	r3, sp, #12
 800b4bc:	9300      	str	r3, [sp, #0]
 800b4be:	462a      	mov	r2, r5
 800b4c0:	4b05      	ldr	r3, [pc, #20]	@ (800b4d8 <_vfiprintf_r+0x228>)
 800b4c2:	a904      	add	r1, sp, #16
 800b4c4:	4630      	mov	r0, r6
 800b4c6:	f000 f879 	bl	800b5bc <_printf_i>
 800b4ca:	e7e4      	b.n	800b496 <_vfiprintf_r+0x1e6>
 800b4cc:	0800c0d8 	.word	0x0800c0d8
 800b4d0:	0800c0e2 	.word	0x0800c0e2
 800b4d4:	00000000 	.word	0x00000000
 800b4d8:	0800b28b 	.word	0x0800b28b
 800b4dc:	0800c0de 	.word	0x0800c0de

0800b4e0 <_printf_common>:
 800b4e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4e4:	4616      	mov	r6, r2
 800b4e6:	4698      	mov	r8, r3
 800b4e8:	688a      	ldr	r2, [r1, #8]
 800b4ea:	690b      	ldr	r3, [r1, #16]
 800b4ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b4f0:	4293      	cmp	r3, r2
 800b4f2:	bfb8      	it	lt
 800b4f4:	4613      	movlt	r3, r2
 800b4f6:	6033      	str	r3, [r6, #0]
 800b4f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b4fc:	4607      	mov	r7, r0
 800b4fe:	460c      	mov	r4, r1
 800b500:	b10a      	cbz	r2, 800b506 <_printf_common+0x26>
 800b502:	3301      	adds	r3, #1
 800b504:	6033      	str	r3, [r6, #0]
 800b506:	6823      	ldr	r3, [r4, #0]
 800b508:	0699      	lsls	r1, r3, #26
 800b50a:	bf42      	ittt	mi
 800b50c:	6833      	ldrmi	r3, [r6, #0]
 800b50e:	3302      	addmi	r3, #2
 800b510:	6033      	strmi	r3, [r6, #0]
 800b512:	6825      	ldr	r5, [r4, #0]
 800b514:	f015 0506 	ands.w	r5, r5, #6
 800b518:	d106      	bne.n	800b528 <_printf_common+0x48>
 800b51a:	f104 0a19 	add.w	sl, r4, #25
 800b51e:	68e3      	ldr	r3, [r4, #12]
 800b520:	6832      	ldr	r2, [r6, #0]
 800b522:	1a9b      	subs	r3, r3, r2
 800b524:	42ab      	cmp	r3, r5
 800b526:	dc26      	bgt.n	800b576 <_printf_common+0x96>
 800b528:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b52c:	6822      	ldr	r2, [r4, #0]
 800b52e:	3b00      	subs	r3, #0
 800b530:	bf18      	it	ne
 800b532:	2301      	movne	r3, #1
 800b534:	0692      	lsls	r2, r2, #26
 800b536:	d42b      	bmi.n	800b590 <_printf_common+0xb0>
 800b538:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b53c:	4641      	mov	r1, r8
 800b53e:	4638      	mov	r0, r7
 800b540:	47c8      	blx	r9
 800b542:	3001      	adds	r0, #1
 800b544:	d01e      	beq.n	800b584 <_printf_common+0xa4>
 800b546:	6823      	ldr	r3, [r4, #0]
 800b548:	6922      	ldr	r2, [r4, #16]
 800b54a:	f003 0306 	and.w	r3, r3, #6
 800b54e:	2b04      	cmp	r3, #4
 800b550:	bf02      	ittt	eq
 800b552:	68e5      	ldreq	r5, [r4, #12]
 800b554:	6833      	ldreq	r3, [r6, #0]
 800b556:	1aed      	subeq	r5, r5, r3
 800b558:	68a3      	ldr	r3, [r4, #8]
 800b55a:	bf0c      	ite	eq
 800b55c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b560:	2500      	movne	r5, #0
 800b562:	4293      	cmp	r3, r2
 800b564:	bfc4      	itt	gt
 800b566:	1a9b      	subgt	r3, r3, r2
 800b568:	18ed      	addgt	r5, r5, r3
 800b56a:	2600      	movs	r6, #0
 800b56c:	341a      	adds	r4, #26
 800b56e:	42b5      	cmp	r5, r6
 800b570:	d11a      	bne.n	800b5a8 <_printf_common+0xc8>
 800b572:	2000      	movs	r0, #0
 800b574:	e008      	b.n	800b588 <_printf_common+0xa8>
 800b576:	2301      	movs	r3, #1
 800b578:	4652      	mov	r2, sl
 800b57a:	4641      	mov	r1, r8
 800b57c:	4638      	mov	r0, r7
 800b57e:	47c8      	blx	r9
 800b580:	3001      	adds	r0, #1
 800b582:	d103      	bne.n	800b58c <_printf_common+0xac>
 800b584:	f04f 30ff 	mov.w	r0, #4294967295
 800b588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b58c:	3501      	adds	r5, #1
 800b58e:	e7c6      	b.n	800b51e <_printf_common+0x3e>
 800b590:	18e1      	adds	r1, r4, r3
 800b592:	1c5a      	adds	r2, r3, #1
 800b594:	2030      	movs	r0, #48	@ 0x30
 800b596:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b59a:	4422      	add	r2, r4
 800b59c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b5a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b5a4:	3302      	adds	r3, #2
 800b5a6:	e7c7      	b.n	800b538 <_printf_common+0x58>
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	4622      	mov	r2, r4
 800b5ac:	4641      	mov	r1, r8
 800b5ae:	4638      	mov	r0, r7
 800b5b0:	47c8      	blx	r9
 800b5b2:	3001      	adds	r0, #1
 800b5b4:	d0e6      	beq.n	800b584 <_printf_common+0xa4>
 800b5b6:	3601      	adds	r6, #1
 800b5b8:	e7d9      	b.n	800b56e <_printf_common+0x8e>
	...

0800b5bc <_printf_i>:
 800b5bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b5c0:	7e0f      	ldrb	r7, [r1, #24]
 800b5c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b5c4:	2f78      	cmp	r7, #120	@ 0x78
 800b5c6:	4691      	mov	r9, r2
 800b5c8:	4680      	mov	r8, r0
 800b5ca:	460c      	mov	r4, r1
 800b5cc:	469a      	mov	sl, r3
 800b5ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b5d2:	d807      	bhi.n	800b5e4 <_printf_i+0x28>
 800b5d4:	2f62      	cmp	r7, #98	@ 0x62
 800b5d6:	d80a      	bhi.n	800b5ee <_printf_i+0x32>
 800b5d8:	2f00      	cmp	r7, #0
 800b5da:	f000 80d1 	beq.w	800b780 <_printf_i+0x1c4>
 800b5de:	2f58      	cmp	r7, #88	@ 0x58
 800b5e0:	f000 80b8 	beq.w	800b754 <_printf_i+0x198>
 800b5e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b5e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b5ec:	e03a      	b.n	800b664 <_printf_i+0xa8>
 800b5ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b5f2:	2b15      	cmp	r3, #21
 800b5f4:	d8f6      	bhi.n	800b5e4 <_printf_i+0x28>
 800b5f6:	a101      	add	r1, pc, #4	@ (adr r1, 800b5fc <_printf_i+0x40>)
 800b5f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b5fc:	0800b655 	.word	0x0800b655
 800b600:	0800b669 	.word	0x0800b669
 800b604:	0800b5e5 	.word	0x0800b5e5
 800b608:	0800b5e5 	.word	0x0800b5e5
 800b60c:	0800b5e5 	.word	0x0800b5e5
 800b610:	0800b5e5 	.word	0x0800b5e5
 800b614:	0800b669 	.word	0x0800b669
 800b618:	0800b5e5 	.word	0x0800b5e5
 800b61c:	0800b5e5 	.word	0x0800b5e5
 800b620:	0800b5e5 	.word	0x0800b5e5
 800b624:	0800b5e5 	.word	0x0800b5e5
 800b628:	0800b767 	.word	0x0800b767
 800b62c:	0800b693 	.word	0x0800b693
 800b630:	0800b721 	.word	0x0800b721
 800b634:	0800b5e5 	.word	0x0800b5e5
 800b638:	0800b5e5 	.word	0x0800b5e5
 800b63c:	0800b789 	.word	0x0800b789
 800b640:	0800b5e5 	.word	0x0800b5e5
 800b644:	0800b693 	.word	0x0800b693
 800b648:	0800b5e5 	.word	0x0800b5e5
 800b64c:	0800b5e5 	.word	0x0800b5e5
 800b650:	0800b729 	.word	0x0800b729
 800b654:	6833      	ldr	r3, [r6, #0]
 800b656:	1d1a      	adds	r2, r3, #4
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	6032      	str	r2, [r6, #0]
 800b65c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b660:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b664:	2301      	movs	r3, #1
 800b666:	e09c      	b.n	800b7a2 <_printf_i+0x1e6>
 800b668:	6833      	ldr	r3, [r6, #0]
 800b66a:	6820      	ldr	r0, [r4, #0]
 800b66c:	1d19      	adds	r1, r3, #4
 800b66e:	6031      	str	r1, [r6, #0]
 800b670:	0606      	lsls	r6, r0, #24
 800b672:	d501      	bpl.n	800b678 <_printf_i+0xbc>
 800b674:	681d      	ldr	r5, [r3, #0]
 800b676:	e003      	b.n	800b680 <_printf_i+0xc4>
 800b678:	0645      	lsls	r5, r0, #25
 800b67a:	d5fb      	bpl.n	800b674 <_printf_i+0xb8>
 800b67c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b680:	2d00      	cmp	r5, #0
 800b682:	da03      	bge.n	800b68c <_printf_i+0xd0>
 800b684:	232d      	movs	r3, #45	@ 0x2d
 800b686:	426d      	negs	r5, r5
 800b688:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b68c:	4858      	ldr	r0, [pc, #352]	@ (800b7f0 <_printf_i+0x234>)
 800b68e:	230a      	movs	r3, #10
 800b690:	e011      	b.n	800b6b6 <_printf_i+0xfa>
 800b692:	6821      	ldr	r1, [r4, #0]
 800b694:	6833      	ldr	r3, [r6, #0]
 800b696:	0608      	lsls	r0, r1, #24
 800b698:	f853 5b04 	ldr.w	r5, [r3], #4
 800b69c:	d402      	bmi.n	800b6a4 <_printf_i+0xe8>
 800b69e:	0649      	lsls	r1, r1, #25
 800b6a0:	bf48      	it	mi
 800b6a2:	b2ad      	uxthmi	r5, r5
 800b6a4:	2f6f      	cmp	r7, #111	@ 0x6f
 800b6a6:	4852      	ldr	r0, [pc, #328]	@ (800b7f0 <_printf_i+0x234>)
 800b6a8:	6033      	str	r3, [r6, #0]
 800b6aa:	bf14      	ite	ne
 800b6ac:	230a      	movne	r3, #10
 800b6ae:	2308      	moveq	r3, #8
 800b6b0:	2100      	movs	r1, #0
 800b6b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b6b6:	6866      	ldr	r6, [r4, #4]
 800b6b8:	60a6      	str	r6, [r4, #8]
 800b6ba:	2e00      	cmp	r6, #0
 800b6bc:	db05      	blt.n	800b6ca <_printf_i+0x10e>
 800b6be:	6821      	ldr	r1, [r4, #0]
 800b6c0:	432e      	orrs	r6, r5
 800b6c2:	f021 0104 	bic.w	r1, r1, #4
 800b6c6:	6021      	str	r1, [r4, #0]
 800b6c8:	d04b      	beq.n	800b762 <_printf_i+0x1a6>
 800b6ca:	4616      	mov	r6, r2
 800b6cc:	fbb5 f1f3 	udiv	r1, r5, r3
 800b6d0:	fb03 5711 	mls	r7, r3, r1, r5
 800b6d4:	5dc7      	ldrb	r7, [r0, r7]
 800b6d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b6da:	462f      	mov	r7, r5
 800b6dc:	42bb      	cmp	r3, r7
 800b6de:	460d      	mov	r5, r1
 800b6e0:	d9f4      	bls.n	800b6cc <_printf_i+0x110>
 800b6e2:	2b08      	cmp	r3, #8
 800b6e4:	d10b      	bne.n	800b6fe <_printf_i+0x142>
 800b6e6:	6823      	ldr	r3, [r4, #0]
 800b6e8:	07df      	lsls	r7, r3, #31
 800b6ea:	d508      	bpl.n	800b6fe <_printf_i+0x142>
 800b6ec:	6923      	ldr	r3, [r4, #16]
 800b6ee:	6861      	ldr	r1, [r4, #4]
 800b6f0:	4299      	cmp	r1, r3
 800b6f2:	bfde      	ittt	le
 800b6f4:	2330      	movle	r3, #48	@ 0x30
 800b6f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b6fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b6fe:	1b92      	subs	r2, r2, r6
 800b700:	6122      	str	r2, [r4, #16]
 800b702:	f8cd a000 	str.w	sl, [sp]
 800b706:	464b      	mov	r3, r9
 800b708:	aa03      	add	r2, sp, #12
 800b70a:	4621      	mov	r1, r4
 800b70c:	4640      	mov	r0, r8
 800b70e:	f7ff fee7 	bl	800b4e0 <_printf_common>
 800b712:	3001      	adds	r0, #1
 800b714:	d14a      	bne.n	800b7ac <_printf_i+0x1f0>
 800b716:	f04f 30ff 	mov.w	r0, #4294967295
 800b71a:	b004      	add	sp, #16
 800b71c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b720:	6823      	ldr	r3, [r4, #0]
 800b722:	f043 0320 	orr.w	r3, r3, #32
 800b726:	6023      	str	r3, [r4, #0]
 800b728:	4832      	ldr	r0, [pc, #200]	@ (800b7f4 <_printf_i+0x238>)
 800b72a:	2778      	movs	r7, #120	@ 0x78
 800b72c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b730:	6823      	ldr	r3, [r4, #0]
 800b732:	6831      	ldr	r1, [r6, #0]
 800b734:	061f      	lsls	r7, r3, #24
 800b736:	f851 5b04 	ldr.w	r5, [r1], #4
 800b73a:	d402      	bmi.n	800b742 <_printf_i+0x186>
 800b73c:	065f      	lsls	r7, r3, #25
 800b73e:	bf48      	it	mi
 800b740:	b2ad      	uxthmi	r5, r5
 800b742:	6031      	str	r1, [r6, #0]
 800b744:	07d9      	lsls	r1, r3, #31
 800b746:	bf44      	itt	mi
 800b748:	f043 0320 	orrmi.w	r3, r3, #32
 800b74c:	6023      	strmi	r3, [r4, #0]
 800b74e:	b11d      	cbz	r5, 800b758 <_printf_i+0x19c>
 800b750:	2310      	movs	r3, #16
 800b752:	e7ad      	b.n	800b6b0 <_printf_i+0xf4>
 800b754:	4826      	ldr	r0, [pc, #152]	@ (800b7f0 <_printf_i+0x234>)
 800b756:	e7e9      	b.n	800b72c <_printf_i+0x170>
 800b758:	6823      	ldr	r3, [r4, #0]
 800b75a:	f023 0320 	bic.w	r3, r3, #32
 800b75e:	6023      	str	r3, [r4, #0]
 800b760:	e7f6      	b.n	800b750 <_printf_i+0x194>
 800b762:	4616      	mov	r6, r2
 800b764:	e7bd      	b.n	800b6e2 <_printf_i+0x126>
 800b766:	6833      	ldr	r3, [r6, #0]
 800b768:	6825      	ldr	r5, [r4, #0]
 800b76a:	6961      	ldr	r1, [r4, #20]
 800b76c:	1d18      	adds	r0, r3, #4
 800b76e:	6030      	str	r0, [r6, #0]
 800b770:	062e      	lsls	r6, r5, #24
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	d501      	bpl.n	800b77a <_printf_i+0x1be>
 800b776:	6019      	str	r1, [r3, #0]
 800b778:	e002      	b.n	800b780 <_printf_i+0x1c4>
 800b77a:	0668      	lsls	r0, r5, #25
 800b77c:	d5fb      	bpl.n	800b776 <_printf_i+0x1ba>
 800b77e:	8019      	strh	r1, [r3, #0]
 800b780:	2300      	movs	r3, #0
 800b782:	6123      	str	r3, [r4, #16]
 800b784:	4616      	mov	r6, r2
 800b786:	e7bc      	b.n	800b702 <_printf_i+0x146>
 800b788:	6833      	ldr	r3, [r6, #0]
 800b78a:	1d1a      	adds	r2, r3, #4
 800b78c:	6032      	str	r2, [r6, #0]
 800b78e:	681e      	ldr	r6, [r3, #0]
 800b790:	6862      	ldr	r2, [r4, #4]
 800b792:	2100      	movs	r1, #0
 800b794:	4630      	mov	r0, r6
 800b796:	f7f4 fdab 	bl	80002f0 <memchr>
 800b79a:	b108      	cbz	r0, 800b7a0 <_printf_i+0x1e4>
 800b79c:	1b80      	subs	r0, r0, r6
 800b79e:	6060      	str	r0, [r4, #4]
 800b7a0:	6863      	ldr	r3, [r4, #4]
 800b7a2:	6123      	str	r3, [r4, #16]
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7aa:	e7aa      	b.n	800b702 <_printf_i+0x146>
 800b7ac:	6923      	ldr	r3, [r4, #16]
 800b7ae:	4632      	mov	r2, r6
 800b7b0:	4649      	mov	r1, r9
 800b7b2:	4640      	mov	r0, r8
 800b7b4:	47d0      	blx	sl
 800b7b6:	3001      	adds	r0, #1
 800b7b8:	d0ad      	beq.n	800b716 <_printf_i+0x15a>
 800b7ba:	6823      	ldr	r3, [r4, #0]
 800b7bc:	079b      	lsls	r3, r3, #30
 800b7be:	d413      	bmi.n	800b7e8 <_printf_i+0x22c>
 800b7c0:	68e0      	ldr	r0, [r4, #12]
 800b7c2:	9b03      	ldr	r3, [sp, #12]
 800b7c4:	4298      	cmp	r0, r3
 800b7c6:	bfb8      	it	lt
 800b7c8:	4618      	movlt	r0, r3
 800b7ca:	e7a6      	b.n	800b71a <_printf_i+0x15e>
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	4632      	mov	r2, r6
 800b7d0:	4649      	mov	r1, r9
 800b7d2:	4640      	mov	r0, r8
 800b7d4:	47d0      	blx	sl
 800b7d6:	3001      	adds	r0, #1
 800b7d8:	d09d      	beq.n	800b716 <_printf_i+0x15a>
 800b7da:	3501      	adds	r5, #1
 800b7dc:	68e3      	ldr	r3, [r4, #12]
 800b7de:	9903      	ldr	r1, [sp, #12]
 800b7e0:	1a5b      	subs	r3, r3, r1
 800b7e2:	42ab      	cmp	r3, r5
 800b7e4:	dcf2      	bgt.n	800b7cc <_printf_i+0x210>
 800b7e6:	e7eb      	b.n	800b7c0 <_printf_i+0x204>
 800b7e8:	2500      	movs	r5, #0
 800b7ea:	f104 0619 	add.w	r6, r4, #25
 800b7ee:	e7f5      	b.n	800b7dc <_printf_i+0x220>
 800b7f0:	0800c0e9 	.word	0x0800c0e9
 800b7f4:	0800c0fa 	.word	0x0800c0fa

0800b7f8 <__sflush_r>:
 800b7f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b800:	0716      	lsls	r6, r2, #28
 800b802:	4605      	mov	r5, r0
 800b804:	460c      	mov	r4, r1
 800b806:	d454      	bmi.n	800b8b2 <__sflush_r+0xba>
 800b808:	684b      	ldr	r3, [r1, #4]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	dc02      	bgt.n	800b814 <__sflush_r+0x1c>
 800b80e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b810:	2b00      	cmp	r3, #0
 800b812:	dd48      	ble.n	800b8a6 <__sflush_r+0xae>
 800b814:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b816:	2e00      	cmp	r6, #0
 800b818:	d045      	beq.n	800b8a6 <__sflush_r+0xae>
 800b81a:	2300      	movs	r3, #0
 800b81c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b820:	682f      	ldr	r7, [r5, #0]
 800b822:	6a21      	ldr	r1, [r4, #32]
 800b824:	602b      	str	r3, [r5, #0]
 800b826:	d030      	beq.n	800b88a <__sflush_r+0x92>
 800b828:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b82a:	89a3      	ldrh	r3, [r4, #12]
 800b82c:	0759      	lsls	r1, r3, #29
 800b82e:	d505      	bpl.n	800b83c <__sflush_r+0x44>
 800b830:	6863      	ldr	r3, [r4, #4]
 800b832:	1ad2      	subs	r2, r2, r3
 800b834:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b836:	b10b      	cbz	r3, 800b83c <__sflush_r+0x44>
 800b838:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b83a:	1ad2      	subs	r2, r2, r3
 800b83c:	2300      	movs	r3, #0
 800b83e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b840:	6a21      	ldr	r1, [r4, #32]
 800b842:	4628      	mov	r0, r5
 800b844:	47b0      	blx	r6
 800b846:	1c43      	adds	r3, r0, #1
 800b848:	89a3      	ldrh	r3, [r4, #12]
 800b84a:	d106      	bne.n	800b85a <__sflush_r+0x62>
 800b84c:	6829      	ldr	r1, [r5, #0]
 800b84e:	291d      	cmp	r1, #29
 800b850:	d82b      	bhi.n	800b8aa <__sflush_r+0xb2>
 800b852:	4a2a      	ldr	r2, [pc, #168]	@ (800b8fc <__sflush_r+0x104>)
 800b854:	40ca      	lsrs	r2, r1
 800b856:	07d6      	lsls	r6, r2, #31
 800b858:	d527      	bpl.n	800b8aa <__sflush_r+0xb2>
 800b85a:	2200      	movs	r2, #0
 800b85c:	6062      	str	r2, [r4, #4]
 800b85e:	04d9      	lsls	r1, r3, #19
 800b860:	6922      	ldr	r2, [r4, #16]
 800b862:	6022      	str	r2, [r4, #0]
 800b864:	d504      	bpl.n	800b870 <__sflush_r+0x78>
 800b866:	1c42      	adds	r2, r0, #1
 800b868:	d101      	bne.n	800b86e <__sflush_r+0x76>
 800b86a:	682b      	ldr	r3, [r5, #0]
 800b86c:	b903      	cbnz	r3, 800b870 <__sflush_r+0x78>
 800b86e:	6560      	str	r0, [r4, #84]	@ 0x54
 800b870:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b872:	602f      	str	r7, [r5, #0]
 800b874:	b1b9      	cbz	r1, 800b8a6 <__sflush_r+0xae>
 800b876:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b87a:	4299      	cmp	r1, r3
 800b87c:	d002      	beq.n	800b884 <__sflush_r+0x8c>
 800b87e:	4628      	mov	r0, r5
 800b880:	f7ff fa9c 	bl	800adbc <_free_r>
 800b884:	2300      	movs	r3, #0
 800b886:	6363      	str	r3, [r4, #52]	@ 0x34
 800b888:	e00d      	b.n	800b8a6 <__sflush_r+0xae>
 800b88a:	2301      	movs	r3, #1
 800b88c:	4628      	mov	r0, r5
 800b88e:	47b0      	blx	r6
 800b890:	4602      	mov	r2, r0
 800b892:	1c50      	adds	r0, r2, #1
 800b894:	d1c9      	bne.n	800b82a <__sflush_r+0x32>
 800b896:	682b      	ldr	r3, [r5, #0]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d0c6      	beq.n	800b82a <__sflush_r+0x32>
 800b89c:	2b1d      	cmp	r3, #29
 800b89e:	d001      	beq.n	800b8a4 <__sflush_r+0xac>
 800b8a0:	2b16      	cmp	r3, #22
 800b8a2:	d11e      	bne.n	800b8e2 <__sflush_r+0xea>
 800b8a4:	602f      	str	r7, [r5, #0]
 800b8a6:	2000      	movs	r0, #0
 800b8a8:	e022      	b.n	800b8f0 <__sflush_r+0xf8>
 800b8aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8ae:	b21b      	sxth	r3, r3
 800b8b0:	e01b      	b.n	800b8ea <__sflush_r+0xf2>
 800b8b2:	690f      	ldr	r7, [r1, #16]
 800b8b4:	2f00      	cmp	r7, #0
 800b8b6:	d0f6      	beq.n	800b8a6 <__sflush_r+0xae>
 800b8b8:	0793      	lsls	r3, r2, #30
 800b8ba:	680e      	ldr	r6, [r1, #0]
 800b8bc:	bf08      	it	eq
 800b8be:	694b      	ldreq	r3, [r1, #20]
 800b8c0:	600f      	str	r7, [r1, #0]
 800b8c2:	bf18      	it	ne
 800b8c4:	2300      	movne	r3, #0
 800b8c6:	eba6 0807 	sub.w	r8, r6, r7
 800b8ca:	608b      	str	r3, [r1, #8]
 800b8cc:	f1b8 0f00 	cmp.w	r8, #0
 800b8d0:	dde9      	ble.n	800b8a6 <__sflush_r+0xae>
 800b8d2:	6a21      	ldr	r1, [r4, #32]
 800b8d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b8d6:	4643      	mov	r3, r8
 800b8d8:	463a      	mov	r2, r7
 800b8da:	4628      	mov	r0, r5
 800b8dc:	47b0      	blx	r6
 800b8de:	2800      	cmp	r0, #0
 800b8e0:	dc08      	bgt.n	800b8f4 <__sflush_r+0xfc>
 800b8e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8ea:	81a3      	strh	r3, [r4, #12]
 800b8ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8f4:	4407      	add	r7, r0
 800b8f6:	eba8 0800 	sub.w	r8, r8, r0
 800b8fa:	e7e7      	b.n	800b8cc <__sflush_r+0xd4>
 800b8fc:	20400001 	.word	0x20400001

0800b900 <_fflush_r>:
 800b900:	b538      	push	{r3, r4, r5, lr}
 800b902:	690b      	ldr	r3, [r1, #16]
 800b904:	4605      	mov	r5, r0
 800b906:	460c      	mov	r4, r1
 800b908:	b913      	cbnz	r3, 800b910 <_fflush_r+0x10>
 800b90a:	2500      	movs	r5, #0
 800b90c:	4628      	mov	r0, r5
 800b90e:	bd38      	pop	{r3, r4, r5, pc}
 800b910:	b118      	cbz	r0, 800b91a <_fflush_r+0x1a>
 800b912:	6a03      	ldr	r3, [r0, #32]
 800b914:	b90b      	cbnz	r3, 800b91a <_fflush_r+0x1a>
 800b916:	f7fe ffd3 	bl	800a8c0 <__sinit>
 800b91a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d0f3      	beq.n	800b90a <_fflush_r+0xa>
 800b922:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b924:	07d0      	lsls	r0, r2, #31
 800b926:	d404      	bmi.n	800b932 <_fflush_r+0x32>
 800b928:	0599      	lsls	r1, r3, #22
 800b92a:	d402      	bmi.n	800b932 <_fflush_r+0x32>
 800b92c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b92e:	f7ff fa2e 	bl	800ad8e <__retarget_lock_acquire_recursive>
 800b932:	4628      	mov	r0, r5
 800b934:	4621      	mov	r1, r4
 800b936:	f7ff ff5f 	bl	800b7f8 <__sflush_r>
 800b93a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b93c:	07da      	lsls	r2, r3, #31
 800b93e:	4605      	mov	r5, r0
 800b940:	d4e4      	bmi.n	800b90c <_fflush_r+0xc>
 800b942:	89a3      	ldrh	r3, [r4, #12]
 800b944:	059b      	lsls	r3, r3, #22
 800b946:	d4e1      	bmi.n	800b90c <_fflush_r+0xc>
 800b948:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b94a:	f7ff fa21 	bl	800ad90 <__retarget_lock_release_recursive>
 800b94e:	e7dd      	b.n	800b90c <_fflush_r+0xc>

0800b950 <__swhatbuf_r>:
 800b950:	b570      	push	{r4, r5, r6, lr}
 800b952:	460c      	mov	r4, r1
 800b954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b958:	2900      	cmp	r1, #0
 800b95a:	b096      	sub	sp, #88	@ 0x58
 800b95c:	4615      	mov	r5, r2
 800b95e:	461e      	mov	r6, r3
 800b960:	da0d      	bge.n	800b97e <__swhatbuf_r+0x2e>
 800b962:	89a3      	ldrh	r3, [r4, #12]
 800b964:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b968:	f04f 0100 	mov.w	r1, #0
 800b96c:	bf14      	ite	ne
 800b96e:	2340      	movne	r3, #64	@ 0x40
 800b970:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b974:	2000      	movs	r0, #0
 800b976:	6031      	str	r1, [r6, #0]
 800b978:	602b      	str	r3, [r5, #0]
 800b97a:	b016      	add	sp, #88	@ 0x58
 800b97c:	bd70      	pop	{r4, r5, r6, pc}
 800b97e:	466a      	mov	r2, sp
 800b980:	f000 f892 	bl	800baa8 <_fstat_r>
 800b984:	2800      	cmp	r0, #0
 800b986:	dbec      	blt.n	800b962 <__swhatbuf_r+0x12>
 800b988:	9901      	ldr	r1, [sp, #4]
 800b98a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b98e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b992:	4259      	negs	r1, r3
 800b994:	4159      	adcs	r1, r3
 800b996:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b99a:	e7eb      	b.n	800b974 <__swhatbuf_r+0x24>

0800b99c <__smakebuf_r>:
 800b99c:	898b      	ldrh	r3, [r1, #12]
 800b99e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b9a0:	079d      	lsls	r5, r3, #30
 800b9a2:	4606      	mov	r6, r0
 800b9a4:	460c      	mov	r4, r1
 800b9a6:	d507      	bpl.n	800b9b8 <__smakebuf_r+0x1c>
 800b9a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b9ac:	6023      	str	r3, [r4, #0]
 800b9ae:	6123      	str	r3, [r4, #16]
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	6163      	str	r3, [r4, #20]
 800b9b4:	b003      	add	sp, #12
 800b9b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9b8:	ab01      	add	r3, sp, #4
 800b9ba:	466a      	mov	r2, sp
 800b9bc:	f7ff ffc8 	bl	800b950 <__swhatbuf_r>
 800b9c0:	9f00      	ldr	r7, [sp, #0]
 800b9c2:	4605      	mov	r5, r0
 800b9c4:	4639      	mov	r1, r7
 800b9c6:	4630      	mov	r0, r6
 800b9c8:	f7ff fa64 	bl	800ae94 <_malloc_r>
 800b9cc:	b948      	cbnz	r0, 800b9e2 <__smakebuf_r+0x46>
 800b9ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9d2:	059a      	lsls	r2, r3, #22
 800b9d4:	d4ee      	bmi.n	800b9b4 <__smakebuf_r+0x18>
 800b9d6:	f023 0303 	bic.w	r3, r3, #3
 800b9da:	f043 0302 	orr.w	r3, r3, #2
 800b9de:	81a3      	strh	r3, [r4, #12]
 800b9e0:	e7e2      	b.n	800b9a8 <__smakebuf_r+0xc>
 800b9e2:	89a3      	ldrh	r3, [r4, #12]
 800b9e4:	6020      	str	r0, [r4, #0]
 800b9e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9ea:	81a3      	strh	r3, [r4, #12]
 800b9ec:	9b01      	ldr	r3, [sp, #4]
 800b9ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b9f2:	b15b      	cbz	r3, 800ba0c <__smakebuf_r+0x70>
 800b9f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9f8:	4630      	mov	r0, r6
 800b9fa:	f000 f867 	bl	800bacc <_isatty_r>
 800b9fe:	b128      	cbz	r0, 800ba0c <__smakebuf_r+0x70>
 800ba00:	89a3      	ldrh	r3, [r4, #12]
 800ba02:	f023 0303 	bic.w	r3, r3, #3
 800ba06:	f043 0301 	orr.w	r3, r3, #1
 800ba0a:	81a3      	strh	r3, [r4, #12]
 800ba0c:	89a3      	ldrh	r3, [r4, #12]
 800ba0e:	431d      	orrs	r5, r3
 800ba10:	81a5      	strh	r5, [r4, #12]
 800ba12:	e7cf      	b.n	800b9b4 <__smakebuf_r+0x18>

0800ba14 <memmove>:
 800ba14:	4288      	cmp	r0, r1
 800ba16:	b510      	push	{r4, lr}
 800ba18:	eb01 0402 	add.w	r4, r1, r2
 800ba1c:	d902      	bls.n	800ba24 <memmove+0x10>
 800ba1e:	4284      	cmp	r4, r0
 800ba20:	4623      	mov	r3, r4
 800ba22:	d807      	bhi.n	800ba34 <memmove+0x20>
 800ba24:	1e43      	subs	r3, r0, #1
 800ba26:	42a1      	cmp	r1, r4
 800ba28:	d008      	beq.n	800ba3c <memmove+0x28>
 800ba2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba32:	e7f8      	b.n	800ba26 <memmove+0x12>
 800ba34:	4402      	add	r2, r0
 800ba36:	4601      	mov	r1, r0
 800ba38:	428a      	cmp	r2, r1
 800ba3a:	d100      	bne.n	800ba3e <memmove+0x2a>
 800ba3c:	bd10      	pop	{r4, pc}
 800ba3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba46:	e7f7      	b.n	800ba38 <memmove+0x24>

0800ba48 <_raise_r>:
 800ba48:	291f      	cmp	r1, #31
 800ba4a:	b538      	push	{r3, r4, r5, lr}
 800ba4c:	4605      	mov	r5, r0
 800ba4e:	460c      	mov	r4, r1
 800ba50:	d904      	bls.n	800ba5c <_raise_r+0x14>
 800ba52:	2316      	movs	r3, #22
 800ba54:	6003      	str	r3, [r0, #0]
 800ba56:	f04f 30ff 	mov.w	r0, #4294967295
 800ba5a:	bd38      	pop	{r3, r4, r5, pc}
 800ba5c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ba5e:	b112      	cbz	r2, 800ba66 <_raise_r+0x1e>
 800ba60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba64:	b94b      	cbnz	r3, 800ba7a <_raise_r+0x32>
 800ba66:	4628      	mov	r0, r5
 800ba68:	f000 f852 	bl	800bb10 <_getpid_r>
 800ba6c:	4622      	mov	r2, r4
 800ba6e:	4601      	mov	r1, r0
 800ba70:	4628      	mov	r0, r5
 800ba72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba76:	f000 b839 	b.w	800baec <_kill_r>
 800ba7a:	2b01      	cmp	r3, #1
 800ba7c:	d00a      	beq.n	800ba94 <_raise_r+0x4c>
 800ba7e:	1c59      	adds	r1, r3, #1
 800ba80:	d103      	bne.n	800ba8a <_raise_r+0x42>
 800ba82:	2316      	movs	r3, #22
 800ba84:	6003      	str	r3, [r0, #0]
 800ba86:	2001      	movs	r0, #1
 800ba88:	e7e7      	b.n	800ba5a <_raise_r+0x12>
 800ba8a:	2100      	movs	r1, #0
 800ba8c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ba90:	4620      	mov	r0, r4
 800ba92:	4798      	blx	r3
 800ba94:	2000      	movs	r0, #0
 800ba96:	e7e0      	b.n	800ba5a <_raise_r+0x12>

0800ba98 <raise>:
 800ba98:	4b02      	ldr	r3, [pc, #8]	@ (800baa4 <raise+0xc>)
 800ba9a:	4601      	mov	r1, r0
 800ba9c:	6818      	ldr	r0, [r3, #0]
 800ba9e:	f7ff bfd3 	b.w	800ba48 <_raise_r>
 800baa2:	bf00      	nop
 800baa4:	24000034 	.word	0x24000034

0800baa8 <_fstat_r>:
 800baa8:	b538      	push	{r3, r4, r5, lr}
 800baaa:	4d07      	ldr	r5, [pc, #28]	@ (800bac8 <_fstat_r+0x20>)
 800baac:	2300      	movs	r3, #0
 800baae:	4604      	mov	r4, r0
 800bab0:	4608      	mov	r0, r1
 800bab2:	4611      	mov	r1, r2
 800bab4:	602b      	str	r3, [r5, #0]
 800bab6:	f7f6 f8dd 	bl	8001c74 <_fstat>
 800baba:	1c43      	adds	r3, r0, #1
 800babc:	d102      	bne.n	800bac4 <_fstat_r+0x1c>
 800babe:	682b      	ldr	r3, [r5, #0]
 800bac0:	b103      	cbz	r3, 800bac4 <_fstat_r+0x1c>
 800bac2:	6023      	str	r3, [r4, #0]
 800bac4:	bd38      	pop	{r3, r4, r5, pc}
 800bac6:	bf00      	nop
 800bac8:	240024d8 	.word	0x240024d8

0800bacc <_isatty_r>:
 800bacc:	b538      	push	{r3, r4, r5, lr}
 800bace:	4d06      	ldr	r5, [pc, #24]	@ (800bae8 <_isatty_r+0x1c>)
 800bad0:	2300      	movs	r3, #0
 800bad2:	4604      	mov	r4, r0
 800bad4:	4608      	mov	r0, r1
 800bad6:	602b      	str	r3, [r5, #0]
 800bad8:	f7f6 f8dc 	bl	8001c94 <_isatty>
 800badc:	1c43      	adds	r3, r0, #1
 800bade:	d102      	bne.n	800bae6 <_isatty_r+0x1a>
 800bae0:	682b      	ldr	r3, [r5, #0]
 800bae2:	b103      	cbz	r3, 800bae6 <_isatty_r+0x1a>
 800bae4:	6023      	str	r3, [r4, #0]
 800bae6:	bd38      	pop	{r3, r4, r5, pc}
 800bae8:	240024d8 	.word	0x240024d8

0800baec <_kill_r>:
 800baec:	b538      	push	{r3, r4, r5, lr}
 800baee:	4d07      	ldr	r5, [pc, #28]	@ (800bb0c <_kill_r+0x20>)
 800baf0:	2300      	movs	r3, #0
 800baf2:	4604      	mov	r4, r0
 800baf4:	4608      	mov	r0, r1
 800baf6:	4611      	mov	r1, r2
 800baf8:	602b      	str	r3, [r5, #0]
 800bafa:	f7f6 f85b 	bl	8001bb4 <_kill>
 800bafe:	1c43      	adds	r3, r0, #1
 800bb00:	d102      	bne.n	800bb08 <_kill_r+0x1c>
 800bb02:	682b      	ldr	r3, [r5, #0]
 800bb04:	b103      	cbz	r3, 800bb08 <_kill_r+0x1c>
 800bb06:	6023      	str	r3, [r4, #0]
 800bb08:	bd38      	pop	{r3, r4, r5, pc}
 800bb0a:	bf00      	nop
 800bb0c:	240024d8 	.word	0x240024d8

0800bb10 <_getpid_r>:
 800bb10:	f7f6 b848 	b.w	8001ba4 <_getpid>

0800bb14 <_sbrk_r>:
 800bb14:	b538      	push	{r3, r4, r5, lr}
 800bb16:	4d06      	ldr	r5, [pc, #24]	@ (800bb30 <_sbrk_r+0x1c>)
 800bb18:	2300      	movs	r3, #0
 800bb1a:	4604      	mov	r4, r0
 800bb1c:	4608      	mov	r0, r1
 800bb1e:	602b      	str	r3, [r5, #0]
 800bb20:	f7f6 f8d0 	bl	8001cc4 <_sbrk>
 800bb24:	1c43      	adds	r3, r0, #1
 800bb26:	d102      	bne.n	800bb2e <_sbrk_r+0x1a>
 800bb28:	682b      	ldr	r3, [r5, #0]
 800bb2a:	b103      	cbz	r3, 800bb2e <_sbrk_r+0x1a>
 800bb2c:	6023      	str	r3, [r4, #0]
 800bb2e:	bd38      	pop	{r3, r4, r5, pc}
 800bb30:	240024d8 	.word	0x240024d8

0800bb34 <_realloc_r>:
 800bb34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb38:	4607      	mov	r7, r0
 800bb3a:	4614      	mov	r4, r2
 800bb3c:	460d      	mov	r5, r1
 800bb3e:	b921      	cbnz	r1, 800bb4a <_realloc_r+0x16>
 800bb40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb44:	4611      	mov	r1, r2
 800bb46:	f7ff b9a5 	b.w	800ae94 <_malloc_r>
 800bb4a:	b92a      	cbnz	r2, 800bb58 <_realloc_r+0x24>
 800bb4c:	f7ff f936 	bl	800adbc <_free_r>
 800bb50:	4625      	mov	r5, r4
 800bb52:	4628      	mov	r0, r5
 800bb54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb58:	f000 f81a 	bl	800bb90 <_malloc_usable_size_r>
 800bb5c:	4284      	cmp	r4, r0
 800bb5e:	4606      	mov	r6, r0
 800bb60:	d802      	bhi.n	800bb68 <_realloc_r+0x34>
 800bb62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bb66:	d8f4      	bhi.n	800bb52 <_realloc_r+0x1e>
 800bb68:	4621      	mov	r1, r4
 800bb6a:	4638      	mov	r0, r7
 800bb6c:	f7ff f992 	bl	800ae94 <_malloc_r>
 800bb70:	4680      	mov	r8, r0
 800bb72:	b908      	cbnz	r0, 800bb78 <_realloc_r+0x44>
 800bb74:	4645      	mov	r5, r8
 800bb76:	e7ec      	b.n	800bb52 <_realloc_r+0x1e>
 800bb78:	42b4      	cmp	r4, r6
 800bb7a:	4622      	mov	r2, r4
 800bb7c:	4629      	mov	r1, r5
 800bb7e:	bf28      	it	cs
 800bb80:	4632      	movcs	r2, r6
 800bb82:	f7ff f906 	bl	800ad92 <memcpy>
 800bb86:	4629      	mov	r1, r5
 800bb88:	4638      	mov	r0, r7
 800bb8a:	f7ff f917 	bl	800adbc <_free_r>
 800bb8e:	e7f1      	b.n	800bb74 <_realloc_r+0x40>

0800bb90 <_malloc_usable_size_r>:
 800bb90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb94:	1f18      	subs	r0, r3, #4
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	bfbc      	itt	lt
 800bb9a:	580b      	ldrlt	r3, [r1, r0]
 800bb9c:	18c0      	addlt	r0, r0, r3
 800bb9e:	4770      	bx	lr

0800bba0 <_init>:
 800bba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bba2:	bf00      	nop
 800bba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bba6:	bc08      	pop	{r3}
 800bba8:	469e      	mov	lr, r3
 800bbaa:	4770      	bx	lr

0800bbac <_fini>:
 800bbac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbae:	bf00      	nop
 800bbb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbb2:	bc08      	pop	{r3}
 800bbb4:	469e      	mov	lr, r3
 800bbb6:	4770      	bx	lr
